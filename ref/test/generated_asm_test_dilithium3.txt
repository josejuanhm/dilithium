
/home/josejuan/git_repos/fpau_tests/pqc_sw/dilithium/ref/test/test_dilithium3:     file format elf32-littleriscv


Disassembly of section .text.init:

00000000 <_start>:
.section .text.init

.globl _start
_start:
  la gp, _gp
   0:	00009197          	auipc	gp,0x9
   4:	52418193          	addi	gp,gp,1316 # 9524 <_gp>
  la sp, _end_of_memory
   8:	00030117          	auipc	sp,0x30
   c:	ff810113          	addi	sp,sp,-8 # 30000 <_end_of_memory>
  jal main
  10:	028080ef          	jal	ra,8038 <main>
1:
  j 1b
  14:	0000006f          	j	14 <_start+0x14>

Disassembly of section .text:

00000018 <randombytes>:
  unsigned int i;
  uint8_t buf[8];
  static uint64_t ctr = 0;

  for(i = 0; i < 8; ++i)
    buf[i] = ctr >> 8*i;
      18:	00009317          	auipc	t1,0x9
      1c:	d2030313          	addi	t1,t1,-736 # 8d38 <ctr.0>
      20:	00032683          	lw	a3,0(t1)
      24:	00432603          	lw	a2,4(t1)
      28:	ff010e37          	lui	t3,0xff010
      2c:	0086d893          	srli	a7,a3,0x8
      30:	00865813          	srli	a6,a2,0x8
      34:	0ff8f893          	zext.b	a7,a7
      38:	0ff87813          	zext.b	a6,a6
      3c:	00889893          	slli	a7,a7,0x8
      40:	0ff6f713          	zext.b	a4,a3
      44:	00881813          	slli	a6,a6,0x8
      48:	0ff67793          	zext.b	a5,a2
      4c:	fffe0e13          	addi	t3,t3,-1 # ff00ffff <_end_of_memory+0xfefdffff>
      50:	01176733          	or	a4,a4,a7
      54:	0107e7b3          	or	a5,a5,a6
      58:	00ff0eb7          	lui	t4,0xff0
      5c:	00ff08b7          	lui	a7,0xff0
      60:	01d6feb3          	and	t4,a3,t4
      64:	011678b3          	and	a7,a2,a7
      68:	01c77733          	and	a4,a4,t3
      6c:	01c7f7b3          	and	a5,a5,t3
      70:	01000837          	lui	a6,0x1000
      74:	fff80813          	addi	a6,a6,-1 # ffffff <_end_of_memory+0xfcffff>

  ctr++;
      78:	00168f13          	addi	t5,a3,1
    buf[i] = ctr >> 8*i;
      7c:	01d76733          	or	a4,a4,t4
      80:	0186de13          	srli	t3,a3,0x18
      84:	0117e7b3          	or	a5,a5,a7
      88:	01865893          	srli	a7,a2,0x18
void randombytes(uint8_t *out, size_t outlen) {
      8c:	fe010113          	addi	sp,sp,-32
  ctr++;
      90:	00df36b3          	sltu	a3,t5,a3
    buf[i] = ctr >> 8*i;
      94:	018e1e13          	slli	t3,t3,0x18
      98:	01077733          	and	a4,a4,a6
      9c:	01889893          	slli	a7,a7,0x18
      a0:	0107f7b3          	and	a5,a5,a6
      a4:	01c76733          	or	a4,a4,t3
  ctr++;
      a8:	00c68833          	add	a6,a3,a2
    buf[i] = ctr >> 8*i;
      ac:	0117e7b3          	or	a5,a5,a7
  shake128(out, outlen, buf, 8);
      b0:	00810613          	addi	a2,sp,8
      b4:	00800693          	li	a3,8
void randombytes(uint8_t *out, size_t outlen) {
      b8:	00112e23          	sw	ra,28(sp)
    buf[i] = ctr >> 8*i;
      bc:	00e12423          	sw	a4,8(sp)
      c0:	00f12623          	sw	a5,12(sp)
  ctr++;
      c4:	01e32023          	sw	t5,0(t1)
      c8:	01032223          	sw	a6,4(t1)
  shake128(out, outlen, buf, 8);
      cc:	6a8060ef          	jal	ra,6774 <pqcrystals_dilithium_fips202_ref_shake128>
}
      d0:	01c12083          	lw	ra,28(sp)
      d4:	02010113          	addi	sp,sp,32
      d8:	00008067          	ret

000000dc <orca_register_timer_handler>:

#endif //#if ORCA_INTERRUPT_HANDLERS


orca_exception_handler orca_register_timer_handler(orca_exception_handler the_handler,void** the_context){
	orca_exception_handler old=timer_handler;
      dc:	00009797          	auipc	a5,0x9
      e0:	c7078793          	addi	a5,a5,-912 # 8d4c <timer_handler>
      e4:	0007a683          	lw	a3,0(a5)
	void* old_context=timer_context;
      e8:	00009717          	auipc	a4,0x9
      ec:	c6070713          	addi	a4,a4,-928 # 8d48 <timer_context>
	timer_handler = the_handler;
      f0:	00a7a023          	sw	a0,0(a5)
	void* old_context=timer_context;
      f4:	00072783          	lw	a5,0(a4)
	if(the_context){
      f8:	00058863          	beqz	a1,108 <orca_register_timer_handler+0x2c>
		timer_context = *the_context;
      fc:	0005a603          	lw	a2,0(a1)
		*the_context = old_context;
     100:	00f5a023          	sw	a5,0(a1)
		timer_context = *the_context;
     104:	00c72023          	sw	a2,0(a4)
	}
	return old;
}
     108:	00068513          	mv	a0,a3
     10c:	00008067          	ret

00000110 <orca_register_ecall_handler>:
orca_exception_handler orca_register_ecall_handler(orca_exception_handler the_handler,void** the_context){
	orca_exception_handler old=ecall_handler;
     110:	00009797          	auipc	a5,0x9
     114:	c3478793          	addi	a5,a5,-972 # 8d44 <ecall_handler>
     118:	0007a683          	lw	a3,0(a5)
	void* old_context=ecall_context;
     11c:	00009717          	auipc	a4,0x9
     120:	c2470713          	addi	a4,a4,-988 # 8d40 <ecall_context>
	ecall_handler = the_handler;
     124:	00a7a023          	sw	a0,0(a5)
	void* old_context=ecall_context;
     128:	00072783          	lw	a5,0(a4)
	if(the_context){
     12c:	00058863          	beqz	a1,13c <orca_register_ecall_handler+0x2c>
		ecall_context = *the_context;
     130:	0005a603          	lw	a2,0(a1)
		*the_context = old_context;
     134:	00f5a023          	sw	a5,0(a1)
		ecall_context = *the_context;
     138:	00c72023          	sw	a2,0(a4)
	}
	return old;
}
     13c:	00068513          	mv	a0,a3
     140:	00008067          	ret

00000144 <register_orca_illegal_instruction_handler>:

//Register an illegal instruction
int register_orca_illegal_instruction_handler(orca_illegal_instruction_handler the_handler, void *the_context){
	int return_code = 0;
	if(illegal_instruction_handler){
     144:	00009797          	auipc	a5,0x9
     148:	c1078793          	addi	a5,a5,-1008 # 8d54 <illegal_instruction_handler>
     14c:	0007a703          	lw	a4,0(a5)
		return_code |= ORCA_EXCEPTION_ALREADY_REGISTERED;
	}
	illegal_instruction_handler = the_handler;
     150:	00a7a023          	sw	a0,0(a5)
	illegal_instruction_context = the_context;
     154:	00009797          	auipc	a5,0x9
     158:	bfc78793          	addi	a5,a5,-1028 # 8d50 <illegal_instruction_context>
     15c:	00b7a023          	sw	a1,0(a5)
	return return_code;
}
     160:	00e03533          	snez	a0,a4
     164:	00008067          	ret

00000168 <orca_register_interrupt_handler>:

	return return_code;
#else //#if ORCA_INTERRUPT_HANDLERS
		return ORCA_UNSUPPORTED_EXCEPTION_REGISTRATION;
#endif //#else //#if ORCA_INTERRUPT_HANDLERS
}
     168:	00200513          	li	a0,2
     16c:	00008067          	ret

00000170 <handle_exception>:

//Handle an exception.  Illegal instructions and interrupts can be
//passed to handlers set using the
//register_orca_illegal_instruction_handler() and
//register_orca_interrupt_handler() calls respectively.
int handle_exception(size_t cause, size_t epc, size_t regs[32]){
     170:	ff010113          	addi	sp,sp,-16
     174:	00812423          	sw	s0,8(sp)
     178:	00112623          	sw	ra,12(sp)
	switch(cause){
     17c:	00b00713          	li	a4,11
int handle_exception(size_t cause, size_t epc, size_t regs[32]){
     180:	00058413          	mv	s0,a1
	switch(cause){
     184:	0ee50263          	beq	a0,a4,268 <handle_exception+0xf8>
     188:	00050793          	mv	a5,a0
     18c:	06a76c63          	bltu	a4,a0,204 <handle_exception+0x94>
     190:	00400713          	li	a4,4
     194:	00060693          	mv	a3,a2
     198:	10e50463          	beq	a0,a4,2a0 <handle_exception+0x130>
     19c:	00600713          	li	a4,6
     1a0:	08e51663          	bne	a0,a4,22c <handle_exception+0xbc>
		if(timer_handler){
			timer_handler(timer_context);
			break;
		}else{ while(1); }
	case CAUSE_MISALIGNED_STORE:
		handle_misaligned_store(*((size_t*)epc), regs);
     1a4:	0005a783          	lw	a5,0(a1)
	csrr(mtval,address);
     1a8:	34302673          	csrr	a2,mtval
	size_t regval =reg[(instr>>15) & 0x1F] ;
     1ac:	00d7d713          	srli	a4,a5,0xd
     1b0:	07c77713          	andi	a4,a4,124
     1b4:	00e68733          	add	a4,a3,a4
     1b8:	00072703          	lw	a4,0(a4)
	switch((instr >>12) &3){
     1bc:	00c7d793          	srli	a5,a5,0xc
     1c0:	0037f793          	andi	a5,a5,3
		address[1] = ((regval>>8)&0xFF);
     1c4:	00875693          	srli	a3,a4,0x8
	switch((instr >>12) &3){
     1c8:	00100513          	li	a0,1
		address[0] = regval&0xFF;
     1cc:	0ff77593          	zext.b	a1,a4
		address[1] = ((regval>>8)&0xFF);
     1d0:	0ff6f693          	zext.b	a3,a3
	switch((instr >>12) &3){
     1d4:	00a78a63          	beq	a5,a0,1e8 <handle_exception+0x78>
		address[2] = ((regval>>16)&0xFF);
     1d8:	01075793          	srli	a5,a4,0x10
		address[3] = ((regval>>24)&0xFF);
     1dc:	01875713          	srli	a4,a4,0x18
		address[2] = ((regval>>16)&0xFF);
     1e0:	00f60123          	sb	a5,2(a2)
		address[3] = ((regval>>24)&0xFF);
     1e4:	00e601a3          	sb	a4,3(a2)
		break;
     1e8:	00d600a3          	sb	a3,1(a2)
     1ec:	00b60023          	sb	a1,0(a2)
	default:
		while(1);

	}
	return epc;
}
     1f0:	00c12083          	lw	ra,12(sp)
		epc+=4;
     1f4:	00440513          	addi	a0,s0,4
}
     1f8:	00812403          	lw	s0,8(sp)
     1fc:	01010113          	addi	sp,sp,16
     200:	00008067          	ret
	switch(cause){
     204:	80000737          	lui	a4,0x80000
     208:	00770693          	addi	a3,a4,7 # 80000007 <_end_of_memory+0x7ffd0007>
     20c:	0ed50c63          	beq	a0,a3,304 <handle_exception+0x194>
     210:	00b70713          	addi	a4,a4,11
	return epc;
     214:	00058513          	mv	a0,a1
	switch(cause){
     218:	14e79663          	bne	a5,a4,364 <handle_exception+0x1f4>
}
     21c:	00c12083          	lw	ra,12(sp)
     220:	00812403          	lw	s0,8(sp)
     224:	01010113          	addi	sp,sp,16
     228:	00008067          	ret
	switch(cause){
     22c:	00200713          	li	a4,2
     230:	02e51a63          	bne	a0,a4,264 <handle_exception+0xf4>
		if(illegal_instruction_handler){
     234:	00009797          	auipc	a5,0x9
     238:	b2078793          	addi	a5,a5,-1248 # 8d54 <illegal_instruction_handler>
     23c:	0007a783          	lw	a5,0(a5)
     240:	02078063          	beqz	a5,260 <handle_exception+0xf0>
}
     244:	00812403          	lw	s0,8(sp)
			epc=illegal_instruction_handler(cause,epc,regs,illegal_instruction_context);
     248:	00009717          	auipc	a4,0x9
     24c:	b0870713          	addi	a4,a4,-1272 # 8d50 <illegal_instruction_context>
}
     250:	00c12083          	lw	ra,12(sp)
			epc=illegal_instruction_handler(cause,epc,regs,illegal_instruction_context);
     254:	00072683          	lw	a3,0(a4)
}
     258:	01010113          	addi	sp,sp,16
			epc=illegal_instruction_handler(cause,epc,regs,illegal_instruction_context);
     25c:	00078067          	jr	a5
		}else{while(1);}
     260:	0000006f          	j	260 <handle_exception+0xf0>
		while(1);
     264:	0000006f          	j	264 <handle_exception+0xf4>
		if(ecall_handler){
     268:	00009797          	auipc	a5,0x9
     26c:	adc78793          	addi	a5,a5,-1316 # 8d44 <ecall_handler>
     270:	0007a783          	lw	a5,0(a5)
     274:	02078463          	beqz	a5,29c <handle_exception+0x12c>
			ecall_handler(ecall_context);
     278:	00009717          	auipc	a4,0x9
     27c:	ac870713          	addi	a4,a4,-1336 # 8d40 <ecall_context>
     280:	00072503          	lw	a0,0(a4)
     284:	000780e7          	jalr	a5
}
     288:	00c12083          	lw	ra,12(sp)
			epc+=4;
     28c:	00440513          	addi	a0,s0,4
}
     290:	00812403          	lw	s0,8(sp)
     294:	01010113          	addi	sp,sp,16
     298:	00008067          	ret
		}else{ while(1); }
     29c:	0000006f          	j	29c <handle_exception+0x12c>
		handle_misaligned_load(*((size_t*)epc), regs);
     2a0:	0005a783          	lw	a5,0(a1)
	csrr(mtval,address);
     2a4:	34302673          	csrr	a2,mtval
	switch((instr >>12) &3){
     2a8:	00c7d713          	srli	a4,a5,0xc
     2ac:	00377713          	andi	a4,a4,3
     2b0:	00100593          	li	a1,1
     2b4:	08b70463          	beq	a4,a1,33c <handle_exception+0x1cc>
		intval=(address[3]<<24) | (address[2] << 16) | (address[1] <<8) | address[0];
     2b8:	00164503          	lbu	a0,1(a2)
     2bc:	00064803          	lbu	a6,0(a2)
     2c0:	00264583          	lbu	a1,2(a2)
     2c4:	00364703          	lbu	a4,3(a2)
     2c8:	00851513          	slli	a0,a0,0x8
     2cc:	01056533          	or	a0,a0,a6
     2d0:	01059613          	slli	a2,a1,0x10
     2d4:	00a66633          	or	a2,a2,a0
     2d8:	01871713          	slli	a4,a4,0x18
     2dc:	00c76733          	or	a4,a4,a2
	reg[(instr>>7) & 0x1F] = intval;
     2e0:	0057d793          	srli	a5,a5,0x5
}
     2e4:	00c12083          	lw	ra,12(sp)
		epc+=4;
     2e8:	00440513          	addi	a0,s0,4
	reg[(instr>>7) & 0x1F] = intval;
     2ec:	07c7f793          	andi	a5,a5,124
}
     2f0:	00812403          	lw	s0,8(sp)
	reg[(instr>>7) & 0x1F] = intval;
     2f4:	00f686b3          	add	a3,a3,a5
     2f8:	00e6a023          	sw	a4,0(a3)
}
     2fc:	01010113          	addi	sp,sp,16
     300:	00008067          	ret
		if(timer_handler){
     304:	00009797          	auipc	a5,0x9
     308:	a4878793          	addi	a5,a5,-1464 # 8d4c <timer_handler>
     30c:	0007a783          	lw	a5,0(a5)
     310:	02078463          	beqz	a5,338 <handle_exception+0x1c8>
			timer_handler(timer_context);
     314:	00009717          	auipc	a4,0x9
     318:	a3470713          	addi	a4,a4,-1484 # 8d48 <timer_context>
     31c:	00072503          	lw	a0,0(a4)
     320:	000780e7          	jalr	a5
}
     324:	00c12083          	lw	ra,12(sp)
	return epc;
     328:	00040513          	mv	a0,s0
}
     32c:	00812403          	lw	s0,8(sp)
     330:	01010113          	addi	sp,sp,16
     334:	00008067          	ret
		}else{ while(1); }
     338:	0000006f          	j	338 <handle_exception+0x1c8>
		intval=(address[1]<<8) | address[0];
     33c:	00164703          	lbu	a4,1(a2)
     340:	00064583          	lbu	a1,0(a2)
		if(!(instr & (1<<14))){//signed
     344:	00004637          	lui	a2,0x4
     348:	00871713          	slli	a4,a4,0x8
     34c:	00c7f633          	and	a2,a5,a2
     350:	00b76733          	or	a4,a4,a1
     354:	f80616e3          	bnez	a2,2e0 <handle_exception+0x170>
	reg[(instr>>7) & 0x1F] = intval;
     358:	01071713          	slli	a4,a4,0x10
     35c:	41075713          	srai	a4,a4,0x10
     360:	f81ff06f          	j	2e0 <handle_exception+0x170>
     364:	f01ff06f          	j	264 <handle_exception+0xf4>

00000368 <pqcrystals_dilithium3_ref_keypair>:
*              - uint8_t *sk: pointer to output private key (allocated
*                             array of CRYPTO_SECRETKEYBYTES bytes)
*
* Returns 0 (success)
**************************************************/
int crypto_sign_keypair(uint8_t *pk, uint8_t *sk) {
     368:	ffff22b7          	lui	t0,0xffff2
     36c:	81010113          	addi	sp,sp,-2032
     370:	f2028293          	addi	t0,t0,-224 # ffff1f20 <_end_of_memory+0xfffc1f20>
     374:	7e112623          	sw	ra,2028(sp)
     378:	7e812423          	sw	s0,2024(sp)
     37c:	7e912223          	sw	s1,2020(sp)
     380:	7f212023          	sw	s2,2016(sp)
     384:	7d312e23          	sw	s3,2012(sp)
     388:	7d412c23          	sw	s4,2008(sp)
     38c:	7d512a23          	sw	s5,2004(sp)
     390:	00510133          	add	sp,sp,t0
#if defined(HW_TESTING_SEEDINIT_TO_ZERO)
  uint8_t seedbuf[2*SEEDBYTES + CRHBYTES] = {0};
     394:	07c00613          	li	a2,124
int crypto_sign_keypair(uint8_t *pk, uint8_t *sk) {
     398:	00050913          	mv	s2,a0
     39c:	00058993          	mv	s3,a1
  uint8_t seedbuf[2*SEEDBYTES + CRHBYTES] = {0};
     3a0:	03410513          	addi	a0,sp,52
     3a4:	00000593          	li	a1,0
  polyvecl mat[K];
  polyvecl s1, s1hat;
  polyveck s2, t1, t0;

  /* Get randomness for rho, rhoprime and key */
  randombytes(seedbuf, SEEDBYTES);
     3a8:	0000fa37          	lui	s4,0xf
  uint8_t seedbuf[2*SEEDBYTES + CRHBYTES] = {0};
     3ac:	ffff1437          	lui	s0,0xffff1
     3b0:	02012823          	sw	zero,48(sp)
     3b4:	3a9070ef          	jal	ra,7f5c <memset>
  randombytes(seedbuf, SEEDBYTES);
     3b8:	78040413          	addi	s0,s0,1920 # ffff1780 <_end_of_memory+0xfffc1780>
     3bc:	8a0a0793          	addi	a5,s4,-1888 # e8a0 <_gp+0x537c>
     3c0:	008787b3          	add	a5,a5,s0
     3c4:	01010713          	addi	a4,sp,16
     3c8:	00e78433          	add	s0,a5,a4
     3cc:	00040513          	mv	a0,s0
     3d0:	02000593          	li	a1,32
     3d4:	c45ff0ef          	jal	ra,18 <randombytes>
  shake256(seedbuf, 2*SEEDBYTES + CRHBYTES, seedbuf, SEEDBYTES);
     3d8:	02000693          	li	a3,32
     3dc:	00040613          	mv	a2,s0
     3e0:	00040513          	mv	a0,s0
     3e4:	08000593          	li	a1,128
     3e8:	54c060ef          	jal	ra,6934 <pqcrystals_dilithium_fips202_ref_shake256>
  rhoprime = rho + SEEDBYTES;
  key = rhoprime + CRHBYTES;

  /* Expand matrix */
#ifndef NTT_TESTING
  polyvec_matrix_expand(mat, rho);
     3ec:	ffff9537          	lui	a0,0xffff9
     3f0:	80050513          	addi	a0,a0,-2048 # ffff8800 <_end_of_memory+0xfffc8800>
     3f4:	8a0a0793          	addi	a5,s4,-1888
     3f8:	00a787b3          	add	a5,a5,a0
     3fc:	01010713          	addi	a4,sp,16
     400:	00e78533          	add	a0,a5,a4
     404:	00040593          	mv	a1,s0
     408:	514010ef          	jal	ra,191c <pqcrystals_dilithium3_ref_polyvec_matrix_expand>
#endif

  /* Sample short vectors s1 and s2 */
  polyvecl_uniform_eta(&s1, rhoprime, 0);
     40c:	ffff24b7          	lui	s1,0xffff2
     410:	80048513          	addi	a0,s1,-2048 # ffff1800 <_end_of_memory+0xfffc1800>
     414:	8a0a0793          	addi	a5,s4,-1888
     418:	00a787b3          	add	a5,a5,a0
     41c:	01010713          	addi	a4,sp,16
     420:	02040413          	addi	s0,s0,32
     424:	00e78533          	add	a0,a5,a4
     428:	00000613          	li	a2,0
     42c:	00040593          	mv	a1,s0
     430:	684010ef          	jal	ra,1ab4 <pqcrystals_dilithium3_ref_polyvecl_uniform_eta>
#ifndef NTT_TESTING
  polyveck_uniform_eta(&s2, rhoprime, L);
     434:	ffff4537          	lui	a0,0xffff4
     438:	8a0a0793          	addi	a5,s4,-1888
     43c:	00a787b3          	add	a5,a5,a0
     440:	01010713          	addi	a4,sp,16
     444:	00e78533          	add	a0,a5,a4
     448:	00500613          	li	a2,5
     44c:	00040593          	mv	a1,s0
     450:	1fd010ef          	jal	ra,1e4c <pqcrystals_dilithium3_ref_polyveck_uniform_eta>
#endif

  /* Matrix-vector multiplication */
  s1hat = s1;
     454:	8a0a0793          	addi	a5,s4,-1888
     458:	01010713          	addi	a4,sp,16
     45c:	009787b3          	add	a5,a5,s1
     460:	00e787b3          	add	a5,a5,a4
     464:	8a0a0693          	addi	a3,s4,-1888
     468:	ffff3737          	lui	a4,0xffff3
     46c:	00e686b3          	add	a3,a3,a4
     470:	01010713          	addi	a4,sp,16
     474:	00e68733          	add	a4,a3,a4
     478:	000016b7          	lui	a3,0x1
     47c:	80078793          	addi	a5,a5,-2048
     480:	40068693          	addi	a3,a3,1024 # 1400 <pqcrystals_dilithium3_ref_unpack_sk+0x94>
     484:	00e12423          	sw	a4,8(sp)
     488:	00d786b3          	add	a3,a5,a3
     48c:	c0070713          	addi	a4,a4,-1024 # ffff2c00 <_end_of_memory+0xfffc2c00>
     490:	0007a803          	lw	a6,0(a5)
     494:	0047a503          	lw	a0,4(a5)
     498:	0087a583          	lw	a1,8(a5)
     49c:	00c7a603          	lw	a2,12(a5)
     4a0:	01072023          	sw	a6,0(a4)
     4a4:	00a72223          	sw	a0,4(a4)
     4a8:	00b72423          	sw	a1,8(a4)
     4ac:	00c72623          	sw	a2,12(a4)
     4b0:	01078793          	addi	a5,a5,16
     4b4:	01070713          	addi	a4,a4,16
     4b8:	fcd79ce3          	bne	a5,a3,490 <pqcrystals_dilithium3_ref_keypair+0x128>
  polyvecl_ntt(&s1hat);
     4bc:	0000fa37          	lui	s4,0xf
     4c0:	ffff34b7          	lui	s1,0xffff3
     4c4:	c0048493          	addi	s1,s1,-1024 # ffff2c00 <_end_of_memory+0xfffc2c00>
     4c8:	8a0a0793          	addi	a5,s4,-1888 # e8a0 <_gp+0x537c>
     4cc:	01010713          	addi	a4,sp,16
     4d0:	009787b3          	add	a5,a5,s1
     4d4:	00e784b3          	add	s1,a5,a4
     4d8:	00048513          	mv	a0,s1
     4dc:	774010ef          	jal	ra,1c50 <pqcrystals_dilithium3_ref_polyvecl_ntt>
    uart_send_string("\r");
    uart_send_string(str);
  }
  #endif

  polyvec_matrix_pointwise_montgomery(&t1, mat, &s1hat);
     4e0:	ffff6437          	lui	s0,0xffff6
     4e4:	80040413          	addi	s0,s0,-2048 # ffff5800 <_end_of_memory+0xfffc5800>
     4e8:	8a0a0713          	addi	a4,s4,-1888
     4ec:	ffff95b7          	lui	a1,0xffff9
     4f0:	01010693          	addi	a3,sp,16
     4f4:	00870733          	add	a4,a4,s0
     4f8:	80058593          	addi	a1,a1,-2048 # ffff8800 <_end_of_memory+0xfffc8800>
     4fc:	8a0a0793          	addi	a5,s4,-1888
     500:	00d70433          	add	s0,a4,a3
     504:	00b787b3          	add	a5,a5,a1
     508:	00d785b3          	add	a1,a5,a3
     50c:	00048613          	mv	a2,s1
     510:	00040513          	mv	a0,s0
     514:	4bc010ef          	jal	ra,19d0 <pqcrystals_dilithium3_ref_polyvec_matrix_pointwise_montgomery>
#endif

#ifndef FPAU
  polyveck_reduce(&t1);
#endif
  polyveck_invntt_tomont(&t1);
     518:	00040513          	mv	a0,s0
     51c:	389010ef          	jal	ra,20a4 <pqcrystals_dilithium3_ref_polyveck_invntt_tomont>
    uart_send_string(str);
  }
#endif

  /* Add error vector s2 */
  polyveck_add(&t1, &t1, &s2);
     520:	ffff47b7          	lui	a5,0xffff4
     524:	8a0a0713          	addi	a4,s4,-1888
     528:	00f70733          	add	a4,a4,a5
     52c:	01010793          	addi	a5,sp,16
     530:	00f707b3          	add	a5,a4,a5
     534:	00078613          	mv	a2,a5
     538:	00040593          	mv	a1,s0
     53c:	00040513          	mv	a0,s0
     540:	00f12423          	sw	a5,8(sp)
     544:	201010ef          	jal	ra,1f44 <pqcrystals_dilithium3_ref_polyveck_add>

  /* Extract t1 and write public key */
  polyveck_caddq(&t1);
     548:	00040513          	mv	a0,s0
     54c:	1b5010ef          	jal	ra,1f00 <pqcrystals_dilithium3_ref_polyveck_caddq>
  polyveck_power2round(&t1, &t0, &t1);
     550:	ffff77b7          	lui	a5,0xffff7
     554:	8a0a0713          	addi	a4,s4,-1888
     558:	00f70733          	add	a4,a4,a5
     55c:	01010793          	addi	a5,sp,16
     560:	00f707b3          	add	a5,a4,a5
     564:	00040613          	mv	a2,s0
     568:	00078593          	mv	a1,a5
     56c:	00040513          	mv	a0,s0
  polyvec_matrix_pointwise_montgomery(&t1, mat, &s1hat);
     570:	000a0a93          	mv	s5,s4
  polyveck_power2round(&t1, &t0, &t1);
     574:	00f12623          	sw	a5,12(sp)
  pack_pk(pk, rho, &t1);
     578:	ffff14b7          	lui	s1,0xffff1
  polyveck_power2round(&t1, &t0, &t1);
     57c:	449010ef          	jal	ra,21c4 <pqcrystals_dilithium3_ref_polyveck_power2round>
  pack_pk(pk, rho, &t1);
     580:	78048a13          	addi	s4,s1,1920 # ffff1780 <_end_of_memory+0xfffc1780>
     584:	8a0a8793          	addi	a5,s5,-1888
     588:	01010713          	addi	a4,sp,16
     58c:	014787b3          	add	a5,a5,s4
     590:	00e78a33          	add	s4,a5,a4
     594:	00040613          	mv	a2,s0
     598:	000a0593          	mv	a1,s4
     59c:	00090513          	mv	a0,s2
     5a0:	1e9000ef          	jal	ra,f88 <pqcrystals_dilithium3_ref_pack_pk>

  /* Compute H(rho, t1) and write secret key */
  shake256(tr, SEEDBYTES, pk, CRYPTO_PUBLICKEYBYTES);
     5a4:	76048493          	addi	s1,s1,1888
     5a8:	8a0a8793          	addi	a5,s5,-1888
     5ac:	01010713          	addi	a4,sp,16
     5b0:	009787b3          	add	a5,a5,s1
     5b4:	00e784b3          	add	s1,a5,a4
     5b8:	00090613          	mv	a2,s2
     5bc:	00048513          	mv	a0,s1
     5c0:	7a000693          	li	a3,1952
     5c4:	02000593          	li	a1,32
     5c8:	36c060ef          	jal	ra,6934 <pqcrystals_dilithium_fips202_ref_shake256>
  pack_sk(sk, rho, tr, key, &t0, &s1, &s2);
     5cc:	ffff27b7          	lui	a5,0xffff2
     5d0:	80078793          	addi	a5,a5,-2048 # ffff1800 <_end_of_memory+0xfffc1800>
     5d4:	8a0a8713          	addi	a4,s5,-1888
     5d8:	00f70733          	add	a4,a4,a5
     5dc:	01010793          	addi	a5,sp,16
     5e0:	00812803          	lw	a6,8(sp)
     5e4:	00f707b3          	add	a5,a4,a5
     5e8:	00c12703          	lw	a4,12(sp)
     5ec:	00098513          	mv	a0,s3
     5f0:	060a0693          	addi	a3,s4,96
     5f4:	00048613          	mv	a2,s1
     5f8:	000a0593          	mv	a1,s4
     5fc:	32d000ef          	jal	ra,1128 <pqcrystals_dilithium3_ref_pack_sk>

  return 0;
}
     600:	0000e2b7          	lui	t0,0xe
     604:	0e028293          	addi	t0,t0,224 # e0e0 <_gp+0x4bbc>
     608:	00510133          	add	sp,sp,t0
     60c:	7ec12083          	lw	ra,2028(sp)
     610:	7e812403          	lw	s0,2024(sp)
     614:	7e412483          	lw	s1,2020(sp)
     618:	7e012903          	lw	s2,2016(sp)
     61c:	7dc12983          	lw	s3,2012(sp)
     620:	7d812a03          	lw	s4,2008(sp)
     624:	7d412a83          	lw	s5,2004(sp)
     628:	00000513          	li	a0,0
     62c:	7f010113          	addi	sp,sp,2032
     630:	00008067          	ret

00000634 <pqcrystals_dilithium3_ref_signature>:
int crypto_sign_signature(uint8_t *sig,
                          size_t *siglen,
                          const uint8_t *m,
                          size_t mlen,
                          const uint8_t *sk)
{
     634:	df010113          	addi	sp,sp,-528
     638:	fffed2b7          	lui	t0,0xfffed
     63c:	20912223          	sw	s1,516(sp)
     640:	1f912223          	sw	s9,484(sp)
  rho = seedbuf;
  tr = rho + SEEDBYTES;
  key = tr + SEEDBYTES;
  mu = key + SEEDBYTES;
  rhoprime = mu + CRHBYTES;
  unpack_sk(rho, tr, key, &t0, &s1, &s2, sk);
     644:	fffed4b7          	lui	s1,0xfffed
     648:	00013cb7          	lui	s9,0x13
{
     64c:	20112623          	sw	ra,524(sp)
     650:	20812423          	sw	s0,520(sp)
     654:	21212023          	sw	s2,512(sp)
     658:	1f312e23          	sw	s3,508(sp)
     65c:	1f412c23          	sw	s4,504(sp)
     660:	1f512a23          	sw	s5,500(sp)
     664:	1f612823          	sw	s6,496(sp)
     668:	1f712623          	sw	s7,492(sp)
     66c:	1f812423          	sw	s8,488(sp)
     670:	1fa12023          	sw	s10,480(sp)
  unpack_sk(rho, tr, key, &t0, &s1, &s2, sk);
     674:	f2048b93          	addi	s7,s1,-224 # fffecf20 <_end_of_memory+0xfffbcf20>
{
     678:	1db12e23          	sw	s11,476(sp)
  unpack_sk(rho, tr, key, &t0, &s1, &s2, sk);
     67c:	1b0c8793          	addi	a5,s9,432 # 131b0 <_gp+0x9c8c>
{
     680:	00510133          	add	sp,sp,t0
  unpack_sk(rho, tr, key, &t0, &s1, &s2, sk);
     684:	02010813          	addi	a6,sp,32
     688:	017787b3          	add	a5,a5,s7
     68c:	ffff3437          	lui	s0,0xffff3
     690:	01078bb3          	add	s7,a5,a6
     694:	80040413          	addi	s0,s0,-2048 # ffff2800 <_end_of_memory+0xfffc2800>
     698:	1b0c8793          	addi	a5,s9,432
     69c:	008787b3          	add	a5,a5,s0
     6a0:	01078433          	add	s0,a5,a6
     6a4:	40048c13          	addi	s8,s1,1024
     6a8:	1b0c8793          	addi	a5,s9,432
     6ac:	018787b3          	add	a5,a5,s8
     6b0:	01078c33          	add	s8,a5,a6
     6b4:	ffff17b7          	lui	a5,0xffff1
     6b8:	1b0c8813          	addi	a6,s9,432
     6bc:	00f80833          	add	a6,a6,a5
     6c0:	02010793          	addi	a5,sp,32
     6c4:	00f807b3          	add	a5,a6,a5
     6c8:	00f12623          	sw	a5,12(sp)
{
     6cc:	00068a13          	mv	s4,a3
  unpack_sk(rho, tr, key, &t0, &s1, &s2, sk);
     6d0:	00c12683          	lw	a3,12(sp)
     6d4:	040b8a93          	addi	s5,s7,64
     6d8:	020b8b13          	addi	s6,s7,32
{
     6dc:	00058893          	mv	a7,a1
  unpack_sk(rho, tr, key, &t0, &s1, &s2, sk);
     6e0:	00070813          	mv	a6,a4
     6e4:	00040793          	mv	a5,s0
{
     6e8:	00060913          	mv	s2,a2
  unpack_sk(rho, tr, key, &t0, &s1, &s2, sk);
     6ec:	000b0593          	mv	a1,s6
     6f0:	000a8613          	mv	a2,s5
     6f4:	000c0713          	mv	a4,s8
{
     6f8:	00050993          	mv	s3,a0
  unpack_sk(rho, tr, key, &t0, &s1, &s2, sk);
     6fc:	000b8513          	mv	a0,s7
{
     700:	01112e23          	sw	a7,28(sp)
  unpack_sk(rho, tr, key, &t0, &s1, &s2, sk);
     704:	469000ef          	jal	ra,136c <pqcrystals_dilithium3_ref_unpack_sk>

  /* Compute CRH(tr, msg) */
  shake256_init(&state);
     708:	e5048493          	addi	s1,s1,-432
     70c:	1b0c8793          	addi	a5,s9,432
     710:	02010713          	addi	a4,sp,32
     714:	009787b3          	add	a5,a5,s1
     718:	00e784b3          	add	s1,a5,a4
     71c:	00048513          	mv	a0,s1
     720:	561050ef          	jal	ra,6480 <pqcrystals_dilithium_fips202_ref_shake256_init>
  shake256_absorb(&state, tr, SEEDBYTES);
     724:	02000613          	li	a2,32
     728:	000b0593          	mv	a1,s6
     72c:	00048513          	mv	a0,s1
     730:	581050ef          	jal	ra,64b0 <pqcrystals_dilithium_fips202_ref_shake256_absorb>
  shake256_absorb(&state, m, mlen);
     734:	000a0613          	mv	a2,s4
     738:	00090593          	mv	a1,s2
     73c:	00048513          	mv	a0,s1
     740:	571050ef          	jal	ra,64b0 <pqcrystals_dilithium_fips202_ref_shake256_absorb>
  shake256_finalize(&state);
     744:	00048513          	mv	a0,s1
     748:	5a1050ef          	jal	ra,64e8 <pqcrystals_dilithium_fips202_ref_shake256_finalize>
  shake256_squeeze(mu, CRHBYTES, &state);
     74c:	00048613          	mv	a2,s1
     750:	04000593          	li	a1,64
     754:	060b8513          	addi	a0,s7,96
     758:	605050ef          	jal	ra,655c <pqcrystals_dilithium_fips202_ref_shake256_squeeze>

#ifdef DILITHIUM_RANDOMIZED_SIGNING
  randombytes(rhoprime, CRHBYTES);
#else
  shake256(rhoprime, CRHBYTES, key, SEEDBYTES + CRHBYTES);
     75c:	0a0b8793          	addi	a5,s7,160
     760:	000a8613          	mv	a2,s5
     764:	06000693          	li	a3,96
     768:	00078513          	mv	a0,a5
     76c:	04000593          	li	a1,64
     770:	00f12a23          	sw	a5,20(sp)
     774:	1c0060ef          	jal	ra,6934 <pqcrystals_dilithium_fips202_ref_shake256>
#endif

  /* Expand matrix and transform vectors */
  polyvec_matrix_expand(mat, rho);
     778:	ffff97b7          	lui	a5,0xffff9
     77c:	80078793          	addi	a5,a5,-2048 # ffff8800 <_end_of_memory+0xfffc8800>
     780:	1b0c8713          	addi	a4,s9,432
     784:	00f70733          	add	a4,a4,a5
     788:	02010793          	addi	a5,sp,32
     78c:	00f707b3          	add	a5,a4,a5
     790:	00078513          	mv	a0,a5
     794:	000b8593          	mv	a1,s7
     798:	00f12c23          	sw	a5,24(sp)
     79c:	180010ef          	jal	ra,191c <pqcrystals_dilithium3_ref_polyvec_matrix_expand>
  polyvecl_ntt(&s1);
     7a0:	000c0513          	mv	a0,s8
     7a4:	4ac010ef          	jal	ra,1c50 <pqcrystals_dilithium3_ref_polyvecl_ntt>
  polyveck_ntt(&s2);
     7a8:	00040513          	mv	a0,s0
     7ac:	0b5010ef          	jal	ra,2060 <pqcrystals_dilithium3_ref_polyveck_ntt>
  polyveck_ntt(&t0);
     7b0:	00c12503          	lw	a0,12(sp)
  polyvec_matrix_expand(mat, rho);
     7b4:	000c8913          	mv	s2,s9

rej:
  /* Sample intermediate vector y */
  polyvecl_uniform_gamma1(&y, rhoprime, nonce++);
     7b8:	fffefd37          	lui	s10,0xfffef
  polyveck_ntt(&t0);
     7bc:	0a5010ef          	jal	ra,2060 <pqcrystals_dilithium3_ref_polyveck_ntt>
  polyvecl_uniform_gamma1(&y, rhoprime, nonce++);
     7c0:	800d0a93          	addi	s5,s10,-2048 # fffee800 <_end_of_memory+0xfffbe800>
     7c4:	1b090793          	addi	a5,s2,432
     7c8:	02010713          	addi	a4,sp,32
     7cc:	015787b3          	add	a5,a5,s5

  /* Matrix-vector multiplication */
  z = y;
     7d0:	ffff0cb7          	lui	s9,0xffff0
  polyvecl_ntt(&z);
     7d4:	c00c8413          	addi	s0,s9,-1024 # fffefc00 <_end_of_memory+0xfffbfc00>
  polyvecl_uniform_gamma1(&y, rhoprime, nonce++);
     7d8:	00e78ab3          	add	s5,a5,a4
  polyvecl_ntt(&z);
     7dc:	1b090793          	addi	a5,s2,432
     7e0:	008787b3          	add	a5,a5,s0
#endif
  polyveck_invntt_tomont(&w1);

  /* Decompose w and call the random oracle */
  polyveck_caddq(&w1);
  polyveck_decompose(&w1, &w0, &w1);
     7e4:	ffff6a37          	lui	s4,0xffff6
     7e8:	800a0a13          	addi	s4,s4,-2048 # ffff5800 <_end_of_memory+0xfffc5800>
  polyvecl_ntt(&z);
     7ec:	00e78433          	add	s0,a5,a4
  polyveck_decompose(&w1, &w0, &w1);
     7f0:	1b090793          	addi	a5,s2,432
     7f4:	014787b3          	add	a5,a5,s4
  uint16_t nonce = 0;
     7f8:	00000613          	li	a2,0
  polyveck_decompose(&w1, &w0, &w1);
     7fc:	00e78a33          	add	s4,a5,a4
  polyvecl_uniform_gamma1(&y, rhoprime, nonce++);
     800:	01412583          	lw	a1,20(sp)
     804:	00160793          	addi	a5,a2,1 # 4001 <KeccakF1600_StatePermute+0x739>
     808:	000a8513          	mv	a0,s5
     80c:	01079913          	slli	s2,a5,0x10
     810:	314010ef          	jal	ra,1b24 <pqcrystals_dilithium3_ref_polyvecl_uniform_gamma1>
  z = y;
     814:	000027b7          	lui	a5,0x2
     818:	02010713          	addi	a4,sp,32
     81c:	1b078793          	addi	a5,a5,432 # 21b0 <pqcrystals_dilithium3_ref_polyveck_chknorm+0x60>
     820:	00e787b3          	add	a5,a5,a4
     824:	00003737          	lui	a4,0x3
     828:	02010693          	addi	a3,sp,32
     82c:	1b070713          	addi	a4,a4,432 # 31b0 <pqcrystals_dilithium3_ref_polyw1_pack+0x4>
     830:	00d70733          	add	a4,a4,a3
     834:	000016b7          	lui	a3,0x1
     838:	80078793          	addi	a5,a5,-2048
     83c:	40068693          	addi	a3,a3,1024 # 1400 <pqcrystals_dilithium3_ref_unpack_sk+0x94>
  polyvecl_uniform_gamma1(&y, rhoprime, nonce++);
     840:	01095913          	srli	s2,s2,0x10
  z = y;
     844:	c0070713          	addi	a4,a4,-1024
     848:	00d786b3          	add	a3,a5,a3
     84c:	0007a803          	lw	a6,0(a5)
     850:	0047a503          	lw	a0,4(a5)
     854:	0087a583          	lw	a1,8(a5)
     858:	00c7a603          	lw	a2,12(a5)
     85c:	01072023          	sw	a6,0(a4)
     860:	00a72223          	sw	a0,4(a4)
     864:	00b72423          	sw	a1,8(a4)
     868:	00c72623          	sw	a2,12(a4)
     86c:	01078793          	addi	a5,a5,16
     870:	01070713          	addi	a4,a4,16
     874:	fcd79ce3          	bne	a5,a3,84c <pqcrystals_dilithium3_ref_signature+0x218>
  polyvecl_ntt(&z);
     878:	00040513          	mv	a0,s0
     87c:	3d4010ef          	jal	ra,1c50 <pqcrystals_dilithium3_ref_polyvecl_ntt>
  polyvec_matrix_pointwise_montgomery(&w1, mat, &z);
     880:	00013b37          	lui	s6,0x13
     884:	ffff47b7          	lui	a5,0xffff4
     888:	1b0b0713          	addi	a4,s6,432 # 131b0 <_gp+0x9c8c>
     88c:	00f70733          	add	a4,a4,a5
     890:	01812583          	lw	a1,24(sp)
     894:	02010793          	addi	a5,sp,32
     898:	00f707b3          	add	a5,a4,a5
     89c:	00078513          	mv	a0,a5
     8a0:	00040613          	mv	a2,s0
     8a4:	00f12623          	sw	a5,12(sp)
     8a8:	128010ef          	jal	ra,19d0 <pqcrystals_dilithium3_ref_polyvec_matrix_pointwise_montgomery>
  polyveck_invntt_tomont(&w1);
     8ac:	00c12503          	lw	a0,12(sp)
     8b0:	7f4010ef          	jal	ra,20a4 <pqcrystals_dilithium3_ref_polyveck_invntt_tomont>
  polyveck_caddq(&w1);
     8b4:	00c12503          	lw	a0,12(sp)
     8b8:	648010ef          	jal	ra,1f00 <pqcrystals_dilithium3_ref_polyveck_caddq>
  polyveck_decompose(&w1, &w0, &w1);
     8bc:	00c12603          	lw	a2,12(sp)
     8c0:	000a0593          	mv	a1,s4
     8c4:	00060513          	mv	a0,a2
     8c8:	169010ef          	jal	ra,2230 <pqcrystals_dilithium3_ref_polyveck_decompose>
  polyveck_pack_w1(sig, &w1);
     8cc:	00c12583          	lw	a1,12(sp)
     8d0:	00098513          	mv	a0,s3
     8d4:	2b5010ef          	jal	ra,2388 <pqcrystals_dilithium3_ref_polyveck_pack_w1>

  shake256_init(&state);
     8d8:	00048513          	mv	a0,s1
     8dc:	3a5050ef          	jal	ra,6480 <pqcrystals_dilithium_fips202_ref_shake256_init>
  shake256_absorb(&state, mu, CRHBYTES);
     8e0:	04000613          	li	a2,64
     8e4:	060b8593          	addi	a1,s7,96
     8e8:	00048513          	mv	a0,s1
     8ec:	3c5050ef          	jal	ra,64b0 <pqcrystals_dilithium_fips202_ref_shake256_absorb>
  shake256_absorb(&state, sig, K*POLYW1_PACKEDBYTES);
     8f0:	00098593          	mv	a1,s3
     8f4:	30000613          	li	a2,768
     8f8:	00048513          	mv	a0,s1
     8fc:	3b5050ef          	jal	ra,64b0 <pqcrystals_dilithium_fips202_ref_shake256_absorb>
  shake256_finalize(&state);
     900:	00048513          	mv	a0,s1
     904:	3e5050ef          	jal	ra,64e8 <pqcrystals_dilithium_fips202_ref_shake256_finalize>
  shake256_squeeze(sig, SEEDBYTES, &state);
     908:	00048613          	mv	a2,s1
     90c:	02000593          	li	a1,32
     910:	00098513          	mv	a0,s3
     914:	449050ef          	jal	ra,655c <pqcrystals_dilithium_fips202_ref_shake256_squeeze>
  poly_challenge(&cp, sig);
     918:	00098593          	mv	a1,s3
     91c:	1d010513          	addi	a0,sp,464
     920:	1c8020ef          	jal	ra,2ae8 <pqcrystals_dilithium3_ref_poly_challenge>
  poly_ntt(&cp);
     924:	1d010513          	addi	a0,sp,464
     928:	401010ef          	jal	ra,2528 <pqcrystals_dilithium3_ref_poly_ntt>
  /* Compute z, reject if it reveals secret */
#ifdef PROFILING_MAC
  uart_send_string("\n\rPointwise mult l vector");
  asm("csrrs s2, "TICKS_REGISTER", zero");
#endif
  polyvecl_pointwise_poly_montgomery(&z, &cp, &s1);
     92c:	000c0613          	mv	a2,s8
     930:	1d010593          	addi	a1,sp,464
     934:	00040513          	mv	a0,s0
     938:	3a0010ef          	jal	ra,1cd8 <pqcrystals_dilithium3_ref_polyvecl_pointwise_poly_montgomery>
#ifdef PROFILING_MAC
  asm("csrrs s3, "TICKS_REGISTER", zero");
  print_runtime(cycle_start, cycle_end);
#endif

  polyvecl_invntt_tomont(&z);
     93c:	00040513          	mv	a0,s0
     940:	354010ef          	jal	ra,1c94 <pqcrystals_dilithium3_ref_polyvecl_invntt_tomont>

#ifdef PROFILING_ADD_SUB
  uart_send_string("\n\rADD polyvecl_add");
  asm("csrrs s2, "TICKS_REGISTER", zero");
#endif
  polyvecl_add(&z, &z, &y);
     944:	00040593          	mv	a1,s0
     948:	00040513          	mv	a0,s0
     94c:	000a8613          	mv	a2,s5
     950:	294010ef          	jal	ra,1be4 <pqcrystals_dilithium3_ref_polyvecl_add>
#ifdef PROFILING_ADD_SUB
  asm("csrrs s3, "TICKS_REGISTER", zero");
  print_runtime(cycle_start, cycle_end);
#endif

  if(polyvecl_chknorm(&z, GAMMA1 - BETA))
     954:	000805b7          	lui	a1,0x80
     958:	f3c58593          	addi	a1,a1,-196 # 7ff3c <_end_of_memory+0x4ff3c>
     95c:	00040513          	mv	a0,s0
     960:	478010ef          	jal	ra,1dd8 <pqcrystals_dilithium3_ref_polyvecl_chknorm>
     964:	0c051863          	bnez	a0,a34 <pqcrystals_dilithium3_ref_signature+0x400>

#ifdef PROFILING_MAC
  uart_send_string("\n\rPointwise mult k vector");
  asm("csrrs s2, "TICKS_REGISTER", zero");
#endif
  polyveck_pointwise_poly_montgomery(&h, &cp, &s2);
     968:	ffff77b7          	lui	a5,0xffff7
     96c:	1b0b0713          	addi	a4,s6,432
     970:	00f70733          	add	a4,a4,a5
     974:	02010793          	addi	a5,sp,32
     978:	00f707b3          	add	a5,a4,a5
     97c:	00f12823          	sw	a5,16(sp)
     980:	ffff3637          	lui	a2,0xffff3
     984:	01012503          	lw	a0,16(sp)
     988:	80060613          	addi	a2,a2,-2048 # ffff2800 <_end_of_memory+0xfffc2800>
     98c:	1b0b0793          	addi	a5,s6,432
     990:	00c787b3          	add	a5,a5,a2
     994:	02010713          	addi	a4,sp,32
     998:	00e78633          	add	a2,a5,a4
     99c:	1d010593          	addi	a1,sp,464
     9a0:	748010ef          	jal	ra,20e8 <pqcrystals_dilithium3_ref_polyveck_pointwise_poly_montgomery>
#ifdef PROFILING_MAC
  asm("csrrs s3, "TICKS_REGISTER", zero");
  print_runtime(cycle_start, cycle_end);
#endif

  polyveck_invntt_tomont(&h);
     9a4:	01012503          	lw	a0,16(sp)
  polyveck_pointwise_poly_montgomery(&h, &cp, &s2);
     9a8:	000b0c93          	mv	s9,s6
#ifdef PROFILING_ADD_SUB
  asm("csrrs s3, "TICKS_REGISTER", zero");
  print_runtime(cycle_start, cycle_end);
#endif

  if(polyveck_chknorm(&w0, GAMMA2 - BETA))
     9ac:	00040b37          	lui	s6,0x40
  polyveck_invntt_tomont(&h);
     9b0:	6f4010ef          	jal	ra,20a4 <pqcrystals_dilithium3_ref_polyveck_invntt_tomont>
  polyveck_sub(&w0, &w0, &h);
     9b4:	01012603          	lw	a2,16(sp)
     9b8:	000a0593          	mv	a1,s4
     9bc:	000a0513          	mv	a0,s4
     9c0:	5f0010ef          	jal	ra,1fb0 <pqcrystals_dilithium3_ref_polyveck_sub>
  if(polyveck_chknorm(&w0, GAMMA2 - BETA))
     9c4:	e3cb0593          	addi	a1,s6,-452 # 3fe3c <_end_of_memory+0xfe3c>
     9c8:	000a0513          	mv	a0,s4
     9cc:	784010ef          	jal	ra,2150 <pqcrystals_dilithium3_ref_polyveck_chknorm>
     9d0:	06051263          	bnez	a0,a34 <pqcrystals_dilithium3_ref_signature+0x400>
    goto rej;

  /* Compute hints for w1 */
  polyveck_pointwise_poly_montgomery(&h, &cp, &t0);
     9d4:	01012503          	lw	a0,16(sp)
     9d8:	ffff1637          	lui	a2,0xffff1
     9dc:	1b0c8793          	addi	a5,s9,432
     9e0:	00c787b3          	add	a5,a5,a2
     9e4:	02010713          	addi	a4,sp,32
     9e8:	1d010593          	addi	a1,sp,464
     9ec:	00e78633          	add	a2,a5,a4
     9f0:	6f8010ef          	jal	ra,20e8 <pqcrystals_dilithium3_ref_polyveck_pointwise_poly_montgomery>
  polyveck_invntt_tomont(&h);
     9f4:	01012503          	lw	a0,16(sp)
     9f8:	6ac010ef          	jal	ra,20a4 <pqcrystals_dilithium3_ref_polyveck_invntt_tomont>
    uart_send_string("\r");
    uart_send_string(str);
  }
#endif

  if(polyveck_chknorm(&h, GAMMA2))
     9fc:	01012503          	lw	a0,16(sp)
     a00:	f00b0593          	addi	a1,s6,-256
     a04:	74c010ef          	jal	ra,2150 <pqcrystals_dilithium3_ref_polyveck_chknorm>
     a08:	02051663          	bnez	a0,a34 <pqcrystals_dilithium3_ref_signature+0x400>
    goto rej;

  polyveck_add(&w0, &w0, &h);
     a0c:	01012603          	lw	a2,16(sp)
     a10:	000a0593          	mv	a1,s4
     a14:	000a0513          	mv	a0,s4
     a18:	52c010ef          	jal	ra,1f44 <pqcrystals_dilithium3_ref_polyveck_add>
  n = polyveck_make_hint(&h, &w0, &w1);
     a1c:	00c12603          	lw	a2,12(sp)
     a20:	01012503          	lw	a0,16(sp)
     a24:	000a0593          	mv	a1,s4
     a28:	075010ef          	jal	ra,229c <pqcrystals_dilithium3_ref_polyveck_make_hint>
  if(n > OMEGA)
     a2c:	03700793          	li	a5,55
     a30:	00a7f663          	bgeu	a5,a0,a3c <pqcrystals_dilithium3_ref_signature+0x408>
{
     a34:	00090613          	mv	a2,s2
     a38:	dc9ff06f          	j	800 <pqcrystals_dilithium3_ref_signature+0x1cc>
    goto rej;

  /* Write signature */
  pack_sig(sig, sig, &z, &h);
     a3c:	01012683          	lw	a3,16(sp)
     a40:	00098513          	mv	a0,s3
     a44:	00040613          	mv	a2,s0
     a48:	00098593          	mv	a1,s3
     a4c:	371000ef          	jal	ra,15bc <pqcrystals_dilithium3_ref_pack_sig>
  *siglen = CRYPTO_BYTES;
     a50:	01c12703          	lw	a4,28(sp)
     a54:	000017b7          	lui	a5,0x1
     a58:	cdd78793          	addi	a5,a5,-803 # cdd <pqcrystals_dilithium3_ref_verify+0x1ad>
     a5c:	00f72023          	sw	a5,0(a4)
  return 0;
}
     a60:	000132b7          	lui	t0,0x13
     a64:	00510133          	add	sp,sp,t0
     a68:	20c12083          	lw	ra,524(sp)
     a6c:	20812403          	lw	s0,520(sp)
     a70:	20412483          	lw	s1,516(sp)
     a74:	20012903          	lw	s2,512(sp)
     a78:	1fc12983          	lw	s3,508(sp)
     a7c:	1f812a03          	lw	s4,504(sp)
     a80:	1f412a83          	lw	s5,500(sp)
     a84:	1f012b03          	lw	s6,496(sp)
     a88:	1ec12b83          	lw	s7,492(sp)
     a8c:	1e812c03          	lw	s8,488(sp)
     a90:	1e412c83          	lw	s9,484(sp)
     a94:	1e012d03          	lw	s10,480(sp)
     a98:	1dc12d83          	lw	s11,476(sp)
     a9c:	00000513          	li	a0,0
     aa0:	21010113          	addi	sp,sp,528
     aa4:	00008067          	ret

00000aa8 <pqcrystals_dilithium3_ref>:
int crypto_sign(uint8_t *sm,
                size_t *smlen,
                const uint8_t *m,
                size_t mlen,
                const uint8_t *sk)
{
     aa8:	ff010113          	addi	sp,sp,-16
     aac:	00812423          	sw	s0,8(sp)
     ab0:	00912223          	sw	s1,4(sp)
     ab4:	00112623          	sw	ra,12(sp)
     ab8:	00068413          	mv	s0,a3
     abc:	00058493          	mv	s1,a1
  size_t i;

  for(i = 0; i < mlen; ++i)
     ac0:	02068a63          	beqz	a3,af4 <pqcrystals_dilithium3_ref+0x4c>
     ac4:	00001837          	lui	a6,0x1
     ac8:	cdc80813          	addi	a6,a6,-804 # cdc <pqcrystals_dilithium3_ref_verify+0x1ac>
     acc:	fff68793          	addi	a5,a3,-1
     ad0:	01068833          	add	a6,a3,a6
     ad4:	00f607b3          	add	a5,a2,a5
     ad8:	01050833          	add	a6,a0,a6
    sm[CRYPTO_BYTES + mlen - 1 - i] = m[mlen - 1 - i];
     adc:	0007c303          	lbu	t1,0(a5)
     ae0:	00078893          	mv	a7,a5
  for(i = 0; i < mlen; ++i)
     ae4:	fff80813          	addi	a6,a6,-1
    sm[CRYPTO_BYTES + mlen - 1 - i] = m[mlen - 1 - i];
     ae8:	006800a3          	sb	t1,1(a6)
  for(i = 0; i < mlen; ++i)
     aec:	fff78793          	addi	a5,a5,-1
     af0:	ff1616e3          	bne	a2,a7,adc <pqcrystals_dilithium3_ref+0x34>
  crypto_sign_signature(sm, smlen, sm + CRYPTO_BYTES, mlen, sk);
     af4:	00001637          	lui	a2,0x1
     af8:	cdd60613          	addi	a2,a2,-803 # cdd <pqcrystals_dilithium3_ref_verify+0x1ad>
     afc:	00040693          	mv	a3,s0
     b00:	00048593          	mv	a1,s1
     b04:	00c50633          	add	a2,a0,a2
     b08:	b2dff0ef          	jal	ra,634 <pqcrystals_dilithium3_ref_signature>
  *smlen += mlen;
     b0c:	0004a783          	lw	a5,0(s1)
  return 0;
}
     b10:	00c12083          	lw	ra,12(sp)
     b14:	00000513          	li	a0,0
  *smlen += mlen;
     b18:	008787b3          	add	a5,a5,s0
}
     b1c:	00812403          	lw	s0,8(sp)
  *smlen += mlen;
     b20:	00f4a023          	sw	a5,0(s1)
}
     b24:	00412483          	lw	s1,4(sp)
     b28:	01010113          	addi	sp,sp,16
     b2c:	00008067          	ret

00000b30 <pqcrystals_dilithium3_ref_verify>:
int crypto_sign_verify(const uint8_t *sig,
                       size_t siglen,
                       const uint8_t *m,
                       size_t mlen,
                       const uint8_t *pk)
{
     b30:	81010113          	addi	sp,sp,-2032
     b34:	ffff32b7          	lui	t0,0xffff3
  poly cp;
  polyvecl mat[K], z;
  polyveck t1, w1, h;
  keccak_state state;

  if(siglen != CRYPTO_BYTES)
     b38:	000017b7          	lui	a5,0x1
{
     b3c:	7e112623          	sw	ra,2028(sp)
     b40:	7e812423          	sw	s0,2024(sp)
     b44:	7e912223          	sw	s1,2020(sp)
     b48:	7f212023          	sw	s2,2016(sp)
     b4c:	7d312e23          	sw	s3,2012(sp)
     b50:	7d412c23          	sw	s4,2008(sp)
     b54:	7d512a23          	sw	s5,2004(sp)
     b58:	7d612823          	sw	s6,2000(sp)
     b5c:	7d712623          	sw	s7,1996(sp)
     b60:	7d812423          	sw	s8,1992(sp)
     b64:	7d912223          	sw	s9,1988(sp)
     b68:	7da12023          	sw	s10,1984(sp)
     b6c:	7bb12e23          	sw	s11,1980(sp)
     b70:	b3028293          	addi	t0,t0,-1232 # ffff2b30 <_end_of_memory+0xfffc2b30>
  if(siglen != CRYPTO_BYTES)
     b74:	cdd78793          	addi	a5,a5,-803 # cdd <pqcrystals_dilithium3_ref_verify+0x1ad>
{
     b78:	00510133          	add	sp,sp,t0
  if(siglen != CRYPTO_BYTES)
     b7c:	2af59a63          	bne	a1,a5,e30 <pqcrystals_dilithium3_ref_verify+0x300>
    return -1;

  unpack_pk(rho, &t1, pk);
     b80:	0000edb7          	lui	s11,0xe
     b84:	00070913          	mv	s2,a4
     b88:	ffff47b7          	lui	a5,0xffff4
     b8c:	c70d8713          	addi	a4,s11,-912 # dc70 <_gp+0x474c>
     b90:	00f70733          	add	a4,a4,a5
     b94:	01010793          	addi	a5,sp,16
     b98:	00f707b3          	add	a5,a4,a5
     b9c:	ffff24b7          	lui	s1,0xffff2
     ba0:	00f12423          	sw	a5,8(sp)
     ba4:	39048c93          	addi	s9,s1,912 # ffff2390 <_end_of_memory+0xfffc2390>
     ba8:	c70d8793          	addi	a5,s11,-912
     bac:	019787b3          	add	a5,a5,s9
     bb0:	01010713          	addi	a4,sp,16
     bb4:	00812583          	lw	a1,8(sp)
     bb8:	00e78cb3          	add	s9,a5,a4
     bbc:	00050993          	mv	s3,a0
     bc0:	00060b93          	mv	s7,a2
     bc4:	000c8513          	mv	a0,s9
     bc8:	00090613          	mv	a2,s2
     bcc:	00068d13          	mv	s10,a3
     bd0:	488000ef          	jal	ra,1058 <pqcrystals_dilithium3_ref_unpack_pk>
  if(unpack_sig(c, &z, &h, sig))
     bd4:	ffff77b7          	lui	a5,0xffff7
     bd8:	c70d8713          	addi	a4,s11,-912
     bdc:	00f70733          	add	a4,a4,a5
     be0:	01010793          	addi	a5,sp,16
     be4:	00f707b3          	add	a5,a4,a5
     be8:	ffff3a37          	lui	s4,0xffff3
     bec:	c00a0a93          	addi	s5,s4,-1024 # ffff2c00 <_end_of_memory+0xfffc2c00>
     bf0:	00f12623          	sw	a5,12(sp)
     bf4:	c70d8793          	addi	a5,s11,-912
     bf8:	015787b3          	add	a5,a5,s5
     bfc:	01010713          	addi	a4,sp,16
     c00:	3b048593          	addi	a1,s1,944
     c04:	00e78ab3          	add	s5,a5,a4
     c08:	c70d8793          	addi	a5,s11,-912
     c0c:	00b787b3          	add	a5,a5,a1
     c10:	00c12603          	lw	a2,12(sp)
     c14:	00e78433          	add	s0,a5,a4
     c18:	00098693          	mv	a3,s3
     c1c:	000a8593          	mv	a1,s5
     c20:	00040513          	mv	a0,s0
     c24:	301000ef          	jal	ra,1724 <pqcrystals_dilithium3_ref_unpack_sig>
     c28:	20051463          	bnez	a0,e30 <pqcrystals_dilithium3_ref_verify+0x300>
    return -1;
  if(polyvecl_chknorm(&z, GAMMA1 - BETA))
     c2c:	000805b7          	lui	a1,0x80
     c30:	f3c58593          	addi	a1,a1,-196 # 7ff3c <_end_of_memory+0x4ff3c>
     c34:	000a8513          	mv	a0,s5
     c38:	1a0010ef          	jal	ra,1dd8 <pqcrystals_dilithium3_ref_polyvecl_chknorm>
     c3c:	00050c13          	mv	s8,a0
     c40:	1e051863          	bnez	a0,e30 <pqcrystals_dilithium3_ref_verify+0x300>
    return -1;

  /* Compute CRH(H(rho, t1), msg) */
  shake256(mu, SEEDBYTES, pk, CRYPTO_PUBLICKEYBYTES);
     c44:	3f048b13          	addi	s6,s1,1008
     c48:	c70d8793          	addi	a5,s11,-912
     c4c:	016787b3          	add	a5,a5,s6
     c50:	01010713          	addi	a4,sp,16
     c54:	00e78b33          	add	s6,a5,a4
     c58:	7a000693          	li	a3,1952
     c5c:	00090613          	mv	a2,s2
     c60:	02000593          	li	a1,32
     c64:	000b0513          	mv	a0,s6
     c68:	4cd050ef          	jal	ra,6934 <pqcrystals_dilithium_fips202_ref_shake256>
  shake256_init(&state);
     c6c:	43048993          	addi	s3,s1,1072
     c70:	c70d8793          	addi	a5,s11,-912
     c74:	013787b3          	add	a5,a5,s3
     c78:	01010713          	addi	a4,sp,16
     c7c:	00e789b3          	add	s3,a5,a4
     c80:	00098513          	mv	a0,s3
     c84:	7fc050ef          	jal	ra,6480 <pqcrystals_dilithium_fips202_ref_shake256_init>
  shake256_absorb(&state, mu, SEEDBYTES);
     c88:	02000613          	li	a2,32
     c8c:	000b0593          	mv	a1,s6
     c90:	00098513          	mv	a0,s3
     c94:	01d050ef          	jal	ra,64b0 <pqcrystals_dilithium_fips202_ref_shake256_absorb>
  shake256_absorb(&state, m, mlen);
     c98:	000b8593          	mv	a1,s7
     c9c:	000d0613          	mv	a2,s10
     ca0:	00098513          	mv	a0,s3
     ca4:	00d050ef          	jal	ra,64b0 <pqcrystals_dilithium_fips202_ref_shake256_absorb>
  shake256_finalize(&state);
     ca8:	00098513          	mv	a0,s3
     cac:	03d050ef          	jal	ra,64e8 <pqcrystals_dilithium_fips202_ref_shake256_finalize>
  shake256_squeeze(mu, CRHBYTES, &state);
     cb0:	00098613          	mv	a2,s3
     cb4:	04000593          	li	a1,64
     cb8:	000b0513          	mv	a0,s6
     cbc:	0a1050ef          	jal	ra,655c <pqcrystals_dilithium_fips202_ref_shake256_squeeze>

  /* Matrix-vector multiplication; compute Az - c2^dt1 */
  poly_challenge(&cp, c);
     cc0:	800a0a13          	addi	s4,s4,-2048
     cc4:	c70d8793          	addi	a5,s11,-912
     cc8:	014787b3          	add	a5,a5,s4
     ccc:	01010713          	addi	a4,sp,16
     cd0:	00e78a33          	add	s4,a5,a4
     cd4:	000a0513          	mv	a0,s4
     cd8:	00040593          	mv	a1,s0
     cdc:	60d010ef          	jal	ra,2ae8 <pqcrystals_dilithium3_ref_poly_challenge>
  polyvec_matrix_expand(mat, rho);
     ce0:	ffff9bb7          	lui	s7,0xffff9
     ce4:	800b8b93          	addi	s7,s7,-2048 # ffff8800 <_end_of_memory+0xfffc8800>
     ce8:	c70d8793          	addi	a5,s11,-912
     cec:	017787b3          	add	a5,a5,s7
     cf0:	01010713          	addi	a4,sp,16
     cf4:	00e78bb3          	add	s7,a5,a4
     cf8:	000c8593          	mv	a1,s9
     cfc:	000b8513          	mv	a0,s7
     d00:	41d000ef          	jal	ra,191c <pqcrystals_dilithium3_ref_polyvec_matrix_expand>

  polyvecl_ntt(&z);
     d04:	000a8513          	mv	a0,s5
     d08:	749000ef          	jal	ra,1c50 <pqcrystals_dilithium3_ref_polyvecl_ntt>
  polyvec_matrix_pointwise_montgomery(&w1, mat, &z);
     d0c:	ffff6937          	lui	s2,0xffff6
     d10:	80090913          	addi	s2,s2,-2048 # ffff5800 <_end_of_memory+0xfffc5800>
     d14:	c70d8793          	addi	a5,s11,-912
     d18:	012787b3          	add	a5,a5,s2
     d1c:	01010713          	addi	a4,sp,16
     d20:	00e78933          	add	s2,a5,a4
     d24:	000a8613          	mv	a2,s5
     d28:	000b8593          	mv	a1,s7
     d2c:	00090513          	mv	a0,s2
     d30:	4a1000ef          	jal	ra,19d0 <pqcrystals_dilithium3_ref_polyvec_matrix_pointwise_montgomery>

  poly_ntt(&cp);
     d34:	000a0513          	mv	a0,s4
     d38:	7f0010ef          	jal	ra,2528 <pqcrystals_dilithium3_ref_poly_ntt>
  polyveck_shiftl(&t1);
     d3c:	00812503          	lw	a0,8(sp)
     d40:	2dc010ef          	jal	ra,201c <pqcrystals_dilithium3_ref_polyveck_shiftl>
  polyveck_ntt(&t1);
     d44:	00812503          	lw	a0,8(sp)
     d48:	318010ef          	jal	ra,2060 <pqcrystals_dilithium3_ref_polyveck_ntt>
  polyveck_pointwise_poly_montgomery(&t1, &cp, &t1);
     d4c:	00812603          	lw	a2,8(sp)
     d50:	000a0593          	mv	a1,s4
  polyveck_invntt_tomont(&w1);

  /* Reconstruct w1 */
  polyveck_caddq(&w1);
  polyveck_use_hint(&w1, &w1, &h);
  polyveck_pack_w1(buf, &w1);
     d54:	50048a13          	addi	s4,s1,1280
  polyveck_pointwise_poly_montgomery(&t1, &cp, &t1);
     d58:	00060513          	mv	a0,a2
     d5c:	38c010ef          	jal	ra,20e8 <pqcrystals_dilithium3_ref_polyveck_pointwise_poly_montgomery>
  polyveck_sub(&w1, &w1, &t1);
     d60:	00812603          	lw	a2,8(sp)
     d64:	00090593          	mv	a1,s2
     d68:	00090513          	mv	a0,s2
     d6c:	244010ef          	jal	ra,1fb0 <pqcrystals_dilithium3_ref_polyveck_sub>
  polyveck_reduce(&w1);
     d70:	00090513          	mv	a0,s2
     d74:	148010ef          	jal	ra,1ebc <pqcrystals_dilithium3_ref_polyveck_reduce>
  polyveck_invntt_tomont(&w1);
     d78:	00090513          	mv	a0,s2
     d7c:	328010ef          	jal	ra,20a4 <pqcrystals_dilithium3_ref_polyveck_invntt_tomont>
  polyveck_caddq(&w1);
     d80:	00090513          	mv	a0,s2
     d84:	17c010ef          	jal	ra,1f00 <pqcrystals_dilithium3_ref_polyveck_caddq>
  polyveck_use_hint(&w1, &w1, &h);
     d88:	00c12603          	lw	a2,12(sp)
     d8c:	00090593          	mv	a1,s2
     d90:	00090513          	mv	a0,s2
     d94:	588010ef          	jal	ra,231c <pqcrystals_dilithium3_ref_polyveck_use_hint>
  polyveck_pack_w1(buf, &w1);
     d98:	c70d8793          	addi	a5,s11,-912
     d9c:	014787b3          	add	a5,a5,s4
     da0:	01010713          	addi	a4,sp,16
     da4:	00e78a33          	add	s4,a5,a4
     da8:	00090593          	mv	a1,s2
     dac:	000a0513          	mv	a0,s4
     db0:	5d8010ef          	jal	ra,2388 <pqcrystals_dilithium3_ref_polyveck_pack_w1>

  /* Call random oracle and verify challenge */
  shake256_init(&state);
     db4:	00098513          	mv	a0,s3
     db8:	6c8050ef          	jal	ra,6480 <pqcrystals_dilithium_fips202_ref_shake256_init>
  shake256_absorb(&state, mu, CRHBYTES);
     dbc:	04000613          	li	a2,64
     dc0:	000b0593          	mv	a1,s6
     dc4:	00098513          	mv	a0,s3
     dc8:	6e8050ef          	jal	ra,64b0 <pqcrystals_dilithium_fips202_ref_shake256_absorb>
  shake256_absorb(&state, buf, K*POLYW1_PACKEDBYTES);
     dcc:	30000613          	li	a2,768
     dd0:	000a0593          	mv	a1,s4
     dd4:	00098513          	mv	a0,s3
     dd8:	6d8050ef          	jal	ra,64b0 <pqcrystals_dilithium_fips202_ref_shake256_absorb>
  shake256_finalize(&state);
     ddc:	00098513          	mv	a0,s3
     de0:	708050ef          	jal	ra,64e8 <pqcrystals_dilithium_fips202_ref_shake256_finalize>
  shake256_squeeze(c2, SEEDBYTES, &state);
     de4:	3d048493          	addi	s1,s1,976
     de8:	c70d8793          	addi	a5,s11,-912
     dec:	009787b3          	add	a5,a5,s1
     df0:	01010713          	addi	a4,sp,16
     df4:	00e784b3          	add	s1,a5,a4
     df8:	02000593          	li	a1,32
     dfc:	00048513          	mv	a0,s1
     e00:	00098613          	mv	a2,s3
     e04:	758050ef          	jal	ra,655c <pqcrystals_dilithium_fips202_ref_shake256_squeeze>
  for(i = 0; i < SEEDBYTES; ++i)
     e08:	00040593          	mv	a1,s0
     e0c:	00048513          	mv	a0,s1
     e10:	02040693          	addi	a3,s0,32
     e14:	0080006f          	j	e1c <pqcrystals_dilithium3_ref_verify+0x2ec>
     e18:	00d58e63          	beq	a1,a3,e34 <pqcrystals_dilithium3_ref_verify+0x304>
    if(c[i] != c2[i])
     e1c:	0005c703          	lbu	a4,0(a1)
     e20:	00054783          	lbu	a5,0(a0) # ffff4000 <_end_of_memory+0xfffc4000>
  for(i = 0; i < SEEDBYTES; ++i)
     e24:	00158593          	addi	a1,a1,1
     e28:	00150513          	addi	a0,a0,1
    if(c[i] != c2[i])
     e2c:	fef706e3          	beq	a4,a5,e18 <pqcrystals_dilithium3_ref_verify+0x2e8>
    return -1;
     e30:	fff00c13          	li	s8,-1
      return -1;

  return 0;
}
     e34:	0000d2b7          	lui	t0,0xd
     e38:	4d028293          	addi	t0,t0,1232 # d4d0 <_gp+0x3fac>
     e3c:	00510133          	add	sp,sp,t0
     e40:	7ec12083          	lw	ra,2028(sp)
     e44:	000c0513          	mv	a0,s8
     e48:	7e812403          	lw	s0,2024(sp)
     e4c:	7e412483          	lw	s1,2020(sp)
     e50:	7e012903          	lw	s2,2016(sp)
     e54:	7dc12983          	lw	s3,2012(sp)
     e58:	7d812a03          	lw	s4,2008(sp)
     e5c:	7d412a83          	lw	s5,2004(sp)
     e60:	7d012b03          	lw	s6,2000(sp)
     e64:	7cc12b83          	lw	s7,1996(sp)
     e68:	7c812c03          	lw	s8,1992(sp)
     e6c:	7c412c83          	lw	s9,1988(sp)
     e70:	7c012d03          	lw	s10,1984(sp)
     e74:	7bc12d83          	lw	s11,1980(sp)
     e78:	7f010113          	addi	sp,sp,2032
     e7c:	00008067          	ret

00000e80 <pqcrystals_dilithium3_ref_open>:
int crypto_sign_open(uint8_t *m,
                     size_t *mlen,
                     const uint8_t *sm,
                     size_t smlen,
                     const uint8_t *pk)
{
     e80:	fe010113          	addi	sp,sp,-32
     e84:	01212823          	sw	s2,16(sp)
  size_t i;

  if(smlen < CRYPTO_BYTES)
     e88:	00001937          	lui	s2,0x1
{
     e8c:	00812c23          	sw	s0,24(sp)
     e90:	01312623          	sw	s3,12(sp)
     e94:	01412423          	sw	s4,8(sp)
     e98:	00112e23          	sw	ra,28(sp)
     e9c:	00912a23          	sw	s1,20(sp)
  if(smlen < CRYPTO_BYTES)
     ea0:	cdc90793          	addi	a5,s2,-804 # cdc <pqcrystals_dilithium3_ref_verify+0x1ac>
{
     ea4:	00068993          	mv	s3,a3
     ea8:	00050a13          	mv	s4,a0
     eac:	00058413          	mv	s0,a1
  if(smlen < CRYPTO_BYTES)
     eb0:	04d7e263          	bltu	a5,a3,ef4 <pqcrystals_dilithium3_ref_open+0x74>
    return 0;
  }

badsig:
  /* Signature verification failed */
  *mlen = -1;
     eb4:	fff00793          	li	a5,-1
     eb8:	00f5a023          	sw	a5,0(a1)
  for(i = 0; i < smlen; ++i)
     ebc:	00068a63          	beqz	a3,ed0 <pqcrystals_dilithium3_ref_open+0x50>
    m[i] = 0;
     ec0:	00098613          	mv	a2,s3
     ec4:	00000593          	li	a1,0
     ec8:	000a0513          	mv	a0,s4
     ecc:	090070ef          	jal	ra,7f5c <memset>

  return -1;
     ed0:	fff00513          	li	a0,-1
}
     ed4:	01c12083          	lw	ra,28(sp)
     ed8:	01812403          	lw	s0,24(sp)
     edc:	01412483          	lw	s1,20(sp)
     ee0:	01012903          	lw	s2,16(sp)
     ee4:	00c12983          	lw	s3,12(sp)
     ee8:	00812a03          	lw	s4,8(sp)
     eec:	02010113          	addi	sp,sp,32
     ef0:	00008067          	ret
  *mlen = smlen - CRYPTO_BYTES;
     ef4:	fffff6b7          	lui	a3,0xfffff
     ef8:	32368693          	addi	a3,a3,803 # fffff323 <_end_of_memory+0xfffcf323>
     efc:	00060493          	mv	s1,a2
  if(crypto_sign_verify(sm, CRYPTO_BYTES, sm + CRYPTO_BYTES, *mlen, pk))
     f00:	cdd90913          	addi	s2,s2,-803
  *mlen = smlen - CRYPTO_BYTES;
     f04:	00d986b3          	add	a3,s3,a3
     f08:	00d5a023          	sw	a3,0(a1)
  if(crypto_sign_verify(sm, CRYPTO_BYTES, sm + CRYPTO_BYTES, *mlen, pk))
     f0c:	01260633          	add	a2,a2,s2
     f10:	00090593          	mv	a1,s2
     f14:	00048513          	mv	a0,s1
     f18:	c19ff0ef          	jal	ra,b30 <pqcrystals_dilithium3_ref_verify>
     f1c:	04051863          	bnez	a0,f6c <pqcrystals_dilithium3_ref_open+0xec>
    for(i = 0; i < *mlen; ++i)
     f20:	00042783          	lw	a5,0(s0)
     f24:	fa0788e3          	beqz	a5,ed4 <pqcrystals_dilithium3_ref_open+0x54>
     f28:	00000793          	li	a5,0
      m[i] = sm[CRYPTO_BYTES + i];
     f2c:	01278733          	add	a4,a5,s2
     f30:	00e48733          	add	a4,s1,a4
     f34:	00074683          	lbu	a3,0(a4)
     f38:	00fa0733          	add	a4,s4,a5
    for(i = 0; i < *mlen; ++i)
     f3c:	00178793          	addi	a5,a5,1 # ffff7001 <_end_of_memory+0xfffc7001>
      m[i] = sm[CRYPTO_BYTES + i];
     f40:	00d70023          	sb	a3,0(a4)
    for(i = 0; i < *mlen; ++i)
     f44:	00042703          	lw	a4,0(s0)
     f48:	fee7e2e3          	bltu	a5,a4,f2c <pqcrystals_dilithium3_ref_open+0xac>
}
     f4c:	01c12083          	lw	ra,28(sp)
     f50:	01812403          	lw	s0,24(sp)
     f54:	01412483          	lw	s1,20(sp)
     f58:	01012903          	lw	s2,16(sp)
     f5c:	00c12983          	lw	s3,12(sp)
     f60:	00812a03          	lw	s4,8(sp)
     f64:	02010113          	addi	sp,sp,32
     f68:	00008067          	ret
  *mlen = -1;
     f6c:	fff00793          	li	a5,-1
     f70:	00f42023          	sw	a5,0(s0)
    m[i] = 0;
     f74:	00098613          	mv	a2,s3
     f78:	00000593          	li	a1,0
     f7c:	000a0513          	mv	a0,s4
     f80:	7dd060ef          	jal	ra,7f5c <memset>
     f84:	f4dff06f          	j	ed0 <pqcrystals_dilithium3_ref_open+0x50>

00000f88 <pqcrystals_dilithium3_ref_pack_pk>:
*              - const polyveck *t1: pointer to vector t1
**************************************************/
void pack_pk(uint8_t pk[CRYPTO_PUBLICKEYBYTES],
             const uint8_t rho[SEEDBYTES],
             const polyveck *t1)
{
     f88:	ff010113          	addi	sp,sp,-16
     f8c:	00b56733          	or	a4,a0,a1
     f90:	00112623          	sw	ra,12(sp)
     f94:	00812423          	sw	s0,8(sp)
     f98:	00912223          	sw	s1,4(sp)
     f9c:	01212023          	sw	s2,0(sp)
     fa0:	00377713          	andi	a4,a4,3
     fa4:	00058793          	mv	a5,a1
     fa8:	08071863          	bnez	a4,1038 <pqcrystals_dilithium3_ref_pack_pk+0xb0>
     fac:	00158713          	addi	a4,a1,1
     fb0:	40e50733          	sub	a4,a0,a4
     fb4:	00373713          	sltiu	a4,a4,3
     fb8:	08071063          	bnez	a4,1038 <pqcrystals_dilithium3_ref_pack_pk+0xb0>
  unsigned int i;

  for(i = 0; i < SEEDBYTES; ++i)
    pk[i] = rho[i];
     fbc:	0005a703          	lw	a4,0(a1)
     fc0:	00e52023          	sw	a4,0(a0)
     fc4:	0045a703          	lw	a4,4(a1)
     fc8:	00e52223          	sw	a4,4(a0)
     fcc:	0085a703          	lw	a4,8(a1)
     fd0:	00e52423          	sw	a4,8(a0)
     fd4:	00c5a703          	lw	a4,12(a1)
     fd8:	00e52623          	sw	a4,12(a0)
     fdc:	0105a703          	lw	a4,16(a1)
     fe0:	00e52823          	sw	a4,16(a0)
     fe4:	0145a703          	lw	a4,20(a1)
     fe8:	00e52a23          	sw	a4,20(a0)
     fec:	0185a703          	lw	a4,24(a1)
     ff0:	00e52c23          	sw	a4,24(a0)
     ff4:	01c5a783          	lw	a5,28(a1)
     ff8:	00f52e23          	sw	a5,28(a0)
  for(i = 0; i < SEEDBYTES; ++i)
     ffc:	02050413          	addi	s0,a0,32
    1000:	00060493          	mv	s1,a2
    1004:	7a050913          	addi	s2,a0,1952
  pk += SEEDBYTES;

  for(i = 0; i < K; ++i)
    polyt1_pack(pk + i*POLYT1_PACKEDBYTES, &t1->vec[i]);
    1008:	00048593          	mv	a1,s1
    100c:	00040513          	mv	a0,s0
  for(i = 0; i < K; ++i)
    1010:	14040413          	addi	s0,s0,320
    polyt1_pack(pk + i*POLYT1_PACKEDBYTES, &t1->vec[i]);
    1014:	4b9010ef          	jal	ra,2ccc <pqcrystals_dilithium3_ref_polyt1_pack>
  for(i = 0; i < K; ++i)
    1018:	40048493          	addi	s1,s1,1024
    101c:	ff2416e3          	bne	s0,s2,1008 <pqcrystals_dilithium3_ref_pack_pk+0x80>
}
    1020:	00c12083          	lw	ra,12(sp)
    1024:	00812403          	lw	s0,8(sp)
    1028:	00412483          	lw	s1,4(sp)
    102c:	00012903          	lw	s2,0(sp)
    1030:	01010113          	addi	sp,sp,16
    1034:	00008067          	ret
    1038:	00050713          	mv	a4,a0
    103c:	02078593          	addi	a1,a5,32
    pk[i] = rho[i];
    1040:	0007c683          	lbu	a3,0(a5)
  for(i = 0; i < SEEDBYTES; ++i)
    1044:	00178793          	addi	a5,a5,1
    1048:	00170713          	addi	a4,a4,1
    pk[i] = rho[i];
    104c:	fed70fa3          	sb	a3,-1(a4)
  for(i = 0; i < SEEDBYTES; ++i)
    1050:	feb798e3          	bne	a5,a1,1040 <pqcrystals_dilithium3_ref_pack_pk+0xb8>
    1054:	fa9ff06f          	j	ffc <pqcrystals_dilithium3_ref_pack_pk+0x74>

00001058 <pqcrystals_dilithium3_ref_unpack_pk>:
*              - uint8_t pk[]: byte array containing bit-packed pk
**************************************************/
void unpack_pk(uint8_t rho[SEEDBYTES],
               polyveck *t1,
               const uint8_t pk[CRYPTO_PUBLICKEYBYTES])
{
    1058:	ff010113          	addi	sp,sp,-16
    105c:	00a66733          	or	a4,a2,a0
    1060:	00112623          	sw	ra,12(sp)
    1064:	00812423          	sw	s0,8(sp)
    1068:	00912223          	sw	s1,4(sp)
    106c:	01212023          	sw	s2,0(sp)
    1070:	00377713          	andi	a4,a4,3
    1074:	00050793          	mv	a5,a0
    1078:	08071863          	bnez	a4,1108 <pqcrystals_dilithium3_ref_unpack_pk+0xb0>
    107c:	00160713          	addi	a4,a2,1
    1080:	40e50733          	sub	a4,a0,a4
    1084:	00373713          	sltiu	a4,a4,3
    1088:	08071063          	bnez	a4,1108 <pqcrystals_dilithium3_ref_unpack_pk+0xb0>
  unsigned int i;

  for(i = 0; i < SEEDBYTES; ++i)
    rho[i] = pk[i];
    108c:	00062703          	lw	a4,0(a2)
    1090:	02060413          	addi	s0,a2,32
    1094:	00e52023          	sw	a4,0(a0)
    1098:	00462703          	lw	a4,4(a2)
    109c:	00e52223          	sw	a4,4(a0)
    10a0:	00862703          	lw	a4,8(a2)
    10a4:	00e52423          	sw	a4,8(a0)
    10a8:	00c62703          	lw	a4,12(a2)
    10ac:	00e52623          	sw	a4,12(a0)
    10b0:	01062703          	lw	a4,16(a2)
    10b4:	00e52823          	sw	a4,16(a0)
    10b8:	01462703          	lw	a4,20(a2)
    10bc:	00e52a23          	sw	a4,20(a0)
    10c0:	01862703          	lw	a4,24(a2)
    10c4:	00e52c23          	sw	a4,24(a0)
    10c8:	01c62703          	lw	a4,28(a2)
    10cc:	00e52e23          	sw	a4,28(a0)
  for(i = 0; i < SEEDBYTES; ++i)
    10d0:	00058493          	mv	s1,a1
    10d4:	7a060913          	addi	s2,a2,1952
  pk += SEEDBYTES;

  for(i = 0; i < K; ++i)
    polyt1_unpack(&t1->vec[i], pk + i*POLYT1_PACKEDBYTES);
    10d8:	00040593          	mv	a1,s0
    10dc:	00048513          	mv	a0,s1
  for(i = 0; i < K; ++i)
    10e0:	14040413          	addi	s0,s0,320
    polyt1_unpack(&t1->vec[i], pk + i*POLYT1_PACKEDBYTES);
    10e4:	459010ef          	jal	ra,2d3c <pqcrystals_dilithium3_ref_polyt1_unpack>
  for(i = 0; i < K; ++i)
    10e8:	40048493          	addi	s1,s1,1024
    10ec:	ff2416e3          	bne	s0,s2,10d8 <pqcrystals_dilithium3_ref_unpack_pk+0x80>
}
    10f0:	00c12083          	lw	ra,12(sp)
    10f4:	00812403          	lw	s0,8(sp)
    10f8:	00412483          	lw	s1,4(sp)
    10fc:	00012903          	lw	s2,0(sp)
    1100:	01010113          	addi	sp,sp,16
    1104:	00008067          	ret
    1108:	00060713          	mv	a4,a2
    110c:	02060413          	addi	s0,a2,32
    rho[i] = pk[i];
    1110:	00074683          	lbu	a3,0(a4)
  for(i = 0; i < SEEDBYTES; ++i)
    1114:	00170713          	addi	a4,a4,1
    1118:	00178793          	addi	a5,a5,1
    rho[i] = pk[i];
    111c:	fed78fa3          	sb	a3,-1(a5)
  for(i = 0; i < SEEDBYTES; ++i)
    1120:	fe8718e3          	bne	a4,s0,1110 <pqcrystals_dilithium3_ref_unpack_pk+0xb8>
    1124:	fadff06f          	j	10d0 <pqcrystals_dilithium3_ref_unpack_pk+0x78>

00001128 <pqcrystals_dilithium3_ref_pack_sk>:
             const uint8_t tr[SEEDBYTES],
             const uint8_t key[SEEDBYTES],
             const polyveck *t0,
             const polyvecl *s1,
             const polyveck *s2)
{
    1128:	fe010113          	addi	sp,sp,-32
    112c:	00812c23          	sw	s0,24(sp)
    1130:	00050413          	mv	s0,a0
    1134:	00b56533          	or	a0,a0,a1
    1138:	00912a23          	sw	s1,20(sp)
    113c:	01212823          	sw	s2,16(sp)
    1140:	01312623          	sw	s3,12(sp)
    1144:	00112e23          	sw	ra,28(sp)
    1148:	01412423          	sw	s4,8(sp)
    114c:	01512223          	sw	s5,4(sp)
    1150:	00357513          	andi	a0,a0,3
    1154:	00058893          	mv	a7,a1
    1158:	00070993          	mv	s3,a4
    115c:	00078913          	mv	s2,a5
    1160:	00080493          	mv	s1,a6
    1164:	1a051863          	bnez	a0,1314 <pqcrystals_dilithium3_ref_pack_sk+0x1ec>
    1168:	00158793          	addi	a5,a1,1
    116c:	40f407b3          	sub	a5,s0,a5
    1170:	0037b793          	sltiu	a5,a5,3
    1174:	1a079063          	bnez	a5,1314 <pqcrystals_dilithium3_ref_pack_sk+0x1ec>
  unsigned int i;

  for(i = 0; i < SEEDBYTES; ++i)
    sk[i] = rho[i];
    1178:	0005a783          	lw	a5,0(a1)
    117c:	00f42023          	sw	a5,0(s0)
    1180:	0045a783          	lw	a5,4(a1)
    1184:	00f42223          	sw	a5,4(s0)
    1188:	0085a783          	lw	a5,8(a1)
    118c:	00f42423          	sw	a5,8(s0)
    1190:	00c5a783          	lw	a5,12(a1)
    1194:	00f42623          	sw	a5,12(s0)
    1198:	0105a783          	lw	a5,16(a1)
    119c:	00f42823          	sw	a5,16(s0)
    11a0:	0145a783          	lw	a5,20(a1)
    11a4:	00f42a23          	sw	a5,20(s0)
    11a8:	0185a783          	lw	a5,24(a1)
    11ac:	00f42c23          	sw	a5,24(s0)
    11b0:	01c5a783          	lw	a5,28(a1)
    11b4:	00f42e23          	sw	a5,28(s0)
  for(i = 0; i < SEEDBYTES; ++i)
    11b8:	02040793          	addi	a5,s0,32
    11bc:	00f6e733          	or	a4,a3,a5
    11c0:	00377713          	andi	a4,a4,3
    11c4:	18071663          	bnez	a4,1350 <pqcrystals_dilithium3_ref_pack_sk+0x228>
    11c8:	00168713          	addi	a4,a3,1
    11cc:	40e78733          	sub	a4,a5,a4
    11d0:	00373713          	sltiu	a4,a4,3
    11d4:	16071e63          	bnez	a4,1350 <pqcrystals_dilithium3_ref_pack_sk+0x228>
  sk += SEEDBYTES;

  for(i = 0; i < SEEDBYTES; ++i)
    sk[i] = key[i];
    11d8:	0006a783          	lw	a5,0(a3)
    11dc:	02f42023          	sw	a5,32(s0)
    11e0:	0046a783          	lw	a5,4(a3)
    11e4:	02f42223          	sw	a5,36(s0)
    11e8:	0086a783          	lw	a5,8(a3)
    11ec:	02f42423          	sw	a5,40(s0)
    11f0:	00c6a783          	lw	a5,12(a3)
    11f4:	02f42623          	sw	a5,44(s0)
    11f8:	0106a783          	lw	a5,16(a3)
    11fc:	02f42823          	sw	a5,48(s0)
    1200:	0146a783          	lw	a5,20(a3)
    1204:	02f42a23          	sw	a5,52(s0)
    1208:	0186a783          	lw	a5,24(a3)
    120c:	02f42c23          	sw	a5,56(s0)
    1210:	01c6a783          	lw	a5,28(a3)
    1214:	02f42e23          	sw	a5,60(s0)
  for(i = 0; i < SEEDBYTES; ++i)
    1218:	04040793          	addi	a5,s0,64
    121c:	00160713          	addi	a4,a2,1
    1220:	40e78733          	sub	a4,a5,a4
    1224:	00373713          	sltiu	a4,a4,3
    1228:	10071663          	bnez	a4,1334 <pqcrystals_dilithium3_ref_pack_sk+0x20c>
    122c:	00f66733          	or	a4,a2,a5
    1230:	00377713          	andi	a4,a4,3
    1234:	10071063          	bnez	a4,1334 <pqcrystals_dilithium3_ref_pack_sk+0x20c>
  sk += SEEDBYTES;

  for(i = 0; i < SEEDBYTES; ++i)
    sk[i] = tr[i];
    1238:	00062783          	lw	a5,0(a2)
    123c:	04f42023          	sw	a5,64(s0)
    1240:	00462783          	lw	a5,4(a2)
    1244:	04f42223          	sw	a5,68(s0)
    1248:	00862783          	lw	a5,8(a2)
    124c:	04f42423          	sw	a5,72(s0)
    1250:	00c62783          	lw	a5,12(a2)
    1254:	04f42623          	sw	a5,76(s0)
    1258:	01062783          	lw	a5,16(a2)
    125c:	04f42823          	sw	a5,80(s0)
    1260:	01462783          	lw	a5,20(a2)
    1264:	04f42a23          	sw	a5,84(s0)
    1268:	01862783          	lw	a5,24(a2)
    126c:	04f42c23          	sw	a5,88(s0)
    1270:	01c62783          	lw	a5,28(a2)
    1274:	04f42e23          	sw	a5,92(s0)
  for(i = 0; i < SEEDBYTES; ++i)
    1278:	00001ab7          	lui	s5,0x1
    127c:	400a8a93          	addi	s5,s5,1024 # 1400 <pqcrystals_dilithium3_ref_unpack_sk+0x94>
    1280:	06040a13          	addi	s4,s0,96
    1284:	01590ab3          	add	s5,s2,s5
  sk += SEEDBYTES;

  for(i = 0; i < L; ++i)
    polyeta_pack(sk + i*POLYETA_PACKEDBYTES, &s1->vec[i]);
    1288:	00090593          	mv	a1,s2
    128c:	000a0513          	mv	a0,s4
  for(i = 0; i < L; ++i)
    1290:	40090913          	addi	s2,s2,1024
    polyeta_pack(sk + i*POLYETA_PACKEDBYTES, &s1->vec[i]);
    1294:	1c5010ef          	jal	ra,2c58 <pqcrystals_dilithium3_ref_polyeta_pack>
  for(i = 0; i < L; ++i)
    1298:	080a0a13          	addi	s4,s4,128
    129c:	ff2a96e3          	bne	s5,s2,1288 <pqcrystals_dilithium3_ref_pack_sk+0x160>
    12a0:	00002a37          	lui	s4,0x2
    12a4:	800a0a13          	addi	s4,s4,-2048 # 1800 <pqcrystals_dilithium3_ref_unpack_sig+0xdc>
    12a8:	2e040913          	addi	s2,s0,736
    12ac:	01448a33          	add	s4,s1,s4
  sk += L*POLYETA_PACKEDBYTES;

  for(i = 0; i < K; ++i)
    polyeta_pack(sk + i*POLYETA_PACKEDBYTES, &s2->vec[i]);
    12b0:	00048593          	mv	a1,s1
    12b4:	00090513          	mv	a0,s2
  for(i = 0; i < K; ++i)
    12b8:	40048493          	addi	s1,s1,1024
    polyeta_pack(sk + i*POLYETA_PACKEDBYTES, &s2->vec[i]);
    12bc:	19d010ef          	jal	ra,2c58 <pqcrystals_dilithium3_ref_polyeta_pack>
  for(i = 0; i < K; ++i)
    12c0:	08090913          	addi	s2,s2,128
    12c4:	fe9a16e3          	bne	s4,s1,12b0 <pqcrystals_dilithium3_ref_pack_sk+0x188>
    12c8:	000017b7          	lui	a5,0x1
    12cc:	fa078793          	addi	a5,a5,-96 # fa0 <pqcrystals_dilithium3_ref_pack_pk+0x18>
    12d0:	5e040493          	addi	s1,s0,1504
    12d4:	00f40433          	add	s0,s0,a5
  sk += K*POLYETA_PACKEDBYTES;

  for(i = 0; i < K; ++i)
    polyt0_pack(sk + i*POLYT0_PACKEDBYTES, &t0->vec[i]);
    12d8:	00098593          	mv	a1,s3
    12dc:	00048513          	mv	a0,s1
  for(i = 0; i < K; ++i)
    12e0:	1a048493          	addi	s1,s1,416
    polyt0_pack(sk + i*POLYT0_PACKEDBYTES, &t0->vec[i]);
    12e4:	2d5010ef          	jal	ra,2db8 <pqcrystals_dilithium3_ref_polyt0_pack>
  for(i = 0; i < K; ++i)
    12e8:	40098993          	addi	s3,s3,1024
    12ec:	fe8496e3          	bne	s1,s0,12d8 <pqcrystals_dilithium3_ref_pack_sk+0x1b0>
}
    12f0:	01c12083          	lw	ra,28(sp)
    12f4:	01812403          	lw	s0,24(sp)
    12f8:	01412483          	lw	s1,20(sp)
    12fc:	01012903          	lw	s2,16(sp)
    1300:	00c12983          	lw	s3,12(sp)
    1304:	00812a03          	lw	s4,8(sp)
    1308:	00412a83          	lw	s5,4(sp)
    130c:	02010113          	addi	sp,sp,32
    1310:	00008067          	ret
    1314:	00040793          	mv	a5,s0
    1318:	02088593          	addi	a1,a7,32 # ff0020 <_end_of_memory+0xfc0020>
    sk[i] = rho[i];
    131c:	0008c703          	lbu	a4,0(a7)
  for(i = 0; i < SEEDBYTES; ++i)
    1320:	00188893          	addi	a7,a7,1
    1324:	00178793          	addi	a5,a5,1
    sk[i] = rho[i];
    1328:	fee78fa3          	sb	a4,-1(a5)
  for(i = 0; i < SEEDBYTES; ++i)
    132c:	ff1598e3          	bne	a1,a7,131c <pqcrystals_dilithium3_ref_pack_sk+0x1f4>
    1330:	e89ff06f          	j	11b8 <pqcrystals_dilithium3_ref_pack_sk+0x90>
    1334:	02060693          	addi	a3,a2,32
    sk[i] = tr[i];
    1338:	00064703          	lbu	a4,0(a2)
  for(i = 0; i < SEEDBYTES; ++i)
    133c:	00160613          	addi	a2,a2,1
    1340:	00178793          	addi	a5,a5,1
    sk[i] = tr[i];
    1344:	fee78fa3          	sb	a4,-1(a5)
  for(i = 0; i < SEEDBYTES; ++i)
    1348:	fed618e3          	bne	a2,a3,1338 <pqcrystals_dilithium3_ref_pack_sk+0x210>
    134c:	f2dff06f          	j	1278 <pqcrystals_dilithium3_ref_pack_sk+0x150>
    1350:	02068593          	addi	a1,a3,32
    sk[i] = key[i];
    1354:	0006c703          	lbu	a4,0(a3)
  for(i = 0; i < SEEDBYTES; ++i)
    1358:	00168693          	addi	a3,a3,1
    135c:	00178793          	addi	a5,a5,1
    sk[i] = key[i];
    1360:	fee78fa3          	sb	a4,-1(a5)
  for(i = 0; i < SEEDBYTES; ++i)
    1364:	feb698e3          	bne	a3,a1,1354 <pqcrystals_dilithium3_ref_pack_sk+0x22c>
    1368:	eb1ff06f          	j	1218 <pqcrystals_dilithium3_ref_pack_sk+0xf0>

0000136c <pqcrystals_dilithium3_ref_unpack_sk>:
               uint8_t key[SEEDBYTES],
               polyveck *t0,
               polyvecl *s1,
               polyveck *s2,
               const uint8_t sk[CRYPTO_SECRETKEYBYTES])
{
    136c:	fe010113          	addi	sp,sp,-32
    1370:	00a86e33          	or	t3,a6,a0
    1374:	00812c23          	sw	s0,24(sp)
    1378:	00912a23          	sw	s1,20(sp)
    137c:	01212823          	sw	s2,16(sp)
    1380:	01412423          	sw	s4,8(sp)
    1384:	00112e23          	sw	ra,28(sp)
    1388:	01312623          	sw	s3,12(sp)
    138c:	01512223          	sw	s5,4(sp)
    1390:	003e7e13          	andi	t3,t3,3
    1394:	00050893          	mv	a7,a0
    1398:	00080413          	mv	s0,a6
    139c:	00058313          	mv	t1,a1
    13a0:	00068913          	mv	s2,a3
    13a4:	00070a13          	mv	s4,a4
    13a8:	00078493          	mv	s1,a5
    13ac:	1a0e1863          	bnez	t3,155c <pqcrystals_dilithium3_ref_unpack_sk+0x1f0>
    13b0:	00180793          	addi	a5,a6,1
    13b4:	40f507b3          	sub	a5,a0,a5
    13b8:	0037b793          	sltiu	a5,a5,3
    13bc:	1a079063          	bnez	a5,155c <pqcrystals_dilithium3_ref_unpack_sk+0x1f0>
  unsigned int i;

  for(i = 0; i < SEEDBYTES; ++i)
    rho[i] = sk[i];
    13c0:	00082783          	lw	a5,0(a6)
    13c4:	02080813          	addi	a6,a6,32
    13c8:	00f52023          	sw	a5,0(a0)
    13cc:	00442783          	lw	a5,4(s0)
    13d0:	00f52223          	sw	a5,4(a0)
    13d4:	00842783          	lw	a5,8(s0)
    13d8:	00f52423          	sw	a5,8(a0)
    13dc:	00c42783          	lw	a5,12(s0)
    13e0:	00f52623          	sw	a5,12(a0)
    13e4:	01042783          	lw	a5,16(s0)
    13e8:	00f52823          	sw	a5,16(a0)
    13ec:	01442783          	lw	a5,20(s0)
    13f0:	00f52a23          	sw	a5,20(a0)
    13f4:	01842783          	lw	a5,24(s0)
    13f8:	00f52c23          	sw	a5,24(a0)
    13fc:	01c42783          	lw	a5,28(s0)
    1400:	00f52e23          	sw	a5,28(a0)
  for(i = 0; i < SEEDBYTES; ++i)
    1404:	010667b3          	or	a5,a2,a6
    1408:	0037f793          	andi	a5,a5,3
    140c:	18079a63          	bnez	a5,15a0 <pqcrystals_dilithium3_ref_unpack_sk+0x234>
    1410:	02140793          	addi	a5,s0,33
    1414:	40f607b3          	sub	a5,a2,a5
    1418:	0037b793          	sltiu	a5,a5,3
    141c:	18079263          	bnez	a5,15a0 <pqcrystals_dilithium3_ref_unpack_sk+0x234>
  sk += SEEDBYTES;

  for(i = 0; i < SEEDBYTES; ++i)
    key[i] = sk[i];
    1420:	02042783          	lw	a5,32(s0)
    1424:	04040893          	addi	a7,s0,64
    1428:	00f62023          	sw	a5,0(a2)
    142c:	02442783          	lw	a5,36(s0)
    1430:	00f62223          	sw	a5,4(a2)
    1434:	02842783          	lw	a5,40(s0)
    1438:	00f62423          	sw	a5,8(a2)
    143c:	02c42783          	lw	a5,44(s0)
    1440:	00f62623          	sw	a5,12(a2)
    1444:	03042783          	lw	a5,48(s0)
    1448:	00f62823          	sw	a5,16(a2)
    144c:	03442783          	lw	a5,52(s0)
    1450:	00f62a23          	sw	a5,20(a2)
    1454:	03842783          	lw	a5,56(s0)
    1458:	00f62c23          	sw	a5,24(a2)
    145c:	03c42783          	lw	a5,60(s0)
    1460:	00f62e23          	sw	a5,28(a2)
  for(i = 0; i < SEEDBYTES; ++i)
    1464:	04140793          	addi	a5,s0,65
    1468:	40f307b3          	sub	a5,t1,a5
    146c:	0037b793          	sltiu	a5,a5,3
    1470:	10079663          	bnez	a5,157c <pqcrystals_dilithium3_ref_unpack_sk+0x210>
    1474:	011367b3          	or	a5,t1,a7
    1478:	0037f793          	andi	a5,a5,3
    147c:	10079063          	bnez	a5,157c <pqcrystals_dilithium3_ref_unpack_sk+0x210>
  sk += SEEDBYTES;

  for(i = 0; i < SEEDBYTES; ++i)
    tr[i] = sk[i];
    1480:	04042783          	lw	a5,64(s0)
    1484:	06040993          	addi	s3,s0,96
    1488:	00f32023          	sw	a5,0(t1)
    148c:	04442783          	lw	a5,68(s0)
    1490:	00f32223          	sw	a5,4(t1)
    1494:	04842783          	lw	a5,72(s0)
    1498:	00f32423          	sw	a5,8(t1)
    149c:	04c42783          	lw	a5,76(s0)
    14a0:	00f32623          	sw	a5,12(t1)
    14a4:	05042783          	lw	a5,80(s0)
    14a8:	00f32823          	sw	a5,16(t1)
    14ac:	05442783          	lw	a5,84(s0)
    14b0:	00f32a23          	sw	a5,20(t1)
    14b4:	05842783          	lw	a5,88(s0)
    14b8:	00f32c23          	sw	a5,24(t1)
    14bc:	05c42783          	lw	a5,92(s0)
    14c0:	00f32e23          	sw	a5,28(t1)
  for(i = 0; i < SEEDBYTES; ++i)
    14c4:	00001ab7          	lui	s5,0x1
    14c8:	400a8a93          	addi	s5,s5,1024 # 1400 <pqcrystals_dilithium3_ref_unpack_sk+0x94>
    14cc:	015a0ab3          	add	s5,s4,s5
  sk += SEEDBYTES;

  for(i=0; i < L; ++i)
    polyeta_unpack(&s1->vec[i], sk + i*POLYETA_PACKEDBYTES);
    14d0:	00098593          	mv	a1,s3
    14d4:	000a0513          	mv	a0,s4
  for(i=0; i < L; ++i)
    14d8:	400a0a13          	addi	s4,s4,1024
    polyeta_unpack(&s1->vec[i], sk + i*POLYETA_PACKEDBYTES);
    14dc:	7b4010ef          	jal	ra,2c90 <pqcrystals_dilithium3_ref_polyeta_unpack>
  for(i=0; i < L; ++i)
    14e0:	08098993          	addi	s3,s3,128
    14e4:	ff4a96e3          	bne	s5,s4,14d0 <pqcrystals_dilithium3_ref_unpack_sk+0x164>
    14e8:	00002a37          	lui	s4,0x2
    14ec:	800a0a13          	addi	s4,s4,-2048 # 1800 <pqcrystals_dilithium3_ref_unpack_sig+0xdc>
    14f0:	2e040993          	addi	s3,s0,736
    14f4:	01448a33          	add	s4,s1,s4
  sk += L*POLYETA_PACKEDBYTES;

  for(i=0; i < K; ++i)
    polyeta_unpack(&s2->vec[i], sk + i*POLYETA_PACKEDBYTES);
    14f8:	00098593          	mv	a1,s3
    14fc:	00048513          	mv	a0,s1
  for(i=0; i < K; ++i)
    1500:	40048493          	addi	s1,s1,1024
    polyeta_unpack(&s2->vec[i], sk + i*POLYETA_PACKEDBYTES);
    1504:	78c010ef          	jal	ra,2c90 <pqcrystals_dilithium3_ref_polyeta_unpack>
  for(i=0; i < K; ++i)
    1508:	08098993          	addi	s3,s3,128
    150c:	fe9a16e3          	bne	s4,s1,14f8 <pqcrystals_dilithium3_ref_unpack_sk+0x18c>
    1510:	000017b7          	lui	a5,0x1
    1514:	fa078793          	addi	a5,a5,-96 # fa0 <pqcrystals_dilithium3_ref_pack_pk+0x18>
    1518:	5e040493          	addi	s1,s0,1504
    151c:	00f40433          	add	s0,s0,a5
  sk += K*POLYETA_PACKEDBYTES;

  for(i=0; i < K; ++i)
    polyt0_unpack(&t0->vec[i], sk + i*POLYT0_PACKEDBYTES);
    1520:	00048593          	mv	a1,s1
    1524:	00090513          	mv	a0,s2
  for(i=0; i < K; ++i)
    1528:	1a048493          	addi	s1,s1,416
    polyt0_unpack(&t0->vec[i], sk + i*POLYT0_PACKEDBYTES);
    152c:	1d1010ef          	jal	ra,2efc <pqcrystals_dilithium3_ref_polyt0_unpack>
  for(i=0; i < K; ++i)
    1530:	40090913          	addi	s2,s2,1024
    1534:	fe8496e3          	bne	s1,s0,1520 <pqcrystals_dilithium3_ref_unpack_sk+0x1b4>
}
    1538:	01c12083          	lw	ra,28(sp)
    153c:	01812403          	lw	s0,24(sp)
    1540:	01412483          	lw	s1,20(sp)
    1544:	01012903          	lw	s2,16(sp)
    1548:	00c12983          	lw	s3,12(sp)
    154c:	00812a03          	lw	s4,8(sp)
    1550:	00412a83          	lw	s5,4(sp)
    1554:	02010113          	addi	sp,sp,32
    1558:	00008067          	ret
    155c:	00040793          	mv	a5,s0
    1560:	02040813          	addi	a6,s0,32
    rho[i] = sk[i];
    1564:	0007c703          	lbu	a4,0(a5)
  for(i = 0; i < SEEDBYTES; ++i)
    1568:	00178793          	addi	a5,a5,1
    156c:	00188893          	addi	a7,a7,1
    rho[i] = sk[i];
    1570:	fee88fa3          	sb	a4,-1(a7)
  for(i = 0; i < SEEDBYTES; ++i)
    1574:	fef818e3          	bne	a6,a5,1564 <pqcrystals_dilithium3_ref_unpack_sk+0x1f8>
    1578:	e8dff06f          	j	1404 <pqcrystals_dilithium3_ref_unpack_sk+0x98>
    157c:	00088613          	mv	a2,a7
    1580:	00030813          	mv	a6,t1
    1584:	06040993          	addi	s3,s0,96
    tr[i] = sk[i];
    1588:	00064783          	lbu	a5,0(a2)
  for(i = 0; i < SEEDBYTES; ++i)
    158c:	00160613          	addi	a2,a2,1
    1590:	00180813          	addi	a6,a6,1
    tr[i] = sk[i];
    1594:	fef80fa3          	sb	a5,-1(a6)
  for(i = 0; i < SEEDBYTES; ++i)
    1598:	ff3618e3          	bne	a2,s3,1588 <pqcrystals_dilithium3_ref_unpack_sk+0x21c>
    159c:	f29ff06f          	j	14c4 <pqcrystals_dilithium3_ref_unpack_sk+0x158>
    15a0:	04040893          	addi	a7,s0,64
    key[i] = sk[i];
    15a4:	00084783          	lbu	a5,0(a6)
  for(i = 0; i < SEEDBYTES; ++i)
    15a8:	00180813          	addi	a6,a6,1
    15ac:	00160613          	addi	a2,a2,1
    key[i] = sk[i];
    15b0:	fef60fa3          	sb	a5,-1(a2)
  for(i = 0; i < SEEDBYTES; ++i)
    15b4:	ff0898e3          	bne	a7,a6,15a4 <pqcrystals_dilithium3_ref_unpack_sk+0x238>
    15b8:	eadff06f          	j	1464 <pqcrystals_dilithium3_ref_unpack_sk+0xf8>

000015bc <pqcrystals_dilithium3_ref_pack_sig>:
**************************************************/
void pack_sig(uint8_t sig[CRYPTO_BYTES],
              const uint8_t c[SEEDBYTES],
              const polyvecl *z,
              const polyveck *h)
{
    15bc:	00158713          	addi	a4,a1,1
    15c0:	fe010113          	addi	sp,sp,-32
    15c4:	40e50733          	sub	a4,a0,a4
    15c8:	00812c23          	sw	s0,24(sp)
    15cc:	00912a23          	sw	s1,20(sp)
    15d0:	00112e23          	sw	ra,28(sp)
    15d4:	01212823          	sw	s2,16(sp)
    15d8:	01312623          	sw	s3,12(sp)
    15dc:	01412423          	sw	s4,8(sp)
    15e0:	00373713          	sltiu	a4,a4,3
    15e4:	00058793          	mv	a5,a1
    15e8:	00050413          	mv	s0,a0
    15ec:	00068493          	mv	s1,a3
    15f0:	10071a63          	bnez	a4,1704 <pqcrystals_dilithium3_ref_pack_sig+0x148>
    15f4:	00b56733          	or	a4,a0,a1
    15f8:	00377713          	andi	a4,a4,3
    15fc:	10071463          	bnez	a4,1704 <pqcrystals_dilithium3_ref_pack_sig+0x148>
  unsigned int i, j, k;

  for(i=0; i < SEEDBYTES; ++i)
    sig[i] = c[i];
    1600:	0005a703          	lw	a4,0(a1)
    1604:	00e52023          	sw	a4,0(a0)
    1608:	0045a703          	lw	a4,4(a1)
    160c:	00e52223          	sw	a4,4(a0)
    1610:	0085a703          	lw	a4,8(a1)
    1614:	00e52423          	sw	a4,8(a0)
    1618:	00c5a703          	lw	a4,12(a1)
    161c:	00e52623          	sw	a4,12(a0)
    1620:	0105a703          	lw	a4,16(a1)
    1624:	00e52823          	sw	a4,16(a0)
    1628:	0145a703          	lw	a4,20(a1)
    162c:	00e52a23          	sw	a4,20(a0)
    1630:	0185a703          	lw	a4,24(a1)
    1634:	00e52c23          	sw	a4,24(a0)
    1638:	01c5a783          	lw	a5,28(a1)
    163c:	00f52e23          	sw	a5,28(a0)
  for(i=0; i < SEEDBYTES; ++i)
    1640:	00001a37          	lui	s4,0x1
    1644:	ca0a0a13          	addi	s4,s4,-864 # ca0 <pqcrystals_dilithium3_ref_verify+0x170>
    1648:	02040913          	addi	s2,s0,32
    164c:	00060993          	mv	s3,a2
    1650:	01440a33          	add	s4,s0,s4
  sig += SEEDBYTES;

  for(i = 0; i < L; ++i)
    polyz_pack(sig + i*POLYZ_PACKEDBYTES, &z->vec[i]);
    1654:	00098593          	mv	a1,s3
    1658:	00090513          	mv	a0,s2
  for(i = 0; i < L; ++i)
    165c:	28090913          	addi	s2,s2,640
    polyz_pack(sig + i*POLYZ_PACKEDBYTES, &z->vec[i]);
    1660:	231010ef          	jal	ra,3090 <pqcrystals_dilithium3_ref_polyz_pack>
  for(i = 0; i < L; ++i)
    1664:	40098993          	addi	s3,s3,1024
    1668:	ff2a16e3          	bne	s4,s2,1654 <pqcrystals_dilithium3_ref_pack_sig+0x98>
  sig += L*POLYZ_PACKEDBYTES;
    166c:	00001937          	lui	s2,0x1
    1670:	ca090813          	addi	a6,s2,-864 # ca0 <pqcrystals_dilithium3_ref_verify+0x170>
    1674:	01040833          	add	a6,s0,a6

  /* Encode h */
  for(i = 0; i < OMEGA + K; ++i)
    sig[i] = 0;
    1678:	00080513          	mv	a0,a6
    167c:	03d00613          	li	a2,61
    1680:	00000593          	li	a1,0
    1684:	0d9060ef          	jal	ra,7f5c <memset>
    1688:	00002e37          	lui	t3,0x2
    168c:	cd790913          	addi	s2,s2,-809
    1690:	800e0e13          	addi	t3,t3,-2048 # 1800 <pqcrystals_dilithium3_ref_unpack_sig+0xdc>
    1694:	00050813          	mv	a6,a0
    1698:	00048313          	mv	t1,s1
    169c:	012408b3          	add	a7,s0,s2
    16a0:	01c48e33          	add	t3,s1,t3

  k = 0;
    16a4:	00000693          	li	a3,0
  for(i = 0; i < K; ++i) {
    for(j = 0; j < N; ++j)
    16a8:	10000513          	li	a0,256
{
    16ac:	00030713          	mv	a4,t1
    for(j = 0; j < N; ++j)
    16b0:	00000793          	li	a5,0
      if(h->vec[i].coeffs[j] != 0)
    16b4:	00072603          	lw	a2,0(a4)
        sig[k++] = j;
    16b8:	00d805b3          	add	a1,a6,a3
    for(j = 0; j < N; ++j)
    16bc:	00470713          	addi	a4,a4,4
      if(h->vec[i].coeffs[j] != 0)
    16c0:	00060663          	beqz	a2,16cc <pqcrystals_dilithium3_ref_pack_sig+0x110>
        sig[k++] = j;
    16c4:	00f58023          	sb	a5,0(a1)
    16c8:	00168693          	addi	a3,a3,1
    for(j = 0; j < N; ++j)
    16cc:	00178793          	addi	a5,a5,1
    16d0:	fea792e3          	bne	a5,a0,16b4 <pqcrystals_dilithium3_ref_pack_sig+0xf8>

    sig[OMEGA + i] = k;
    16d4:	00d88023          	sb	a3,0(a7)
  for(i = 0; i < K; ++i) {
    16d8:	40030313          	addi	t1,t1,1024
    16dc:	00188893          	addi	a7,a7,1
    16e0:	fc6e16e3          	bne	t3,t1,16ac <pqcrystals_dilithium3_ref_pack_sig+0xf0>
  }
}
    16e4:	01c12083          	lw	ra,28(sp)
    16e8:	01812403          	lw	s0,24(sp)
    16ec:	01412483          	lw	s1,20(sp)
    16f0:	01012903          	lw	s2,16(sp)
    16f4:	00c12983          	lw	s3,12(sp)
    16f8:	00812a03          	lw	s4,8(sp)
    16fc:	02010113          	addi	sp,sp,32
    1700:	00008067          	ret
    1704:	00040713          	mv	a4,s0
    1708:	02078593          	addi	a1,a5,32
    sig[i] = c[i];
    170c:	0007c683          	lbu	a3,0(a5)
  for(i=0; i < SEEDBYTES; ++i)
    1710:	00178793          	addi	a5,a5,1
    1714:	00170713          	addi	a4,a4,1
    sig[i] = c[i];
    1718:	fed70fa3          	sb	a3,-1(a4)
  for(i=0; i < SEEDBYTES; ++i)
    171c:	fef598e3          	bne	a1,a5,170c <pqcrystals_dilithium3_ref_pack_sig+0x150>
    1720:	f21ff06f          	j	1640 <pqcrystals_dilithium3_ref_pack_sig+0x84>

00001724 <pqcrystals_dilithium3_ref_unpack_sig>:
**************************************************/
int unpack_sig(uint8_t c[SEEDBYTES],
               polyvecl *z,
               polyveck *h,
               const uint8_t sig[CRYPTO_BYTES])
{
    1724:	00168713          	addi	a4,a3,1
    1728:	fd010113          	addi	sp,sp,-48
    172c:	40e50733          	sub	a4,a0,a4
    1730:	01512a23          	sw	s5,20(sp)
    1734:	01612823          	sw	s6,16(sp)
    1738:	02112623          	sw	ra,44(sp)
    173c:	02812423          	sw	s0,40(sp)
    1740:	02912223          	sw	s1,36(sp)
    1744:	03212023          	sw	s2,32(sp)
    1748:	01312e23          	sw	s3,28(sp)
    174c:	01412c23          	sw	s4,24(sp)
    1750:	01712623          	sw	s7,12(sp)
    1754:	01812423          	sw	s8,8(sp)
    1758:	00373713          	sltiu	a4,a4,3
    175c:	00068b13          	mv	s6,a3
    1760:	00050793          	mv	a5,a0
    1764:	00060a93          	mv	s5,a2
  unsigned int i, j, k;

  for(i = 0; i < SEEDBYTES; ++i)
    1768:	18071663          	bnez	a4,18f4 <pqcrystals_dilithium3_ref_unpack_sig+0x1d0>
    176c:	00a6e733          	or	a4,a3,a0
    1770:	00377713          	andi	a4,a4,3
    1774:	18071063          	bnez	a4,18f4 <pqcrystals_dilithium3_ref_unpack_sig+0x1d0>
    c[i] = sig[i];
    1778:	0006a703          	lw	a4,0(a3)
    177c:	02068413          	addi	s0,a3,32
    1780:	00e52023          	sw	a4,0(a0)
    1784:	0046a703          	lw	a4,4(a3)
    1788:	00e52223          	sw	a4,4(a0)
    178c:	0086a703          	lw	a4,8(a3)
    1790:	00e52423          	sw	a4,8(a0)
    1794:	00c6a703          	lw	a4,12(a3)
    1798:	00e52623          	sw	a4,12(a0)
    179c:	0106a703          	lw	a4,16(a3)
    17a0:	00e52823          	sw	a4,16(a0)
    17a4:	0146a703          	lw	a4,20(a3)
    17a8:	00e52a23          	sw	a4,20(a0)
    17ac:	0186a703          	lw	a4,24(a3)
    17b0:	00e52c23          	sw	a4,24(a0)
    17b4:	01c6a703          	lw	a4,28(a3)
    17b8:	00e52e23          	sw	a4,28(a0)
  for(i = 0; i < SEEDBYTES; ++i)
    17bc:	00001937          	lui	s2,0x1
    17c0:	ca090913          	addi	s2,s2,-864 # ca0 <pqcrystals_dilithium3_ref_verify+0x170>
    17c4:	00058493          	mv	s1,a1
    17c8:	012b0933          	add	s2,s6,s2
  sig += SEEDBYTES;

  for(i = 0; i < L; ++i)
    polyz_unpack(&z->vec[i], sig + i*POLYZ_PACKEDBYTES);
    17cc:	00040593          	mv	a1,s0
    17d0:	00048513          	mv	a0,s1
  for(i = 0; i < L; ++i)
    17d4:	28040413          	addi	s0,s0,640
    polyz_unpack(&z->vec[i], sig + i*POLYZ_PACKEDBYTES);
    17d8:	10d010ef          	jal	ra,30e4 <pqcrystals_dilithium3_ref_polyz_unpack>
  for(i = 0; i < L; ++i)
    17dc:	40048493          	addi	s1,s1,1024
    17e0:	fe8916e3          	bne	s2,s0,17cc <pqcrystals_dilithium3_ref_unpack_sig+0xa8>
  sig += L*POLYZ_PACKEDBYTES;

  /* Decode h */
  k = 0;
  for(i = 0; i < K; ++i) {
    17e4:	000014b7          	lui	s1,0x1
    17e8:	cd748a13          	addi	s4,s1,-809 # cd7 <pqcrystals_dilithium3_ref_verify+0x1a7>
    17ec:	000a8813          	mv	a6,s5
    17f0:	014b0a33          	add	s4,s6,s4
  k = 0;
    17f4:	00000413          	li	s0,0
  for(i = 0; i < K; ++i) {
    17f8:	00000c13          	li	s8,0
    for(j = 0; j < N; ++j)
      h->vec[i].coeffs[j] = 0;

    if(sig[OMEGA + i] < k || sig[OMEGA + i] > OMEGA)
    17fc:	03700913          	li	s2,55
    1800:	c9f48493          	addi	s1,s1,-865
      return 1;

    for(j = k; j < sig[OMEGA + i]; ++j) {
      /* Coefficients are ordered for strong unforgeability */
      if(j > k && sig[j] <= sig[j-1]) return 1;
      h->vec[i].coeffs[sig[j]] = 1;
    1804:	00100b93          	li	s7,1
  for(i = 0; i < K; ++i) {
    1808:	00600993          	li	s3,6
      h->vec[i].coeffs[j] = 0;
    180c:	00080513          	mv	a0,a6
    1810:	40000613          	li	a2,1024
    1814:	00000593          	li	a1,0
    1818:	744060ef          	jal	ra,7f5c <memset>
    if(sig[OMEGA + i] < k || sig[OMEGA + i] > OMEGA)
    181c:	000a4703          	lbu	a4,0(s4)
      h->vec[i].coeffs[j] = 0;
    1820:	00050813          	mv	a6,a0
    if(sig[OMEGA + i] < k || sig[OMEGA + i] > OMEGA)
    1824:	00070793          	mv	a5,a4
    1828:	08876c63          	bltu	a4,s0,18c0 <pqcrystals_dilithium3_ref_unpack_sig+0x19c>
    182c:	08e96a63          	bltu	s2,a4,18c0 <pqcrystals_dilithium3_ref_unpack_sig+0x19c>
    for(j = k; j < sig[OMEGA + i]; ++j) {
    1830:	04e47263          	bgeu	s0,a4,1874 <pqcrystals_dilithium3_ref_unpack_sig+0x150>
    1834:	009405b3          	add	a1,s0,s1
    1838:	00bb05b3          	add	a1,s6,a1
    183c:	00040713          	mv	a4,s0
      h->vec[i].coeffs[sig[j]] = 1;
    1840:	008c1693          	slli	a3,s8,0x8
      if(j > k && sig[j] <= sig[j-1]) return 1;
    1844:	0015c783          	lbu	a5,1(a1)
    1848:	00e47663          	bgeu	s0,a4,1854 <pqcrystals_dilithium3_ref_unpack_sig+0x130>
    184c:	0005c603          	lbu	a2,0(a1)
    1850:	06f67863          	bgeu	a2,a5,18c0 <pqcrystals_dilithium3_ref_unpack_sig+0x19c>
      h->vec[i].coeffs[sig[j]] = 1;
    1854:	00f687b3          	add	a5,a3,a5
    1858:	00279793          	slli	a5,a5,0x2
    185c:	00fa87b3          	add	a5,s5,a5
    1860:	0177a023          	sw	s7,0(a5)
    for(j = k; j < sig[OMEGA + i]; ++j) {
    1864:	000a4783          	lbu	a5,0(s4)
    1868:	00170713          	addi	a4,a4,1
    186c:	00158593          	addi	a1,a1,1
    1870:	fcf76ae3          	bltu	a4,a5,1844 <pqcrystals_dilithium3_ref_unpack_sig+0x120>
  for(i = 0; i < K; ++i) {
    1874:	001c0c13          	addi	s8,s8,1
    1878:	40080813          	addi	a6,a6,1024
    187c:	001a0a13          	addi	s4,s4,1
    1880:	013c0663          	beq	s8,s3,188c <pqcrystals_dilithium3_ref_unpack_sig+0x168>
    1884:	00078413          	mv	s0,a5
    1888:	f85ff06f          	j	180c <pqcrystals_dilithium3_ref_unpack_sig+0xe8>

    k = sig[OMEGA + i];
  }

  /* Extra indices are zero for strong unforgeability */
  for(j = k; j < OMEGA; ++j)
    188c:	03600713          	li	a4,54
    1890:	08f76263          	bltu	a4,a5,1914 <pqcrystals_dilithium3_ref_unpack_sig+0x1f0>
    1894:	00001737          	lui	a4,0x1
    1898:	ca070693          	addi	a3,a4,-864 # ca0 <pqcrystals_dilithium3_ref_verify+0x170>
    189c:	00d787b3          	add	a5,a5,a3
    18a0:	cd770713          	addi	a4,a4,-809
    18a4:	00fb07b3          	add	a5,s6,a5
    18a8:	00eb0b33          	add	s6,s6,a4
    18ac:	0080006f          	j	18b4 <pqcrystals_dilithium3_ref_unpack_sig+0x190>
    18b0:	07678263          	beq	a5,s6,1914 <pqcrystals_dilithium3_ref_unpack_sig+0x1f0>
    if(sig[j])
    18b4:	0007c703          	lbu	a4,0(a5)
  for(j = k; j < OMEGA; ++j)
    18b8:	00178793          	addi	a5,a5,1
    if(sig[j])
    18bc:	fe070ae3          	beqz	a4,18b0 <pqcrystals_dilithium3_ref_unpack_sig+0x18c>
      return 1;
    18c0:	00100513          	li	a0,1
      return 1;

  return 0;
}
    18c4:	02c12083          	lw	ra,44(sp)
    18c8:	02812403          	lw	s0,40(sp)
    18cc:	02412483          	lw	s1,36(sp)
    18d0:	02012903          	lw	s2,32(sp)
    18d4:	01c12983          	lw	s3,28(sp)
    18d8:	01812a03          	lw	s4,24(sp)
    18dc:	01412a83          	lw	s5,20(sp)
    18e0:	01012b03          	lw	s6,16(sp)
    18e4:	00c12b83          	lw	s7,12(sp)
    18e8:	00812c03          	lw	s8,8(sp)
    18ec:	03010113          	addi	sp,sp,48
    18f0:	00008067          	ret
    18f4:	000b0713          	mv	a4,s6
    18f8:	020b0413          	addi	s0,s6,32
    c[i] = sig[i];
    18fc:	00074683          	lbu	a3,0(a4)
  for(i = 0; i < SEEDBYTES; ++i)
    1900:	00170713          	addi	a4,a4,1
    1904:	00178793          	addi	a5,a5,1
    c[i] = sig[i];
    1908:	fed78fa3          	sb	a3,-1(a5)
  for(i = 0; i < SEEDBYTES; ++i)
    190c:	fe8718e3          	bne	a4,s0,18fc <pqcrystals_dilithium3_ref_unpack_sig+0x1d8>
    1910:	eadff06f          	j	17bc <pqcrystals_dilithium3_ref_unpack_sig+0x98>
  return 0;
    1914:	00000513          	li	a0,0
    1918:	fadff06f          	j	18c4 <pqcrystals_dilithium3_ref_unpack_sig+0x1a0>

0000191c <pqcrystals_dilithium3_ref_polyvec_matrix_expand>:
*              or AES256CTR(rho,j|i).
*
* Arguments:   - polyvecl mat[K]: output matrix
*              - const uint8_t rho[]: byte array containing seed rho
**************************************************/
void polyvec_matrix_expand(polyvecl mat[K], const uint8_t rho[SEEDBYTES]) {
    191c:	fd010113          	addi	sp,sp,-48
    1920:	01512a23          	sw	s5,20(sp)
    1924:	00001ab7          	lui	s5,0x1
    1928:	01612823          	sw	s6,16(sp)
    192c:	400a8a93          	addi	s5,s5,1024 # 1400 <pqcrystals_dilithium3_ref_unpack_sk+0x94>
    1930:	fffffb37          	lui	s6,0xfffff
    1934:	03212023          	sw	s2,32(sp)
    1938:	01312e23          	sw	s3,28(sp)
    193c:	01412c23          	sw	s4,24(sp)
    1940:	01712623          	sw	s7,12(sp)
    1944:	02112623          	sw	ra,44(sp)
    1948:	02812423          	sw	s0,40(sp)
    194c:	02912223          	sw	s1,36(sp)
    1950:	00058a13          	mv	s4,a1
    1954:	01550933          	add	s2,a0,s5
    1958:	00000993          	li	s3,0
    195c:	c00b0b13          	addi	s6,s6,-1024 # ffffec00 <_end_of_memory+0xfffcec00>
  unsigned int i, j;

  for(i = 0; i < K; ++i)
    1960:	60000b93          	li	s7,1536
    for(j = 0; j < L; ++j)
    1964:	016904b3          	add	s1,s2,s6
void polyvec_matrix_expand(polyvecl mat[K], const uint8_t rho[SEEDBYTES]) {
    1968:	00098413          	mv	s0,s3
      poly_uniform(&mat[i].vec[j], rho, (i << 8) + j);
    196c:	00040613          	mv	a2,s0
    for(j = 0; j < L; ++j)
    1970:	00140413          	addi	s0,s0,1
      poly_uniform(&mat[i].vec[j], rho, (i << 8) + j);
    1974:	00048513          	mv	a0,s1
    1978:	000a0593          	mv	a1,s4
    for(j = 0; j < L; ++j)
    197c:	01041413          	slli	s0,s0,0x10
    1980:	40048493          	addi	s1,s1,1024
      poly_uniform(&mat[i].vec[j], rho, (i << 8) + j);
    1984:	649000ef          	jal	ra,27cc <pqcrystals_dilithium3_ref_poly_uniform>
    for(j = 0; j < L; ++j)
    1988:	01045413          	srli	s0,s0,0x10
    198c:	ff2490e3          	bne	s1,s2,196c <pqcrystals_dilithium3_ref_polyvec_matrix_expand+0x50>
  for(i = 0; i < K; ++i)
    1990:	10098993          	addi	s3,s3,256
    1994:	01099993          	slli	s3,s3,0x10
    1998:	0109d993          	srli	s3,s3,0x10
    199c:	01548933          	add	s2,s1,s5
    19a0:	fd7992e3          	bne	s3,s7,1964 <pqcrystals_dilithium3_ref_polyvec_matrix_expand+0x48>
}
    19a4:	02c12083          	lw	ra,44(sp)
    19a8:	02812403          	lw	s0,40(sp)
    19ac:	02412483          	lw	s1,36(sp)
    19b0:	02012903          	lw	s2,32(sp)
    19b4:	01c12983          	lw	s3,28(sp)
    19b8:	01812a03          	lw	s4,24(sp)
    19bc:	01412a83          	lw	s5,20(sp)
    19c0:	01012b03          	lw	s6,16(sp)
    19c4:	00c12b83          	lw	s7,12(sp)
    19c8:	03010113          	addi	sp,sp,48
    19cc:	00008067          	ret

000019d0 <pqcrystals_dilithium3_ref_polyvec_matrix_pointwise_montgomery>:

void polyvec_matrix_pointwise_montgomery(polyveck *t, const polyvecl mat[K], const polyvecl *v) {
    19d0:	fe010113          	addi	sp,sp,-32
    19d4:	00912a23          	sw	s1,20(sp)
    19d8:	01512223          	sw	s5,4(sp)
    19dc:	000024b7          	lui	s1,0x2
    19e0:	00001ab7          	lui	s5,0x1
    19e4:	400a8a93          	addi	s5,s5,1024 # 1400 <pqcrystals_dilithium3_ref_unpack_sk+0x94>
    19e8:	c0048493          	addi	s1,s1,-1024 # 1c00 <pqcrystals_dilithium3_ref_polyvecl_add+0x1c>
    19ec:	00812c23          	sw	s0,24(sp)
    19f0:	01212823          	sw	s2,16(sp)
    19f4:	01312623          	sw	s3,12(sp)
    19f8:	01412423          	sw	s4,8(sp)
    19fc:	00112e23          	sw	ra,28(sp)
    1a00:	00050313          	mv	t1,a0
    1a04:	00058a13          	mv	s4,a1
    1a08:	00060913          	mv	s2,a2
    1a0c:	015589b3          	add	s3,a1,s5
    1a10:	40050413          	addi	s0,a0,1024
    1a14:	009504b3          	add	s1,a0,s1
#ifdef FPAU
  unsigned int i, j;
  int32_t d, u_coeff, v_coeff;

  for(i = 0; i < N; i++){
    w->coeffs[i] = 0;
    1a18:	00030513          	mv	a0,t1
    1a1c:	40000613          	li	a2,1024
    1a20:	00000593          	li	a1,0
    1a24:	538060ef          	jal	ra,7f5c <memset>
    1a28:	00050313          	mv	t1,a0
    1a2c:	00090893          	mv	a7,s2
    1a30:	000a0813          	mv	a6,s4
void polyvec_matrix_pointwise_montgomery(polyveck *t, const polyvecl mat[K], const polyvecl *v) {
    1a34:	00088693          	mv	a3,a7
    1a38:	00080713          	mv	a4,a6
    1a3c:	00030793          	mv	a5,t1
  }

  for(i = 0; i < L; ++i) {
    for(j = 0; j < N; j++){
      d = w->coeffs[j];
    1a40:	0007a503          	lw	a0,0(a5)
      u_coeff = u->vec[i].coeffs[j];
    1a44:	00072603          	lw	a2,0(a4)
      v_coeff = v->vec[i].coeffs[j];
    1a48:	0006a583          	lw	a1,0(a3)

      // Compute MAC operation
#ifndef STEEL
      asm volatile("nop"); //ORCA
    1a4c:	00000013          	nop
      asm volatile("nop"); //ORCA
    1a50:	00000013          	nop
      asm volatile("nop"); //ORCA
    1a54:	00000013          	nop
#endif
      asm volatile("fpau.dil.mac %0, %1, %2\n": : "r"(u_coeff), "r"(v_coeff),"r"(d): );
    1a58:	50a5a633          	fpau.dil.mac	a2,a1,a0

      // Store the result
      w->coeffs[j] = u_coeff;
    1a5c:	00c7a023          	sw	a2,0(a5)
    for(j = 0; j < N; j++){
    1a60:	00478793          	addi	a5,a5,4
    1a64:	00470713          	addi	a4,a4,4
    1a68:	00468693          	addi	a3,a3,4
    1a6c:	fc879ae3          	bne	a5,s0,1a40 <pqcrystals_dilithium3_ref_polyvec_matrix_pointwise_montgomery+0x70>
  for(i = 0; i < L; ++i) {
    1a70:	40080813          	addi	a6,a6,1024
    1a74:	40088893          	addi	a7,a7,1024
    1a78:	fb381ee3          	bne	a6,s3,1a34 <pqcrystals_dilithium3_ref_polyvec_matrix_pointwise_montgomery+0x64>
  for(i = 0; i < K; ++i){
    1a7c:	40078413          	addi	s0,a5,1024
    1a80:	40030313          	addi	t1,t1,1024
    1a84:	015809b3          	add	s3,a6,s5
    1a88:	015a0a33          	add	s4,s4,s5
    1a8c:	f89416e3          	bne	s0,s1,1a18 <pqcrystals_dilithium3_ref_polyvec_matrix_pointwise_montgomery+0x48>
}
    1a90:	01c12083          	lw	ra,28(sp)
    1a94:	01812403          	lw	s0,24(sp)
    1a98:	01412483          	lw	s1,20(sp)
    1a9c:	01012903          	lw	s2,16(sp)
    1aa0:	00c12983          	lw	s3,12(sp)
    1aa4:	00812a03          	lw	s4,8(sp)
    1aa8:	00412a83          	lw	s5,4(sp)
    1aac:	02010113          	addi	sp,sp,32
    1ab0:	00008067          	ret

00001ab4 <pqcrystals_dilithium3_ref_polyvecl_uniform_eta>:
void polyvecl_uniform_eta(polyvecl *v, const uint8_t seed[CRHBYTES], uint16_t nonce) {
    1ab4:	fe010113          	addi	sp,sp,-32
    1ab8:	01212823          	sw	s2,16(sp)
    1abc:	00001937          	lui	s2,0x1
    1ac0:	40090913          	addi	s2,s2,1024 # 1400 <pqcrystals_dilithium3_ref_unpack_sk+0x94>
    1ac4:	00812c23          	sw	s0,24(sp)
    1ac8:	00912a23          	sw	s1,20(sp)
    1acc:	01312623          	sw	s3,12(sp)
    1ad0:	00112e23          	sw	ra,28(sp)
    1ad4:	00050493          	mv	s1,a0
    1ad8:	00058993          	mv	s3,a1
    1adc:	00060413          	mv	s0,a2
  for(i = 0; i < L; ++i)
    1ae0:	01250933          	add	s2,a0,s2
    poly_uniform_eta(&v->vec[i], seed, nonce++);
    1ae4:	00140793          	addi	a5,s0,1
    1ae8:	00040613          	mv	a2,s0
    1aec:	00048513          	mv	a0,s1
    1af0:	01079413          	slli	s0,a5,0x10
  for(i = 0; i < L; ++i)
    1af4:	40048493          	addi	s1,s1,1024
    poly_uniform_eta(&v->vec[i], seed, nonce++);
    1af8:	00098593          	mv	a1,s3
    1afc:	01045413          	srli	s0,s0,0x10
    1b00:	685000ef          	jal	ra,2984 <pqcrystals_dilithium3_ref_poly_uniform_eta>
  for(i = 0; i < L; ++i)
    1b04:	ff2490e3          	bne	s1,s2,1ae4 <pqcrystals_dilithium3_ref_polyvecl_uniform_eta+0x30>
}
    1b08:	01c12083          	lw	ra,28(sp)
    1b0c:	01812403          	lw	s0,24(sp)
    1b10:	01412483          	lw	s1,20(sp)
    1b14:	01012903          	lw	s2,16(sp)
    1b18:	00c12983          	lw	s3,12(sp)
    1b1c:	02010113          	addi	sp,sp,32
    1b20:	00008067          	ret

00001b24 <pqcrystals_dilithium3_ref_polyvecl_uniform_gamma1>:
void polyvecl_uniform_gamma1(polyvecl *v, const uint8_t seed[CRHBYTES], uint16_t nonce) {
    1b24:	fe010113          	addi	sp,sp,-32
    1b28:	00812c23          	sw	s0,24(sp)
    poly_uniform_gamma1(&v->vec[i], seed, L*nonce + i);
    1b2c:	00261413          	slli	s0,a2,0x2
void polyvecl_uniform_gamma1(polyvecl *v, const uint8_t seed[CRHBYTES], uint16_t nonce) {
    1b30:	01212823          	sw	s2,16(sp)
    poly_uniform_gamma1(&v->vec[i], seed, L*nonce + i);
    1b34:	00c40433          	add	s0,s0,a2
    1b38:	00001937          	lui	s2,0x1
    1b3c:	01041413          	slli	s0,s0,0x10
    1b40:	40090913          	addi	s2,s2,1024 # 1400 <pqcrystals_dilithium3_ref_unpack_sk+0x94>
void polyvecl_uniform_gamma1(polyvecl *v, const uint8_t seed[CRHBYTES], uint16_t nonce) {
    1b44:	00912a23          	sw	s1,20(sp)
    1b48:	01312623          	sw	s3,12(sp)
    1b4c:	00112e23          	sw	ra,28(sp)
    1b50:	00050493          	mv	s1,a0
    1b54:	00058993          	mv	s3,a1
    poly_uniform_gamma1(&v->vec[i], seed, L*nonce + i);
    1b58:	01045413          	srli	s0,s0,0x10
    1b5c:	01250933          	add	s2,a0,s2
    1b60:	00040613          	mv	a2,s0
  for(i = 0; i < L; ++i)
    1b64:	00140413          	addi	s0,s0,1
    poly_uniform_gamma1(&v->vec[i], seed, L*nonce + i);
    1b68:	00048513          	mv	a0,s1
    1b6c:	00098593          	mv	a1,s3
  for(i = 0; i < L; ++i)
    1b70:	01041413          	slli	s0,s0,0x10
    1b74:	40048493          	addi	s1,s1,1024
    poly_uniform_gamma1(&v->vec[i], seed, L*nonce + i);
    1b78:	5f0010ef          	jal	ra,3168 <pqcrystals_dilithium3_ref_poly_uniform_gamma1>
  for(i = 0; i < L; ++i)
    1b7c:	01045413          	srli	s0,s0,0x10
    1b80:	ff2490e3          	bne	s1,s2,1b60 <pqcrystals_dilithium3_ref_polyvecl_uniform_gamma1+0x3c>
}
    1b84:	01c12083          	lw	ra,28(sp)
    1b88:	01812403          	lw	s0,24(sp)
    1b8c:	01412483          	lw	s1,20(sp)
    1b90:	01012903          	lw	s2,16(sp)
    1b94:	00c12983          	lw	s3,12(sp)
    1b98:	02010113          	addi	sp,sp,32
    1b9c:	00008067          	ret

00001ba0 <pqcrystals_dilithium3_ref_polyvecl_reduce>:
void polyvecl_reduce(polyvecl *v) {
    1ba0:	ff010113          	addi	sp,sp,-16
    1ba4:	00912223          	sw	s1,4(sp)
    1ba8:	000014b7          	lui	s1,0x1
    1bac:	40048493          	addi	s1,s1,1024 # 1400 <pqcrystals_dilithium3_ref_unpack_sk+0x94>
    1bb0:	00812423          	sw	s0,8(sp)
    1bb4:	00112623          	sw	ra,12(sp)
    1bb8:	00050413          	mv	s0,a0
    1bbc:	009504b3          	add	s1,a0,s1
    poly_reduce(&v->vec[i]);
    1bc0:	00040513          	mv	a0,s0
  for(i = 0; i < L; ++i)
    1bc4:	40040413          	addi	s0,s0,1024
    poly_reduce(&v->vec[i]);
    1bc8:	011000ef          	jal	ra,23d8 <pqcrystals_dilithium3_ref_poly_reduce>
  for(i = 0; i < L; ++i)
    1bcc:	fe941ae3          	bne	s0,s1,1bc0 <pqcrystals_dilithium3_ref_polyvecl_reduce+0x20>
}
    1bd0:	00c12083          	lw	ra,12(sp)
    1bd4:	00812403          	lw	s0,8(sp)
    1bd8:	00412483          	lw	s1,4(sp)
    1bdc:	01010113          	addi	sp,sp,16
    1be0:	00008067          	ret

00001be4 <pqcrystals_dilithium3_ref_polyvecl_add>:
void polyvecl_add(polyvecl *w, const polyvecl *u, const polyvecl *v) {
    1be4:	fe010113          	addi	sp,sp,-32
    1be8:	00912a23          	sw	s1,20(sp)
  for(i = 0; i < L; ++i)
    1bec:	000014b7          	lui	s1,0x1
void polyvecl_add(polyvecl *w, const polyvecl *u, const polyvecl *v) {
    1bf0:	00812c23          	sw	s0,24(sp)
    1bf4:	01212823          	sw	s2,16(sp)
    1bf8:	01312623          	sw	s3,12(sp)
    1bfc:	01412423          	sw	s4,8(sp)
    1c00:	00112e23          	sw	ra,28(sp)
    1c04:	00050a13          	mv	s4,a0
    1c08:	00058993          	mv	s3,a1
    1c0c:	00060913          	mv	s2,a2
    1c10:	00000413          	li	s0,0
  for(i = 0; i < L; ++i)
    1c14:	40048493          	addi	s1,s1,1024 # 1400 <pqcrystals_dilithium3_ref_unpack_sk+0x94>
    poly_add(&w->vec[i], &u->vec[i], &v->vec[i]);
    1c18:	00890633          	add	a2,s2,s0
    1c1c:	008985b3          	add	a1,s3,s0
    1c20:	008a0533          	add	a0,s4,s0
  for(i = 0; i < L; ++i)
    1c24:	40040413          	addi	s0,s0,1024
    poly_add(&w->vec[i], &u->vec[i], &v->vec[i]);
    1c28:	031000ef          	jal	ra,2458 <pqcrystals_dilithium3_ref_poly_add>
  for(i = 0; i < L; ++i)
    1c2c:	fe9416e3          	bne	s0,s1,1c18 <pqcrystals_dilithium3_ref_polyvecl_add+0x34>
}
    1c30:	01c12083          	lw	ra,28(sp)
    1c34:	01812403          	lw	s0,24(sp)
    1c38:	01412483          	lw	s1,20(sp)
    1c3c:	01012903          	lw	s2,16(sp)
    1c40:	00c12983          	lw	s3,12(sp)
    1c44:	00812a03          	lw	s4,8(sp)
    1c48:	02010113          	addi	sp,sp,32
    1c4c:	00008067          	ret

00001c50 <pqcrystals_dilithium3_ref_polyvecl_ntt>:
void polyvecl_ntt(polyvecl *v) {
    1c50:	ff010113          	addi	sp,sp,-16
    1c54:	00912223          	sw	s1,4(sp)
    1c58:	000014b7          	lui	s1,0x1
    1c5c:	40048493          	addi	s1,s1,1024 # 1400 <pqcrystals_dilithium3_ref_unpack_sk+0x94>
    1c60:	00812423          	sw	s0,8(sp)
    1c64:	00112623          	sw	ra,12(sp)
    1c68:	00050413          	mv	s0,a0
    1c6c:	009504b3          	add	s1,a0,s1
    poly_ntt(&v->vec[i]);
    1c70:	00040513          	mv	a0,s0
  for(i = 0; i < L; ++i)
    1c74:	40040413          	addi	s0,s0,1024
    poly_ntt(&v->vec[i]);
    1c78:	0b1000ef          	jal	ra,2528 <pqcrystals_dilithium3_ref_poly_ntt>
  for(i = 0; i < L; ++i)
    1c7c:	fe941ae3          	bne	s0,s1,1c70 <pqcrystals_dilithium3_ref_polyvecl_ntt+0x20>
}
    1c80:	00c12083          	lw	ra,12(sp)
    1c84:	00812403          	lw	s0,8(sp)
    1c88:	00412483          	lw	s1,4(sp)
    1c8c:	01010113          	addi	sp,sp,16
    1c90:	00008067          	ret

00001c94 <pqcrystals_dilithium3_ref_polyvecl_invntt_tomont>:
void polyvecl_invntt_tomont(polyvecl *v) {
    1c94:	ff010113          	addi	sp,sp,-16
    1c98:	00912223          	sw	s1,4(sp)
    1c9c:	000014b7          	lui	s1,0x1
    1ca0:	40048493          	addi	s1,s1,1024 # 1400 <pqcrystals_dilithium3_ref_unpack_sk+0x94>
    1ca4:	00812423          	sw	s0,8(sp)
    1ca8:	00112623          	sw	ra,12(sp)
    1cac:	00050413          	mv	s0,a0
    1cb0:	009504b3          	add	s1,a0,s1
    poly_invntt_tomont(&v->vec[i]);
    1cb4:	00040513          	mv	a0,s0
  for(i = 0; i < L; ++i)
    1cb8:	40040413          	addi	s0,s0,1024
    poly_invntt_tomont(&v->vec[i]);
    1cbc:	071000ef          	jal	ra,252c <pqcrystals_dilithium3_ref_poly_invntt_tomont>
  for(i = 0; i < L; ++i)
    1cc0:	fe941ae3          	bne	s0,s1,1cb4 <pqcrystals_dilithium3_ref_polyvecl_invntt_tomont+0x20>
}
    1cc4:	00c12083          	lw	ra,12(sp)
    1cc8:	00812403          	lw	s0,8(sp)
    1ccc:	00412483          	lw	s1,4(sp)
    1cd0:	01010113          	addi	sp,sp,16
    1cd4:	00008067          	ret

00001cd8 <pqcrystals_dilithium3_ref_polyvecl_pointwise_poly_montgomery>:
  for(i = 0; i < L; ++i)
    1cd8:	00001eb7          	lui	t4,0x1
    1cdc:	400e8e93          	addi	t4,t4,1024 # 1400 <pqcrystals_dilithium3_ref_unpack_sk+0x94>
    1ce0:	01d60eb3          	add	t4,a2,t4
    1ce4:	40058e13          	addi	t3,a1,1024
      asm volatile("fpau.dil.mac %0, %1, %2\n": : "r"(u_coeff), "r"(v_coeff),"r"(0): );
    1ce8:	00000313          	li	t1,0
    for( unsigned int j = 0; j < N; ++j)
    1cec:	00058793          	mv	a5,a1
void polyvecl_pointwise_poly_montgomery(polyvecl *r, const poly *a, const polyvecl *v) {
    1cf0:	00050693          	mv	a3,a0
    1cf4:	00060713          	mv	a4,a2
      u_coeff = a->coeffs[j];
    1cf8:	0007a803          	lw	a6,0(a5)
      v_coeff = v->vec[i].coeffs[j];
    1cfc:	00072883          	lw	a7,0(a4)
      asm volatile ("nop"); //ORCA
    1d00:	00000013          	nop
      asm volatile ("nop"); //ORCA
    1d04:	00000013          	nop
      asm volatile ("nop"); //ORCA
    1d08:	00000013          	nop
      asm volatile("fpau.dil.mac %0, %1, %2\n": : "r"(u_coeff), "r"(v_coeff),"r"(0): );
    1d0c:	5068a833          	fpau.dil.mac	a6,a7,t1
      r->vec[i].coeffs[j] = u_coeff;
    1d10:	0106a023          	sw	a6,0(a3)
    for( unsigned int j = 0; j < N; ++j)
    1d14:	00478793          	addi	a5,a5,4
    1d18:	00470713          	addi	a4,a4,4
    1d1c:	00468693          	addi	a3,a3,4
    1d20:	fdc79ce3          	bne	a5,t3,1cf8 <pqcrystals_dilithium3_ref_polyvecl_pointwise_poly_montgomery+0x20>
  for(i = 0; i < L; ++i)
    1d24:	40060613          	addi	a2,a2,1024
    1d28:	40050513          	addi	a0,a0,1024
    1d2c:	fdd610e3          	bne	a2,t4,1cec <pqcrystals_dilithium3_ref_polyvecl_pointwise_poly_montgomery+0x14>
}
    1d30:	00008067          	ret

00001d34 <pqcrystals_dilithium3_ref_polyvecl_pointwise_acc_montgomery>:
{
    1d34:	ff010113          	addi	sp,sp,-16
    1d38:	00812423          	sw	s0,8(sp)
    1d3c:	00912223          	sw	s1,4(sp)
    1d40:	00058413          	mv	s0,a1
    1d44:	00060493          	mv	s1,a2
    w->coeffs[i] = 0;
    1d48:	00000593          	li	a1,0
    1d4c:	40000613          	li	a2,1024
{
    1d50:	01212023          	sw	s2,0(sp)
    1d54:	00112623          	sw	ra,12(sp)
    1d58:	00050913          	mv	s2,a0
    w->coeffs[i] = 0;
    1d5c:	200060ef          	jal	ra,7f5c <memset>
    1d60:	00001e37          	lui	t3,0x1
    1d64:	400e0e13          	addi	t3,t3,1024 # 1400 <pqcrystals_dilithium3_ref_unpack_sk+0x94>
    1d68:	00040893          	mv	a7,s0
    1d6c:	00048313          	mv	t1,s1
    1d70:	01c40e33          	add	t3,s0,t3
    1d74:	40090813          	addi	a6,s2,1024
    for(j = 0; j < N; j++){
    1d78:	00090793          	mv	a5,s2
{
    1d7c:	00030693          	mv	a3,t1
    1d80:	00088713          	mv	a4,a7
      d = w->coeffs[j];
    1d84:	0007a503          	lw	a0,0(a5)
      u_coeff = u->vec[i].coeffs[j];
    1d88:	00072603          	lw	a2,0(a4)
      v_coeff = v->vec[i].coeffs[j];
    1d8c:	0006a583          	lw	a1,0(a3)
      asm volatile("nop"); //ORCA
    1d90:	00000013          	nop
      asm volatile("nop"); //ORCA
    1d94:	00000013          	nop
      asm volatile("nop"); //ORCA
    1d98:	00000013          	nop
      asm volatile("fpau.dil.mac %0, %1, %2\n": : "r"(u_coeff), "r"(v_coeff),"r"(d): );
    1d9c:	50a5a633          	fpau.dil.mac	a2,a1,a0
      w->coeffs[j] = u_coeff;
    1da0:	00c7a023          	sw	a2,0(a5)
    for(j = 0; j < N; j++){
    1da4:	00478793          	addi	a5,a5,4
    1da8:	00470713          	addi	a4,a4,4
    1dac:	00468693          	addi	a3,a3,4
    1db0:	fd079ae3          	bne	a5,a6,1d84 <pqcrystals_dilithium3_ref_polyvecl_pointwise_acc_montgomery+0x50>
  for(i = 0; i < L; ++i) {
    1db4:	40088893          	addi	a7,a7,1024
    1db8:	40030313          	addi	t1,t1,1024
    1dbc:	fbc89ee3          	bne	a7,t3,1d78 <pqcrystals_dilithium3_ref_polyvecl_pointwise_acc_montgomery+0x44>
  for(i = 1; i < L; ++i) {
    poly_pointwise_montgomery(&t, &u->vec[i], &v->vec[i]);
    poly_add(w, w, &t);
  }
#endif
}
    1dc0:	00c12083          	lw	ra,12(sp)
    1dc4:	00812403          	lw	s0,8(sp)
    1dc8:	00412483          	lw	s1,4(sp)
    1dcc:	00012903          	lw	s2,0(sp)
    1dd0:	01010113          	addi	sp,sp,16
    1dd4:	00008067          	ret

00001dd8 <pqcrystals_dilithium3_ref_polyvecl_chknorm>:
*              - int32_t B: norm bound
*
* Returns 0 if norm of all polynomials is strictly smaller than B <= (Q-1)/8
* and 1 otherwise.
**************************************************/
int polyvecl_chknorm(const polyvecl *v, int32_t bound)  {
    1dd8:	ff010113          	addi	sp,sp,-16
    1ddc:	00912223          	sw	s1,4(sp)
    1de0:	000014b7          	lui	s1,0x1
    1de4:	40048493          	addi	s1,s1,1024 # 1400 <pqcrystals_dilithium3_ref_unpack_sk+0x94>
    1de8:	00812423          	sw	s0,8(sp)
    1dec:	01212023          	sw	s2,0(sp)
    1df0:	00112623          	sw	ra,12(sp)
    1df4:	00050413          	mv	s0,a0
    1df8:	00058913          	mv	s2,a1
    1dfc:	009504b3          	add	s1,a0,s1
  unsigned int i;

  for(i = 0; i < L; ++i)
    if(poly_chknorm(&v->vec[i], bound))
    1e00:	00040513          	mv	a0,s0
    1e04:	00090593          	mv	a1,s2
    1e08:	181000ef          	jal	ra,2788 <pqcrystals_dilithium3_ref_poly_chknorm>
  for(i = 0; i < L; ++i)
    1e0c:	40040413          	addi	s0,s0,1024
    if(poly_chknorm(&v->vec[i], bound))
    1e10:	02051063          	bnez	a0,1e30 <pqcrystals_dilithium3_ref_polyvecl_chknorm+0x58>
  for(i = 0; i < L; ++i)
    1e14:	fe9416e3          	bne	s0,s1,1e00 <pqcrystals_dilithium3_ref_polyvecl_chknorm+0x28>
      return 1;

  return 0;
}
    1e18:	00c12083          	lw	ra,12(sp)
    1e1c:	00812403          	lw	s0,8(sp)
    1e20:	00412483          	lw	s1,4(sp)
    1e24:	00012903          	lw	s2,0(sp)
    1e28:	01010113          	addi	sp,sp,16
    1e2c:	00008067          	ret
    1e30:	00c12083          	lw	ra,12(sp)
    1e34:	00812403          	lw	s0,8(sp)
    1e38:	00412483          	lw	s1,4(sp)
    1e3c:	00012903          	lw	s2,0(sp)
      return 1;
    1e40:	00100513          	li	a0,1
}
    1e44:	01010113          	addi	sp,sp,16
    1e48:	00008067          	ret

00001e4c <pqcrystals_dilithium3_ref_polyveck_uniform_eta>:

/**************************************************************/
/************ Vectors of polynomials of length K **************/
/**************************************************************/

void polyveck_uniform_eta(polyveck *v, const uint8_t seed[CRHBYTES], uint16_t nonce) {
    1e4c:	fe010113          	addi	sp,sp,-32
    1e50:	01212823          	sw	s2,16(sp)
    1e54:	00002937          	lui	s2,0x2
    1e58:	80090913          	addi	s2,s2,-2048 # 1800 <pqcrystals_dilithium3_ref_unpack_sig+0xdc>
    1e5c:	00812c23          	sw	s0,24(sp)
    1e60:	00912a23          	sw	s1,20(sp)
    1e64:	01312623          	sw	s3,12(sp)
    1e68:	00112e23          	sw	ra,28(sp)
    1e6c:	00050493          	mv	s1,a0
    1e70:	00058993          	mv	s3,a1
    1e74:	00060413          	mv	s0,a2
  unsigned int i;

  for(i = 0; i < K; ++i)
    1e78:	01250933          	add	s2,a0,s2
    poly_uniform_eta(&v->vec[i], seed, nonce++);
    1e7c:	00140793          	addi	a5,s0,1
    1e80:	00040613          	mv	a2,s0
    1e84:	00048513          	mv	a0,s1
    1e88:	01079413          	slli	s0,a5,0x10
  for(i = 0; i < K; ++i)
    1e8c:	40048493          	addi	s1,s1,1024
    poly_uniform_eta(&v->vec[i], seed, nonce++);
    1e90:	00098593          	mv	a1,s3
    1e94:	01045413          	srli	s0,s0,0x10
    1e98:	2ed000ef          	jal	ra,2984 <pqcrystals_dilithium3_ref_poly_uniform_eta>
  for(i = 0; i < K; ++i)
    1e9c:	ff2490e3          	bne	s1,s2,1e7c <pqcrystals_dilithium3_ref_polyveck_uniform_eta+0x30>
}
    1ea0:	01c12083          	lw	ra,28(sp)
    1ea4:	01812403          	lw	s0,24(sp)
    1ea8:	01412483          	lw	s1,20(sp)
    1eac:	01012903          	lw	s2,16(sp)
    1eb0:	00c12983          	lw	s3,12(sp)
    1eb4:	02010113          	addi	sp,sp,32
    1eb8:	00008067          	ret

00001ebc <pqcrystals_dilithium3_ref_polyveck_reduce>:
* Description: Reduce coefficients of polynomials in vector of length K
*              to representatives in [-6283009,6283007].
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_reduce(polyveck *v) {
    1ebc:	ff010113          	addi	sp,sp,-16
    1ec0:	00912223          	sw	s1,4(sp)
    1ec4:	000024b7          	lui	s1,0x2
    1ec8:	80048493          	addi	s1,s1,-2048 # 1800 <pqcrystals_dilithium3_ref_unpack_sig+0xdc>
    1ecc:	00812423          	sw	s0,8(sp)
    1ed0:	00112623          	sw	ra,12(sp)
    1ed4:	00050413          	mv	s0,a0
    1ed8:	009504b3          	add	s1,a0,s1
  unsigned int i;

  for(i = 0; i < K; ++i)
    poly_reduce(&v->vec[i]);
    1edc:	00040513          	mv	a0,s0
  for(i = 0; i < K; ++i)
    1ee0:	40040413          	addi	s0,s0,1024
    poly_reduce(&v->vec[i]);
    1ee4:	4f4000ef          	jal	ra,23d8 <pqcrystals_dilithium3_ref_poly_reduce>
  for(i = 0; i < K; ++i)
    1ee8:	fe941ae3          	bne	s0,s1,1edc <pqcrystals_dilithium3_ref_polyveck_reduce+0x20>
}
    1eec:	00c12083          	lw	ra,12(sp)
    1ef0:	00812403          	lw	s0,8(sp)
    1ef4:	00412483          	lw	s1,4(sp)
    1ef8:	01010113          	addi	sp,sp,16
    1efc:	00008067          	ret

00001f00 <pqcrystals_dilithium3_ref_polyveck_caddq>:
* Description: For all coefficients of polynomials in vector of length K
*              add Q if coefficient is negative.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_caddq(polyveck *v) {
    1f00:	ff010113          	addi	sp,sp,-16
    1f04:	00912223          	sw	s1,4(sp)
    1f08:	000024b7          	lui	s1,0x2
    1f0c:	80048493          	addi	s1,s1,-2048 # 1800 <pqcrystals_dilithium3_ref_unpack_sig+0xdc>
    1f10:	00812423          	sw	s0,8(sp)
    1f14:	00112623          	sw	ra,12(sp)
    1f18:	00050413          	mv	s0,a0
    1f1c:	009504b3          	add	s1,a0,s1
  unsigned int i;

  for(i = 0; i < K; ++i)
    poly_caddq(&v->vec[i]);
    1f20:	00040513          	mv	a0,s0
  for(i = 0; i < K; ++i)
    1f24:	40040413          	addi	s0,s0,1024
    poly_caddq(&v->vec[i]);
    1f28:	4f0000ef          	jal	ra,2418 <pqcrystals_dilithium3_ref_poly_caddq>
  for(i = 0; i < K; ++i)
    1f2c:	fe941ae3          	bne	s0,s1,1f20 <pqcrystals_dilithium3_ref_polyveck_caddq+0x20>
}
    1f30:	00c12083          	lw	ra,12(sp)
    1f34:	00812403          	lw	s0,8(sp)
    1f38:	00412483          	lw	s1,4(sp)
    1f3c:	01010113          	addi	sp,sp,16
    1f40:	00008067          	ret

00001f44 <pqcrystals_dilithium3_ref_polyveck_add>:
*
* Arguments:   - polyveck *w: pointer to output vector
*              - const polyveck *u: pointer to first summand
*              - const polyveck *v: pointer to second summand
**************************************************/
void polyveck_add(polyveck *w, const polyveck *u, const polyveck *v) {
    1f44:	fe010113          	addi	sp,sp,-32
    1f48:	00912a23          	sw	s1,20(sp)
  unsigned int i;

  for(i = 0; i < K; ++i)
    1f4c:	000024b7          	lui	s1,0x2
void polyveck_add(polyveck *w, const polyveck *u, const polyveck *v) {
    1f50:	00812c23          	sw	s0,24(sp)
    1f54:	01212823          	sw	s2,16(sp)
    1f58:	01312623          	sw	s3,12(sp)
    1f5c:	01412423          	sw	s4,8(sp)
    1f60:	00112e23          	sw	ra,28(sp)
    1f64:	00050a13          	mv	s4,a0
    1f68:	00058993          	mv	s3,a1
    1f6c:	00060913          	mv	s2,a2
    1f70:	00000413          	li	s0,0
  for(i = 0; i < K; ++i)
    1f74:	80048493          	addi	s1,s1,-2048 # 1800 <pqcrystals_dilithium3_ref_unpack_sig+0xdc>
    poly_add(&w->vec[i], &u->vec[i], &v->vec[i]);
    1f78:	00890633          	add	a2,s2,s0
    1f7c:	008985b3          	add	a1,s3,s0
    1f80:	008a0533          	add	a0,s4,s0
  for(i = 0; i < K; ++i)
    1f84:	40040413          	addi	s0,s0,1024
    poly_add(&w->vec[i], &u->vec[i], &v->vec[i]);
    1f88:	4d0000ef          	jal	ra,2458 <pqcrystals_dilithium3_ref_poly_add>
  for(i = 0; i < K; ++i)
    1f8c:	fe9416e3          	bne	s0,s1,1f78 <pqcrystals_dilithium3_ref_polyveck_add+0x34>
}
    1f90:	01c12083          	lw	ra,28(sp)
    1f94:	01812403          	lw	s0,24(sp)
    1f98:	01412483          	lw	s1,20(sp)
    1f9c:	01012903          	lw	s2,16(sp)
    1fa0:	00c12983          	lw	s3,12(sp)
    1fa4:	00812a03          	lw	s4,8(sp)
    1fa8:	02010113          	addi	sp,sp,32
    1fac:	00008067          	ret

00001fb0 <pqcrystals_dilithium3_ref_polyveck_sub>:
* Arguments:   - polyveck *w: pointer to output vector
*              - const polyveck *u: pointer to first input vector
*              - const polyveck *v: pointer to second input vector to be
*                                   subtracted from first input vector
**************************************************/
void polyveck_sub(polyveck *w, const polyveck *u, const polyveck *v) {
    1fb0:	fe010113          	addi	sp,sp,-32
    1fb4:	00912a23          	sw	s1,20(sp)
  unsigned int i;

  for(i = 0; i < K; ++i)
    1fb8:	000024b7          	lui	s1,0x2
void polyveck_sub(polyveck *w, const polyveck *u, const polyveck *v) {
    1fbc:	00812c23          	sw	s0,24(sp)
    1fc0:	01212823          	sw	s2,16(sp)
    1fc4:	01312623          	sw	s3,12(sp)
    1fc8:	01412423          	sw	s4,8(sp)
    1fcc:	00112e23          	sw	ra,28(sp)
    1fd0:	00050a13          	mv	s4,a0
    1fd4:	00058993          	mv	s3,a1
    1fd8:	00060913          	mv	s2,a2
    1fdc:	00000413          	li	s0,0
  for(i = 0; i < K; ++i)
    1fe0:	80048493          	addi	s1,s1,-2048 # 1800 <pqcrystals_dilithium3_ref_unpack_sig+0xdc>
    poly_sub(&w->vec[i], &u->vec[i], &v->vec[i]);
    1fe4:	00890633          	add	a2,s2,s0
    1fe8:	008985b3          	add	a1,s3,s0
    1fec:	008a0533          	add	a0,s4,s0
  for(i = 0; i < K; ++i)
    1ff0:	40040413          	addi	s0,s0,1024
    poly_sub(&w->vec[i], &u->vec[i], &v->vec[i]);
    1ff4:	4bc000ef          	jal	ra,24b0 <pqcrystals_dilithium3_ref_poly_sub>
  for(i = 0; i < K; ++i)
    1ff8:	fe9416e3          	bne	s0,s1,1fe4 <pqcrystals_dilithium3_ref_polyveck_sub+0x34>
}
    1ffc:	01c12083          	lw	ra,28(sp)
    2000:	01812403          	lw	s0,24(sp)
    2004:	01412483          	lw	s1,20(sp)
    2008:	01012903          	lw	s2,16(sp)
    200c:	00c12983          	lw	s3,12(sp)
    2010:	00812a03          	lw	s4,8(sp)
    2014:	02010113          	addi	sp,sp,32
    2018:	00008067          	ret

0000201c <pqcrystals_dilithium3_ref_polyveck_shiftl>:
* Description: Multiply vector of polynomials of Length K by 2^D without modular
*              reduction. Assumes input coefficients to be less than 2^{31-D}.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_shiftl(polyveck *v) {
    201c:	ff010113          	addi	sp,sp,-16
    2020:	00912223          	sw	s1,4(sp)
    2024:	000024b7          	lui	s1,0x2
    2028:	80048493          	addi	s1,s1,-2048 # 1800 <pqcrystals_dilithium3_ref_unpack_sig+0xdc>
    202c:	00812423          	sw	s0,8(sp)
    2030:	00112623          	sw	ra,12(sp)
    2034:	00050413          	mv	s0,a0
    2038:	009504b3          	add	s1,a0,s1
  unsigned int i;

  for(i = 0; i < K; ++i)
    poly_shiftl(&v->vec[i]);
    203c:	00040513          	mv	a0,s0
  for(i = 0; i < K; ++i)
    2040:	40040413          	addi	s0,s0,1024
    poly_shiftl(&v->vec[i]);
    2044:	4c8000ef          	jal	ra,250c <pqcrystals_dilithium3_ref_poly_shiftl>
  for(i = 0; i < K; ++i)
    2048:	fe941ae3          	bne	s0,s1,203c <pqcrystals_dilithium3_ref_polyveck_shiftl+0x20>
}
    204c:	00c12083          	lw	ra,12(sp)
    2050:	00812403          	lw	s0,8(sp)
    2054:	00412483          	lw	s1,4(sp)
    2058:	01010113          	addi	sp,sp,16
    205c:	00008067          	ret

00002060 <pqcrystals_dilithium3_ref_polyveck_ntt>:
* Description: Forward NTT of all polynomials in vector of length K. Output
*              coefficients can be up to 16*Q larger than input coefficients.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_ntt(polyveck *v) {
    2060:	ff010113          	addi	sp,sp,-16
    2064:	00912223          	sw	s1,4(sp)
    2068:	000024b7          	lui	s1,0x2
    206c:	80048493          	addi	s1,s1,-2048 # 1800 <pqcrystals_dilithium3_ref_unpack_sig+0xdc>
    2070:	00812423          	sw	s0,8(sp)
    2074:	00112623          	sw	ra,12(sp)
    2078:	00050413          	mv	s0,a0
    207c:	009504b3          	add	s1,a0,s1
  unsigned int i;

  for(i = 0; i < K; ++i)
    poly_ntt(&v->vec[i]);
    2080:	00040513          	mv	a0,s0
  for(i = 0; i < K; ++i)
    2084:	40040413          	addi	s0,s0,1024
    poly_ntt(&v->vec[i]);
    2088:	4a0000ef          	jal	ra,2528 <pqcrystals_dilithium3_ref_poly_ntt>
  for(i = 0; i < K; ++i)
    208c:	fe941ae3          	bne	s0,s1,2080 <pqcrystals_dilithium3_ref_polyveck_ntt+0x20>
}
    2090:	00c12083          	lw	ra,12(sp)
    2094:	00812403          	lw	s0,8(sp)
    2098:	00412483          	lw	s1,4(sp)
    209c:	01010113          	addi	sp,sp,16
    20a0:	00008067          	ret

000020a4 <pqcrystals_dilithium3_ref_polyveck_invntt_tomont>:
*              in vector of length K. Input coefficients need to be less
*              than 2*Q.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_invntt_tomont(polyveck *v) {
    20a4:	ff010113          	addi	sp,sp,-16
    20a8:	00912223          	sw	s1,4(sp)
    20ac:	000024b7          	lui	s1,0x2
    20b0:	80048493          	addi	s1,s1,-2048 # 1800 <pqcrystals_dilithium3_ref_unpack_sig+0xdc>
    20b4:	00812423          	sw	s0,8(sp)
    20b8:	00112623          	sw	ra,12(sp)
    20bc:	00050413          	mv	s0,a0
    20c0:	009504b3          	add	s1,a0,s1
  unsigned int i;

  for(i = 0; i < K; ++i)
    poly_invntt_tomont(&v->vec[i]);
    20c4:	00040513          	mv	a0,s0
  for(i = 0; i < K; ++i)
    20c8:	40040413          	addi	s0,s0,1024
    poly_invntt_tomont(&v->vec[i]);
    20cc:	460000ef          	jal	ra,252c <pqcrystals_dilithium3_ref_poly_invntt_tomont>
  for(i = 0; i < K; ++i)
    20d0:	fe941ae3          	bne	s0,s1,20c4 <pqcrystals_dilithium3_ref_polyveck_invntt_tomont+0x20>
}
    20d4:	00c12083          	lw	ra,12(sp)
    20d8:	00812403          	lw	s0,8(sp)
    20dc:	00412483          	lw	s1,4(sp)
    20e0:	01010113          	addi	sp,sp,16
    20e4:	00008067          	ret

000020e8 <pqcrystals_dilithium3_ref_polyveck_pointwise_poly_montgomery>:
void polyveck_pointwise_poly_montgomery(polyveck *r, const poly *a, const polyveck *v) {
#ifdef FPAU
  unsigned int i, j;
  int32_t u_coeff, v_coeff;

  for(i = 0; i < K; ++i)
    20e8:	00002e37          	lui	t3,0x2
    20ec:	800e0e13          	addi	t3,t3,-2048 # 1800 <pqcrystals_dilithium3_ref_unpack_sig+0xdc>
    20f0:	00050313          	mv	t1,a0
void polyveck_pointwise_poly_montgomery(polyveck *r, const poly *a, const polyveck *v) {
    20f4:	00058e93          	mv	t4,a1
    20f8:	00060893          	mv	a7,a2
    20fc:	01c60e33          	add	t3,a2,t3
    2100:	40058813          	addi	a6,a1,1024
#ifndef STEEL
      asm volatile("nop");  //ORCA
      asm volatile("nop");  //ORCA
      asm volatile ("nop"); //ORCA
#endif
      asm volatile("fpau.dil.mac %0, %1, %2\n": : "r"(u_coeff), "r"(v_coeff),"r"(0): ); // syntax with no outputs to avoid compiler optimization (no loading u_coeff)
    2104:	00000513          	li	a0,0
    for(j = 0; j < N; ++j)
    2108:	000e8793          	mv	a5,t4
void polyveck_pointwise_poly_montgomery(polyveck *r, const poly *a, const polyveck *v) {
    210c:	00030693          	mv	a3,t1
    2110:	00088713          	mv	a4,a7
      u_coeff = a->coeffs[j];
    2114:	0007a603          	lw	a2,0(a5)
      v_coeff = v->vec[i].coeffs[j];
    2118:	00072583          	lw	a1,0(a4)
      asm volatile("nop");  //ORCA
    211c:	00000013          	nop
      asm volatile("nop");  //ORCA
    2120:	00000013          	nop
      asm volatile ("nop"); //ORCA
    2124:	00000013          	nop
      asm volatile("fpau.dil.mac %0, %1, %2\n": : "r"(u_coeff), "r"(v_coeff),"r"(0): ); // syntax with no outputs to avoid compiler optimization (no loading u_coeff)
    2128:	50a5a633          	fpau.dil.mac	a2,a1,a0

      // store result
      r->vec[i].coeffs[j] = u_coeff;
    212c:	00c6a023          	sw	a2,0(a3)
    for(j = 0; j < N; ++j)
    2130:	00478793          	addi	a5,a5,4
    2134:	00470713          	addi	a4,a4,4
    2138:	00468693          	addi	a3,a3,4
    213c:	fd079ce3          	bne	a5,a6,2114 <pqcrystals_dilithium3_ref_polyveck_pointwise_poly_montgomery+0x2c>
  for(i = 0; i < K; ++i)
    2140:	40088893          	addi	a7,a7,1024
    2144:	40030313          	addi	t1,t1,1024
    2148:	fdc890e3          	bne	a7,t3,2108 <pqcrystals_dilithium3_ref_polyveck_pointwise_poly_montgomery+0x20>
  unsigned int i;

  for(i = 0; i < K; ++i)
    poly_pointwise_montgomery(&r->vec[i], a, &v->vec[i]);
#endif
}
    214c:	00008067          	ret

00002150 <pqcrystals_dilithium3_ref_polyveck_chknorm>:
*              - int32_t B: norm bound
*
* Returns 0 if norm of all polynomials are strictly smaller than B <= (Q-1)/8
* and 1 otherwise.
**************************************************/
int polyveck_chknorm(const polyveck *v, int32_t bound) {
    2150:	ff010113          	addi	sp,sp,-16
    2154:	00912223          	sw	s1,4(sp)
    2158:	000024b7          	lui	s1,0x2
    215c:	80048493          	addi	s1,s1,-2048 # 1800 <pqcrystals_dilithium3_ref_unpack_sig+0xdc>
    2160:	00812423          	sw	s0,8(sp)
    2164:	01212023          	sw	s2,0(sp)
    2168:	00112623          	sw	ra,12(sp)
    216c:	00050413          	mv	s0,a0
    2170:	00058913          	mv	s2,a1
    2174:	009504b3          	add	s1,a0,s1
  unsigned int i;

  for(i = 0; i < K; ++i)
    if(poly_chknorm(&v->vec[i], bound))
    2178:	00040513          	mv	a0,s0
    217c:	00090593          	mv	a1,s2
    2180:	608000ef          	jal	ra,2788 <pqcrystals_dilithium3_ref_poly_chknorm>
  for(i = 0; i < K; ++i)
    2184:	40040413          	addi	s0,s0,1024
    if(poly_chknorm(&v->vec[i], bound))
    2188:	02051063          	bnez	a0,21a8 <pqcrystals_dilithium3_ref_polyveck_chknorm+0x58>
  for(i = 0; i < K; ++i)
    218c:	fe9416e3          	bne	s0,s1,2178 <pqcrystals_dilithium3_ref_polyveck_chknorm+0x28>
      return 1;

  return 0;
}
    2190:	00c12083          	lw	ra,12(sp)
    2194:	00812403          	lw	s0,8(sp)
    2198:	00412483          	lw	s1,4(sp)
    219c:	00012903          	lw	s2,0(sp)
    21a0:	01010113          	addi	sp,sp,16
    21a4:	00008067          	ret
    21a8:	00c12083          	lw	ra,12(sp)
    21ac:	00812403          	lw	s0,8(sp)
    21b0:	00412483          	lw	s1,4(sp)
    21b4:	00012903          	lw	s2,0(sp)
      return 1;
    21b8:	00100513          	li	a0,1
}
    21bc:	01010113          	addi	sp,sp,16
    21c0:	00008067          	ret

000021c4 <pqcrystals_dilithium3_ref_polyveck_power2round>:
*                              coefficients a1
*              - polyveck *v0: pointer to output vector of polynomials with
*                              coefficients a0
*              - const polyveck *v: pointer to input vector
**************************************************/
void polyveck_power2round(polyveck *v1, polyveck *v0, const polyveck *v) {
    21c4:	fe010113          	addi	sp,sp,-32
    21c8:	00912a23          	sw	s1,20(sp)
  unsigned int i;

  for(i = 0; i < K; ++i)
    21cc:	000024b7          	lui	s1,0x2
void polyveck_power2round(polyveck *v1, polyveck *v0, const polyveck *v) {
    21d0:	00812c23          	sw	s0,24(sp)
    21d4:	01212823          	sw	s2,16(sp)
    21d8:	01312623          	sw	s3,12(sp)
    21dc:	01412423          	sw	s4,8(sp)
    21e0:	00112e23          	sw	ra,28(sp)
    21e4:	00050a13          	mv	s4,a0
    21e8:	00058993          	mv	s3,a1
    21ec:	00060913          	mv	s2,a2
    21f0:	00000413          	li	s0,0
  for(i = 0; i < K; ++i)
    21f4:	80048493          	addi	s1,s1,-2048 # 1800 <pqcrystals_dilithium3_ref_unpack_sig+0xdc>
    poly_power2round(&v1->vec[i], &v0->vec[i], &v->vec[i]);
    21f8:	00890633          	add	a2,s2,s0
    21fc:	008985b3          	add	a1,s3,s0
    2200:	008a0533          	add	a0,s4,s0
  for(i = 0; i < K; ++i)
    2204:	40040413          	addi	s0,s0,1024
    poly_power2round(&v1->vec[i], &v0->vec[i], &v->vec[i]);
    2208:	3a4000ef          	jal	ra,25ac <pqcrystals_dilithium3_ref_poly_power2round>
  for(i = 0; i < K; ++i)
    220c:	fe9416e3          	bne	s0,s1,21f8 <pqcrystals_dilithium3_ref_polyveck_power2round+0x34>
}
    2210:	01c12083          	lw	ra,28(sp)
    2214:	01812403          	lw	s0,24(sp)
    2218:	01412483          	lw	s1,20(sp)
    221c:	01012903          	lw	s2,16(sp)
    2220:	00c12983          	lw	s3,12(sp)
    2224:	00812a03          	lw	s4,8(sp)
    2228:	02010113          	addi	sp,sp,32
    222c:	00008067          	ret

00002230 <pqcrystals_dilithium3_ref_polyveck_decompose>:
*                              coefficients a1
*              - polyveck *v0: pointer to output vector of polynomials with
*                              coefficients a0
*              - const polyveck *v: pointer to input vector
**************************************************/
void polyveck_decompose(polyveck *v1, polyveck *v0, const polyveck *v) {
    2230:	fe010113          	addi	sp,sp,-32
    2234:	00912a23          	sw	s1,20(sp)
  unsigned int i;

  for(i = 0; i < K; ++i)
    2238:	000024b7          	lui	s1,0x2
void polyveck_decompose(polyveck *v1, polyveck *v0, const polyveck *v) {
    223c:	00812c23          	sw	s0,24(sp)
    2240:	01212823          	sw	s2,16(sp)
    2244:	01312623          	sw	s3,12(sp)
    2248:	01412423          	sw	s4,8(sp)
    224c:	00112e23          	sw	ra,28(sp)
    2250:	00050a13          	mv	s4,a0
    2254:	00058993          	mv	s3,a1
    2258:	00060913          	mv	s2,a2
    225c:	00000413          	li	s0,0
  for(i = 0; i < K; ++i)
    2260:	80048493          	addi	s1,s1,-2048 # 1800 <pqcrystals_dilithium3_ref_unpack_sig+0xdc>
    poly_decompose(&v1->vec[i], &v0->vec[i], &v->vec[i]);
    2264:	00890633          	add	a2,s2,s0
    2268:	008985b3          	add	a1,s3,s0
    226c:	008a0533          	add	a0,s4,s0
  for(i = 0; i < K; ++i)
    2270:	40040413          	addi	s0,s0,1024
    poly_decompose(&v1->vec[i], &v0->vec[i], &v->vec[i]);
    2274:	3a8000ef          	jal	ra,261c <pqcrystals_dilithium3_ref_poly_decompose>
  for(i = 0; i < K; ++i)
    2278:	fe9416e3          	bne	s0,s1,2264 <pqcrystals_dilithium3_ref_polyveck_decompose+0x34>
}
    227c:	01c12083          	lw	ra,28(sp)
    2280:	01812403          	lw	s0,24(sp)
    2284:	01412483          	lw	s1,20(sp)
    2288:	01012903          	lw	s2,16(sp)
    228c:	00c12983          	lw	s3,12(sp)
    2290:	00812a03          	lw	s4,8(sp)
    2294:	02010113          	addi	sp,sp,32
    2298:	00008067          	ret

0000229c <pqcrystals_dilithium3_ref_polyveck_make_hint>:
* Returns number of 1 bits.
**************************************************/
unsigned int polyveck_make_hint(polyveck *h,
                                const polyveck *v0,
                                const polyveck *v1)
{
    229c:	fe010113          	addi	sp,sp,-32
    22a0:	01212823          	sw	s2,16(sp)
  unsigned int i, s = 0;

  for(i = 0; i < K; ++i)
    22a4:	00002937          	lui	s2,0x2
{
    22a8:	00812c23          	sw	s0,24(sp)
    22ac:	00912a23          	sw	s1,20(sp)
    22b0:	01312623          	sw	s3,12(sp)
    22b4:	01412423          	sw	s4,8(sp)
    22b8:	01512223          	sw	s5,4(sp)
    22bc:	00112e23          	sw	ra,28(sp)
    22c0:	00050a93          	mv	s5,a0
    22c4:	00058a13          	mv	s4,a1
    22c8:	00060993          	mv	s3,a2
    22cc:	00000413          	li	s0,0
  unsigned int i, s = 0;
    22d0:	00000493          	li	s1,0
  for(i = 0; i < K; ++i)
    22d4:	80090913          	addi	s2,s2,-2048 # 1800 <pqcrystals_dilithium3_ref_unpack_sig+0xdc>
    s += poly_make_hint(&h->vec[i], &v0->vec[i], &v1->vec[i]);
    22d8:	00898633          	add	a2,s3,s0
    22dc:	008a05b3          	add	a1,s4,s0
    22e0:	008a8533          	add	a0,s5,s0
    22e4:	3a8000ef          	jal	ra,268c <pqcrystals_dilithium3_ref_poly_make_hint>
  for(i = 0; i < K; ++i)
    22e8:	40040413          	addi	s0,s0,1024
    s += poly_make_hint(&h->vec[i], &v0->vec[i], &v1->vec[i]);
    22ec:	00a484b3          	add	s1,s1,a0
  for(i = 0; i < K; ++i)
    22f0:	ff2414e3          	bne	s0,s2,22d8 <pqcrystals_dilithium3_ref_polyveck_make_hint+0x3c>

  return s;
}
    22f4:	01c12083          	lw	ra,28(sp)
    22f8:	01812403          	lw	s0,24(sp)
    22fc:	01012903          	lw	s2,16(sp)
    2300:	00c12983          	lw	s3,12(sp)
    2304:	00812a03          	lw	s4,8(sp)
    2308:	00412a83          	lw	s5,4(sp)
    230c:	00048513          	mv	a0,s1
    2310:	01412483          	lw	s1,20(sp)
    2314:	02010113          	addi	sp,sp,32
    2318:	00008067          	ret

0000231c <pqcrystals_dilithium3_ref_polyveck_use_hint>:
* Arguments:   - polyveck *w: pointer to output vector of polynomials with
*                             corrected high bits
*              - const polyveck *u: pointer to input vector
*              - const polyveck *h: pointer to input hint vector
**************************************************/
void polyveck_use_hint(polyveck *w, const polyveck *u, const polyveck *h) {
    231c:	fe010113          	addi	sp,sp,-32
    2320:	00912a23          	sw	s1,20(sp)
  unsigned int i;

  for(i = 0; i < K; ++i)
    2324:	000024b7          	lui	s1,0x2
void polyveck_use_hint(polyveck *w, const polyveck *u, const polyveck *h) {
    2328:	00812c23          	sw	s0,24(sp)
    232c:	01212823          	sw	s2,16(sp)
    2330:	01312623          	sw	s3,12(sp)
    2334:	01412423          	sw	s4,8(sp)
    2338:	00112e23          	sw	ra,28(sp)
    233c:	00050a13          	mv	s4,a0
    2340:	00058993          	mv	s3,a1
    2344:	00060913          	mv	s2,a2
    2348:	00000413          	li	s0,0
  for(i = 0; i < K; ++i)
    234c:	80048493          	addi	s1,s1,-2048 # 1800 <pqcrystals_dilithium3_ref_unpack_sig+0xdc>
    poly_use_hint(&w->vec[i], &u->vec[i], &h->vec[i]);
    2350:	00890633          	add	a2,s2,s0
    2354:	008985b3          	add	a1,s3,s0
    2358:	008a0533          	add	a0,s4,s0
  for(i = 0; i < K; ++i)
    235c:	40040413          	addi	s0,s0,1024
    poly_use_hint(&w->vec[i], &u->vec[i], &h->vec[i]);
    2360:	3b4000ef          	jal	ra,2714 <pqcrystals_dilithium3_ref_poly_use_hint>
  for(i = 0; i < K; ++i)
    2364:	fe9416e3          	bne	s0,s1,2350 <pqcrystals_dilithium3_ref_polyveck_use_hint+0x34>
}
    2368:	01c12083          	lw	ra,28(sp)
    236c:	01812403          	lw	s0,24(sp)
    2370:	01412483          	lw	s1,20(sp)
    2374:	01012903          	lw	s2,16(sp)
    2378:	00c12983          	lw	s3,12(sp)
    237c:	00812a03          	lw	s4,8(sp)
    2380:	02010113          	addi	sp,sp,32
    2384:	00008067          	ret

00002388 <pqcrystals_dilithium3_ref_polyveck_pack_w1>:

void polyveck_pack_w1(uint8_t r[K*POLYW1_PACKEDBYTES], const polyveck *w1) {
    2388:	ff010113          	addi	sp,sp,-16
    238c:	00812423          	sw	s0,8(sp)
    2390:	00912223          	sw	s1,4(sp)
    2394:	01212023          	sw	s2,0(sp)
    2398:	00112623          	sw	ra,12(sp)
    239c:	00050413          	mv	s0,a0
    23a0:	00058493          	mv	s1,a1
    23a4:	30050913          	addi	s2,a0,768
  unsigned int i;

  for(i = 0; i < K; ++i)
    polyw1_pack(&r[i*POLYW1_PACKEDBYTES], &w1->vec[i]);
    23a8:	00048593          	mv	a1,s1
    23ac:	00040513          	mv	a0,s0
  for(i = 0; i < K; ++i)
    23b0:	08040413          	addi	s0,s0,128
    polyw1_pack(&r[i*POLYW1_PACKEDBYTES], &w1->vec[i]);
    23b4:	5f9000ef          	jal	ra,31ac <pqcrystals_dilithium3_ref_polyw1_pack>
  for(i = 0; i < K; ++i)
    23b8:	40048493          	addi	s1,s1,1024
    23bc:	ff2416e3          	bne	s0,s2,23a8 <pqcrystals_dilithium3_ref_polyveck_pack_w1+0x20>
}
    23c0:	00c12083          	lw	ra,12(sp)
    23c4:	00812403          	lw	s0,8(sp)
    23c8:	00412483          	lw	s1,4(sp)
    23cc:	00012903          	lw	s2,0(sp)
    23d0:	01010113          	addi	sp,sp,16
    23d4:	00008067          	ret

000023d8 <pqcrystals_dilithium3_ref_poly_reduce>:
* Description: Inplace reduction of all coefficients of polynomial to
*              representative in [-6283009,6283007].
*
* Arguments:   - poly *a: pointer to input/output polynomial
**************************************************/
void poly_reduce(poly *a) {
    23d8:	ff010113          	addi	sp,sp,-16
    23dc:	00812423          	sw	s0,8(sp)
    23e0:	00912223          	sw	s1,4(sp)
    23e4:	00112623          	sw	ra,12(sp)
    23e8:	00050413          	mv	s0,a0
    23ec:	40050493          	addi	s1,a0,1024
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N; ++i)
    a->coeffs[i] = reduce32(a->coeffs[i]);
    23f0:	00042503          	lw	a0,0(s0)
  for(i = 0; i < N; ++i)
    23f4:	00440413          	addi	s0,s0,4
    a->coeffs[i] = reduce32(a->coeffs[i]);
    23f8:	02c010ef          	jal	ra,3424 <pqcrystals_dilithium3_ref_reduce32>
    23fc:	fea42e23          	sw	a0,-4(s0)
  for(i = 0; i < N; ++i)
    2400:	fe9418e3          	bne	s0,s1,23f0 <pqcrystals_dilithium3_ref_poly_reduce+0x18>

  DBENCH_STOP(*tred);
}
    2404:	00c12083          	lw	ra,12(sp)
    2408:	00812403          	lw	s0,8(sp)
    240c:	00412483          	lw	s1,4(sp)
    2410:	01010113          	addi	sp,sp,16
    2414:	00008067          	ret

00002418 <pqcrystals_dilithium3_ref_poly_caddq>:
* Description: For all coefficients of in/out polynomial add Q if
*              coefficient is negative.
*
* Arguments:   - poly *a: pointer to input/output polynomial
**************************************************/
void poly_caddq(poly *a) {
    2418:	ff010113          	addi	sp,sp,-16
    241c:	00812423          	sw	s0,8(sp)
    2420:	00912223          	sw	s1,4(sp)
    2424:	00112623          	sw	ra,12(sp)
    2428:	00050413          	mv	s0,a0
    242c:	40050493          	addi	s1,a0,1024
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N; ++i)
    a->coeffs[i] = caddq(a->coeffs[i]);
    2430:	00042503          	lw	a0,0(s0)
  for(i = 0; i < N; ++i)
    2434:	00440413          	addi	s0,s0,4
    a->coeffs[i] = caddq(a->coeffs[i]);
    2438:	00c010ef          	jal	ra,3444 <pqcrystals_dilithium3_ref_caddq>
    243c:	fea42e23          	sw	a0,-4(s0)
  for(i = 0; i < N; ++i)
    2440:	fe9418e3          	bne	s0,s1,2430 <pqcrystals_dilithium3_ref_poly_caddq+0x18>

  DBENCH_STOP(*tred);
}
    2444:	00c12083          	lw	ra,12(sp)
    2448:	00812403          	lw	s0,8(sp)
    244c:	00412483          	lw	s1,4(sp)
    2450:	01010113          	addi	sp,sp,16
    2454:	00008067          	ret

00002458 <pqcrystals_dilithium3_ref_poly_add>:
*
* Arguments:   - poly *c: pointer to output polynomial
*              - const poly *a: pointer to first summand
*              - const poly *b: pointer to second summand
**************************************************/
void poly_add(poly *c, const poly *a, const poly *b)  {
    2458:	ff010113          	addi	sp,sp,-16
    245c:	01612623          	sw	s6,12(sp)
    2460:	01712423          	sw	s7,8(sp)
    2464:	00000793          	li	a5,0
#ifndef STEEL
    asm volatile("nop"); // ORCA
    asm volatile("nop"); // ORCA
    asm volatile("nop"); // ORCA
#endif
    asm volatile("fpau.dil.bf %0, %1, %2\n": : "r"(coeff0), "r"(coeff1),"r"(1): );  // use of bf to not overwrite "1" constant (output1 = coeff0 + coeff1*1)
    2468:	00100893          	li	a7,1
  for(i = 0; i < N; ++i){
    246c:	40000813          	li	a6,1024
    coeff0 = a->coeffs[i];
    2470:	00f586b3          	add	a3,a1,a5
    coeff1 = b->coeffs[i];
    2474:	00f60733          	add	a4,a2,a5
    coeff0 = a->coeffs[i];
    2478:	0006ab03          	lw	s6,0(a3)
    coeff1 = b->coeffs[i];
    247c:	00072b83          	lw	s7,0(a4)
    asm volatile("nop"); // ORCA
    2480:	00000013          	nop
    asm volatile("nop"); // ORCA
    2484:	00000013          	nop
    asm volatile("nop"); // ORCA
    2488:	00000013          	nop
    asm volatile("fpau.dil.bf %0, %1, %2\n": : "r"(coeff0), "r"(coeff1),"r"(1): );  // use of bf to not overwrite "1" constant (output1 = coeff0 + coeff1*1)
    248c:	611bab33          	fpau.dil.bf	s6,s7,a7
    
    c->coeffs[i] = coeff0;
    2490:	00f50733          	add	a4,a0,a5
    2494:	01672023          	sw	s6,0(a4)
  for(i = 0; i < N; ++i){
    2498:	00478793          	addi	a5,a5,4
    249c:	fd079ae3          	bne	a5,a6,2470 <pqcrystals_dilithium3_ref_poly_add+0x18>
    c->coeffs[i] = a->coeffs[i] + b->coeffs[i];
#endif
  }

  DBENCH_STOP(*tadd);
}
    24a0:	00c12b03          	lw	s6,12(sp)
    24a4:	00812b83          	lw	s7,8(sp)
    24a8:	01010113          	addi	sp,sp,16
    24ac:	00008067          	ret

000024b0 <pqcrystals_dilithium3_ref_poly_sub>:
* Arguments:   - poly *c: pointer to output polynomial
*              - const poly *a: pointer to first input polynomial
*              - const poly *b: pointer to second input polynomial to be
*                               subtraced from first input polynomial
**************************************************/
void poly_sub(poly *c, const poly *a, const poly *b) {
    24b0:	ff010113          	addi	sp,sp,-16
    24b4:	01612623          	sw	s6,12(sp)
    24b8:	01712423          	sw	s7,8(sp)
    24bc:	00000793          	li	a5,0
#ifndef STEEL
    asm volatile("nop"); // ORCA
    asm volatile("nop"); // ORCA
    asm volatile("nop"); // ORCA
#endif
    asm volatile("fpau.dil.bf %0, %1, %2\n": : "r"(coeff0), "r"(coeff1),"r"(1): );  // use of bf to not overwrite "1" constant (output2 = coeff0 - coeff1*1)
    24c0:	00100893          	li	a7,1
  for(i = 0; i < N; ++i){
    24c4:	40000813          	li	a6,1024
    coeff0 = a->coeffs[i];
    24c8:	00f586b3          	add	a3,a1,a5
    coeff1 = b->coeffs[i];
    24cc:	00f60733          	add	a4,a2,a5
    coeff0 = a->coeffs[i];
    24d0:	0006ab03          	lw	s6,0(a3)
    coeff1 = b->coeffs[i];
    24d4:	00072b83          	lw	s7,0(a4)
    asm volatile("nop"); // ORCA
    24d8:	00000013          	nop
    asm volatile("nop"); // ORCA
    24dc:	00000013          	nop
    asm volatile("nop"); // ORCA
    24e0:	00000013          	nop
    asm volatile("fpau.dil.bf %0, %1, %2\n": : "r"(coeff0), "r"(coeff1),"r"(1): );  // use of bf to not overwrite "1" constant (output2 = coeff0 - coeff1*1)
    24e4:	611bab33          	fpau.dil.bf	s6,s7,a7

    asm volatile("nop"); // ORCA and STEEL (2nd output written in next cycle)
    24e8:	00000013          	nop

    c->coeffs[i] = coeff1;
    24ec:	00f50733          	add	a4,a0,a5
    24f0:	01772023          	sw	s7,0(a4)
  for(i = 0; i < N; ++i){
    24f4:	00478793          	addi	a5,a5,4
    24f8:	fd0798e3          	bne	a5,a6,24c8 <pqcrystals_dilithium3_ref_poly_sub+0x18>
    c->coeffs[i] = a->coeffs[i] - b->coeffs[i];
#endif
  }

  DBENCH_STOP(*tadd);
}
    24fc:	00c12b03          	lw	s6,12(sp)
    2500:	00812b83          	lw	s7,8(sp)
    2504:	01010113          	addi	sp,sp,16
    2508:	00008067          	ret

0000250c <pqcrystals_dilithium3_ref_poly_shiftl>:
**************************************************/
void poly_shiftl(poly *a) {
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N; ++i)
    250c:	40050713          	addi	a4,a0,1024
    a->coeffs[i] <<= D;
    2510:	00052783          	lw	a5,0(a0)
  for(i = 0; i < N; ++i)
    2514:	00450513          	addi	a0,a0,4
    a->coeffs[i] <<= D;
    2518:	00d79793          	slli	a5,a5,0xd
    251c:	fef52e23          	sw	a5,-4(a0)
  for(i = 0; i < N; ++i)
    2520:	fee518e3          	bne	a0,a4,2510 <pqcrystals_dilithium3_ref_poly_shiftl+0x4>

  DBENCH_STOP(*tmul);
}
    2524:	00008067          	ret

00002528 <pqcrystals_dilithium3_ref_poly_ntt>:
  uart_send_string("\n\rNTT:");

  asm("csrrs s2, "TICKS_REGISTER", zero");
  #endif

  ntt(a->coeffs);
    2528:	4ad0006f          	j	31d4 <pqcrystals_dilithium3_ref_ntt>

0000252c <pqcrystals_dilithium3_ref_poly_invntt_tomont>:
  uart_send_string("\n\rInverse NTT:");

  asm("csrrs s2, "TICKS_REGISTER", zero");
  #endif

  invntt_tomont(a->coeffs);
    252c:	5790006f          	j	32a4 <pqcrystals_dilithium3_ref_invntt_tomont>

00002530 <pqcrystals_dilithium3_ref_poly_pointwise_montgomery>:
*
* Arguments:   - poly *c: pointer to output polynomial
*              - const poly *a: pointer to first input polynomial
*              - const poly *b: pointer to second input polynomial
**************************************************/
void poly_pointwise_montgomery(poly *c, const poly *a, const poly *b) {
    2530:	fe010113          	addi	sp,sp,-32
    2534:	00812c23          	sw	s0,24(sp)
    2538:	00912a23          	sw	s1,20(sp)
    253c:	01212823          	sw	s2,16(sp)
    2540:	01312623          	sw	s3,12(sp)
    2544:	01412423          	sw	s4,8(sp)
    2548:	00112e23          	sw	ra,28(sp)
    254c:	00050993          	mv	s3,a0
    2550:	00058913          	mv	s2,a1
    2554:	00060493          	mv	s1,a2
    2558:	00000413          	li	s0,0
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N; ++i)
    255c:	40000a13          	li	s4,1024
    c->coeffs[i] = montgomery_reduce((int64_t)a->coeffs[i] * b->coeffs[i]);
    2560:	00890733          	add	a4,s2,s0
    2564:	008487b3          	add	a5,s1,s0
    2568:	0007a783          	lw	a5,0(a5)
    256c:	00072503          	lw	a0,0(a4)
    2570:	02f515b3          	mulh	a1,a0,a5
    2574:	02f50533          	mul	a0,a0,a5
    2578:	649000ef          	jal	ra,33c0 <pqcrystals_dilithium3_ref_montgomery_reduce>
    257c:	008987b3          	add	a5,s3,s0
    2580:	00a7a023          	sw	a0,0(a5)
  for(i = 0; i < N; ++i)
    2584:	00440413          	addi	s0,s0,4
    2588:	fd441ce3          	bne	s0,s4,2560 <pqcrystals_dilithium3_ref_poly_pointwise_montgomery+0x30>

  DBENCH_STOP(*tmul);
}
    258c:	01c12083          	lw	ra,28(sp)
    2590:	01812403          	lw	s0,24(sp)
    2594:	01412483          	lw	s1,20(sp)
    2598:	01012903          	lw	s2,16(sp)
    259c:	00c12983          	lw	s3,12(sp)
    25a0:	00812a03          	lw	s4,8(sp)
    25a4:	02010113          	addi	sp,sp,32
    25a8:	00008067          	ret

000025ac <pqcrystals_dilithium3_ref_poly_power2round>:
*
* Arguments:   - poly *a1: pointer to output polynomial with coefficients c1
*              - poly *a0: pointer to output polynomial with coefficients c0
*              - const poly *a: pointer to input polynomial
**************************************************/
void poly_power2round(poly *a1, poly *a0, const poly *a) {
    25ac:	fe010113          	addi	sp,sp,-32
    25b0:	00812c23          	sw	s0,24(sp)
    25b4:	00912a23          	sw	s1,20(sp)
    25b8:	01212823          	sw	s2,16(sp)
    25bc:	01312623          	sw	s3,12(sp)
    25c0:	01412423          	sw	s4,8(sp)
    25c4:	00112e23          	sw	ra,28(sp)
    25c8:	00050993          	mv	s3,a0
    25cc:	00058913          	mv	s2,a1
    25d0:	00060493          	mv	s1,a2
    25d4:	00000413          	li	s0,0
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N; ++i)
    25d8:	40000a13          	li	s4,1024
    a1->coeffs[i] = power2round(&a0->coeffs[i], a->coeffs[i]);
    25dc:	008487b3          	add	a5,s1,s0
    25e0:	0007a583          	lw	a1,0(a5)
    25e4:	00890533          	add	a0,s2,s0
    25e8:	6a9000ef          	jal	ra,3490 <pqcrystals_dilithium3_ref_power2round>
    25ec:	008987b3          	add	a5,s3,s0
    25f0:	00a7a023          	sw	a0,0(a5)
  for(i = 0; i < N; ++i)
    25f4:	00440413          	addi	s0,s0,4
    25f8:	ff4412e3          	bne	s0,s4,25dc <pqcrystals_dilithium3_ref_poly_power2round+0x30>

  DBENCH_STOP(*tround);
}
    25fc:	01c12083          	lw	ra,28(sp)
    2600:	01812403          	lw	s0,24(sp)
    2604:	01412483          	lw	s1,20(sp)
    2608:	01012903          	lw	s2,16(sp)
    260c:	00c12983          	lw	s3,12(sp)
    2610:	00812a03          	lw	s4,8(sp)
    2614:	02010113          	addi	sp,sp,32
    2618:	00008067          	ret

0000261c <pqcrystals_dilithium3_ref_poly_decompose>:
*
* Arguments:   - poly *a1: pointer to output polynomial with coefficients c1
*              - poly *a0: pointer to output polynomial with coefficients c0
*              - const poly *a: pointer to input polynomial
**************************************************/
void poly_decompose(poly *a1, poly *a0, const poly *a) {
    261c:	fe010113          	addi	sp,sp,-32
    2620:	00812c23          	sw	s0,24(sp)
    2624:	00912a23          	sw	s1,20(sp)
    2628:	01212823          	sw	s2,16(sp)
    262c:	01312623          	sw	s3,12(sp)
    2630:	01412423          	sw	s4,8(sp)
    2634:	00112e23          	sw	ra,28(sp)
    2638:	00050993          	mv	s3,a0
    263c:	00058913          	mv	s2,a1
    2640:	00060493          	mv	s1,a2
    2644:	00000413          	li	s0,0
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N; ++i)
    2648:	40000a13          	li	s4,1024
    a1->coeffs[i] = decompose(&a0->coeffs[i], a->coeffs[i]);
    264c:	008487b3          	add	a5,s1,s0
    2650:	0007a583          	lw	a1,0(a5)
    2654:	00890533          	add	a0,s2,s0
    2658:	65d000ef          	jal	ra,34b4 <pqcrystals_dilithium3_ref_decompose>
    265c:	008987b3          	add	a5,s3,s0
    2660:	00a7a023          	sw	a0,0(a5)
  for(i = 0; i < N; ++i)
    2664:	00440413          	addi	s0,s0,4
    2668:	ff4412e3          	bne	s0,s4,264c <pqcrystals_dilithium3_ref_poly_decompose+0x30>

  DBENCH_STOP(*tround);
}
    266c:	01c12083          	lw	ra,28(sp)
    2670:	01812403          	lw	s0,24(sp)
    2674:	01412483          	lw	s1,20(sp)
    2678:	01012903          	lw	s2,16(sp)
    267c:	00c12983          	lw	s3,12(sp)
    2680:	00812a03          	lw	s4,8(sp)
    2684:	02010113          	addi	sp,sp,32
    2688:	00008067          	ret

0000268c <pqcrystals_dilithium3_ref_poly_make_hint>:
*              - const poly *a0: pointer to low part of input polynomial
*              - const poly *a1: pointer to high part of input polynomial
*
* Returns number of 1 bits.
**************************************************/
unsigned int poly_make_hint(poly *h, const poly *a0, const poly *a1) {
    268c:	fe010113          	addi	sp,sp,-32
    2690:	00812c23          	sw	s0,24(sp)
    2694:	00912a23          	sw	s1,20(sp)
    2698:	01212823          	sw	s2,16(sp)
    269c:	01312623          	sw	s3,12(sp)
    26a0:	01412423          	sw	s4,8(sp)
    26a4:	01512223          	sw	s5,4(sp)
    26a8:	00112e23          	sw	ra,28(sp)
    26ac:	00050a13          	mv	s4,a0
    26b0:	00058993          	mv	s3,a1
    26b4:	00060913          	mv	s2,a2
    26b8:	00000413          	li	s0,0
  unsigned int i, s = 0;
    26bc:	00000493          	li	s1,0
  DBENCH_START();

  for(i = 0; i < N; ++i) {
    26c0:	40000a93          	li	s5,1024
    h->coeffs[i] = make_hint(a0->coeffs[i], a1->coeffs[i]);
    26c4:	008987b3          	add	a5,s3,s0
    26c8:	00890733          	add	a4,s2,s0
    26cc:	0007a503          	lw	a0,0(a5)
    26d0:	00072583          	lw	a1,0(a4)
    26d4:	639000ef          	jal	ra,350c <pqcrystals_dilithium3_ref_make_hint>
    26d8:	008a07b3          	add	a5,s4,s0
    26dc:	00a7a023          	sw	a0,0(a5)
  for(i = 0; i < N; ++i) {
    26e0:	00440413          	addi	s0,s0,4
    s += h->coeffs[i];
    26e4:	00a484b3          	add	s1,s1,a0
  for(i = 0; i < N; ++i) {
    26e8:	fd541ee3          	bne	s0,s5,26c4 <pqcrystals_dilithium3_ref_poly_make_hint+0x38>
  }

  DBENCH_STOP(*tround);
  return s;
}
    26ec:	01c12083          	lw	ra,28(sp)
    26f0:	01812403          	lw	s0,24(sp)
    26f4:	01012903          	lw	s2,16(sp)
    26f8:	00c12983          	lw	s3,12(sp)
    26fc:	00812a03          	lw	s4,8(sp)
    2700:	00412a83          	lw	s5,4(sp)
    2704:	00048513          	mv	a0,s1
    2708:	01412483          	lw	s1,20(sp)
    270c:	02010113          	addi	sp,sp,32
    2710:	00008067          	ret

00002714 <pqcrystals_dilithium3_ref_poly_use_hint>:
*
* Arguments:   - poly *b: pointer to output polynomial with corrected high bits
*              - const poly *a: pointer to input polynomial
*              - const poly *h: pointer to input hint polynomial
**************************************************/
void poly_use_hint(poly *b, const poly *a, const poly *h) {
    2714:	fe010113          	addi	sp,sp,-32
    2718:	00812c23          	sw	s0,24(sp)
    271c:	00912a23          	sw	s1,20(sp)
    2720:	01212823          	sw	s2,16(sp)
    2724:	01312623          	sw	s3,12(sp)
    2728:	01412423          	sw	s4,8(sp)
    272c:	00112e23          	sw	ra,28(sp)
    2730:	00050993          	mv	s3,a0
    2734:	00058913          	mv	s2,a1
    2738:	00060493          	mv	s1,a2
    273c:	00000413          	li	s0,0
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N; ++i)
    2740:	40000a13          	li	s4,1024
    b->coeffs[i] = use_hint(a->coeffs[i], h->coeffs[i]);
    2744:	008907b3          	add	a5,s2,s0
    2748:	00848733          	add	a4,s1,s0
    274c:	0007a503          	lw	a0,0(a5)
    2750:	00072583          	lw	a1,0(a4)
    2754:	5f9000ef          	jal	ra,354c <pqcrystals_dilithium3_ref_use_hint>
    2758:	008987b3          	add	a5,s3,s0
    275c:	00a7a023          	sw	a0,0(a5)
  for(i = 0; i < N; ++i)
    2760:	00440413          	addi	s0,s0,4
    2764:	ff4410e3          	bne	s0,s4,2744 <pqcrystals_dilithium3_ref_poly_use_hint+0x30>

  DBENCH_STOP(*tround);
}
    2768:	01c12083          	lw	ra,28(sp)
    276c:	01812403          	lw	s0,24(sp)
    2770:	01412483          	lw	s1,20(sp)
    2774:	01012903          	lw	s2,16(sp)
    2778:	00c12983          	lw	s3,12(sp)
    277c:	00812a03          	lw	s4,8(sp)
    2780:	02010113          	addi	sp,sp,32
    2784:	00008067          	ret

00002788 <pqcrystals_dilithium3_ref_poly_chknorm>:
int poly_chknorm(const poly *a, int32_t B) {
  unsigned int i;
  int32_t t;
  DBENCH_START();

  if(B > (Q-1)/8)
    2788:	001007b7          	lui	a5,0x100
    278c:	c0078793          	addi	a5,a5,-1024 # ffc00 <_end_of_memory+0xcfc00>
    2790:	02b7c663          	blt	a5,a1,27bc <pqcrystals_dilithium3_ref_poly_chknorm+0x34>
    2794:	40050613          	addi	a2,a0,1024
    2798:	0080006f          	j	27a0 <pqcrystals_dilithium3_ref_poly_chknorm+0x18>
    return 1;

  /* It is ok to leak which coefficient violates the bound since
     the probability for each coefficient is independent of secret
     data but we must not leak the sign of the centralized representative. */
  for(i = 0; i < N; ++i) {
    279c:	02a60463          	beq	a2,a0,27c4 <pqcrystals_dilithium3_ref_poly_chknorm+0x3c>
    /* Absolute value */
    t = a->coeffs[i] >> 31;
    27a0:	00052783          	lw	a5,0(a0)
  for(i = 0; i < N; ++i) {
    27a4:	00450513          	addi	a0,a0,4
    t = a->coeffs[i] - (t & 2*a->coeffs[i]);
    27a8:	00179713          	slli	a4,a5,0x1
    t = a->coeffs[i] >> 31;
    27ac:	41f7d693          	srai	a3,a5,0x1f
    t = a->coeffs[i] - (t & 2*a->coeffs[i]);
    27b0:	00d77733          	and	a4,a4,a3
    27b4:	40e787b3          	sub	a5,a5,a4

    if(t >= B) {
    27b8:	feb7c2e3          	blt	a5,a1,279c <pqcrystals_dilithium3_ref_poly_chknorm+0x14>
    return 1;
    27bc:	00100513          	li	a0,1
    }
  }

  DBENCH_STOP(*tsample);
  return 0;
}
    27c0:	00008067          	ret
  return 0;
    27c4:	00000513          	li	a0,0
    27c8:	00008067          	ret

000027cc <pqcrystals_dilithium3_ref_poly_uniform>:
**************************************************/
#define POLY_UNIFORM_NBLOCKS ((768 + STREAM128_BLOCKBYTES - 1)/STREAM128_BLOCKBYTES)
void poly_uniform(poly *a,
                  const uint8_t seed[SEEDBYTES],
                  uint16_t nonce)
{
    27cc:	bb010113          	addi	sp,sp,-1104
    27d0:	43512a23          	sw	s5,1076(sp)
    27d4:	00050a93          	mv	s5,a0
  unsigned int i, ctr, off;
  unsigned int buflen = POLY_UNIFORM_NBLOCKS*STREAM128_BLOCKBYTES;
  uint8_t buf[POLY_UNIFORM_NBLOCKS*STREAM128_BLOCKBYTES + 2];
  stream128_state state;

  stream128_init(&state, seed, nonce);
    27d8:	00010513          	mv	a0,sp
{
    27dc:	44112623          	sw	ra,1100(sp)
    27e0:	44812423          	sw	s0,1096(sp)
    27e4:	43412c23          	sw	s4,1080(sp)
  stream128_squeezeblocks(buf, POLY_UNIFORM_NBLOCKS, &state);
    27e8:	0d410413          	addi	s0,sp,212
{
    27ec:	44912223          	sw	s1,1092(sp)
    27f0:	45212023          	sw	s2,1088(sp)
    27f4:	43312e23          	sw	s3,1084(sp)
    27f8:	43612823          	sw	s6,1072(sp)
    27fc:	43712623          	sw	s7,1068(sp)
    2800:	43812423          	sw	s8,1064(sp)
    2804:	43912223          	sw	s9,1060(sp)
  stream128_init(&state, seed, nonce);
    2808:	0d5040ef          	jal	ra,70dc <pqcrystals_dilithium3_ref_dilithium_shake128_stream_init>
  stream128_squeezeblocks(buf, POLY_UNIFORM_NBLOCKS, &state);
    280c:	00500593          	li	a1,5
    2810:	00040513          	mv	a0,s0
    2814:	00010613          	mv	a2,sp
    2818:	39d030ef          	jal	ra,63b4 <pqcrystals_dilithium_fips202_ref_shake128_squeezeblocks>
    t &= 0x7FFFFF;
    281c:	008005b7          	lui	a1,0x800
    2820:	41c10813          	addi	a6,sp,1052

  ctr = rej_uniform(a->coeffs, N, buf, buflen);
    2824:	00040713          	mv	a4,s0
  ctr = pos = 0;
    2828:	00000a13          	li	s4,0
    t &= 0x7FFFFF;
    282c:	fff58593          	addi	a1,a1,-1 # 7fffff <_end_of_memory+0x7cffff>
    if(t < Q)
    2830:	007fe537          	lui	a0,0x7fe
  while(ctr < len && pos + 3 <= buflen) {
    2834:	10000893          	li	a7,256
    t |= (uint32_t)buf[pos++] << 8;
    2838:	00174783          	lbu	a5,1(a4)
    t |= (uint32_t)buf[pos++] << 16;
    283c:	00274683          	lbu	a3,2(a4)
    t  = buf[pos++];
    2840:	00074603          	lbu	a2,0(a4)
    t |= (uint32_t)buf[pos++] << 8;
    2844:	00879793          	slli	a5,a5,0x8
    t |= (uint32_t)buf[pos++] << 16;
    2848:	01069693          	slli	a3,a3,0x10
    284c:	00d7e7b3          	or	a5,a5,a3
    2850:	00c7e7b3          	or	a5,a5,a2
      a[ctr++] = t;
    2854:	002a1693          	slli	a3,s4,0x2
    t &= 0x7FFFFF;
    2858:	00b7f7b3          	and	a5,a5,a1
      a[ctr++] = t;
    285c:	00da86b3          	add	a3,s5,a3
  while(ctr < len && pos + 3 <= buflen) {
    2860:	00370713          	addi	a4,a4,3
      a[ctr++] = t;
    2864:	001a0613          	addi	a2,s4,1
    if(t < Q)
    2868:	00f56863          	bltu	a0,a5,2878 <pqcrystals_dilithium3_ref_poly_uniform+0xac>
      a[ctr++] = t;
    286c:	00f6a023          	sw	a5,0(a3)
  while(ctr < len && pos + 3 <= buflen) {
    2870:	0d160463          	beq	a2,a7,2938 <pqcrystals_dilithium3_ref_poly_uniform+0x16c>
      a[ctr++] = t;
    2874:	00060a13          	mv	s4,a2
  while(ctr < len && pos + 3 <= buflen) {
    2878:	fce810e3          	bne	a6,a4,2838 <pqcrystals_dilithium3_ref_poly_uniform+0x6c>

  while(ctr < N) {
    off = buflen % 3;
    287c:	00300493          	li	s1,3
    t &= 0x7FFFFF;
    2880:	00800bb7          	lui	s7,0x800
    2884:	34800513          	li	a0,840
    for(i = 0; i < off; ++i)
      buf[i] = buf[buflen - off + i];

    stream128_squeezeblocks(buf + off, 1, &state);
    buflen = STREAM128_BLOCKBYTES + off;
    ctr += rej_uniform(a->coeffs + ctr, N - ctr, buf, buflen);
    2888:	10000913          	li	s2,256
    for(i = 0; i < off; ++i)
    288c:	00200993          	li	s3,2
    t &= 0x7FFFFF;
    2890:	fffb8b93          	addi	s7,s7,-1 # 7fffff <_end_of_memory+0x7cffff>
  while(ctr < len && pos + 3 <= buflen) {
    2894:	40848c33          	sub	s8,s1,s0
    off = buflen % 3;
    2898:	02957cb3          	remu	s9,a0,s1
    ctr += rej_uniform(a->coeffs + ctr, N - ctr, buf, buflen);
    289c:	41490b33          	sub	s6,s2,s4
    for(i = 0; i < off; ++i)
    28a0:	0c0c8663          	beqz	s9,296c <pqcrystals_dilithium3_ref_poly_uniform+0x1a0>
      buf[i] = buf[buflen - off + i];
    28a4:	41950533          	sub	a0,a0,s9
    28a8:	42050793          	addi	a5,a0,1056 # 7fe420 <_end_of_memory+0x7ce420>
    28ac:	00278533          	add	a0,a5,sp
    28b0:	cb454783          	lbu	a5,-844(a0)
    28b4:	0cf10a23          	sb	a5,212(sp)
    for(i = 0; i < off; ++i)
    28b8:	013c9663          	bne	s9,s3,28c4 <pqcrystals_dilithium3_ref_poly_uniform+0xf8>
      buf[i] = buf[buflen - off + i];
    28bc:	cb554783          	lbu	a5,-843(a0)
    28c0:	0cf10aa3          	sb	a5,213(sp)
    stream128_squeezeblocks(buf + off, 1, &state);
    28c4:	01940533          	add	a0,s0,s9
    28c8:	00010613          	mv	a2,sp
    28cc:	00100593          	li	a1,1
    28d0:	2e5030ef          	jal	ra,63b4 <pqcrystals_dilithium_fips202_ref_shake128_squeezeblocks>
    buflen = STREAM128_BLOCKBYTES + off;
    28d4:	0a8c8513          	addi	a0,s9,168
    28d8:	00040693          	mv	a3,s0
  ctr = pos = 0;
    28dc:	00000613          	li	a2,0
    if(t < Q)
    28e0:	007fe837          	lui	a6,0x7fe
    t |= (uint32_t)buf[pos++] << 8;
    28e4:	0016c783          	lbu	a5,1(a3)
    t |= (uint32_t)buf[pos++] << 16;
    28e8:	0026c703          	lbu	a4,2(a3)
    t  = buf[pos++];
    28ec:	0006c583          	lbu	a1,0(a3)
    t |= (uint32_t)buf[pos++] << 8;
    28f0:	00879793          	slli	a5,a5,0x8
    t |= (uint32_t)buf[pos++] << 16;
    28f4:	01071713          	slli	a4,a4,0x10
    28f8:	00e7e7b3          	or	a5,a5,a4
    28fc:	00b7e7b3          	or	a5,a5,a1
      a[ctr++] = t;
    2900:	00ca0733          	add	a4,s4,a2
  while(ctr < len && pos + 3 <= buflen) {
    2904:	00368693          	addi	a3,a3,3
      a[ctr++] = t;
    2908:	00271713          	slli	a4,a4,0x2
    t &= 0x7FFFFF;
    290c:	0177f7b3          	and	a5,a5,s7
  while(ctr < len && pos + 3 <= buflen) {
    2910:	00dc05b3          	add	a1,s8,a3
      a[ctr++] = t;
    2914:	00ea8733          	add	a4,s5,a4
    if(t < Q)
    2918:	00f86663          	bltu	a6,a5,2924 <pqcrystals_dilithium3_ref_poly_uniform+0x158>
      a[ctr++] = t;
    291c:	00f72023          	sw	a5,0(a4)
    2920:	00160613          	addi	a2,a2,1
  while(ctr < len && pos + 3 <= buflen) {
    2924:	01667463          	bgeu	a2,s6,292c <pqcrystals_dilithium3_ref_poly_uniform+0x160>
    2928:	fab57ee3          	bgeu	a0,a1,28e4 <pqcrystals_dilithium3_ref_poly_uniform+0x118>
    ctr += rej_uniform(a->coeffs + ctr, N - ctr, buf, buflen);
    292c:	00ca0a33          	add	s4,s4,a2
  while(ctr < N) {
    2930:	0ff00793          	li	a5,255
    2934:	f747f2e3          	bgeu	a5,s4,2898 <pqcrystals_dilithium3_ref_poly_uniform+0xcc>
  }
}
    2938:	44c12083          	lw	ra,1100(sp)
    293c:	44812403          	lw	s0,1096(sp)
    2940:	44412483          	lw	s1,1092(sp)
    2944:	44012903          	lw	s2,1088(sp)
    2948:	43c12983          	lw	s3,1084(sp)
    294c:	43812a03          	lw	s4,1080(sp)
    2950:	43412a83          	lw	s5,1076(sp)
    2954:	43012b03          	lw	s6,1072(sp)
    2958:	42c12b83          	lw	s7,1068(sp)
    295c:	42812c03          	lw	s8,1064(sp)
    2960:	42412c83          	lw	s9,1060(sp)
    2964:	45010113          	addi	sp,sp,1104
    2968:	00008067          	ret
    stream128_squeezeblocks(buf + off, 1, &state);
    296c:	00040513          	mv	a0,s0
    2970:	00010613          	mv	a2,sp
    2974:	00100593          	li	a1,1
    2978:	23d030ef          	jal	ra,63b4 <pqcrystals_dilithium_fips202_ref_shake128_squeezeblocks>
    buflen = STREAM128_BLOCKBYTES + off;
    297c:	0a800513          	li	a0,168
    2980:	f59ff06f          	j	28d8 <pqcrystals_dilithium3_ref_poly_uniform+0x10c>

00002984 <pqcrystals_dilithium3_ref_poly_uniform_eta>:
#define POLY_UNIFORM_ETA_NBLOCKS ((227 + STREAM256_BLOCKBYTES - 1)/STREAM256_BLOCKBYTES)
#endif
void poly_uniform_eta(poly *a,
                      const uint8_t seed[CRHBYTES],
                      uint16_t nonce)
{
    2984:	e0010113          	addi	sp,sp,-512
    2988:	1f612023          	sw	s6,480(sp)
    298c:	00050b13          	mv	s6,a0
  unsigned int ctr;
  unsigned int buflen = POLY_UNIFORM_ETA_NBLOCKS*STREAM256_BLOCKBYTES;
  uint8_t buf[POLY_UNIFORM_ETA_NBLOCKS*STREAM256_BLOCKBYTES];
  stream256_state state;

  stream256_init(&state, seed, nonce);
    2990:	00010513          	mv	a0,sp
{
    2994:	1e112e23          	sw	ra,508(sp)
    2998:	1f412423          	sw	s4,488(sp)
    299c:	1e812c23          	sw	s0,504(sp)
    29a0:	1e912a23          	sw	s1,500(sp)
    29a4:	1f212823          	sw	s2,496(sp)
    29a8:	1f312623          	sw	s3,492(sp)
    29ac:	1f512223          	sw	s5,484(sp)
  stream256_init(&state, seed, nonce);
    29b0:	788040ef          	jal	ra,7138 <pqcrystals_dilithium3_ref_dilithium_shake256_stream_init>
  stream256_squeezeblocks(buf, POLY_UNIFORM_ETA_NBLOCKS, &state);
    29b4:	00200593          	li	a1,2
    29b8:	00010613          	mv	a2,sp
    29bc:	0d010513          	addi	a0,sp,208
    29c0:	4e9030ef          	jal	ra,66a8 <pqcrystals_dilithium_fips202_ref_shake256_squeezeblocks>
  while(ctr < len && pos < buflen) {
    29c4:	1e010893          	addi	a7,sp,480

  ctr = rej_eta(a->coeffs, N, buf, buflen);
    29c8:	0d010713          	addi	a4,sp,208
  ctr = pos = 0;
    29cc:	00000a13          	li	s4,0
    if(t0 < 9)
    29d0:	00800593          	li	a1,8
  while(ctr < len && pos < buflen) {
    29d4:	10000313          	li	t1,256
      a[ctr++] = 4 - t1;
    29d8:	00400813          	li	a6,4
    t0 = buf[pos] & 0x0F;
    29dc:	00074783          	lbu	a5,0(a4)
      a[ctr++] = 4 - t0;
    29e0:	002a1693          	slli	a3,s4,0x2
    29e4:	00db06b3          	add	a3,s6,a3
    29e8:	00f7f613          	andi	a2,a5,15
    29ec:	40c80533          	sub	a0,a6,a2
    t1 = buf[pos++] >> 4;
    29f0:	0047d793          	srli	a5,a5,0x4
    if(t0 < 9)
    29f4:	0ac5f463          	bgeu	a1,a2,2a9c <pqcrystals_dilithium3_ref_poly_uniform_eta+0x118>
    if(t1 < 9 && ctr < len)
    29f8:	00f5ee63          	bltu	a1,a5,2a14 <pqcrystals_dilithium3_ref_poly_uniform_eta+0x90>
      a[ctr++] = 4 - t1;
    29fc:	002a1693          	slli	a3,s4,0x2
    2a00:	00db06b3          	add	a3,s6,a3
    2a04:	40f807b3          	sub	a5,a6,a5
    2a08:	00f6a023          	sw	a5,0(a3)
    2a0c:	001a0a13          	addi	s4,s4,1
  while(ctr < len && pos < buflen) {
    2a10:	086a0e63          	beq	s4,t1,2aac <pqcrystals_dilithium3_ref_poly_uniform_eta+0x128>
    2a14:	00170713          	addi	a4,a4,1
    2a18:	fce892e3          	bne	a7,a4,29dc <pqcrystals_dilithium3_ref_poly_uniform_eta+0x58>
    2a1c:	15810a93          	addi	s5,sp,344

  while(ctr < N) {
    stream256_squeezeblocks(buf, 1, &state);
    ctr += rej_eta(a->coeffs + ctr, N - ctr, buf, STREAM256_BLOCKBYTES);
    2a20:	10000913          	li	s2,256
    if(t0 < 9)
    2a24:	00800413          	li	s0,8
      a[ctr++] = 4 - t0;
    2a28:	00400993          	li	s3,4
  while(ctr < N) {
    2a2c:	0ff00493          	li	s1,255
    stream256_squeezeblocks(buf, 1, &state);
    2a30:	00010613          	mv	a2,sp
    2a34:	00100593          	li	a1,1
    2a38:	0d010513          	addi	a0,sp,208
    2a3c:	46d030ef          	jal	ra,66a8 <pqcrystals_dilithium_fips202_ref_shake256_squeezeblocks>
    ctr += rej_eta(a->coeffs + ctr, N - ctr, buf, STREAM256_BLOCKBYTES);
    2a40:	002a1813          	slli	a6,s4,0x2
    2a44:	010b0833          	add	a6,s6,a6
    2a48:	414908b3          	sub	a7,s2,s4
    2a4c:	0d010613          	addi	a2,sp,208
  ctr = pos = 0;
    2a50:	00000693          	li	a3,0
    t0 = buf[pos] & 0x0F;
    2a54:	00064783          	lbu	a5,0(a2)
      a[ctr++] = 4 - t0;
    2a58:	00269713          	slli	a4,a3,0x2
  while(ctr < len && pos < buflen) {
    2a5c:	00160613          	addi	a2,a2,1
    2a60:	00f7f593          	andi	a1,a5,15
      a[ctr++] = 4 - t0;
    2a64:	00e80733          	add	a4,a6,a4
    2a68:	40b98333          	sub	t1,s3,a1
    t1 = buf[pos++] >> 4;
    2a6c:	0047d793          	srli	a5,a5,0x4
    if(t0 < 9)
    2a70:	00b46663          	bltu	s0,a1,2a7c <pqcrystals_dilithium3_ref_poly_uniform_eta+0xf8>
      a[ctr++] = 4 - t0;
    2a74:	00672023          	sw	t1,0(a4)
    2a78:	00168693          	addi	a3,a3,1
    if(t1 < 9 && ctr < len)
    2a7c:	06f46063          	bltu	s0,a5,2adc <pqcrystals_dilithium3_ref_poly_uniform_eta+0x158>
      a[ctr++] = 4 - t1;
    2a80:	00269713          	slli	a4,a3,0x2
    2a84:	00e80733          	add	a4,a6,a4
    2a88:	40f987b3          	sub	a5,s3,a5
    if(t1 < 9 && ctr < len)
    2a8c:	0516e463          	bltu	a3,a7,2ad4 <pqcrystals_dilithium3_ref_poly_uniform_eta+0x150>
    ctr += rej_eta(a->coeffs + ctr, N - ctr, buf, STREAM256_BLOCKBYTES);
    2a90:	00da0a33          	add	s4,s4,a3
  while(ctr < N) {
    2a94:	f944fee3          	bgeu	s1,s4,2a30 <pqcrystals_dilithium3_ref_poly_uniform_eta+0xac>
    2a98:	0140006f          	j	2aac <pqcrystals_dilithium3_ref_poly_uniform_eta+0x128>
      a[ctr++] = 4 - t0;
    2a9c:	00a6a023          	sw	a0,0(a3)
    2aa0:	001a0a13          	addi	s4,s4,1
    if(t1 < 9 && ctr < len)
    2aa4:	f6f5e6e3          	bltu	a1,a5,2a10 <pqcrystals_dilithium3_ref_poly_uniform_eta+0x8c>
    2aa8:	f46a1ae3          	bne	s4,t1,29fc <pqcrystals_dilithium3_ref_poly_uniform_eta+0x78>
  }
}
    2aac:	1fc12083          	lw	ra,508(sp)
    2ab0:	1f812403          	lw	s0,504(sp)
    2ab4:	1f412483          	lw	s1,500(sp)
    2ab8:	1f012903          	lw	s2,496(sp)
    2abc:	1ec12983          	lw	s3,492(sp)
    2ac0:	1e812a03          	lw	s4,488(sp)
    2ac4:	1e412a83          	lw	s5,484(sp)
    2ac8:	1e012b03          	lw	s6,480(sp)
    2acc:	20010113          	addi	sp,sp,512
    2ad0:	00008067          	ret
      a[ctr++] = 4 - t1;
    2ad4:	00f72023          	sw	a5,0(a4)
    2ad8:	00168693          	addi	a3,a3,1
  while(ctr < len && pos < buflen) {
    2adc:	fb16fae3          	bgeu	a3,a7,2a90 <pqcrystals_dilithium3_ref_poly_uniform_eta+0x10c>
    2ae0:	f6ca9ae3          	bne	s5,a2,2a54 <pqcrystals_dilithium3_ref_poly_uniform_eta+0xd0>
    2ae4:	fadff06f          	j	2a90 <pqcrystals_dilithium3_ref_poly_uniform_eta+0x10c>

00002ae8 <pqcrystals_dilithium3_ref_poly_challenge>:
*              SHAKE256(seed).
*
* Arguments:   - poly *c: pointer to output polynomial
*              - const uint8_t mu[]: byte array containing seed of length SEEDBYTES
**************************************************/
void poly_challenge(poly *c, const uint8_t seed[SEEDBYTES]) {
    2ae8:	e8010113          	addi	sp,sp,-384
    2aec:	17412423          	sw	s4,360(sp)
    2af0:	00050a13          	mv	s4,a0
  unsigned int i, b, pos;
  uint64_t signs;
  uint8_t buf[SHAKE256_RATE];
  keccak_state state;

  shake256_init(&state);
    2af4:	09010513          	addi	a0,sp,144
void poly_challenge(poly *c, const uint8_t seed[SEEDBYTES]) {
    2af8:	16112e23          	sw	ra,380(sp)
    2afc:	16812c23          	sw	s0,376(sp)
    2b00:	16912a23          	sw	s1,372(sp)
    2b04:	00058413          	mv	s0,a1
    2b08:	17212823          	sw	s2,368(sp)
    2b0c:	17312623          	sw	s3,364(sp)
    2b10:	17512223          	sw	s5,356(sp)
    2b14:	17612023          	sw	s6,352(sp)
  shake256_init(&state);
    2b18:	169030ef          	jal	ra,6480 <pqcrystals_dilithium_fips202_ref_shake256_init>
  shake256_absorb(&state, seed, SEEDBYTES);
    2b1c:	00040593          	mv	a1,s0
    2b20:	02000613          	li	a2,32
    2b24:	09010513          	addi	a0,sp,144
    2b28:	189030ef          	jal	ra,64b0 <pqcrystals_dilithium_fips202_ref_shake256_absorb>
  shake256_finalize(&state);
    2b2c:	09010513          	addi	a0,sp,144
    2b30:	1b9030ef          	jal	ra,64e8 <pqcrystals_dilithium_fips202_ref_shake256_finalize>
  shake256_squeezeblocks(buf, 1, &state);
    2b34:	09010613          	addi	a2,sp,144
    2b38:	00100593          	li	a1,1
    2b3c:	00810513          	addi	a0,sp,8
    2b40:	369030ef          	jal	ra,66a8 <pqcrystals_dilithium_fips202_ref_shake256_squeezeblocks>

  signs = 0;
  for(i = 0; i < 8; ++i)
    signs |= (uint64_t)buf[i] << 8*i;
    2b44:	00a14783          	lbu	a5,10(sp)
    2b48:	00914603          	lbu	a2,9(sp)
    2b4c:	00d14683          	lbu	a3,13(sp)
    2b50:	00c14503          	lbu	a0,12(sp)
    2b54:	00e14703          	lbu	a4,14(sp)
    2b58:	00814583          	lbu	a1,8(sp)
    2b5c:	00b14483          	lbu	s1,11(sp)
    2b60:	00f14903          	lbu	s2,15(sp)
    2b64:	00861613          	slli	a2,a2,0x8
    2b68:	01079793          	slli	a5,a5,0x10
    2b6c:	00869693          	slli	a3,a3,0x8
    2b70:	00a6e6b3          	or	a3,a3,a0
    2b74:	00c7e7b3          	or	a5,a5,a2
    2b78:	01071713          	slli	a4,a4,0x10
    2b7c:	00b7e7b3          	or	a5,a5,a1
    2b80:	00d76733          	or	a4,a4,a3
    2b84:	01849493          	slli	s1,s1,0x18
    2b88:	01891913          	slli	s2,s2,0x18
  pos = 8;

  for(i = 0; i < N; ++i)
    c->coeffs[i] = 0;
    2b8c:	40000613          	li	a2,1024
    2b90:	00000593          	li	a1,0
    2b94:	000a0513          	mv	a0,s4
    signs |= (uint64_t)buf[i] << 8*i;
    2b98:	00f4e4b3          	or	s1,s1,a5
    2b9c:	00e96933          	or	s2,s2,a4
    c->coeffs[i] = 0;
    2ba0:	3bc050ef          	jal	ra,7f5c <memset>
    2ba4:	33ca0993          	addi	s3,s4,828
  for(i = N-TAU; i < N; ++i) {
    2ba8:	0cf00413          	li	s0,207
  pos = 8;
    2bac:	00800793          	li	a5,8
    do {
      if(pos >= SHAKE256_RATE) {
    2bb0:	08800b13          	li	s6,136
  for(i = N-TAU; i < N; ++i) {
    2bb4:	10000a93          	li	s5,256
      if(pos >= SHAKE256_RATE) {
    2bb8:	09678063          	beq	a5,s6,2c38 <pqcrystals_dilithium3_ref_poly_challenge+0x150>
        shake256_squeezeblocks(buf, 1, &state);
        pos = 0;
      }

      b = buf[pos++];
    2bbc:	16078713          	addi	a4,a5,352
    2bc0:	00270733          	add	a4,a4,sp
    2bc4:	ea874703          	lbu	a4,-344(a4)
    2bc8:	00178793          	addi	a5,a5,1
    } while(b > i);
    2bcc:	fee466e3          	bltu	s0,a4,2bb8 <pqcrystals_dilithium3_ref_poly_challenge+0xd0>

    c->coeffs[i] = c->coeffs[b];
    2bd0:	00271713          	slli	a4,a4,0x2
    2bd4:	00ea0733          	add	a4,s4,a4
    2bd8:	00072683          	lw	a3,0(a4)
    c->coeffs[b] = 1 - 2*(signs & 1);
    2bdc:	0014f613          	andi	a2,s1,1
    2be0:	00161613          	slli	a2,a2,0x1
    c->coeffs[i] = c->coeffs[b];
    2be4:	00d9a023          	sw	a3,0(s3)
    c->coeffs[b] = 1 - 2*(signs & 1);
    2be8:	00100693          	li	a3,1
    2bec:	40c686b3          	sub	a3,a3,a2
    signs >>= 1;
    2bf0:	0014d493          	srli	s1,s1,0x1
    2bf4:	01f91613          	slli	a2,s2,0x1f
    c->coeffs[b] = 1 - 2*(signs & 1);
    2bf8:	00d72023          	sw	a3,0(a4)
  for(i = N-TAU; i < N; ++i) {
    2bfc:	00140413          	addi	s0,s0,1
    signs >>= 1;
    2c00:	009664b3          	or	s1,a2,s1
    2c04:	00195913          	srli	s2,s2,0x1
  for(i = N-TAU; i < N; ++i) {
    2c08:	00498993          	addi	s3,s3,4
    2c0c:	fb5416e3          	bne	s0,s5,2bb8 <pqcrystals_dilithium3_ref_poly_challenge+0xd0>
  }
}
    2c10:	17c12083          	lw	ra,380(sp)
    2c14:	17812403          	lw	s0,376(sp)
    2c18:	17412483          	lw	s1,372(sp)
    2c1c:	17012903          	lw	s2,368(sp)
    2c20:	16c12983          	lw	s3,364(sp)
    2c24:	16812a03          	lw	s4,360(sp)
    2c28:	16412a83          	lw	s5,356(sp)
    2c2c:	16012b03          	lw	s6,352(sp)
    2c30:	18010113          	addi	sp,sp,384
    2c34:	00008067          	ret
        shake256_squeezeblocks(buf, 1, &state);
    2c38:	09010613          	addi	a2,sp,144
    2c3c:	00100593          	li	a1,1
    2c40:	00810513          	addi	a0,sp,8
    2c44:	265030ef          	jal	ra,66a8 <pqcrystals_dilithium_fips202_ref_shake256_squeezeblocks>
      b = buf[pos++];
    2c48:	00814703          	lbu	a4,8(sp)
    } while(b > i);
    2c4c:	00100793          	li	a5,1
    2c50:	f6e466e3          	bltu	s0,a4,2bbc <pqcrystals_dilithium3_ref_poly_challenge+0xd4>
    2c54:	f7dff06f          	j	2bd0 <pqcrystals_dilithium3_ref_poly_challenge+0xe8>

00002c58 <pqcrystals_dilithium3_ref_polyeta_pack>:
    r[3*i+0]  = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
    r[3*i+1]  = (t[2] >> 2) | (t[3] << 1) | (t[4] << 4) | (t[5] << 7);
    r[3*i+2]  = (t[5] >> 1) | (t[6] << 2) | (t[7] << 5);
  }
#elif ETA == 4
  for(i = 0; i < N/2; ++i) {
    2c58:	40058613          	addi	a2,a1,1024
    t[0] = ETA - a->coeffs[2*i+0];
    t[1] = ETA - a->coeffs[2*i+1];
    2c5c:	00400693          	li	a3,4
    2c60:	0045a783          	lw	a5,4(a1)
    t[0] = ETA - a->coeffs[2*i+0];
    2c64:	0005a703          	lw	a4,0(a1)
  for(i = 0; i < N/2; ++i) {
    2c68:	00858593          	addi	a1,a1,8
    t[1] = ETA - a->coeffs[2*i+1];
    2c6c:	40f687b3          	sub	a5,a3,a5
    r[i] = t[0] | (t[1] << 4);
    2c70:	0ff7f793          	zext.b	a5,a5
    2c74:	00479793          	slli	a5,a5,0x4
    t[0] = ETA - a->coeffs[2*i+0];
    2c78:	40e68733          	sub	a4,a3,a4
    r[i] = t[0] | (t[1] << 4);
    2c7c:	00e7e7b3          	or	a5,a5,a4
    2c80:	00f50023          	sb	a5,0(a0)
  for(i = 0; i < N/2; ++i) {
    2c84:	00150513          	addi	a0,a0,1
    2c88:	fcb61ce3          	bne	a2,a1,2c60 <pqcrystals_dilithium3_ref_polyeta_pack+0x8>
  }
#endif

  DBENCH_STOP(*tpack);
}
    2c8c:	00008067          	ret

00002c90 <pqcrystals_dilithium3_ref_polyeta_unpack>:
    r->coeffs[8*i+5] = ETA - r->coeffs[8*i+5];
    r->coeffs[8*i+6] = ETA - r->coeffs[8*i+6];
    r->coeffs[8*i+7] = ETA - r->coeffs[8*i+7];
  }
#elif ETA == 4
  for(i = 0; i < N/2; ++i) {
    2c90:	40050613          	addi	a2,a0,1024
    r->coeffs[2*i+0] = a[i] & 0x0F;
    r->coeffs[2*i+1] = a[i] >> 4;
    r->coeffs[2*i+0] = ETA - r->coeffs[2*i+0];
    2c94:	00400693          	li	a3,4
    r->coeffs[2*i+0] = a[i] & 0x0F;
    2c98:	0005c783          	lbu	a5,0(a1)
  for(i = 0; i < N/2; ++i) {
    2c9c:	00850513          	addi	a0,a0,8
    2ca0:	00158593          	addi	a1,a1,1
    r->coeffs[2*i+0] = a[i] & 0x0F;
    2ca4:	00f7f793          	andi	a5,a5,15
    2ca8:	fef52c23          	sw	a5,-8(a0)
    r->coeffs[2*i+1] = a[i] >> 4;
    2cac:	fff5c703          	lbu	a4,-1(a1)
    r->coeffs[2*i+0] = ETA - r->coeffs[2*i+0];
    2cb0:	40f687b3          	sub	a5,a3,a5
    2cb4:	fef52c23          	sw	a5,-8(a0)
    r->coeffs[2*i+1] = a[i] >> 4;
    2cb8:	00475793          	srli	a5,a4,0x4
    r->coeffs[2*i+1] = ETA - r->coeffs[2*i+1];
    2cbc:	40f687b3          	sub	a5,a3,a5
    2cc0:	fef52e23          	sw	a5,-4(a0)
  for(i = 0; i < N/2; ++i) {
    2cc4:	fcc51ae3          	bne	a0,a2,2c98 <pqcrystals_dilithium3_ref_polyeta_unpack+0x8>
  }
#endif

  DBENCH_STOP(*tpack);
}
    2cc8:	00008067          	ret

00002ccc <pqcrystals_dilithium3_ref_polyt1_pack>:
**************************************************/
void polyt1_pack(uint8_t *r, const poly *a) {
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N/4; ++i) {
    2ccc:	40058693          	addi	a3,a1,1024
    r[5*i+0] = (a->coeffs[4*i+0] >> 0);
    2cd0:	0005a783          	lw	a5,0(a1)
  for(i = 0; i < N/4; ++i) {
    2cd4:	01058593          	addi	a1,a1,16
    2cd8:	00550513          	addi	a0,a0,5
    r[5*i+0] = (a->coeffs[4*i+0] >> 0);
    2cdc:	fef50da3          	sb	a5,-5(a0)
    r[5*i+1] = (a->coeffs[4*i+0] >> 8) | (a->coeffs[4*i+1] << 2);
    2ce0:	ff05a783          	lw	a5,-16(a1)
    2ce4:	ff45a703          	lw	a4,-12(a1)
    2ce8:	4087d793          	srai	a5,a5,0x8
    2cec:	00271713          	slli	a4,a4,0x2
    2cf0:	00e7e7b3          	or	a5,a5,a4
    2cf4:	fef50e23          	sb	a5,-4(a0)
    r[5*i+2] = (a->coeffs[4*i+1] >> 6) | (a->coeffs[4*i+2] << 4);
    2cf8:	ff45a783          	lw	a5,-12(a1)
    2cfc:	ff85a703          	lw	a4,-8(a1)
    2d00:	4067d793          	srai	a5,a5,0x6
    2d04:	00471713          	slli	a4,a4,0x4
    2d08:	00e7e7b3          	or	a5,a5,a4
    2d0c:	fef50ea3          	sb	a5,-3(a0)
    r[5*i+3] = (a->coeffs[4*i+2] >> 4) | (a->coeffs[4*i+3] << 6);
    2d10:	ff85a783          	lw	a5,-8(a1)
    2d14:	ffc5a703          	lw	a4,-4(a1)
    2d18:	4047d793          	srai	a5,a5,0x4
    2d1c:	00671713          	slli	a4,a4,0x6
    2d20:	00e7e7b3          	or	a5,a5,a4
    2d24:	fef50f23          	sb	a5,-2(a0)
    r[5*i+4] = (a->coeffs[4*i+3] >> 2);
    2d28:	ffc5a783          	lw	a5,-4(a1)
    2d2c:	4027d793          	srai	a5,a5,0x2
    2d30:	fef50fa3          	sb	a5,-1(a0)
  for(i = 0; i < N/4; ++i) {
    2d34:	f8d59ee3          	bne	a1,a3,2cd0 <pqcrystals_dilithium3_ref_polyt1_pack+0x4>
  }

  DBENCH_STOP(*tpack);
}
    2d38:	00008067          	ret

00002d3c <pqcrystals_dilithium3_ref_polyt1_unpack>:
**************************************************/
void polyt1_unpack(poly *r, const uint8_t *a) {
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N/4; ++i) {
    2d3c:	14058693          	addi	a3,a1,320
    r->coeffs[4*i+0] = ((a[5*i+0] >> 0) | ((uint32_t)a[5*i+1] << 8)) & 0x3FF;
    2d40:	0015c783          	lbu	a5,1(a1)
    2d44:	0005c703          	lbu	a4,0(a1)
  for(i = 0; i < N/4; ++i) {
    2d48:	00558593          	addi	a1,a1,5
    r->coeffs[4*i+0] = ((a[5*i+0] >> 0) | ((uint32_t)a[5*i+1] << 8)) & 0x3FF;
    2d4c:	00879793          	slli	a5,a5,0x8
    2d50:	00e7e7b3          	or	a5,a5,a4
    2d54:	3ff7f793          	andi	a5,a5,1023
    2d58:	00f52023          	sw	a5,0(a0)
    r->coeffs[4*i+1] = ((a[5*i+1] >> 2) | ((uint32_t)a[5*i+2] << 6)) & 0x3FF;
    2d5c:	ffc5c783          	lbu	a5,-4(a1)
    2d60:	ffd5c703          	lbu	a4,-3(a1)
  for(i = 0; i < N/4; ++i) {
    2d64:	01050513          	addi	a0,a0,16
    r->coeffs[4*i+1] = ((a[5*i+1] >> 2) | ((uint32_t)a[5*i+2] << 6)) & 0x3FF;
    2d68:	0027d793          	srli	a5,a5,0x2
    2d6c:	00671713          	slli	a4,a4,0x6
    2d70:	00e7e7b3          	or	a5,a5,a4
    2d74:	3ff7f793          	andi	a5,a5,1023
    2d78:	fef52a23          	sw	a5,-12(a0)
    r->coeffs[4*i+2] = ((a[5*i+2] >> 4) | ((uint32_t)a[5*i+3] << 4)) & 0x3FF;
    2d7c:	ffd5c783          	lbu	a5,-3(a1)
    2d80:	ffe5c703          	lbu	a4,-2(a1)
    2d84:	0047d793          	srli	a5,a5,0x4
    2d88:	00471713          	slli	a4,a4,0x4
    2d8c:	00e7e7b3          	or	a5,a5,a4
    2d90:	3ff7f793          	andi	a5,a5,1023
    2d94:	fef52c23          	sw	a5,-8(a0)
    r->coeffs[4*i+3] = ((a[5*i+3] >> 6) | ((uint32_t)a[5*i+4] << 2)) & 0x3FF;
    2d98:	ffe5c783          	lbu	a5,-2(a1)
    2d9c:	fff5c703          	lbu	a4,-1(a1)
    2da0:	0067d793          	srli	a5,a5,0x6
    2da4:	00271713          	slli	a4,a4,0x2
    2da8:	00e7e7b3          	or	a5,a5,a4
    2dac:	fef52e23          	sw	a5,-4(a0)
  for(i = 0; i < N/4; ++i) {
    2db0:	f8b698e3          	bne	a3,a1,2d40 <pqcrystals_dilithium3_ref_polyt1_unpack+0x4>
  }

  DBENCH_STOP(*tpack);
}
    2db4:	00008067          	ret

00002db8 <pqcrystals_dilithium3_ref_polyt0_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYT0_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void polyt0_pack(uint8_t *r, const poly *a) {
    2db8:	fd010113          	addi	sp,sp,-48
    2dbc:	02812623          	sw	s0,44(sp)
    2dc0:	02912423          	sw	s1,40(sp)
    2dc4:	03212223          	sw	s2,36(sp)
    2dc8:	03312023          	sw	s3,32(sp)
    2dcc:	01412e23          	sw	s4,28(sp)
    2dd0:	01512c23          	sw	s5,24(sp)
    2dd4:	01612a23          	sw	s6,20(sp)
    2dd8:	01712823          	sw	s7,16(sp)
    2ddc:	01812623          	sw	s8,12(sp)
    2de0:	1a050293          	addi	t0,a0,416
  unsigned int i;
  uint32_t t[8];
  DBENCH_START();

  for(i = 0; i < N/8; ++i) {
    t[0] = (1 << (D-1)) - a->coeffs[8*i+0];
    2de4:	00001e37          	lui	t3,0x1
    2de8:	0005af03          	lw	t5,0(a1)
    t[1] = (1 << (D-1)) - a->coeffs[8*i+1];
    2dec:	0045a883          	lw	a7,4(a1)
    t[2] = (1 << (D-1)) - a->coeffs[8*i+2];
    2df0:	0085a803          	lw	a6,8(a1)
    t[3] = (1 << (D-1)) - a->coeffs[8*i+3];
    2df4:	00c5ae83          	lw	t4,12(a1)
    t[4] = (1 << (D-1)) - a->coeffs[8*i+4];
    2df8:	0105a703          	lw	a4,16(a1)
    t[5] = (1 << (D-1)) - a->coeffs[8*i+5];
    2dfc:	0145a603          	lw	a2,20(a1)
    t[6] = (1 << (D-1)) - a->coeffs[8*i+6];
    2e00:	0185a783          	lw	a5,24(a1)
    t[7] = (1 << (D-1)) - a->coeffs[8*i+7];
    2e04:	01c5a683          	lw	a3,28(a1)
    t[1] = (1 << (D-1)) - a->coeffs[8*i+1];
    2e08:	411e08b3          	sub	a7,t3,a7
    t[3] = (1 << (D-1)) - a->coeffs[8*i+3];
    2e0c:	41de0eb3          	sub	t4,t3,t4
    t[4] = (1 << (D-1)) - a->coeffs[8*i+4];
    2e10:	40ee0733          	sub	a4,t3,a4
    t[6] = (1 << (D-1)) - a->coeffs[8*i+6];
    2e14:	40fe07b3          	sub	a5,t3,a5
    t[0] = (1 << (D-1)) - a->coeffs[8*i+0];
    2e18:	41ee0f33          	sub	t5,t3,t5
    t[2] = (1 << (D-1)) - a->coeffs[8*i+2];
    2e1c:	410e0833          	sub	a6,t3,a6
    t[5] = (1 << (D-1)) - a->coeffs[8*i+5];
    2e20:	40ce0633          	sub	a2,t3,a2
    t[7] = (1 << (D-1)) - a->coeffs[8*i+7];
    2e24:	40de06b3          	sub	a3,t3,a3

    r[13*i+ 0]  =  t[0];
    r[13*i+ 1]  =  t[0] >>  8;
    r[13*i+ 1] |=  t[1] <<  5;
    2e28:	00589c13          	slli	s8,a7,0x5
    r[13*i+ 2]  =  t[1] >>  3;
    r[13*i+ 3]  =  t[1] >> 11;
    2e2c:	00b8d413          	srli	s0,a7,0xb
    r[13*i+ 3] |=  t[2] <<  2;
    2e30:	00281b93          	slli	s7,a6,0x2
    r[13*i+ 4]  =  t[2] >>  6;
    r[13*i+ 4] |=  t[3] <<  7;
    2e34:	007e9b13          	slli	s6,t4,0x7
    r[13*i+ 5]  =  t[3] >>  1;
    r[13*i+ 6]  =  t[3] >>  9;
    2e38:	009ed393          	srli	t2,t4,0x9
    r[13*i+ 6] |=  t[4] <<  4;
    2e3c:	00471a93          	slli	s5,a4,0x4
    r[13*i+ 7]  =  t[4] >>  4;
    r[13*i+ 8]  =  t[4] >> 12;
    2e40:	00c75f93          	srli	t6,a4,0xc
    r[13*i+ 8] |=  t[5] <<  1;
    2e44:	00161a13          	slli	s4,a2,0x1
    r[13*i+ 9]  =  t[5] >>  7;
    r[13*i+ 9] |=  t[6] <<  6;
    2e48:	00679993          	slli	s3,a5,0x6
    r[13*i+10]  =  t[6] >>  2;
    r[13*i+11]  =  t[6] >> 10;
    2e4c:	00a7d313          	srli	t1,a5,0xa
    r[13*i+11] |=  t[7] <<  3;
    2e50:	00369913          	slli	s2,a3,0x3
    r[13*i+ 1]  =  t[0] >>  8;
    2e54:	008f5493          	srli	s1,t5,0x8
    r[13*i+ 4]  =  t[2] >>  6;
    2e58:	00685813          	srli	a6,a6,0x6
    r[13*i+ 9]  =  t[5] >>  7;
    2e5c:	00765613          	srli	a2,a2,0x7
    r[13*i+ 1] |=  t[1] <<  5;
    2e60:	0184e4b3          	or	s1,s1,s8
    r[13*i+ 2]  =  t[1] >>  3;
    2e64:	0038d893          	srli	a7,a7,0x3
    r[13*i+ 3] |=  t[2] <<  2;
    2e68:	01746433          	or	s0,s0,s7
    r[13*i+ 4] |=  t[3] <<  7;
    2e6c:	01686833          	or	a6,a6,s6
    r[13*i+ 5]  =  t[3] >>  1;
    2e70:	001ede93          	srli	t4,t4,0x1
    r[13*i+ 6] |=  t[4] <<  4;
    2e74:	0153e3b3          	or	t2,t2,s5
    r[13*i+ 7]  =  t[4] >>  4;
    2e78:	00475713          	srli	a4,a4,0x4
    r[13*i+ 8] |=  t[5] <<  1;
    2e7c:	014fefb3          	or	t6,t6,s4
    r[13*i+ 9] |=  t[6] <<  6;
    2e80:	01366633          	or	a2,a2,s3
    r[13*i+10]  =  t[6] >>  2;
    2e84:	0027d793          	srli	a5,a5,0x2
    r[13*i+11] |=  t[7] <<  3;
    2e88:	01236333          	or	t1,t1,s2
    r[13*i+12]  =  t[7] >>  5;
    2e8c:	0056d693          	srli	a3,a3,0x5
    r[13*i+ 0]  =  t[0];
    2e90:	01e50023          	sb	t5,0(a0)
    r[13*i+ 1] |=  t[1] <<  5;
    2e94:	009500a3          	sb	s1,1(a0)
    r[13*i+ 2]  =  t[1] >>  3;
    2e98:	01150123          	sb	a7,2(a0)
    r[13*i+ 3] |=  t[2] <<  2;
    2e9c:	008501a3          	sb	s0,3(a0)
    r[13*i+ 4] |=  t[3] <<  7;
    2ea0:	01050223          	sb	a6,4(a0)
    r[13*i+ 5]  =  t[3] >>  1;
    2ea4:	01d502a3          	sb	t4,5(a0)
    r[13*i+ 6] |=  t[4] <<  4;
    2ea8:	00750323          	sb	t2,6(a0)
    r[13*i+ 7]  =  t[4] >>  4;
    2eac:	00e503a3          	sb	a4,7(a0)
    r[13*i+ 8] |=  t[5] <<  1;
    2eb0:	01f50423          	sb	t6,8(a0)
    r[13*i+ 9] |=  t[6] <<  6;
    2eb4:	00c504a3          	sb	a2,9(a0)
    r[13*i+10]  =  t[6] >>  2;
    2eb8:	00f50523          	sb	a5,10(a0)
    r[13*i+11] |=  t[7] <<  3;
    2ebc:	006505a3          	sb	t1,11(a0)
    r[13*i+12]  =  t[7] >>  5;
    2ec0:	00d50623          	sb	a3,12(a0)
  for(i = 0; i < N/8; ++i) {
    2ec4:	00d50513          	addi	a0,a0,13
    2ec8:	02058593          	addi	a1,a1,32
    2ecc:	f0a29ee3          	bne	t0,a0,2de8 <pqcrystals_dilithium3_ref_polyt0_pack+0x30>
  }

  DBENCH_STOP(*tpack);
}
    2ed0:	02c12403          	lw	s0,44(sp)
    2ed4:	02812483          	lw	s1,40(sp)
    2ed8:	02412903          	lw	s2,36(sp)
    2edc:	02012983          	lw	s3,32(sp)
    2ee0:	01c12a03          	lw	s4,28(sp)
    2ee4:	01812a83          	lw	s5,24(sp)
    2ee8:	01412b03          	lw	s6,20(sp)
    2eec:	01012b83          	lw	s7,16(sp)
    2ef0:	00c12c03          	lw	s8,12(sp)
    2ef4:	03010113          	addi	sp,sp,48
    2ef8:	00008067          	ret

00002efc <pqcrystals_dilithium3_ref_polyt0_unpack>:
  DBENCH_START();

  for(i = 0; i < N/8; ++i) {
    r->coeffs[8*i+0]  = a[13*i+0];
    r->coeffs[8*i+0] |= (uint32_t)a[13*i+1] << 8;
    r->coeffs[8*i+0] &= 0x1FFF;
    2efc:	00002eb7          	lui	t4,0x2
    2f00:	1a058f13          	addi	t5,a1,416
    2f04:	fffe8e93          	addi	t4,t4,-1 # 1fff <pqcrystals_dilithium3_ref_polyveck_sub+0x4f>

    r->coeffs[8*i+7]  = a[13*i+11] >> 3;
    r->coeffs[8*i+7] |= (uint32_t)a[13*i+12] << 5;
    r->coeffs[8*i+7] &= 0x1FFF;

    r->coeffs[8*i+0] = (1 << (D-1)) - r->coeffs[8*i+0];
    2f08:	00001e37          	lui	t3,0x1
    r->coeffs[8*i+0]  = a[13*i+0];
    2f0c:	0005c783          	lbu	a5,0(a1)
  for(i = 0; i < N/8; ++i) {
    2f10:	00d58593          	addi	a1,a1,13
    2f14:	02050513          	addi	a0,a0,32
    r->coeffs[8*i+0]  = a[13*i+0];
    2f18:	fef52023          	sw	a5,-32(a0)
    r->coeffs[8*i+0] |= (uint32_t)a[13*i+1] << 8;
    2f1c:	ff45c303          	lbu	t1,-12(a1)
    2f20:	00831313          	slli	t1,t1,0x8
    2f24:	00f36333          	or	t1,t1,a5
    r->coeffs[8*i+0] &= 0x1FFF;
    2f28:	01d37333          	and	t1,t1,t4
    2f2c:	fe652023          	sw	t1,-32(a0)
    r->coeffs[8*i+1]  = a[13*i+1] >> 5;
    2f30:	ff45c703          	lbu	a4,-12(a1)
    r->coeffs[8*i+0] = (1 << (D-1)) - r->coeffs[8*i+0];
    2f34:	406e0333          	sub	t1,t3,t1
    r->coeffs[8*i+1]  = a[13*i+1] >> 5;
    2f38:	00575713          	srli	a4,a4,0x5
    2f3c:	fee52223          	sw	a4,-28(a0)
    r->coeffs[8*i+1] |= (uint32_t)a[13*i+2] << 3;
    2f40:	ff55c783          	lbu	a5,-11(a1)
    2f44:	00379793          	slli	a5,a5,0x3
    2f48:	00e7e7b3          	or	a5,a5,a4
    2f4c:	fef52223          	sw	a5,-28(a0)
    r->coeffs[8*i+1] |= (uint32_t)a[13*i+3] << 11;
    2f50:	ff65c883          	lbu	a7,-10(a1)
    2f54:	00b89893          	slli	a7,a7,0xb
    2f58:	00f8e8b3          	or	a7,a7,a5
    r->coeffs[8*i+1] &= 0x1FFF;
    2f5c:	01d8f8b3          	and	a7,a7,t4
    2f60:	ff152223          	sw	a7,-28(a0)
    r->coeffs[8*i+2]  = a[13*i+3] >> 2;
    2f64:	ff65c783          	lbu	a5,-10(a1)
    r->coeffs[8*i+1] = (1 << (D-1)) - r->coeffs[8*i+1];
    2f68:	411e08b3          	sub	a7,t3,a7
    r->coeffs[8*i+2]  = a[13*i+3] >> 2;
    2f6c:	0027d793          	srli	a5,a5,0x2
    2f70:	fef52423          	sw	a5,-24(a0)
    r->coeffs[8*i+2] |= (uint32_t)a[13*i+4] << 6;
    2f74:	ff75c803          	lbu	a6,-9(a1)
    2f78:	00681813          	slli	a6,a6,0x6
    2f7c:	00f86833          	or	a6,a6,a5
    r->coeffs[8*i+2] &= 0x1FFF;
    2f80:	01d87833          	and	a6,a6,t4
    2f84:	ff052423          	sw	a6,-24(a0)
    r->coeffs[8*i+3]  = a[13*i+4] >> 7;
    2f88:	ff75c783          	lbu	a5,-9(a1)
    r->coeffs[8*i+2] = (1 << (D-1)) - r->coeffs[8*i+2];
    2f8c:	410e0833          	sub	a6,t3,a6
    r->coeffs[8*i+3]  = a[13*i+4] >> 7;
    2f90:	0077d793          	srli	a5,a5,0x7
    2f94:	fef52623          	sw	a5,-20(a0)
    r->coeffs[8*i+3] |= (uint32_t)a[13*i+5] << 1;
    2f98:	ff85c703          	lbu	a4,-8(a1)
    2f9c:	00171713          	slli	a4,a4,0x1
    2fa0:	00f76733          	or	a4,a4,a5
    2fa4:	fee52623          	sw	a4,-20(a0)
    r->coeffs[8*i+3] |= (uint32_t)a[13*i+6] << 9;
    2fa8:	ff95c783          	lbu	a5,-7(a1)
    2fac:	00979793          	slli	a5,a5,0x9
    2fb0:	00e7e7b3          	or	a5,a5,a4
    r->coeffs[8*i+3] &= 0x1FFF;
    2fb4:	01d7f7b3          	and	a5,a5,t4
    2fb8:	fef52623          	sw	a5,-20(a0)
    r->coeffs[8*i+4]  = a[13*i+6] >> 4;
    2fbc:	ff95c703          	lbu	a4,-7(a1)
    r->coeffs[8*i+3] = (1 << (D-1)) - r->coeffs[8*i+3];
    2fc0:	40fe0633          	sub	a2,t3,a5
    r->coeffs[8*i+4]  = a[13*i+6] >> 4;
    2fc4:	00475793          	srli	a5,a4,0x4
    2fc8:	fef52823          	sw	a5,-16(a0)
    r->coeffs[8*i+4] |= (uint32_t)a[13*i+7] << 4;
    2fcc:	ffa5c703          	lbu	a4,-6(a1)
    2fd0:	00471713          	slli	a4,a4,0x4
    2fd4:	00f76733          	or	a4,a4,a5
    2fd8:	fee52823          	sw	a4,-16(a0)
    r->coeffs[8*i+4] |= (uint32_t)a[13*i+8] << 12;
    2fdc:	ffb5c783          	lbu	a5,-5(a1)
    2fe0:	00c79793          	slli	a5,a5,0xc
    2fe4:	00e7e7b3          	or	a5,a5,a4
    r->coeffs[8*i+4] &= 0x1FFF;
    2fe8:	01d7f7b3          	and	a5,a5,t4
    2fec:	fef52823          	sw	a5,-16(a0)
    r->coeffs[8*i+5]  = a[13*i+8] >> 1;
    2ff0:	ffb5c703          	lbu	a4,-5(a1)
    r->coeffs[8*i+4] = (1 << (D-1)) - r->coeffs[8*i+4];
    2ff4:	40fe06b3          	sub	a3,t3,a5
    r->coeffs[8*i+5]  = a[13*i+8] >> 1;
    2ff8:	00175713          	srli	a4,a4,0x1
    2ffc:	fee52a23          	sw	a4,-12(a0)
    r->coeffs[8*i+5] |= (uint32_t)a[13*i+9] << 7;
    3000:	ffc5c783          	lbu	a5,-4(a1)
    3004:	00779793          	slli	a5,a5,0x7
    3008:	00e7e7b3          	or	a5,a5,a4
    r->coeffs[8*i+5] &= 0x1FFF;
    300c:	01d7f7b3          	and	a5,a5,t4
    3010:	fef52a23          	sw	a5,-12(a0)
    r->coeffs[8*i+6]  = a[13*i+9] >> 6;
    3014:	ffc5cf83          	lbu	t6,-4(a1)
    r->coeffs[8*i+5] = (1 << (D-1)) - r->coeffs[8*i+5];
    3018:	40fe0733          	sub	a4,t3,a5
    r->coeffs[8*i+6]  = a[13*i+9] >> 6;
    301c:	006fd793          	srli	a5,t6,0x6
    3020:	fef52c23          	sw	a5,-8(a0)
    r->coeffs[8*i+6] |= (uint32_t)a[13*i+10] << 2;
    3024:	ffd5cf83          	lbu	t6,-3(a1)
    3028:	002f9f93          	slli	t6,t6,0x2
    302c:	00ffefb3          	or	t6,t6,a5
    3030:	fff52c23          	sw	t6,-8(a0)
    r->coeffs[8*i+6] |= (uint32_t)a[13*i+11] << 10;
    3034:	ffe5c783          	lbu	a5,-2(a1)
    3038:	00a79793          	slli	a5,a5,0xa
    303c:	01f7e7b3          	or	a5,a5,t6
    r->coeffs[8*i+6] &= 0x1FFF;
    3040:	01d7f7b3          	and	a5,a5,t4
    3044:	fef52c23          	sw	a5,-8(a0)
    r->coeffs[8*i+7]  = a[13*i+11] >> 3;
    3048:	ffe5c283          	lbu	t0,-2(a1)
    r->coeffs[8*i+6] = (1 << (D-1)) - r->coeffs[8*i+6];
    304c:	40fe07b3          	sub	a5,t3,a5
    r->coeffs[8*i+7]  = a[13*i+11] >> 3;
    3050:	0032d293          	srli	t0,t0,0x3
    3054:	fe552e23          	sw	t0,-4(a0)
    r->coeffs[8*i+7] |= (uint32_t)a[13*i+12] << 5;
    3058:	fff5cf83          	lbu	t6,-1(a1)
    r->coeffs[8*i+1] = (1 << (D-1)) - r->coeffs[8*i+1];
    305c:	ff152223          	sw	a7,-28(a0)
    r->coeffs[8*i+0] = (1 << (D-1)) - r->coeffs[8*i+0];
    3060:	fe652023          	sw	t1,-32(a0)
    r->coeffs[8*i+7] |= (uint32_t)a[13*i+12] << 5;
    3064:	005f9893          	slli	a7,t6,0x5
    3068:	0058e8b3          	or	a7,a7,t0
    r->coeffs[8*i+7] = (1 << (D-1)) - r->coeffs[8*i+7];
    306c:	411e08b3          	sub	a7,t3,a7
    r->coeffs[8*i+2] = (1 << (D-1)) - r->coeffs[8*i+2];
    3070:	ff052423          	sw	a6,-24(a0)
    r->coeffs[8*i+3] = (1 << (D-1)) - r->coeffs[8*i+3];
    3074:	fec52623          	sw	a2,-20(a0)
    r->coeffs[8*i+4] = (1 << (D-1)) - r->coeffs[8*i+4];
    3078:	fed52823          	sw	a3,-16(a0)
    r->coeffs[8*i+5] = (1 << (D-1)) - r->coeffs[8*i+5];
    307c:	fee52a23          	sw	a4,-12(a0)
    r->coeffs[8*i+6] = (1 << (D-1)) - r->coeffs[8*i+6];
    3080:	fef52c23          	sw	a5,-8(a0)
    r->coeffs[8*i+7] = (1 << (D-1)) - r->coeffs[8*i+7];
    3084:	ff152e23          	sw	a7,-4(a0)
  for(i = 0; i < N/8; ++i) {
    3088:	e8bf12e3          	bne	t5,a1,2f0c <pqcrystals_dilithium3_ref_polyt0_unpack+0x10>
  }

  DBENCH_STOP(*tpack);
}
    308c:	00008067          	ret

00003090 <pqcrystals_dilithium3_ref_polyz_pack>:
    r[9*i+6] |= t[3] << 6;
    r[9*i+7]  = t[3] >> 2;
    r[9*i+8]  = t[3] >> 10;
  }
#elif GAMMA1 == (1 << 19)
  for(i = 0; i < N/2; ++i) {
    3090:	28050313          	addi	t1,a0,640
    t[0] = GAMMA1 - a->coeffs[2*i+0];
    3094:	00080637          	lui	a2,0x80
    3098:	0005a703          	lw	a4,0(a1)
    t[1] = GAMMA1 - a->coeffs[2*i+1];
    309c:	0045a783          	lw	a5,4(a1)
  for(i = 0; i < N/2; ++i) {
    30a0:	00550513          	addi	a0,a0,5
    t[0] = GAMMA1 - a->coeffs[2*i+0];
    30a4:	40e60733          	sub	a4,a2,a4
    t[1] = GAMMA1 - a->coeffs[2*i+1];
    30a8:	40f607b3          	sub	a5,a2,a5

    r[5*i+0]  = t[0];
    r[5*i+1]  = t[0] >> 8;
    r[5*i+2]  = t[0] >> 16;
    r[5*i+2] |= t[1] << 4;
    30ac:	00479813          	slli	a6,a5,0x4
    r[5*i+2]  = t[0] >> 16;
    30b0:	01075693          	srli	a3,a4,0x10
    r[5*i+2] |= t[1] << 4;
    30b4:	0106e6b3          	or	a3,a3,a6
    r[5*i+1]  = t[0] >> 8;
    30b8:	00875893          	srli	a7,a4,0x8
    r[5*i+3]  = t[1] >> 4;
    30bc:	0047d813          	srli	a6,a5,0x4
    r[5*i+4]  = t[1] >> 12;
    30c0:	00c7d793          	srli	a5,a5,0xc
    r[5*i+0]  = t[0];
    30c4:	fee50da3          	sb	a4,-5(a0)
    r[5*i+1]  = t[0] >> 8;
    30c8:	ff150e23          	sb	a7,-4(a0)
    r[5*i+2] |= t[1] << 4;
    30cc:	fed50ea3          	sb	a3,-3(a0)
    r[5*i+3]  = t[1] >> 4;
    30d0:	ff050f23          	sb	a6,-2(a0)
    r[5*i+4]  = t[1] >> 12;
    30d4:	fef50fa3          	sb	a5,-1(a0)
  for(i = 0; i < N/2; ++i) {
    30d8:	00858593          	addi	a1,a1,8
    30dc:	faa31ee3          	bne	t1,a0,3098 <pqcrystals_dilithium3_ref_polyz_pack+0x8>
  }
#endif

  DBENCH_STOP(*tpack);
}
    30e0:	00008067          	ret

000030e4 <pqcrystals_dilithium3_ref_polyz_unpack>:
#elif GAMMA1 == (1 << 19)
  for(i = 0; i < N/2; ++i) {
    r->coeffs[2*i+0]  = a[5*i+0];
    r->coeffs[2*i+0] |= (uint32_t)a[5*i+1] << 8;
    r->coeffs[2*i+0] |= (uint32_t)a[5*i+2] << 16;
    r->coeffs[2*i+0] &= 0xFFFFF;
    30e4:	00100837          	lui	a6,0x100
    30e8:	28058893          	addi	a7,a1,640
    30ec:	fff80813          	addi	a6,a6,-1 # fffff <_end_of_memory+0xcffff>
    r->coeffs[2*i+1]  = a[5*i+2] >> 4;
    r->coeffs[2*i+1] |= (uint32_t)a[5*i+3] << 4;
    r->coeffs[2*i+1] |= (uint32_t)a[5*i+4] << 12;
    r->coeffs[2*i+0] &= 0xFFFFF;

    r->coeffs[2*i+0] = GAMMA1 - r->coeffs[2*i+0];
    30f0:	00080637          	lui	a2,0x80
    r->coeffs[2*i+0]  = a[5*i+0];
    30f4:	0005c783          	lbu	a5,0(a1)
  for(i = 0; i < N/2; ++i) {
    30f8:	00558593          	addi	a1,a1,5
    30fc:	00850513          	addi	a0,a0,8
    r->coeffs[2*i+0]  = a[5*i+0];
    3100:	fef52c23          	sw	a5,-8(a0)
    r->coeffs[2*i+0] |= (uint32_t)a[5*i+1] << 8;
    3104:	ffc5c703          	lbu	a4,-4(a1)
    3108:	00871713          	slli	a4,a4,0x8
    310c:	00f76733          	or	a4,a4,a5
    3110:	fee52c23          	sw	a4,-8(a0)
    r->coeffs[2*i+0] |= (uint32_t)a[5*i+2] << 16;
    3114:	ffd5c783          	lbu	a5,-3(a1)
    3118:	01079793          	slli	a5,a5,0x10
    311c:	00e7e7b3          	or	a5,a5,a4
    r->coeffs[2*i+0] &= 0xFFFFF;
    3120:	0107f7b3          	and	a5,a5,a6
    3124:	fef52c23          	sw	a5,-8(a0)
    r->coeffs[2*i+1]  = a[5*i+2] >> 4;
    3128:	ffd5c703          	lbu	a4,-3(a1)
    r->coeffs[2*i+0] = GAMMA1 - r->coeffs[2*i+0];
    312c:	40f607b3          	sub	a5,a2,a5
    r->coeffs[2*i+1]  = a[5*i+2] >> 4;
    3130:	00475713          	srli	a4,a4,0x4
    3134:	fee52e23          	sw	a4,-4(a0)
    r->coeffs[2*i+1] |= (uint32_t)a[5*i+3] << 4;
    3138:	ffe5c683          	lbu	a3,-2(a1)
    313c:	00469693          	slli	a3,a3,0x4
    3140:	00e6e6b3          	or	a3,a3,a4
    3144:	fed52e23          	sw	a3,-4(a0)
    r->coeffs[2*i+1] |= (uint32_t)a[5*i+4] << 12;
    3148:	fff5c703          	lbu	a4,-1(a1)
    r->coeffs[2*i+0] = GAMMA1 - r->coeffs[2*i+0];
    314c:	fef52c23          	sw	a5,-8(a0)
    r->coeffs[2*i+1] |= (uint32_t)a[5*i+4] << 12;
    3150:	00c71793          	slli	a5,a4,0xc
    3154:	00d7e7b3          	or	a5,a5,a3
    r->coeffs[2*i+1] = GAMMA1 - r->coeffs[2*i+1];
    3158:	40f607b3          	sub	a5,a2,a5
    315c:	fef52e23          	sw	a5,-4(a0)
  for(i = 0; i < N/2; ++i) {
    3160:	f9159ae3          	bne	a1,a7,30f4 <pqcrystals_dilithium3_ref_polyz_unpack+0x10>
  }
#endif

  DBENCH_STOP(*tpack);
}
    3164:	00008067          	ret

00003168 <pqcrystals_dilithium3_ref_poly_uniform_gamma1>:
{
    3168:	c7010113          	addi	sp,sp,-912
    316c:	38812423          	sw	s0,904(sp)
    3170:	00050413          	mv	s0,a0
  stream256_init(&state, seed, nonce);
    3174:	00810513          	addi	a0,sp,8
{
    3178:	38112623          	sw	ra,908(sp)
  stream256_init(&state, seed, nonce);
    317c:	7bd030ef          	jal	ra,7138 <pqcrystals_dilithium3_ref_dilithium_shake256_stream_init>
  stream256_squeezeblocks(buf, POLY_UNIFORM_GAMMA1_NBLOCKS, &state);
    3180:	00810613          	addi	a2,sp,8
    3184:	0d810513          	addi	a0,sp,216
    3188:	00500593          	li	a1,5
    318c:	51c030ef          	jal	ra,66a8 <pqcrystals_dilithium_fips202_ref_shake256_squeezeblocks>
  polyz_unpack(a, buf);
    3190:	0d810593          	addi	a1,sp,216
    3194:	00040513          	mv	a0,s0
    3198:	f4dff0ef          	jal	ra,30e4 <pqcrystals_dilithium3_ref_polyz_unpack>
}
    319c:	38c12083          	lw	ra,908(sp)
    31a0:	38812403          	lw	s0,904(sp)
    31a4:	39010113          	addi	sp,sp,912
    31a8:	00008067          	ret

000031ac <pqcrystals_dilithium3_ref_polyw1_pack>:
    r[3*i+1] |= a->coeffs[4*i+2] << 4;
    r[3*i+2]  = a->coeffs[4*i+2] >> 4;
    r[3*i+2] |= a->coeffs[4*i+3] << 2;
  }
#elif GAMMA2 == (Q-1)/32
  for(i = 0; i < N/2; ++i)
    31ac:	40058693          	addi	a3,a1,1024
    r[i] = a->coeffs[2*i+0] | (a->coeffs[2*i+1] << 4);
    31b0:	0045a783          	lw	a5,4(a1)
    31b4:	0005a703          	lw	a4,0(a1)
  for(i = 0; i < N/2; ++i)
    31b8:	00858593          	addi	a1,a1,8
    r[i] = a->coeffs[2*i+0] | (a->coeffs[2*i+1] << 4);
    31bc:	00479793          	slli	a5,a5,0x4
    31c0:	00e7e7b3          	or	a5,a5,a4
    31c4:	00f50023          	sb	a5,0(a0)
  for(i = 0; i < N/2; ++i)
    31c8:	00150513          	addi	a0,a0,1
    31cc:	feb692e3          	bne	a3,a1,31b0 <pqcrystals_dilithium3_ref_polyw1_pack+0x4>
#endif

  DBENCH_STOP(*tpack);
}
    31d0:	00008067          	ret

000031d4 <pqcrystals_dilithium3_ref_ntt>:
* Description: Forward NTT, in-place. No modular reduction is performed after
*              additions or subtractions. Output vector is in bitreversed order.
*
* Arguments:   - uint32_t p[N]: input/output coefficient array
**************************************************/
void ntt(int32_t a[N]) {
    31d4:	fe010113          	addi	sp,sp,-32
    31d8:	01312a23          	sw	s3,20(sp)
    31dc:	01912223          	sw	s9,4(sp)
    31e0:	00912e23          	sw	s1,28(sp)
    31e4:	01212c23          	sw	s2,24(sp)
    31e8:	01412823          	sw	s4,16(sp)
    31ec:	01612623          	sw	s6,12(sp)
    31f0:	01712423          	sw	s7,8(sp)
  #else
  unsigned int len, start, j, k;
  int32_t zeta, t;
  #endif

  k = 0;
    31f4:	00000993          	li	s3,0
  for(len = 128; len > 0; len >>= 1) {
    31f8:	08000c93          	li	s9,128
    31fc:	00005617          	auipc	a2,0x5
    3200:	3f460613          	addi	a2,a2,1012 # 85f0 <zetas>
    for(start = 0; start < N; start = j + len) {
    3204:	0ff00693          	li	a3,255
      zeta = zetas[++k];
      for(j = start; j < start + len; ++j) {
    3208:	000c8713          	mv	a4,s9
    for(start = 0; start < N; start = j + len) {
    320c:	00000493          	li	s1,0
      zeta = zetas[++k];
    3210:	00198993          	addi	s3,s3,1
    3214:	00299793          	slli	a5,s3,0x2
      for(j = start; j < start + len; ++j) {
    3218:	00048913          	mv	s2,s1
      zeta = zetas[++k];
    321c:	00f607b3          	add	a5,a2,a5
      for(j = start; j < start + len; ++j) {
    3220:	00e484b3          	add	s1,s1,a4
      zeta = zetas[++k];
    3224:	0007aa03          	lw	s4,0(a5)
      for(j = start; j < start + len; ++j) {
    3228:	04997663          	bgeu	s2,s1,3274 <pqcrystals_dilithium3_ref_ntt+0xa0>
        #ifdef FPAU
        //coeff0 = a[j];
        //coeff1 = a[j + len];

        // load coeff0
        asm volatile("mv t0, s2");
    322c:	00090293          	mv	t0,s2
        asm volatile("slli t0, t0, 0x2");
    3230:	00229293          	slli	t0,t0,0x2
        asm volatile("add t0, a0, t0");
    3234:	005502b3          	add	t0,a0,t0
        asm volatile("lw s6, 0(t0)");
    3238:	0002ab03          	lw	s6,0(t0)

        // load coeff1
        asm volatile("add t1, s2, s9");
    323c:	01990333          	add	t1,s2,s9
        asm volatile("slli t1, t1, 0x2");
    3240:	00231313          	slli	t1,t1,0x2
        asm volatile("add t1, a0, t1");
    3244:	00650333          	add	t1,a0,t1
        asm volatile("lw s7, 0(t1)");
    3248:	00032b83          	lw	s7,0(t1)

        // Compute butterfly operation
#ifndef STEEL
        asm volatile ("nop"); //ORCA
    324c:	00000013          	nop
        asm volatile ("nop"); //ORCA
    3250:	00000013          	nop
        asm volatile ("nop"); //ORCA
    3254:	00000013          	nop
#endif
        asm volatile("fpau.dil.bf %0, %1,%2\n":"=r"(coeff0):"r"(coeff1),"r"(zeta): );
    3258:	614bab33          	fpau.dil.bf	s6,s7,s4
        
        // Store results in same position
        asm volatile("sw s6, 0(t0)");
    325c:	0162a023          	sw	s6,0(t0)
        asm volatile("nop"); //ORCA and STEEL (2nd output written in next cycle)
    3260:	00000013          	nop
        asm volatile("sw s7, 0(t1)");
    3264:	01732023          	sw	s7,0(t1)
      for(j = start; j < start + len; ++j) {
    3268:	00190913          	addi	s2,s2,1
    326c:	fc9960e3          	bltu	s2,s1,322c <pqcrystals_dilithium3_ref_ntt+0x58>
    for(start = 0; start < N; start = j + len) {
    3270:	00e904b3          	add	s1,s2,a4
    3274:	f896fee3          	bgeu	a3,s1,3210 <pqcrystals_dilithium3_ref_ntt+0x3c>
  for(len = 128; len > 0; len >>= 1) {
    3278:	001cdc93          	srli	s9,s9,0x1
    327c:	f80c96e3          	bnez	s9,3208 <pqcrystals_dilithium3_ref_ntt+0x34>
        a[j] = a[j] + t;
        #endif
      }
    }
  }
}
    3280:	01c12483          	lw	s1,28(sp)
    3284:	01812903          	lw	s2,24(sp)
    3288:	01412983          	lw	s3,20(sp)
    328c:	01012a03          	lw	s4,16(sp)
    3290:	00c12b03          	lw	s6,12(sp)
    3294:	00812b83          	lw	s7,8(sp)
    3298:	00412c83          	lw	s9,4(sp)
    329c:	02010113          	addi	sp,sp,32
    32a0:	00008067          	ret

000032a4 <pqcrystals_dilithium3_ref_invntt_tomont>:
*              Q in absolute value. Output coefficient are smaller than Q in
*              absolute value.
*
* Arguments:   - uint32_t p[N]: input/output coefficient array
**************************************************/
void invntt_tomont(int32_t a[N]) {
    32a4:	fe010113          	addi	sp,sp,-32
    32a8:	01312a23          	sw	s3,20(sp)
    32ac:	01912223          	sw	s9,4(sp)
    32b0:	00912e23          	sw	s1,28(sp)
    32b4:	01212c23          	sw	s2,24(sp)
    32b8:	01412823          	sw	s4,16(sp)
    32bc:	01612623          	sw	s6,12(sp)
    32c0:	01712423          	sw	s7,8(sp)
  unsigned int start, len, j, k;
  int32_t t, zeta;
  const int32_t f = 41978; // mont^2/256
#endif

  k = 256;
    32c4:	10000993          	li	s3,256
  for(len = 1; len < N; len <<= 1) {
    32c8:	00100c93          	li	s9,1
    32cc:	00005617          	auipc	a2,0x5
    32d0:	32460613          	addi	a2,a2,804 # 85f0 <zetas>
    for(start = 0; start < N; start = j + len) {
    32d4:	0ff00693          	li	a3,255
      zeta = -zetas[--k];
      for(j = start; j < start + len; ++j) {
    32d8:	000c8713          	mv	a4,s9
    for(start = 0; start < N; start = j + len) {
    32dc:	00000493          	li	s1,0
      zeta = -zetas[--k];
    32e0:	fff98993          	addi	s3,s3,-1
    32e4:	00299793          	slli	a5,s3,0x2
    32e8:	00f607b3          	add	a5,a2,a5
    32ec:	0007aa03          	lw	s4,0(a5)
      for(j = start; j < start + len; ++j) {
    32f0:	00048913          	mv	s2,s1
    32f4:	00e484b3          	add	s1,s1,a4
      zeta = -zetas[--k];
    32f8:	41400a33          	neg	s4,s4
      for(j = start; j < start + len; ++j) {
    32fc:	04997663          	bgeu	s2,s1,3348 <pqcrystals_dilithium3_ref_invntt_tomont+0xa4>
#ifdef FPAU
        //coeff0 = a[j];
        //coeff1 = a[j + len];

        // load coeff0
        asm volatile("mv t0, s2");
    3300:	00090293          	mv	t0,s2
        asm volatile("slli t0, t0, 0x2");
    3304:	00229293          	slli	t0,t0,0x2
        asm volatile("add t0, a0, t0");
    3308:	005502b3          	add	t0,a0,t0
        asm volatile("lw s6, 0(t0)");
    330c:	0002ab03          	lw	s6,0(t0)

        // load coeff1
        asm volatile("add t1, s2, s9");
    3310:	01990333          	add	t1,s2,s9
        asm volatile("slli t1, t1, 0x2");
    3314:	00231313          	slli	t1,t1,0x2
        asm volatile("add t1, a0, t1");
    3318:	00650333          	add	t1,a0,t1
        asm volatile("lw s7, 0(t1)");
    331c:	00032b83          	lw	s7,0(t1)

        // Compute butterfly operation
#ifndef STEEL
        asm volatile ("nop"); //ORCA
    3320:	00000013          	nop
        asm volatile ("nop"); //ORCA
    3324:	00000013          	nop
        asm volatile ("nop"); //ORCA cached
    3328:	00000013          	nop
#endif
        asm volatile("fpau.dil.bfinv %0, %1,%2\n":"=r"(coeff0):"r"(coeff1),"r"(zeta): );
    332c:	714bab33          	fpau.dil.bfinv	s6,s7,s4

        // Store results in same position
        asm volatile("sw s6, 0(t0)");
    3330:	0162a023          	sw	s6,0(t0)
        asm volatile("nop"); //ORCA and STEEL (2nd output written in next cycle)
    3334:	00000013          	nop
        asm volatile("sw s7, 0(t1)");
    3338:	01732023          	sw	s7,0(t1)
      for(j = start; j < start + len; ++j) {
    333c:	00190913          	addi	s2,s2,1
    3340:	fc9960e3          	bltu	s2,s1,3300 <pqcrystals_dilithium3_ref_invntt_tomont+0x5c>
    for(start = 0; start < N; start = j + len) {
    3344:	00e904b3          	add	s1,s2,a4
    3348:	f896fce3          	bgeu	a3,s1,32e0 <pqcrystals_dilithium3_ref_invntt_tomont+0x3c>
  for(len = 1; len < N; len <<= 1) {
    334c:	001c9c93          	slli	s9,s9,0x1
    3350:	f996f4e3          	bgeu	a3,s9,32d8 <pqcrystals_dilithium3_ref_invntt_tomont+0x34>
#ifndef STEEL
        asm volatile("nop"); //ORCA
        asm volatile("nop"); //ORCA
        asm volatile("nop"); //ORCA
#endif
        asm volatile("fpau.dil.bfinv %0, %1,%2\n":"=r"(coeff0):"r"(coeff1),"r"(ninv): );  //bfinv instead of mac to not overwrite ninv constant
    3354:	007f67b7          	lui	a5,0x7f6
  for(j = 0; j < N; ++j) {
    3358:	00000913          	li	s2,0
        asm volatile("fpau.dil.bfinv %0, %1,%2\n":"=r"(coeff0):"r"(coeff1),"r"(ninv): );  //bfinv instead of mac to not overwrite ninv constant
    335c:	02178793          	addi	a5,a5,33 # 7f6021 <_end_of_memory+0x7c6021>
  for(j = 0; j < N; ++j) {
    3360:	0ff00713          	li	a4,255
        asm volatile("mv t0, s2");
    3364:	00090293          	mv	t0,s2
        asm volatile("slli t0, t0, 0x2");
    3368:	00229293          	slli	t0,t0,0x2
        asm volatile("add t0, a0, t0");
    336c:	005502b3          	add	t0,a0,t0
        asm volatile("lw s6, 0(t0)");
    3370:	0002ab03          	lw	s6,0(t0)
        asm volatile("li s7, 0"); // coeff1
    3374:	00000b93          	li	s7,0
        asm volatile("nop"); //ORCA
    3378:	00000013          	nop
        asm volatile("nop"); //ORCA
    337c:	00000013          	nop
        asm volatile("nop"); //ORCA
    3380:	00000013          	nop
        asm volatile("fpau.dil.bfinv %0, %1,%2\n":"=r"(coeff0):"r"(coeff1),"r"(ninv): );  //bfinv instead of mac to not overwrite ninv constant
    3384:	70fbab33          	fpau.dil.bfinv	s6,s7,a5
        asm volatile("nop");
    3388:	00000013          	nop
        asm volatile("nop"); //ORCA and STEEL (2nd output written in next cycle)
    338c:	00000013          	nop

        // store result
        asm volatile("sw s7, 0(t0)");
    3390:	0172a023          	sw	s7,0(t0)
  for(j = 0; j < N; ++j) {
    3394:	00190913          	addi	s2,s2,1
    3398:	fd2776e3          	bgeu	a4,s2,3364 <pqcrystals_dilithium3_ref_invntt_tomont+0xc0>
#else
  for(j = 0; j < N; ++j) {
    a[j] = montgomery_reduce((int64_t)f * a[j]);
  }
#endif
}
    339c:	01c12483          	lw	s1,28(sp)
    33a0:	01812903          	lw	s2,24(sp)
    33a4:	01412983          	lw	s3,20(sp)
    33a8:	01012a03          	lw	s4,16(sp)
    33ac:	00c12b03          	lw	s6,12(sp)
    33b0:	00812b83          	lw	s7,8(sp)
    33b4:	00412c83          	lw	s9,4(sp)
    33b8:	02010113          	addi	sp,sp,32
    33bc:	00008067          	ret

000033c0 <pqcrystals_dilithium3_ref_montgomery_reduce>:
* Returns r.
**************************************************/
int32_t montgomery_reduce(int64_t a) {
  int32_t t;

  t = (int64_t)(int32_t)a*QINV;
    33c0:	03802737          	lui	a4,0x3802
    33c4:	00170713          	addi	a4,a4,1 # 3802001 <_end_of_memory+0x37d2001>
    33c8:	02e50733          	mul	a4,a0,a4
  t = (a - (int64_t)t*Q) >> 32;
    33cc:	41f75813          	srai	a6,a4,0x1f
    33d0:	01675613          	srli	a2,a4,0x16
    33d4:	00a81793          	slli	a5,a6,0xa
    33d8:	00a71693          	slli	a3,a4,0xa
    33dc:	40d706b3          	sub	a3,a4,a3
    33e0:	00f667b3          	or	a5,a2,a5
    33e4:	40f807b3          	sub	a5,a6,a5
    33e8:	00d73633          	sltu	a2,a4,a3
    33ec:	40c787b3          	sub	a5,a5,a2
    33f0:	00d79793          	slli	a5,a5,0xd
    33f4:	00d69613          	slli	a2,a3,0xd
    33f8:	0136d693          	srli	a3,a3,0x13
    33fc:	40e60733          	sub	a4,a2,a4
    3400:	00f6e7b3          	or	a5,a3,a5
    3404:	00e63633          	sltu	a2,a2,a4
    3408:	410787b3          	sub	a5,a5,a6
    340c:	40c787b3          	sub	a5,a5,a2
    3410:	00a70533          	add	a0,a4,a0
    3414:	00e53533          	sltu	a0,a0,a4
    3418:	00b787b3          	add	a5,a5,a1
  return t;
}
    341c:	00f50533          	add	a0,a0,a5
    3420:	00008067          	ret

00003424 <pqcrystals_dilithium3_ref_reduce32>:
* Returns r.
**************************************************/
int32_t reduce32(int32_t a) {
  int32_t t;

  t = (a + (1 << 22)) >> 23;
    3424:	004007b7          	lui	a5,0x400
    3428:	00f507b3          	add	a5,a0,a5
  t = a - t*Q;
    342c:	ff802737          	lui	a4,0xff802
    3430:	fff70713          	addi	a4,a4,-1 # ff801fff <_end_of_memory+0xff7d1fff>
  t = (a + (1 << 22)) >> 23;
    3434:	4177d793          	srai	a5,a5,0x17
  t = a - t*Q;
    3438:	02e787b3          	mul	a5,a5,a4
  return t;
}
    343c:	00a78533          	add	a0,a5,a0
    3440:	00008067          	ret

00003444 <pqcrystals_dilithium3_ref_caddq>:
* Arguments:   - int32_t: finite field element a
*
* Returns r.
**************************************************/
int32_t caddq(int32_t a) {
  a += (a >> 31) & Q;
    3444:	007fe737          	lui	a4,0x7fe
    3448:	41f55793          	srai	a5,a0,0x1f
    344c:	00170713          	addi	a4,a4,1 # 7fe001 <_end_of_memory+0x7ce001>
    3450:	00e7f7b3          	and	a5,a5,a4
  return a;
}
    3454:	00a78533          	add	a0,a5,a0
    3458:	00008067          	ret

0000345c <pqcrystals_dilithium3_ref_freeze>:
  t = (a + (1 << 22)) >> 23;
    345c:	004007b7          	lui	a5,0x400
    3460:	00f507b3          	add	a5,a0,a5
  t = a - t*Q;
    3464:	ff802737          	lui	a4,0xff802
    3468:	fff70713          	addi	a4,a4,-1 # ff801fff <_end_of_memory+0xff7d1fff>
  t = (a + (1 << 22)) >> 23;
    346c:	4177d793          	srai	a5,a5,0x17
  t = a - t*Q;
    3470:	02e787b3          	mul	a5,a5,a4
  a += (a >> 31) & Q;
    3474:	007fe737          	lui	a4,0x7fe
    3478:	00170713          	addi	a4,a4,1 # 7fe001 <_end_of_memory+0x7ce001>
  t = a - t*Q;
    347c:	00f50533          	add	a0,a0,a5
  a += (a >> 31) & Q;
    3480:	41f55793          	srai	a5,a0,0x1f
    3484:	00e7f7b3          	and	a5,a5,a4
**************************************************/
int32_t freeze(int32_t a) {
  a = reduce32(a);
  a = caddq(a);
  return a;
}
    3488:	00a78533          	add	a0,a5,a0
    348c:	00008067          	ret

00003490 <pqcrystals_dilithium3_ref_power2round>:
* Returns a1.
**************************************************/
int32_t power2round(int32_t *a0, int32_t a)  {
  int32_t a1;

  a1 = (a + (1 << (D-1)) - 1) >> D;
    3490:	000017b7          	lui	a5,0x1
    3494:	fff78793          	addi	a5,a5,-1 # fff <pqcrystals_dilithium3_ref_pack_pk+0x77>
    3498:	00f587b3          	add	a5,a1,a5
  *a0 = a - (a1 << D);
    349c:	ffffe737          	lui	a4,0xffffe
    34a0:	00e7f733          	and	a4,a5,a4
    34a4:	40e585b3          	sub	a1,a1,a4
    34a8:	00b52023          	sw	a1,0(a0)
  return a1;
}
    34ac:	40d7d513          	srai	a0,a5,0xd
    34b0:	00008067          	ret

000034b4 <pqcrystals_dilithium3_ref_decompose>:
* Returns a1.
**************************************************/
int32_t decompose(int32_t *a0, int32_t a) {
  int32_t a1;

  a1  = (a + 127) >> 7;
    34b4:	07f58713          	addi	a4,a1,127
    34b8:	40775713          	srai	a4,a4,0x7
#if GAMMA2 == (Q-1)/32
  a1  = (a1*1025 + (1 << 21)) >> 22;
    34bc:	00a71793          	slli	a5,a4,0xa
    34c0:	00e787b3          	add	a5,a5,a4
    34c4:	00200737          	lui	a4,0x200
    34c8:	00e787b3          	add	a5,a5,a4
    34cc:	4167d793          	srai	a5,a5,0x16
  a1 &= 15;
    34d0:	00f7f793          	andi	a5,a5,15
#elif GAMMA2 == (Q-1)/88
  a1  = (a1*11275 + (1 << 23)) >> 24;
  a1 ^= ((43 - a1) >> 31) & a1;
#endif

  *a0  = a - a1*2*GAMMA2;
    34d4:	00a79713          	slli	a4,a5,0xa
    34d8:	40e78733          	sub	a4,a5,a4
    34dc:	00971713          	slli	a4,a4,0x9
    34e0:	00b705b3          	add	a1,a4,a1
  *a0 -= (((Q-1)/2 - *a0) >> 31) & Q;
    34e4:	003ff737          	lui	a4,0x3ff
    34e8:	40b70733          	sub	a4,a4,a1
    34ec:	007fe6b7          	lui	a3,0x7fe
    34f0:	00168693          	addi	a3,a3,1 # 7fe001 <_end_of_memory+0x7ce001>
    34f4:	41f75713          	srai	a4,a4,0x1f
    34f8:	00d77733          	and	a4,a4,a3
    34fc:	40e585b3          	sub	a1,a1,a4
    3500:	00b52023          	sw	a1,0(a0)
  return a1;
}
    3504:	00078513          	mv	a0,a5
    3508:	00008067          	ret

0000350c <pqcrystals_dilithium3_ref_make_hint>:
*              - int32_t a1: high bits of input element
*
* Returns 1 if overflow.
**************************************************/
unsigned int make_hint(int32_t a0, int32_t a1) {
  if(a0 > GAMMA2 || a0 < -GAMMA2 || (a0 == -GAMMA2 && a1 != 0))
    350c:	000407b7          	lui	a5,0x40
    3510:	f0078793          	addi	a5,a5,-256 # 3ff00 <_end_of_memory+0xff00>
    3514:	000806b7          	lui	a3,0x80
    3518:	00f507b3          	add	a5,a0,a5
    351c:	e0068693          	addi	a3,a3,-512 # 7fe00 <_end_of_memory+0x4fe00>
unsigned int make_hint(int32_t a0, int32_t a1) {
    3520:	00050713          	mv	a4,a0
  if(a0 > GAMMA2 || a0 < -GAMMA2 || (a0 == -GAMMA2 && a1 != 0))
    3524:	02f6e063          	bltu	a3,a5,3544 <pqcrystals_dilithium3_ref_make_hint+0x38>
    3528:	fffc07b7          	lui	a5,0xfffc0
    352c:	10078793          	addi	a5,a5,256 # fffc0100 <_end_of_memory+0xfff90100>
    return 1;

  return 0;
    3530:	00000513          	li	a0,0
  if(a0 > GAMMA2 || a0 < -GAMMA2 || (a0 == -GAMMA2 && a1 != 0))
    3534:	00f70463          	beq	a4,a5,353c <pqcrystals_dilithium3_ref_make_hint+0x30>
}
    3538:	00008067          	ret
  if(a0 > GAMMA2 || a0 < -GAMMA2 || (a0 == -GAMMA2 && a1 != 0))
    353c:	00b03533          	snez	a0,a1
    3540:	00008067          	ret
    return 1;
    3544:	00100513          	li	a0,1
}
    3548:	00008067          	ret

0000354c <pqcrystals_dilithium3_ref_use_hint>:
  a1  = (a + 127) >> 7;
    354c:	07f50713          	addi	a4,a0,127
    3550:	40775713          	srai	a4,a4,0x7
  a1  = (a1*1025 + (1 << 21)) >> 22;
    3554:	00a71793          	slli	a5,a4,0xa
    3558:	00e787b3          	add	a5,a5,a4
    355c:	00200737          	lui	a4,0x200
    3560:	00e787b3          	add	a5,a5,a4
    3564:	4167d793          	srai	a5,a5,0x16
* Arguments:   - int32_t a: input element
*              - unsigned int hint: hint bit
*
* Returns corrected high bits.
**************************************************/
int32_t use_hint(int32_t a, unsigned int hint) {
    3568:	00050693          	mv	a3,a0
  a1 &= 15;
    356c:	00f7f513          	andi	a0,a5,15
  int32_t a0, a1;

  a1 = decompose(&a0, a);
  if(hint == 0)
    3570:	04058263          	beqz	a1,35b4 <pqcrystals_dilithium3_ref_use_hint+0x68>
  *a0  = a - a1*2*GAMMA2;
    3574:	00a51793          	slli	a5,a0,0xa
    3578:	40f507b3          	sub	a5,a0,a5
    357c:	00979793          	slli	a5,a5,0x9
    3580:	00d787b3          	add	a5,a5,a3
  *a0 -= (((Q-1)/2 - *a0) >> 31) & Q;
    3584:	003ff737          	lui	a4,0x3ff
    3588:	40f70733          	sub	a4,a4,a5
    358c:	007fe6b7          	lui	a3,0x7fe
    3590:	41f75713          	srai	a4,a4,0x1f
    3594:	00168693          	addi	a3,a3,1 # 7fe001 <_end_of_memory+0x7ce001>
    3598:	00d77733          	and	a4,a4,a3
    return a1;

#if GAMMA2 == (Q-1)/32
  if(a0 > 0)
    359c:	00f75863          	bge	a4,a5,35ac <pqcrystals_dilithium3_ref_use_hint+0x60>
    return (a1 + 1) & 15;
    35a0:	00150513          	addi	a0,a0,1
    35a4:	00f57513          	andi	a0,a0,15
    35a8:	00008067          	ret
  else
    return (a1 - 1) & 15;
    35ac:	fff50513          	addi	a0,a0,-1
    35b0:	00f57513          	andi	a0,a0,15
  if(a0 > 0)
    return (a1 == 43) ?  0 : a1 + 1;
  else
    return (a1 ==  0) ? 43 : a1 - 1;
#endif
}
    35b4:	00008067          	ret

000035b8 <itoa>:
char str[21] = {0};
char* pbuf = &str[0];

void itoa(char *buf, unsigned int d, int base)
{
	int div = 1;
    35b8:	00100793          	li	a5,1
	while (d/div >= base)
    35bc:	04c5ea63          	bltu	a1,a2,3610 <itoa+0x58>
		div *= base;
    35c0:	02c787b3          	mul	a5,a5,a2
	while (d/div >= base)
    35c4:	02f5d6b3          	divu	a3,a1,a5
    35c8:	fec6fce3          	bgeu	a3,a2,35c0 <itoa+0x8>

	while (div != 0)
    35cc:	02078e63          	beqz	a5,3608 <itoa+0x50>
	{
		int num = d/div;
		d = d%div;
		div /= base;
		if (num > 9)
    35d0:	00900893          	li	a7,9
    35d4:	0080006f          	j	35dc <itoa+0x24>
    35d8:	02f5d6b3          	divu	a3,a1,a5
			*(buf++) = (num-10) + 'A';
    35dc:	0ff6f713          	zext.b	a4,a3
    35e0:	03770813          	addi	a6,a4,55 # 3ff037 <_end_of_memory+0x3cf037>
		else
			*(buf++) = num + '0';
    35e4:	03070713          	addi	a4,a4,48
			*(buf++) = (num-10) + 'A';
    35e8:	00150513          	addi	a0,a0,1
			*(buf++) = num + '0';
    35ec:	0ff77713          	zext.b	a4,a4
		d = d%div;
    35f0:	02f5f5b3          	remu	a1,a1,a5
		div /= base;
    35f4:	02c7c7b3          	div	a5,a5,a2
		if (num > 9)
    35f8:	00d8d463          	bge	a7,a3,3600 <itoa+0x48>
			*(buf++) = (num-10) + 'A';
    35fc:	0ff87713          	zext.b	a4,a6
    3600:	fee50fa3          	sb	a4,-1(a0)
	while (div != 0)
    3604:	fc079ae3          	bnez	a5,35d8 <itoa+0x20>
	}
  *(buf++) = '\0';
    3608:	00050023          	sb	zero,0(a0)
}
    360c:	00008067          	ret
    3610:	00058693          	mv	a3,a1
    3614:	fbdff06f          	j	35d0 <itoa+0x18>

00003618 <print_runtime>:

void print_runtime(unsigned int cycle_start, unsigned int cycle_end)
{
  unsigned int clock_cycles = cycle_end - cycle_start;

  itoa(pbuf, cycle_start, 10);
    3618:	00005817          	auipc	a6,0x5
    361c:	70c80813          	addi	a6,a6,1804 # 8d24 <pbuf>
	while (d/div >= base)
    3620:	00900793          	li	a5,9
  itoa(pbuf, cycle_start, 10);
    3624:	00082883          	lw	a7,0(a6)
  unsigned int clock_cycles = cycle_end - cycle_start;
    3628:	40a58633          	sub	a2,a1,a0
	while (d/div >= base)
    362c:	24a7f063          	bgeu	a5,a0,386c <print_runtime+0x254>
	int div = 1;
    3630:	00100793          	li	a5,1
	while (d/div >= base)
    3634:	00900693          	li	a3,9
		div *= base;
    3638:	00279713          	slli	a4,a5,0x2
    363c:	00f707b3          	add	a5,a4,a5
    3640:	00179793          	slli	a5,a5,0x1
	while (d/div >= base)
    3644:	02f55733          	divu	a4,a0,a5
    3648:	fee6e8e3          	bltu	a3,a4,3638 <print_runtime+0x20>
		div /= base;
    364c:	00a00e93          	li	t4,10
		if (num > 9)
    3650:	00900e13          	li	t3,9
		int num = d/div;
    3654:	02f55333          	divu	t1,a0,a5
			*(buf++) = (num-10) + 'A';
    3658:	00188893          	addi	a7,a7,1
    365c:	0ff37693          	zext.b	a3,t1
    3660:	03768713          	addi	a4,a3,55
		d = d%div;
    3664:	02f57533          	remu	a0,a0,a5
			*(buf++) = num + '0';
    3668:	03068693          	addi	a3,a3,48
			*(buf++) = (num-10) + 'A';
    366c:	0ff77713          	zext.b	a4,a4
		div /= base;
    3670:	03d7c7b3          	div	a5,a5,t4
		if (num > 9)
    3674:	006e4463          	blt	t3,t1,367c <print_runtime+0x64>
			*(buf++) = num + '0';
    3678:	0ff6f713          	zext.b	a4,a3
    367c:	fee88fa3          	sb	a4,-1(a7)
	while (div != 0)
    3680:	fc079ae3          	bnez	a5,3654 <print_runtime+0x3c>
  *(buf++) = '\0';
    3684:	00088023          	sb	zero,0(a7)
  while (XUartChanged_IsTransmitFull(BaseAddress));
  X_mWriteReg(BaseAddress, PS7_UART_DATA_OUT_REGISTER, Data);
}

void uart_send_string(char *ptr) {
  while (*ptr) {
    3688:	02000513          	li	a0,32
  *(buf++) = '\0';
    368c:	00005697          	auipc	a3,0x5
    3690:	66068693          	addi	a3,a3,1632 # 8cec <__clz_tab+0x200>
    while (XUartChanged_IsTransmitFull(BASE_ADDRESS_U));
    3694:	e0001737          	lui	a4,0xe0001
    3698:	02c72783          	lw	a5,44(a4) # e000102c <_end_of_memory+0xdffd102c>
    369c:	0107f793          	andi	a5,a5,16
    36a0:	fe079ce3          	bnez	a5,3698 <print_runtime+0x80>
    X_mWriteReg(BASE_ADDRESS_U, PS7_UART_DATA_OUT_REGISTER, *ptr++);
    36a4:	00168693          	addi	a3,a3,1
    36a8:	02a72823          	sw	a0,48(a4)
  while (*ptr) {
    36ac:	0006c503          	lbu	a0,0(a3)
    36b0:	fe0514e3          	bnez	a0,3698 <print_runtime+0x80>
    36b4:	00005517          	auipc	a0,0x5
    36b8:	6a450513          	addi	a0,a0,1700 # 8d58 <str>
    36bc:	00054683          	lbu	a3,0(a0)
    36c0:	00050893          	mv	a7,a0
    while (XUartChanged_IsTransmitFull(BASE_ADDRESS_U));
    36c4:	e0001737          	lui	a4,0xe0001
  while (*ptr) {
    36c8:	02068063          	beqz	a3,36e8 <print_runtime+0xd0>
    while (XUartChanged_IsTransmitFull(BASE_ADDRESS_U));
    36cc:	02c72783          	lw	a5,44(a4) # e000102c <_end_of_memory+0xdffd102c>
    36d0:	0107f793          	andi	a5,a5,16
    36d4:	fe079ce3          	bnez	a5,36cc <print_runtime+0xb4>
    X_mWriteReg(BASE_ADDRESS_U, PS7_UART_DATA_OUT_REGISTER, *ptr++);
    36d8:	00188893          	addi	a7,a7,1
    36dc:	02d72823          	sw	a3,48(a4)
  while (*ptr) {
    36e0:	0008c683          	lbu	a3,0(a7)
    36e4:	fe0694e3          	bnez	a3,36cc <print_runtime+0xb4>
	while (d/div >= base)
    36e8:	00900713          	li	a4,9
  itoa(pbuf, cycle_end, 10);
    36ec:	00082883          	lw	a7,0(a6)
	int div = 1;
    36f0:	00100793          	li	a5,1
	while (d/div >= base)
    36f4:	00900693          	li	a3,9
    36f8:	00b77c63          	bgeu	a4,a1,3710 <print_runtime+0xf8>
		div *= base;
    36fc:	00279713          	slli	a4,a5,0x2
    3700:	00f707b3          	add	a5,a4,a5
    3704:	00179793          	slli	a5,a5,0x1
	while (d/div >= base)
    3708:	02f5d733          	divu	a4,a1,a5
    370c:	fee6e8e3          	bltu	a3,a4,36fc <print_runtime+0xe4>
		div /= base;
    3710:	00a00e93          	li	t4,10
		if (num > 9)
    3714:	00900e13          	li	t3,9
		int num = d/div;
    3718:	02f5d333          	divu	t1,a1,a5
			*(buf++) = (num-10) + 'A';
    371c:	00188893          	addi	a7,a7,1
    3720:	0ff37693          	zext.b	a3,t1
    3724:	03768713          	addi	a4,a3,55
		d = d%div;
    3728:	02f5f5b3          	remu	a1,a1,a5
			*(buf++) = num + '0';
    372c:	03068693          	addi	a3,a3,48
			*(buf++) = (num-10) + 'A';
    3730:	0ff77713          	zext.b	a4,a4
		div /= base;
    3734:	03d7c7b3          	div	a5,a5,t4
		if (num > 9)
    3738:	006e4463          	blt	t3,t1,3740 <print_runtime+0x128>
			*(buf++) = num + '0';
    373c:	0ff6f713          	zext.b	a4,a3
    3740:	fee88fa3          	sb	a4,-1(a7)
	while (div != 0)
    3744:	fc079ae3          	bnez	a5,3718 <print_runtime+0x100>
  *(buf++) = '\0';
    3748:	00088023          	sb	zero,0(a7)
  while (*ptr) {
    374c:	02000593          	li	a1,32
  *(buf++) = '\0';
    3750:	00005697          	auipc	a3,0x5
    3754:	5ac68693          	addi	a3,a3,1452 # 8cfc <__clz_tab+0x210>
    while (XUartChanged_IsTransmitFull(BASE_ADDRESS_U));
    3758:	e0001737          	lui	a4,0xe0001
    375c:	02c72783          	lw	a5,44(a4) # e000102c <_end_of_memory+0xdffd102c>
    3760:	0107f793          	andi	a5,a5,16
    3764:	fe079ce3          	bnez	a5,375c <print_runtime+0x144>
    X_mWriteReg(BASE_ADDRESS_U, PS7_UART_DATA_OUT_REGISTER, *ptr++);
    3768:	00168693          	addi	a3,a3,1
    376c:	02b72823          	sw	a1,48(a4)
  while (*ptr) {
    3770:	0006c583          	lbu	a1,0(a3)
    3774:	fe0594e3          	bnez	a1,375c <print_runtime+0x144>
    3778:	00054683          	lbu	a3,0(a0)
    377c:	00005597          	auipc	a1,0x5
    3780:	5dc58593          	addi	a1,a1,1500 # 8d58 <str>
    while (XUartChanged_IsTransmitFull(BASE_ADDRESS_U));
    3784:	e0001737          	lui	a4,0xe0001
  while (*ptr) {
    3788:	02068063          	beqz	a3,37a8 <print_runtime+0x190>
    while (XUartChanged_IsTransmitFull(BASE_ADDRESS_U));
    378c:	02c72783          	lw	a5,44(a4) # e000102c <_end_of_memory+0xdffd102c>
    3790:	0107f793          	andi	a5,a5,16
    3794:	fe079ce3          	bnez	a5,378c <print_runtime+0x174>
    X_mWriteReg(BASE_ADDRESS_U, PS7_UART_DATA_OUT_REGISTER, *ptr++);
    3798:	00158593          	addi	a1,a1,1
    379c:	02d72823          	sw	a3,48(a4)
  while (*ptr) {
    37a0:	0005c683          	lbu	a3,0(a1)
    37a4:	fe0694e3          	bnez	a3,378c <print_runtime+0x174>
	while (d/div >= base)
    37a8:	00900713          	li	a4,9
  itoa(pbuf, clock_cycles, 10);
    37ac:	00082583          	lw	a1,0(a6)
	int div = 1;
    37b0:	00100793          	li	a5,1
	while (d/div >= base)
    37b4:	00900693          	li	a3,9
    37b8:	00c77c63          	bgeu	a4,a2,37d0 <print_runtime+0x1b8>
		div *= base;
    37bc:	00279713          	slli	a4,a5,0x2
    37c0:	00f707b3          	add	a5,a4,a5
    37c4:	00179793          	slli	a5,a5,0x1
	while (d/div >= base)
    37c8:	02f65733          	divu	a4,a2,a5
    37cc:	fee6e8e3          	bltu	a3,a4,37bc <print_runtime+0x1a4>
		div /= base;
    37d0:	00a00313          	li	t1,10
		if (num > 9)
    37d4:	00900893          	li	a7,9
		int num = d/div;
    37d8:	02f65833          	divu	a6,a2,a5
			*(buf++) = (num-10) + 'A';
    37dc:	00158593          	addi	a1,a1,1
    37e0:	0ff87693          	zext.b	a3,a6
    37e4:	03768713          	addi	a4,a3,55
		d = d%div;
    37e8:	02f67633          	remu	a2,a2,a5
			*(buf++) = num + '0';
    37ec:	03068693          	addi	a3,a3,48
			*(buf++) = (num-10) + 'A';
    37f0:	0ff77713          	zext.b	a4,a4
		div /= base;
    37f4:	0267c7b3          	div	a5,a5,t1
		if (num > 9)
    37f8:	0108c463          	blt	a7,a6,3800 <print_runtime+0x1e8>
			*(buf++) = num + '0';
    37fc:	0ff6f713          	zext.b	a4,a3
    3800:	fee58fa3          	sb	a4,-1(a1)
	while (div != 0)
    3804:	fc079ae3          	bnez	a5,37d8 <print_runtime+0x1c0>
  *(buf++) = '\0';
    3808:	00058023          	sb	zero,0(a1)
  while (*ptr) {
    380c:	02000613          	li	a2,32
  *(buf++) = '\0';
    3810:	00005697          	auipc	a3,0x5
    3814:	4fc68693          	addi	a3,a3,1276 # 8d0c <__clz_tab+0x220>
    while (XUartChanged_IsTransmitFull(BASE_ADDRESS_U));
    3818:	e0001737          	lui	a4,0xe0001
    381c:	02c72783          	lw	a5,44(a4) # e000102c <_end_of_memory+0xdffd102c>
    3820:	0107f793          	andi	a5,a5,16
    3824:	fe079ce3          	bnez	a5,381c <print_runtime+0x204>
    X_mWriteReg(BASE_ADDRESS_U, PS7_UART_DATA_OUT_REGISTER, *ptr++);
    3828:	00168693          	addi	a3,a3,1
    382c:	02c72823          	sw	a2,48(a4)
  while (*ptr) {
    3830:	0006c603          	lbu	a2,0(a3)
    3834:	fe0614e3          	bnez	a2,381c <print_runtime+0x204>
    3838:	00054683          	lbu	a3,0(a0)
    383c:	00005617          	auipc	a2,0x5
    3840:	51c60613          	addi	a2,a2,1308 # 8d58 <str>
    while (XUartChanged_IsTransmitFull(BASE_ADDRESS_U));
    3844:	e0001737          	lui	a4,0xe0001
  while (*ptr) {
    3848:	02068063          	beqz	a3,3868 <print_runtime+0x250>
    while (XUartChanged_IsTransmitFull(BASE_ADDRESS_U));
    384c:	02c72783          	lw	a5,44(a4) # e000102c <_end_of_memory+0xdffd102c>
    3850:	0107f793          	andi	a5,a5,16
    3854:	fe079ce3          	bnez	a5,384c <print_runtime+0x234>
    X_mWriteReg(BASE_ADDRESS_U, PS7_UART_DATA_OUT_REGISTER, *ptr++);
    3858:	00160613          	addi	a2,a2,1
    385c:	02d72823          	sw	a3,48(a4)
  while (*ptr) {
    3860:	00064683          	lbu	a3,0(a2)
    3864:	fe0694e3          	bnez	a3,384c <print_runtime+0x234>
}
    3868:	00008067          	ret
	int div = 1;
    386c:	00100793          	li	a5,1
    3870:	dddff06f          	j	364c <print_runtime+0x34>

00003874 <XUARTChanged_SendByte>:
  while (XUartChanged_IsTransmitFull(BaseAddress));
    3874:	02c50713          	addi	a4,a0,44
    3878:	00072783          	lw	a5,0(a4)
    387c:	0107f793          	andi	a5,a5,16
    3880:	fe079ce3          	bnez	a5,3878 <XUARTChanged_SendByte+0x4>
  X_mWriteReg(BaseAddress, PS7_UART_DATA_OUT_REGISTER, Data);
    3884:	02b52823          	sw	a1,48(a0)
}
    3888:	00008067          	ret

0000388c <uart_send_string>:
  while (*ptr) {
    388c:	00054683          	lbu	a3,0(a0)
    3890:	02068263          	beqz	a3,38b4 <uart_send_string+0x28>
    while (XUartChanged_IsTransmitFull(BASE_ADDRESS_U));
    3894:	e0001737          	lui	a4,0xe0001
    3898:	02c72783          	lw	a5,44(a4) # e000102c <_end_of_memory+0xdffd102c>
    389c:	0107f793          	andi	a5,a5,16
    38a0:	fe079ce3          	bnez	a5,3898 <uart_send_string+0xc>
    X_mWriteReg(BASE_ADDRESS_U, PS7_UART_DATA_OUT_REGISTER, *ptr++);
    38a4:	00150513          	addi	a0,a0,1
    38a8:	02d72823          	sw	a3,48(a4)
  while (*ptr) {
    38ac:	00054683          	lbu	a3,0(a0)
    38b0:	fe0694e3          	bnez	a3,3898 <uart_send_string+0xc>
  }
}
    38b4:	00008067          	ret

000038b8 <XUART_Reset>:

void XUART_Reset(void)
{
  X_mWriteReg(BASE_ADDRESS_U, PS7_UART_CONTROL_REGISTER, UART_CR_RESET_TX_RX); // Ctrl_reg disable interrupts, reset FIFOs
    38b8:	e00017b7          	lui	a5,0xe0001
    38bc:	00300713          	li	a4,3
    38c0:	00e7a023          	sw	a4,0(a5) # e0001000 <_end_of_memory+0xdffd1000>
}
    38c4:	00008067          	ret

000038c8 <KeccakF1600_StatePermute>:
        uint64_t Eka, Eke, Eki, Eko, Eku;
        uint64_t Ema, Eme, Emi, Emo, Emu;
        uint64_t Esa, Ese, Esi, Eso, Esu;

        //copyFromState(A, state)
        Aba = state[ 0];
    38c8:	00052783          	lw	a5,0(a0)
{
    38cc:	e8010113          	addi	sp,sp,-384
    38d0:	17212a23          	sw	s2,372(sp)
        Aba = state[ 0];
    38d4:	0af12823          	sw	a5,176(sp)
    38d8:	00452783          	lw	a5,4(a0)
{
    38dc:	17312823          	sw	s3,368(sp)
    38e0:	17512423          	sw	s5,360(sp)
        Aba = state[ 0];
    38e4:	0af12a23          	sw	a5,180(sp)
        Abe = state[ 1];
    38e8:	00852783          	lw	a5,8(a0)
{
    38ec:	17612223          	sw	s6,356(sp)
    38f0:	17712023          	sw	s7,352(sp)
        Abe = state[ 1];
    38f4:	00f12823          	sw	a5,16(sp)
    38f8:	00c52783          	lw	a5,12(a0)
{
    38fc:	15812e23          	sw	s8,348(sp)
    3900:	15912c23          	sw	s9,344(sp)
        Abe = state[ 1];
    3904:	0af12c23          	sw	a5,184(sp)
        Abi = state[ 2];
    3908:	01052783          	lw	a5,16(a0)
{
    390c:	15a12a23          	sw	s10,340(sp)
    3910:	15b12823          	sw	s11,336(sp)
        Abi = state[ 2];
    3914:	0af12e23          	sw	a5,188(sp)
    3918:	01452783          	lw	a5,20(a0)
{
    391c:	16812e23          	sw	s0,380(sp)
    3920:	16912c23          	sw	s1,376(sp)
        Abi = state[ 2];
    3924:	0cf12023          	sw	a5,192(sp)
        Abo = state[ 3];
    3928:	01852783          	lw	a5,24(a0)
{
    392c:	17412623          	sw	s4,364(sp)
        Abo = state[ 3];
    3930:	0cf12223          	sw	a5,196(sp)
    3934:	01c52783          	lw	a5,28(a0)
    3938:	0cf12423          	sw	a5,200(sp)
        Abu = state[ 4];
    393c:	02052783          	lw	a5,32(a0)
    3940:	0cf12623          	sw	a5,204(sp)
    3944:	02452783          	lw	a5,36(a0)
    3948:	0cf12823          	sw	a5,208(sp)
        Aga = state[ 5];
    394c:	02852783          	lw	a5,40(a0)
        Age = state[ 6];
    3950:	03052d83          	lw	s11,48(a0)
        Agi = state[ 7];
        Ago = state[ 8];
        Agu = state[ 9];
        Aka = state[10];
        Ake = state[11];
        Aki = state[12];
    3954:	06052c83          	lw	s9,96(a0)
        Aga = state[ 5];
    3958:	0cf12a23          	sw	a5,212(sp)
    395c:	02c52783          	lw	a5,44(a0)
        Aki = state[12];
    3960:	06452c03          	lw	s8,100(a0)
        Aga = state[ 5];
    3964:	0cf12c23          	sw	a5,216(sp)
        Age = state[ 6];
    3968:	03452783          	lw	a5,52(a0)
    396c:	00f12a23          	sw	a5,20(sp)
        Agi = state[ 7];
    3970:	03852783          	lw	a5,56(a0)
    3974:	00f12e23          	sw	a5,28(sp)
    3978:	03c52783          	lw	a5,60(a0)
    397c:	02f12023          	sw	a5,32(sp)
        Ago = state[ 8];
    3980:	04052783          	lw	a5,64(a0)
    3984:	0cf12e23          	sw	a5,220(sp)
    3988:	04452783          	lw	a5,68(a0)
    398c:	0ef12023          	sw	a5,224(sp)
        Agu = state[ 9];
    3990:	04852783          	lw	a5,72(a0)
    3994:	00f12c23          	sw	a5,24(sp)
    3998:	04c52783          	lw	a5,76(a0)
    399c:	02f12223          	sw	a5,36(sp)
        Aka = state[10];
    39a0:	05052783          	lw	a5,80(a0)
    39a4:	02f12423          	sw	a5,40(sp)
    39a8:	05452783          	lw	a5,84(a0)
    39ac:	02f12623          	sw	a5,44(sp)
        Ake = state[11];
    39b0:	05852783          	lw	a5,88(a0)
    39b4:	0ef12223          	sw	a5,228(sp)
    39b8:	05c52783          	lw	a5,92(a0)
    39bc:	0ef12423          	sw	a5,232(sp)
        Ako = state[13];
    39c0:	06852783          	lw	a5,104(a0)
    39c4:	02f12823          	sw	a5,48(sp)
    39c8:	06c52783          	lw	a5,108(a0)
    39cc:	02f12a23          	sw	a5,52(sp)
        Aku = state[14];
    39d0:	07052783          	lw	a5,112(a0)
        Ama = state[15];
        Ame = state[16];
        Ami = state[17];
        Amo = state[18];
    39d4:	09052b03          	lw	s6,144(a0)
    39d8:	09452983          	lw	s3,148(a0)
        Aku = state[14];
    39dc:	0ef12623          	sw	a5,236(sp)
    39e0:	07452783          	lw	a5,116(a0)
    39e4:	000b0b93          	mv	s7,s6
    39e8:	00098d13          	mv	s10,s3
    39ec:	0ef12823          	sw	a5,240(sp)
        Ama = state[15];
    39f0:	07852783          	lw	a5,120(a0)
    39f4:	000c0b13          	mv	s6,s8
    39f8:	0ef12a23          	sw	a5,244(sp)
    39fc:	07c52783          	lw	a5,124(a0)
    3a00:	0ef12c23          	sw	a5,248(sp)
        Ame = state[16];
    3a04:	08052783          	lw	a5,128(a0)
    3a08:	02f12c23          	sw	a5,56(sp)
    3a0c:	08452783          	lw	a5,132(a0)
    3a10:	02f12e23          	sw	a5,60(sp)
        Ami = state[17];
    3a14:	08852783          	lw	a5,136(a0)
    3a18:	04f12e23          	sw	a5,92(sp)
    3a1c:	08c52783          	lw	a5,140(a0)
    3a20:	06f12023          	sw	a5,96(sp)
        Amu = state[19];
    3a24:	09852783          	lw	a5,152(a0)
    3a28:	04f12023          	sw	a5,64(sp)
    3a2c:	09c52783          	lw	a5,156(a0)
    3a30:	04f12223          	sw	a5,68(sp)
        Asa = state[20];
    3a34:	0a052783          	lw	a5,160(a0)
    3a38:	04f12423          	sw	a5,72(sp)
    3a3c:	0a452783          	lw	a5,164(a0)
    3a40:	04f12623          	sw	a5,76(sp)
        Ase = state[21];
    3a44:	0a852783          	lw	a5,168(a0)
    3a48:	06f12623          	sw	a5,108(sp)
    3a4c:	0ac52783          	lw	a5,172(a0)
    3a50:	06f12823          	sw	a5,112(sp)
        Asi = state[22];
    3a54:	0b052783          	lw	a5,176(a0)
    3a58:	04f12823          	sw	a5,80(sp)
    3a5c:	0b452783          	lw	a5,180(a0)
        Aso = state[23];
        Asu = state[24];
    3a60:	0c052903          	lw	s2,192(a0)
    3a64:	0c452a83          	lw	s5,196(a0)
        Asi = state[22];
    3a68:	04f12a23          	sw	a5,84(sp)
        Aso = state[23];
    3a6c:	0b852783          	lw	a5,184(a0)
    3a70:	0fb12e23          	sw	s11,252(sp)
    3a74:	14a12623          	sw	a0,332(sp)
    3a78:	06f12223          	sw	a5,100(sp)
    3a7c:	0bc52783          	lw	a5,188(a0)
    3a80:	00090d93          	mv	s11,s2
    3a84:	000c8913          	mv	s2,s9
    3a88:	06f12423          	sw	a5,104(sp)

        for(round = 0; round < NROUNDS; round += 2) {
    3a8c:	00005797          	auipc	a5,0x5
    3a90:	f6478793          	addi	a5,a5,-156 # 89f0 <pqcrystals_dilithium_fips202_ref_KeccakF_RoundConstants>
    3a94:	00f12623          	sw	a5,12(sp)
            //    prepareTheta
            BCa = Aba^Aga^Aka^Ama^Asa;
    3a98:	0b012783          	lw	a5,176(sp)
    3a9c:	0d412703          	lw	a4,212(sp)
    3aa0:	0b412683          	lw	a3,180(sp)
            BCe = Abe^Age^Ake^Ame^Ase;
            BCi = Abi^Agi^Aki^Ami^Asi;
    3aa4:	0bc12303          	lw	t1,188(sp)
    3aa8:	01c12e03          	lw	t3,28(sp)
    3aac:	0c012e83          	lw	t4,192(sp)
    3ab0:	02012f03          	lw	t5,32(sp)
            BCo = Abo^Ago^Ako^Amo^Aso;
    3ab4:	0c412383          	lw	t2,196(sp)
    3ab8:	0dc12403          	lw	s0,220(sp)
            BCa = Aba^Aga^Aka^Ama^Asa;
    3abc:	0d812603          	lw	a2,216(sp)
            BCe = Abe^Age^Ake^Ame^Ase;
    3ac0:	01012503          	lw	a0,16(sp)
    3ac4:	0b812803          	lw	a6,184(sp)
    3ac8:	01412883          	lw	a7,20(sp)
            BCu = Abu^Agu^Aku^Amu^Asu;
    3acc:	0cc12c03          	lw	s8,204(sp)
    3ad0:	01812c83          	lw	s9,24(sp)
            BCa = Aba^Aga^Aka^Ama^Asa;
    3ad4:	02c12283          	lw	t0,44(sp)
    3ad8:	00e7c5b3          	xor	a1,a5,a4
            BCe = Abe^Age^Ake^Ame^Ase;
    3adc:	0fc12703          	lw	a4,252(sp)
            BCo = Abo^Ago^Ako^Amo^Aso;
    3ae0:	0c812483          	lw	s1,200(sp)
    3ae4:	0e012983          	lw	s3,224(sp)
            BCa = Aba^Aga^Aka^Ama^Asa;
    3ae8:	02812f83          	lw	t6,40(sp)
            BCi = Abi^Agi^Aki^Ami^Asi;
    3aec:	01c347b3          	xor	a5,t1,t3
            BCa = Aba^Aga^Aka^Ama^Asa;
    3af0:	00c6c633          	xor	a2,a3,a2
            BCi = Abi^Agi^Aki^Ami^Asi;
    3af4:	01eece33          	xor	t3,t4,t5
            BCo = Abo^Ago^Ako^Amo^Aso;
    3af8:	0083c333          	xor	t1,t2,s0
            BCu = Abu^Agu^Aku^Amu^Asu;
    3afc:	0d012e83          	lw	t4,208(sp)
    3b00:	02412f03          	lw	t5,36(sp)
            BCe = Abe^Age^Ake^Ame^Ase;
    3b04:	0e812403          	lw	s0,232(sp)
    3b08:	0e412383          	lw	t2,228(sp)
    3b0c:	00e546b3          	xor	a3,a0,a4
            BCa = Aba^Aga^Aka^Ama^Asa;
    3b10:	00564633          	xor	a2,a2,t0
            BCe = Abe^Age^Ake^Ame^Ase;
    3b14:	01184733          	xor	a4,a6,a7
    3b18:	03c12283          	lw	t0,60(sp)
            BCu = Abu^Agu^Aku^Amu^Asu;
    3b1c:	019c4833          	xor	a6,s8,s9
    3b20:	0f012c83          	lw	s9,240(sp)
    3b24:	0ec12c03          	lw	s8,236(sp)
            BCo = Abo^Ago^Ako^Amo^Aso;
    3b28:	0134c8b3          	xor	a7,s1,s3
            BCu = Abu^Agu^Aku^Amu^Asu;
    3b2c:	01eec533          	xor	a0,t4,t5
            BCo = Abo^Ago^Ako^Amo^Aso;
    3b30:	03012483          	lw	s1,48(sp)
    3b34:	03412983          	lw	s3,52(sp)
            BCa = Aba^Aga^Aka^Ama^Asa;
    3b38:	0f412e83          	lw	t4,244(sp)
    3b3c:	0f812f03          	lw	t5,248(sp)
    3b40:	01f5c5b3          	xor	a1,a1,t6
            BCe = Abe^Age^Ake^Ame^Ase;
    3b44:	0076c6b3          	xor	a3,a3,t2
    3b48:	03812f83          	lw	t6,56(sp)
    3b4c:	00874733          	xor	a4,a4,s0
            BCi = Abi^Agi^Aki^Ami^Asi;
    3b50:	05c12383          	lw	t2,92(sp)
    3b54:	06012403          	lw	s0,96(sp)
            BCu = Abu^Agu^Aku^Amu^Asu;
    3b58:	01954533          	xor	a0,a0,s9
            BCe = Abe^Age^Ake^Ame^Ase;
    3b5c:	00574733          	xor	a4,a4,t0
            BCa = Aba^Aga^Aka^Ama^Asa;
    3b60:	04c12c83          	lw	s9,76(sp)
            BCi = Abi^Agi^Aki^Ami^Asi;
    3b64:	05412283          	lw	t0,84(sp)
    3b68:	016e4e33          	xor	t3,t3,s6
    3b6c:	008e4e33          	xor	t3,t3,s0
            BCa = Aba^Aga^Aka^Ama^Asa;
    3b70:	01d5c5b3          	xor	a1,a1,t4
    3b74:	01e64633          	xor	a2,a2,t5
            BCe = Abe^Age^Ake^Ame^Ase;
    3b78:	06c12e83          	lw	t4,108(sp)
    3b7c:	07012f03          	lw	t5,112(sp)
            BCa = Aba^Aga^Aka^Ama^Asa;
    3b80:	01964633          	xor	a2,a2,s9
            BCu = Abu^Agu^Aku^Amu^Asu;
    3b84:	01884833          	xor	a6,a6,s8
            BCi = Abi^Agi^Aki^Ami^Asi;
    3b88:	005e4cb3          	xor	s9,t3,t0
            BCa = Aba^Aga^Aka^Ama^Asa;
    3b8c:	04812c03          	lw	s8,72(sp)
            BCo = Abo^Ago^Ako^Amo^Aso;
    3b90:	06412e03          	lw	t3,100(sp)
    3b94:	00934333          	xor	t1,t1,s1
            BCe = Abe^Age^Ake^Ame^Ase;
    3b98:	01f6c6b3          	xor	a3,a3,t6
            BCu = Abu^Agu^Aku^Amu^Asu;
    3b9c:	04012483          	lw	s1,64(sp)
            BCi = Abi^Agi^Aki^Ami^Asi;
    3ba0:	05012f83          	lw	t6,80(sp)
            BCe = Abe^Age^Ake^Ame^Ase;
    3ba4:	01e74733          	xor	a4,a4,t5
    3ba8:	01d6c6b3          	xor	a3,a3,t4
            BCo = Abo^Ago^Ako^Amo^Aso;
    3bac:	01734333          	xor	t1,t1,s7
            BCi = Abi^Agi^Aki^Ami^Asi;
    3bb0:	0127c7b3          	xor	a5,a5,s2
            BCa = Aba^Aga^Aka^Ama^Asa;
    3bb4:	0185c5b3          	xor	a1,a1,s8

            //thetaRhoPiChiIotaPrepareTheta(round, A, E)
            Da = BCu^ROL(BCe, 1);
    3bb8:	00171a13          	slli	s4,a4,0x1
            BCo = Abo^Ago^Ako^Amo^Aso;
    3bbc:	01c34c33          	xor	s8,t1,t3
    3bc0:	0138c8b3          	xor	a7,a7,s3
    3bc4:	06812303          	lw	t1,104(sp)
            BCu = Abu^Agu^Aku^Amu^Asu;
    3bc8:	04412983          	lw	s3,68(sp)
            BCi = Abi^Agi^Aki^Ami^Asi;
    3bcc:	0077c7b3          	xor	a5,a5,t2
            Da = BCu^ROL(BCe, 1);
    3bd0:	01f6d413          	srli	s0,a3,0x1f
            BCi = Abi^Agi^Aki^Ami^Asi;
    3bd4:	01f7c7b3          	xor	a5,a5,t6
            Da = BCu^ROL(BCe, 1);
    3bd8:	01446433          	or	s0,s0,s4
            BCu = Abu^Agu^Aku^Amu^Asu;
    3bdc:	00984833          	xor	a6,a6,s1
            Da = BCu^ROL(BCe, 1);
    3be0:	00169a13          	slli	s4,a3,0x1
    3be4:	01f75493          	srli	s1,a4,0x1f
            BCo = Abo^Ago^Ako^Amo^Aso;
    3be8:	01a8c8b3          	xor	a7,a7,s10
            Da = BCu^ROL(BCe, 1);
    3bec:	0144e4b3          	or	s1,s1,s4
            De = BCa^ROL(BCi, 1);
    3bf0:	01f7d293          	srli	t0,a5,0x1f
    3bf4:	001c9a13          	slli	s4,s9,0x1
    3bf8:	0142e2b3          	or	t0,t0,s4
            BCu = Abu^Agu^Aku^Amu^Asu;
    3bfc:	01354533          	xor	a0,a0,s3
            De = BCa^ROL(BCi, 1);
    3c00:	01fcda13          	srli	s4,s9,0x1f
            BCo = Abo^Ago^Ako^Amo^Aso;
    3c04:	0068c9b3          	xor	s3,a7,t1
            De = BCa^ROL(BCi, 1);
    3c08:	00179393          	slli	t2,a5,0x1
    3c0c:	007a63b3          	or	t2,s4,t2
            Di = BCe^ROL(BCo, 1);
    3c10:	01fc5f13          	srli	t5,s8,0x1f
    3c14:	00199a13          	slli	s4,s3,0x1
            BCu = Abu^Agu^Aku^Amu^Asu;
    3c18:	01b84833          	xor	a6,a6,s11
    3c1c:	01554533          	xor	a0,a0,s5
            Di = BCe^ROL(BCo, 1);
    3c20:	001c1f93          	slli	t6,s8,0x1
    3c24:	014f6f33          	or	t5,t5,s4
    3c28:	01f9da13          	srli	s4,s3,0x1f
    3c2c:	01fa6fb3          	or	t6,s4,t6
            Do = BCi^ROL(BCu, 1);
    3c30:	00151e13          	slli	t3,a0,0x1
    3c34:	01f85a13          	srli	s4,a6,0x1f
    3c38:	01f55e93          	srli	t4,a0,0x1f
    3c3c:	01ca6e33          	or	t3,s4,t3
    3c40:	00181a13          	slli	s4,a6,0x1
            Du = BCo^ROL(BCa, 1);
    3c44:	00161893          	slli	a7,a2,0x1
    3c48:	01f65313          	srli	t1,a2,0x1f
            Do = BCi^ROL(BCu, 1);
    3c4c:	014eeeb3          	or	t4,t4,s4
            De = BCa^ROL(BCi, 1);
    3c50:	00c2c633          	xor	a2,t0,a2
            Du = BCo^ROL(BCa, 1);
    3c54:	01f5da13          	srli	s4,a1,0x1f

            Aba ^= Da;
            BCa = Aba;
            Age ^= De;
    3c58:	01412283          	lw	t0,20(sp)
            Du = BCo^ROL(BCa, 1);
    3c5c:	011a68b3          	or	a7,s4,a7
    3c60:	0138c8b3          	xor	a7,a7,s3
            Age ^= De;
    3c64:	005649b3          	xor	s3,a2,t0
            BCe = ROL(Age, 44);
            Aki ^= Di;
            BCi = ROL(Aki, 43);
            Amo ^= Do;
            BCo = ROL(Amo, 21);
            Asu ^= Du;
    3c68:	0158c2b3          	xor	t0,a7,s5
            Ebe =   BCe ^((~BCi)&  BCo );
            Ebi =   BCi ^((~BCo)&  BCu );
            Ebo =   BCo ^((~BCu)&  BCa );
            Ebu =   BCu ^((~BCa)&  BCe );

            Abo ^= Do;
    3c6c:	0c412a83          	lw	s5,196(sp)
            Do = BCi^ROL(BCu, 1);
    3c70:	00feceb3          	xor	t4,t4,a5
    3c74:	019e4e33          	xor	t3,t3,s9
            Du = BCo^ROL(BCa, 1);
    3c78:	00159a13          	slli	s4,a1,0x1
            Abo ^= Do;
    3c7c:	000e8c93          	mv	s9,t4
            De = BCa^ROL(BCi, 1);
    3c80:	00b3c5b3          	xor	a1,t2,a1
            Amo ^= Do;
    3c84:	017ec3b3          	xor	t2,t4,s7
            Abo ^= Do;
    3c88:	015eceb3          	xor	t4,t4,s5
    3c8c:	0c812a83          	lw	s5,200(sp)
            Di = BCe^ROL(BCo, 1);
    3c90:	00ef4f33          	xor	t5,t5,a4
            Du = BCo^ROL(BCa, 1);
    3c94:	01436333          	or	t1,t1,s4
    3c98:	01834333          	xor	t1,t1,s8
            Da = BCu^ROL(BCe, 1);
    3c9c:	0104c833          	xor	a6,s1,a6
            Aki ^= Di;
    3ca0:	000f0c13          	mv	s8,t5
    3ca4:	016f44b3          	xor	s1,t5,s6
            Abo ^= Do;
    3ca8:	015e4f33          	xor	t5,t3,s5
            BCa = ROL(Abo, 28);
            Agu ^= Du;
    3cac:	01812a83          	lw	s5,24(sp)
            Di = BCe^ROL(BCo, 1);
    3cb0:	00dfc6b3          	xor	a3,t6,a3
            BCe = ROL(Agu, 20);
            Aka ^= Da;
    3cb4:	02812b83          	lw	s7,40(sp)
            Asu ^= Du;
    3cb8:	01b34fb3          	xor	t6,t1,s11
            Agu ^= Du;
    3cbc:	00030d93          	mv	s11,t1
    3cc0:	01534333          	xor	t1,t1,s5
    3cc4:	02412a83          	lw	s5,36(sp)
            Da = BCu^ROL(BCe, 1);
    3cc8:	00a44533          	xor	a0,s0,a0
            Amo ^= Do;
    3ccc:	01ae4433          	xor	s0,t3,s10
            Abo ^= Do;
    3cd0:	000e0d13          	mv	s10,t3
            Agu ^= Du;
    3cd4:	0158ce33          	xor	t3,a7,s5
            Aka ^= Da;
    3cd8:	00080a93          	mv	s5,a6
    3cdc:	01784833          	xor	a6,a6,s7
    3ce0:	02c12b83          	lw	s7,44(sp)
            Agu ^= Du;
    3ce4:	01112c23          	sw	a7,24(sp)
            Aka ^= Da;
    3ce8:	00050b13          	mv	s6,a0
    3cec:	017548b3          	xor	a7,a0,s7
            BCi = ROL(Aka,  3);
            Ame ^= De;
    3cf0:	03812b83          	lw	s7,56(sp)
            Age ^= De;
    3cf4:	0fc12703          	lw	a4,252(sp)
    3cf8:	00058793          	mv	a5,a1
            Ame ^= De;
    3cfc:	0175c533          	xor	a0,a1,s7
    3d00:	04a12c23          	sw	a0,88(sp)
            Ege =   BCe ^((~BCi)&  BCo );
            Egi =   BCi ^((~BCo)&  BCu );
            Ego =   BCo ^((~BCu)&  BCa );
            Egu =   BCu ^((~BCa)&  BCe );

            Abe ^= De;
    3d04:	01012503          	lw	a0,16(sp)
            Ame ^= De;
    3d08:	03c12b83          	lw	s7,60(sp)
            Abe ^= De;
    3d0c:	06f12a23          	sw	a5,116(sp)
    3d10:	00a7c7b3          	xor	a5,a5,a0
    3d14:	0b812503          	lw	a0,184(sp)
            Age ^= De;
    3d18:	00e5ca33          	xor	s4,a1,a4
    3d1c:	00060713          	mv	a4,a2
            Ame ^= De;
    3d20:	017645b3          	xor	a1,a2,s7
            Aki ^= Di;
    3d24:	0126c933          	xor	s2,a3,s2
            Asi ^= Di;
    3d28:	00068b93          	mv	s7,a3
            Abe ^= De;
    3d2c:	06e12c23          	sw	a4,120(sp)
            Asi ^= Di;
    3d30:	05012683          	lw	a3,80(sp)
            Abe ^= De;
    3d34:	00a74733          	xor	a4,a4,a0
            BCa = ROL(Abe,  1);
            Agi ^= Di;
    3d38:	01c12503          	lw	a0,28(sp)
            Asi ^= Di;
    3d3c:	00dbc633          	xor	a2,s7,a3
            Agi ^= Di;
    3d40:	07712e23          	sw	s7,124(sp)
    3d44:	00abcbb3          	xor	s7,s7,a0
            Asi ^= Di;
    3d48:	05412683          	lw	a3,84(sp)
            Agi ^= Di;
    3d4c:	0b712623          	sw	s7,172(sp)
    3d50:	02012503          	lw	a0,32(sp)
            BCe = ROL(Agi,  6);
            Ako ^= Do;
    3d54:	09912223          	sw	s9,132(sp)
    3d58:	09a12423          	sw	s10,136(sp)
            Agi ^= Di;
    3d5c:	00ac4bb3          	xor	s7,s8,a0
            Ako ^= Do;
    3d60:	03012503          	lw	a0,48(sp)
            Agi ^= Di;
    3d64:	0b712c23          	sw	s7,184(sp)
            BCi = ROL(Ako, 25);
            Amu ^= Du;
    3d68:	09b12623          	sw	s11,140(sp)
            Ako ^= Do;
    3d6c:	00acccb3          	xor	s9,s9,a0
    3d70:	03412503          	lw	a0,52(sp)
            Amu ^= Du;
    3d74:	01812b83          	lw	s7,24(sp)
            BCo = ROL(Amu,  8);
            Asa ^= Da;
    3d78:	01512823          	sw	s5,16(sp)
            Ako ^= Do;
    3d7c:	00ad4d33          	xor	s10,s10,a0
            Amu ^= Du;
    3d80:	04012503          	lw	a0,64(sp)
            Ako ^= Do;
    3d84:	0da12423          	sw	s10,200(sp)
    3d88:	0d912223          	sw	s9,196(sp)
            Amu ^= Du;
    3d8c:	00adcdb3          	xor	s11,s11,a0
    3d90:	04412503          	lw	a0,68(sp)
            BCi = ROL(Aki, 43);
    3d94:	00b49c93          	slli	s9,s1,0xb
            Amu ^= Du;
    3d98:	0fb12e23          	sw	s11,252(sp)
    3d9c:	00abc533          	xor	a0,s7,a0
    3da0:	10a12023          	sw	a0,256(sp)
            Asa ^= Da;
    3da4:	04812503          	lw	a0,72(sp)
            BCe = ROL(Age, 44);
    3da8:	014a5d93          	srli	s11,s4,0x14
            BCi = ROL(Aki, 43);
    3dac:	0154d493          	srli	s1,s1,0x15
            Asa ^= Da;
    3db0:	00aacab3          	xor	s5,s5,a0
    3db4:	04c12503          	lw	a0,76(sp)
    3db8:	11512223          	sw	s5,260(sp)
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
    3dbc:	00c12a83          	lw	s5,12(sp)
            Asa ^= Da;
    3dc0:	00ab4533          	xor	a0,s6,a0
    3dc4:	10a12423          	sw	a0,264(sp)
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
    3dc8:	000aa503          	lw	a0,0(s5)
    3dcc:	004aad03          	lw	s10,4(s5)
            Agi ^= Di;
    3dd0:	09812023          	sw	s8,128(sp)
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
    3dd4:	08a12823          	sw	a0,144(sp)
            BCe = ROL(Age, 44);
    3dd8:	00c99513          	slli	a0,s3,0xc
    3ddc:	00a12e23          	sw	a0,28(sp)
            BCi = ROL(Aki, 43);
    3de0:	01595513          	srli	a0,s2,0x15
    3de4:	00b91913          	slli	s2,s2,0xb
            Asa ^= Da;
    3de8:	01612a23          	sw	s6,20(sp)
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
    3dec:	09a12e23          	sw	s10,156(sp)
            BCe = ROL(Age, 44);
    3df0:	03b12023          	sw	s11,32(sp)
            BCi = ROL(Aki, 43);
    3df4:	03912223          	sw	s9,36(sp)
    3df8:	02a12423          	sw	a0,40(sp)
    3dfc:	03212623          	sw	s2,44(sp)
            BCo = ROL(Ame, 45);
    3e00:	00d59513          	slli	a0,a1,0xd
            BCi = ROL(Aki, 43);
    3e04:	02912823          	sw	s1,48(sp)
            BCo = ROL(Amo, 21);
    3e08:	00b3d493          	srli	s1,t2,0xb
    3e0c:	02912a23          	sw	s1,52(sp)
            BCo = ROL(Ame, 45);
    3e10:	04a12623          	sw	a0,76(sp)
    3e14:	05812503          	lw	a0,88(sp)
            BCo = ROL(Amo, 21);
    3e18:	01541493          	slli	s1,s0,0x15
    3e1c:	02912c23          	sw	s1,56(sp)
            Asi ^= Di;
    3e20:	00dc46b3          	xor	a3,s8,a3
            BCo = ROL(Ame, 45);
    3e24:	01355493          	srli	s1,a0,0x13
    3e28:	04912823          	sw	s1,80(sp)
            BCu = ROL(Asi, 61);
    3e2c:	01d69493          	slli	s1,a3,0x1d
    3e30:	04912a23          	sw	s1,84(sp)
    3e34:	00365493          	srli	s1,a2,0x3
            BCa = ROL(Abe,  1);
    3e38:	01f7d913          	srli	s2,a5,0x1f
            BCu = ROL(Asi, 61);
    3e3c:	04912c23          	sw	s1,88(sp)
            BCa = ROL(Abe,  1);
    3e40:	00171493          	slli	s1,a4,0x1
    3e44:	0b212023          	sw	s2,160(sp)
    3e48:	0a912223          	sw	s1,164(sp)
            BCe = ROL(Age, 44);
    3e4c:	01c12903          	lw	s2,28(sp)
    3e50:	02012483          	lw	s1,32(sp)
    3e54:	00ca1a13          	slli	s4,s4,0xc
    3e58:	0149d993          	srli	s3,s3,0x14
    3e5c:	00996933          	or	s2,s2,s1
    3e60:	013a69b3          	or	s3,s4,s3
            BCi = ROL(Aki, 43);
    3e64:	02412483          	lw	s1,36(sp)
    3e68:	02812a03          	lw	s4,40(sp)
            BCe = ROL(Age, 44);
    3e6c:	09212a23          	sw	s2,148(sp)
            BCi = ROL(Aki, 43);
    3e70:	02c12903          	lw	s2,44(sp)
    3e74:	0144ea33          	or	s4,s1,s4
    3e78:	03012483          	lw	s1,48(sp)
    3e7c:	01412e23          	sw	s4,28(sp)
            BCo = ROL(Amo, 21);
    3e80:	03412a03          	lw	s4,52(sp)
            BCi = ROL(Aki, 43);
    3e84:	009964b3          	or	s1,s2,s1
    3e88:	02912023          	sw	s1,32(sp)
            BCo = ROL(Amo, 21);
    3e8c:	03812483          	lw	s1,56(sp)
            BCu = ROL(Asu, 14);
    3e90:	012fdc13          	srli	s8,t6,0x12
    3e94:	03812e23          	sw	s8,60(sp)
            BCo = ROL(Amo, 21);
    3e98:	009a6a33          	or	s4,s4,s1
            BCu = ROL(Asu, 14);
    3e9c:	03c12483          	lw	s1,60(sp)
            BCa = ROL(Abo, 28);
    3ea0:	004edd13          	srli	s10,t4,0x4
    3ea4:	01cf1c93          	slli	s9,t5,0x1c
            BCe = ROL(Agu, 20);
    3ea8:	00c35c13          	srli	s8,t1,0xc
    3eac:	014e1b93          	slli	s7,t3,0x14
            BCa = ROL(Abo, 28);
    3eb0:	004f5f13          	srli	t5,t5,0x4
            BCe = ROL(Agu, 20);
    3eb4:	00ce5e13          	srli	t3,t3,0xc
            BCa = ROL(Abo, 28);
    3eb8:	01ce9e93          	slli	t4,t4,0x1c
            BCe = ROL(Agu, 20);
    3ebc:	01431313          	slli	t1,t1,0x14
            BCu = ROL(Asu, 14);
    3ec0:	00e29d93          	slli	s11,t0,0xe
            BCi = ROL(Aka,  3);
    3ec4:	01d85b13          	srli	s6,a6,0x1d
    3ec8:	00389a93          	slli	s5,a7,0x3
            BCa = ROL(Abo, 28);
    3ecc:	01df6eb3          	or	t4,t5,t4
            BCe = ROL(Agu, 20);
    3ed0:	006e6333          	or	t1,t3,t1
            BCo = ROL(Amo, 21);
    3ed4:	01539393          	slli	t2,t2,0x15
            BCu = ROL(Asu, 14);
    3ed8:	0122d293          	srli	t0,t0,0x12
            BCi = ROL(Aka,  3);
    3edc:	01d8d893          	srli	a7,a7,0x1d
            BCo = ROL(Amo, 21);
    3ee0:	00b45413          	srli	s0,s0,0xb
            BCu = ROL(Asu, 14);
    3ee4:	00ef9f93          	slli	t6,t6,0xe
            BCi = ROL(Aka,  3);
    3ee8:	00381813          	slli	a6,a6,0x3
            BCo = ROL(Amo, 21);
    3eec:	00746433          	or	s0,s0,t2
            BCu = ROL(Asu, 14);
    3ef0:	01f2efb3          	or	t6,t0,t6
    3ef4:	01b4e3b3          	or	t2,s1,s11
            BCa = ROL(Abo, 28);
    3ef8:	019d62b3          	or	t0,s10,s9
            BCi = ROL(Aka,  3);
    3efc:	0108e833          	or	a6,a7,a6
            BCa = ROL(Abo, 28);
    3f00:	03d12a23          	sw	t4,52(sp)
            BCe = ROL(Agu, 20);
    3f04:	02612e23          	sw	t1,60(sp)
    3f08:	017c6eb3          	or	t4,s8,s7
            BCi = ROL(Aka,  3);
    3f0c:	015b6333          	or	t1,s6,s5
            BCe = ROL(Age, 44);
    3f10:	09312c23          	sw	s3,152(sp)
            BCo = ROL(Amo, 21);
    3f14:	03412423          	sw	s4,40(sp)
    3f18:	02812223          	sw	s0,36(sp)
            BCu = ROL(Asu, 14);
    3f1c:	02712823          	sw	t2,48(sp)
    3f20:	03f12623          	sw	t6,44(sp)
            BCa = ROL(Abo, 28);
    3f24:	02512c23          	sw	t0,56(sp)
            BCe = ROL(Agu, 20);
    3f28:	05d12023          	sw	t4,64(sp)
            BCi = ROL(Aka,  3);
    3f2c:	04612423          	sw	t1,72(sp)
    3f30:	05012223          	sw	a6,68(sp)
            BCo = ROL(Ame, 45);
    3f34:	04c12803          	lw	a6,76(sp)
    3f38:	05012f83          	lw	t6,80(sp)
            BCu = ROL(Asi, 61);
    3f3c:	05812483          	lw	s1,88(sp)
    3f40:	01d61613          	slli	a2,a2,0x1d
            BCo = ROL(Ame, 45);
    3f44:	01f86fb3          	or	t6,a6,t6
            BCu = ROL(Asi, 61);
    3f48:	05412803          	lw	a6,84(sp)
    3f4c:	0036d693          	srli	a3,a3,0x3
    3f50:	00d666b3          	or	a3,a2,a3
    3f54:	009862b3          	or	t0,a6,s1
            BCa = ROL(Abe,  1);
    3f58:	0a412483          	lw	s1,164(sp)
    3f5c:	0a012803          	lw	a6,160(sp)
            BCo = ROL(Ame, 45);
    3f60:	0135d593          	srli	a1,a1,0x13
    3f64:	00d51513          	slli	a0,a0,0xd
            BCa = ROL(Abe,  1);
    3f68:	00986633          	or	a2,a6,s1
            Eko =   BCo ^((~BCu)&  BCa );
            Eku =   BCu ^((~BCa)&  BCe );

            Abu ^= Du;
            BCa = ROL(Abu, 27);
            Aga ^= Da;
    3f6c:	01012f03          	lw	t5,16(sp)
    3f70:	01412b03          	lw	s6,20(sp)
            Abu ^= Du;
    3f74:	08c12d83          	lw	s11,140(sp)
    3f78:	0cc12903          	lw	s2,204(sp)
            BCo = ROL(Ame, 45);
    3f7c:	00b56533          	or	a0,a0,a1
            BCa = ROL(Abe,  1);
    3f80:	0ac12423          	sw	a2,168(sp)
            Aga ^= Da;
    3f84:	0d412583          	lw	a1,212(sp)
    3f88:	0d812603          	lw	a2,216(sp)
            BCa = ROL(Abe,  1);
    3f8c:	01f75713          	srli	a4,a4,0x1f
    3f90:	00179793          	slli	a5,a5,0x1
    3f94:	00f76433          	or	s0,a4,a5
            Aga ^= Da;
    3f98:	00cb4e33          	xor	t3,s6,a2
            Abu ^= Du;
    3f9c:	012dc733          	xor	a4,s11,s2
            Aga ^= Da;
    3fa0:	00bf47b3          	xor	a5,t5,a1
            Abu ^= Du;
    3fa4:	01812303          	lw	t1,24(sp)
    3fa8:	0d012903          	lw	s2,208(sp)
            BCe = ROL(Aga, 36);
            Ake ^= De;
    3fac:	07412603          	lw	a2,116(sp)
    3fb0:	0e412583          	lw	a1,228(sp)
            BCu = ROL(Asi, 61);
    3fb4:	04d12c23          	sw	a3,88(sp)
            Abu ^= Du;
    3fb8:	012346b3          	xor	a3,t1,s2
            Ake ^= De;
    3fbc:	00b64c33          	xor	s8,a2,a1
    3fc0:	0e812903          	lw	s2,232(sp)
    3fc4:	07812583          	lw	a1,120(sp)
            BCo = ROL(Ame, 45);
    3fc8:	04a12823          	sw	a0,80(sp)
            BCi = ROL(Ake, 10);
            Ami ^= Di;
    3fcc:	07c12503          	lw	a0,124(sp)
            Ake ^= De;
    3fd0:	0125cbb3          	xor	s7,a1,s2
            Ami ^= Di;
    3fd4:	05c12903          	lw	s2,92(sp)
    3fd8:	08012803          	lw	a6,128(sp)
            BCo = ROL(Ami, 15);
            Aso ^= Do;
    3fdc:	08412883          	lw	a7,132(sp)
            Ami ^= Di;
    3fe0:	01254333          	xor	t1,a0,s2
    3fe4:	06012903          	lw	s2,96(sp)
            BCo = ROL(Ame, 45);
    3fe8:	05f12623          	sw	t6,76(sp)
            BCu = ROL(Asi, 61);
    3fec:	04512a23          	sw	t0,84(sp)
            Ami ^= Di;
    3ff0:	01284cb3          	xor	s9,a6,s2
            Aso ^= Do;
    3ff4:	06412903          	lw	s2,100(sp)
            BCa = ROL(Abe,  1);
    3ff8:	0a812223          	sw	s0,164(sp)
            Aga ^= Da;
    3ffc:	11c12623          	sw	t3,268(sp)
            Aso ^= Do;
    4000:	0128cd33          	xor	s10,a7,s2
    4004:	08812e03          	lw	t3,136(sp)
    4008:	06812903          	lw	s2,104(sp)
            BCe = ROL(Agi,  6);
    400c:	0b812603          	lw	a2,184(sp)
            BCi = ROL(Ako, 25);
    4010:	0c812283          	lw	t0,200(sp)
            Aso ^= Do;
    4014:	012e4db3          	xor	s11,t3,s2
            BCe = ROL(Agi,  6);
    4018:	00661a13          	slli	s4,a2,0x6
    401c:	0ac12903          	lw	s2,172(sp)
    4020:	01a65e93          	srli	t4,a2,0x1a
            BCi = ROL(Ako, 25);
    4024:	0c412603          	lw	a2,196(sp)
            Aba ^= Da;
    4028:	0b012f83          	lw	t6,176(sp)
            BCi = ROL(Ako, 25);
    402c:	0072d493          	srli	s1,t0,0x7
    4030:	06912023          	sw	s1,96(sp)
            BCe = ROL(Agi,  6);
    4034:	00691e13          	slli	t3,s2,0x6
            BCi = ROL(Ako, 25);
    4038:	00765993          	srli	s3,a2,0x7
    403c:	01961893          	slli	a7,a2,0x19
            BCe = ROL(Agi,  6);
    4040:	01a95a93          	srli	s5,s2,0x1a
            BCo = ROL(Amu,  8);
    4044:	0fc12603          	lw	a2,252(sp)
            BCi = ROL(Ako, 25);
    4048:	01929913          	slli	s2,t0,0x19
            BCo = ROL(Amu,  8);
    404c:	10012283          	lw	t0,256(sp)
            Aba ^= Da;
    4050:	01ff4fb3          	xor	t6,t5,t6
            BCe = ROL(Agi,  6);
    4054:	014aeab3          	or	s5,s5,s4
            Aba ^= Da;
    4058:	000b0f13          	mv	t5,s6
            BCi = ROL(Ako, 25);
    405c:	06012a03          	lw	s4,96(sp)
            Aba ^= Da;
    4060:	0b412b03          	lw	s6,180(sp)
            BCo = ROL(Amu,  8);
    4064:	0182d813          	srli	a6,t0,0x18
    4068:	00861513          	slli	a0,a2,0x8
            Aba ^= Da;
    406c:	016f4f33          	xor	t5,t5,s6
            BCi = ROL(Ako, 25);
    4070:	0129e933          	or	s2,s3,s2
            Eme =   BCe ^((~BCi)&  BCo );
            Emi =   BCi ^((~BCo)&  BCu );
            Emo =   BCo ^((~BCu)&  BCa );
            Emu =   BCu ^((~BCa)&  BCe );

            Abi ^= Di;
    4074:	0bc12b03          	lw	s6,188(sp)
            BCi = ROL(Ako, 25);
    4078:	011a69b3          	or	s3,s4,a7
            BCo = ROL(Amu,  8);
    407c:	00a86a33          	or	s4,a6,a0
            Abi ^= Di;
    4080:	07c12503          	lw	a0,124(sp)
    4084:	08012803          	lw	a6,128(sp)
            BCo = ROL(Amu,  8);
    4088:	01865493          	srli	s1,a2,0x18
            Abi ^= Di;
    408c:	01654533          	xor	a0,a0,s6
    4090:	0c012b03          	lw	s6,192(sp)
            BCo = ROL(Amu,  8);
    4094:	00829413          	slli	s0,t0,0x8
    4098:	0084e8b3          	or	a7,s1,s0
            Abi ^= Di;
    409c:	01684833          	xor	a6,a6,s6
            BCo = ROL(Amu,  8);
    40a0:	07112423          	sw	a7,104(sp)
            BCa = ROL(Abi, 62);
            Ago ^= Do;
    40a4:	0dc12b03          	lw	s6,220(sp)
    40a8:	08412883          	lw	a7,132(sp)
            BCu = ROL(Asa, 18);
    40ac:	10412603          	lw	a2,260(sp)
    40b0:	10812583          	lw	a1,264(sp)
            BCe = ROL(Agi,  6);
    40b4:	01ceeeb3          	or	t4,t4,t3
            Abi ^= Di;
    40b8:	13012623          	sw	a6,300(sp)
            Ago ^= Do;
    40bc:	08812e03          	lw	t3,136(sp)
    40c0:	0168c833          	xor	a6,a7,s6
    40c4:	0e012b03          	lw	s6,224(sp)
            BCu = ROL(Asa, 18);
    40c8:	00e65393          	srli	t2,a2,0xe
    40cc:	01259293          	slli	t0,a1,0x12
    40d0:	01261613          	slli	a2,a2,0x12
    40d4:	00e5d593          	srli	a1,a1,0xe
            Ago ^= Do;
    40d8:	016e4433          	xor	s0,t3,s6
            BCu = ROL(Asa, 18);
    40dc:	00c5e633          	or	a2,a1,a2
            BCe = ROL(Agi,  6);
    40e0:	05512e23          	sw	s5,92(sp)
            BCi = ROL(Ako, 25);
    40e4:	0b212623          	sw	s2,172(sp)
    40e8:	07312023          	sw	s3,96(sp)
            BCo = ROL(Amu,  8);
    40ec:	07412223          	sw	s4,100(sp)
            BCu = ROL(Asa, 18);
    40f0:	0ac12823          	sw	a2,176(sp)
            Abi ^= Di;
    40f4:	12a12423          	sw	a0,296(sp)
            Ago ^= Do;
    40f8:	13012823          	sw	a6,304(sp)
            BCe = ROL(Ago, 55);
            Aku ^= Du;
    40fc:	08c12503          	lw	a0,140(sp)
            Ago ^= Do;
    4100:	12812a23          	sw	s0,308(sp)
            Aku ^= Du;
    4104:	0ec12b03          	lw	s6,236(sp)
    4108:	01812883          	lw	a7,24(sp)
            BCi = ROL(Aku, 39);
            Ama ^= Da;
    410c:	01012583          	lw	a1,16(sp)
            Aku ^= Du;
    4110:	01654ab3          	xor	s5,a0,s6
    4114:	0f012b03          	lw	s6,240(sp)
            Eba =   BCa ^((~BCe)&  BCi );
    4118:	09812503          	lw	a0,152(sp)
            Ebe =   BCe ^((~BCi)&  BCo );
    411c:	01c12e03          	lw	t3,28(sp)
            Aku ^= Du;
    4120:	0168ca33          	xor	s4,a7,s6
            Ama ^= Da;
    4124:	0f412883          	lw	a7,244(sp)
            Ebe =   BCe ^((~BCi)&  BCo );
    4128:	02012483          	lw	s1,32(sp)
            BCu = ROL(Asa, 18);
    412c:	0053e2b3          	or	t0,t2,t0
            Ama ^= Da;
    4130:	0115c9b3          	xor	s3,a1,a7
    4134:	01412583          	lw	a1,20(sp)
    4138:	0f812883          	lw	a7,248(sp)
            Ebi =   BCi ^((~BCo)&  BCu );
    413c:	02412383          	lw	t2,36(sp)
            Eba =   BCa ^((~BCe)&  BCi );
    4140:	fff54813          	not	a6,a0
            Ama ^= Da;
    4144:	0115c933          	xor	s2,a1,a7
            BCo = ROL(Ama, 41);
            Ase ^= De;
    4148:	07412583          	lw	a1,116(sp)
    414c:	06c12883          	lw	a7,108(sp)
            Ebe =   BCe ^((~BCi)&  BCo );
    4150:	fffe4513          	not	a0,t3
            Ebo =   BCo ^((~BCu)&  BCa );
    4154:	03012e03          	lw	t3,48(sp)
            Ase ^= De;
    4158:	0115c8b3          	xor	a7,a1,a7
    415c:	09112223          	sw	a7,132(sp)
    4160:	07812583          	lw	a1,120(sp)
    4164:	07012883          	lw	a7,112(sp)
            Ebi =   BCi ^((~BCo)&  BCu );
    4168:	fff3cb13          	not	s6,t2
    416c:	02812383          	lw	t2,40(sp)
            Ase ^= De;
    4170:	0115c633          	xor	a2,a1,a7
            Eba =   BCa ^((~BCe)&  BCi );
    4174:	09412583          	lw	a1,148(sp)
            Ebi =   BCi ^((~BCo)&  BCu );
    4178:	09612423          	sw	s6,136(sp)
    417c:	fff3c413          	not	s0,t2
            Eba =   BCa ^((~BCe)&  BCi );
    4180:	fff5c893          	not	a7,a1
            Ebe =   BCe ^((~BCi)&  BCo );
    4184:	fff4c593          	not	a1,s1
            Ebo =   BCo ^((~BCu)&  BCa );
    4188:	02c12483          	lw	s1,44(sp)
            Ega =   BCa ^((~BCe)&  BCi );
    418c:	04012383          	lw	t2,64(sp)
            Ebi =   BCi ^((~BCo)&  BCu );
    4190:	08812623          	sw	s0,140(sp)
            Ebo =   BCo ^((~BCu)&  BCa );
    4194:	fff4cb13          	not	s6,s1
    4198:	fffe4493          	not	s1,t3
            Ege =   BCe ^((~BCi)&  BCo );
    419c:	04812e03          	lw	t3,72(sp)
            Ebo =   BCo ^((~BCu)&  BCa );
    41a0:	0b612023          	sw	s6,160(sp)
            Ega =   BCa ^((~BCe)&  BCi );
    41a4:	fff3c413          	not	s0,t2
            Ege =   BCe ^((~BCi)&  BCo );
    41a8:	fffe4b13          	not	s6,t3
            Egi =   BCi ^((~BCo)&  BCu );
    41ac:	04c12e03          	lw	t3,76(sp)
            Ase ^= De;
    41b0:	12c12c23          	sw	a2,312(sp)
            Ebo =   BCo ^((~BCu)&  BCa );
    41b4:	0a912a23          	sw	s1,180(sp)
            Ega =   BCa ^((~BCe)&  BCi );
    41b8:	0a812c23          	sw	s0,184(sp)
            Ege =   BCe ^((~BCi)&  BCo );
    41bc:	0b612e23          	sw	s6,188(sp)
            Egi =   BCi ^((~BCo)&  BCu );
    41c0:	fffe4413          	not	s0,t3
            Ega =   BCa ^((~BCe)&  BCi );
    41c4:	03c12483          	lw	s1,60(sp)
            Ege =   BCe ^((~BCi)&  BCo );
    41c8:	04412383          	lw	t2,68(sp)
            Egi =   BCi ^((~BCo)&  BCu );
    41cc:	0c812023          	sw	s0,192(sp)
    41d0:	05012e03          	lw	t3,80(sp)
            Ega =   BCa ^((~BCe)&  BCi );
    41d4:	fff4c493          	not	s1,s1
            Ege =   BCe ^((~BCi)&  BCo );
    41d8:	fff3c393          	not	t2,t2
            Egi =   BCi ^((~BCo)&  BCu );
    41dc:	fffe4b13          	not	s6,t3
            Ego =   BCo ^((~BCu)&  BCa );
    41e0:	05412e03          	lw	t3,84(sp)
            Egi =   BCi ^((~BCo)&  BCu );
    41e4:	0d612223          	sw	s6,196(sp)
            Ego =   BCo ^((~BCu)&  BCa );
    41e8:	fffe4413          	not	s0,t3
    41ec:	05812e03          	lw	t3,88(sp)
    41f0:	0c812423          	sw	s0,200(sp)
    41f4:	fffe4b13          	not	s6,t3
            Egu =   BCu ^((~BCa)&  BCe );
    41f8:	03412e03          	lw	t3,52(sp)
            Ego =   BCo ^((~BCu)&  BCa );
    41fc:	0d612623          	sw	s6,204(sp)
            Egu =   BCu ^((~BCa)&  BCe );
    4200:	fffe4413          	not	s0,t3
    4204:	03812e03          	lw	t3,56(sp)
    4208:	0c812823          	sw	s0,208(sp)
    420c:	fffe4b13          	not	s6,t3
            Eku =   BCu ^((~BCa)&  BCe );
    4210:	0a412e03          	lw	t3,164(sp)
            Egu =   BCu ^((~BCa)&  BCe );
    4214:	0d612a23          	sw	s6,212(sp)
            BCa = ROL(Abu, 27);
    4218:	01b69b13          	slli	s6,a3,0x1b
            Eku =   BCu ^((~BCa)&  BCe );
    421c:	fffe4413          	not	s0,t3
    4220:	0a812e03          	lw	t3,168(sp)
    4224:	0c812c23          	sw	s0,216(sp)
            BCa = ROL(Abu, 27);
    4228:	01612823          	sw	s6,16(sp)
            Eku =   BCu ^((~BCa)&  BCe );
    422c:	fffe4413          	not	s0,t3
            BCe = ROL(Aga, 36);
    4230:	10c12e03          	lw	t3,268(sp)
            Eku =   BCu ^((~BCa)&  BCe );
    4234:	12812223          	sw	s0,292(sp)
            BCa = ROL(Abu, 27);
    4238:	0056d693          	srli	a3,a3,0x5
            BCe = ROL(Aga, 36);
    423c:	004e1613          	slli	a2,t3,0x4
    4240:	00c12a23          	sw	a2,20(sp)
    4244:	01c7d613          	srli	a2,a5,0x1c
    4248:	00c12c23          	sw	a2,24(sp)
            BCi = ROL(Ake, 10);
    424c:	016c5613          	srli	a2,s8,0x16
    4250:	06c12623          	sw	a2,108(sp)
    4254:	00ab9613          	slli	a2,s7,0xa
    4258:	06c12823          	sw	a2,112(sp)
            BCa = ROL(Abu, 27);
    425c:	01012603          	lw	a2,16(sp)
    4260:	00575413          	srli	s0,a4,0x5
    4264:	01b71713          	slli	a4,a4,0x1b
    4268:	00c46433          	or	s0,s0,a2
    426c:	00e6e733          	or	a4,a3,a4
            BCe = ROL(Aga, 36);
    4270:	01412603          	lw	a2,20(sp)
            BCa = ROL(Abu, 27);
    4274:	00812823          	sw	s0,16(sp)
    4278:	00070413          	mv	s0,a4
            BCe = ROL(Aga, 36);
    427c:	01812703          	lw	a4,24(sp)
            BCi = ROL(Ake, 10);
    4280:	07012683          	lw	a3,112(sp)
    4284:	016bdb93          	srli	s7,s7,0x16
            BCe = ROL(Aga, 36);
    4288:	00e66733          	or	a4,a2,a4
            BCi = ROL(Ake, 10);
    428c:	06c12603          	lw	a2,108(sp)
            BCe = ROL(Aga, 36);
    4290:	00479793          	slli	a5,a5,0x4
    4294:	01ce5b13          	srli	s6,t3,0x1c
            BCi = ROL(Ake, 10);
    4298:	07712a23          	sw	s7,116(sp)
    429c:	00ac1b93          	slli	s7,s8,0xa
            BCo = ROL(Ami, 15);
    42a0:	01135c13          	srli	s8,t1,0x11
            BCe = ROL(Aga, 36);
    42a4:	0167eb33          	or	s6,a5,s6
            BCi = ROL(Ake, 10);
    42a8:	00d666b3          	or	a3,a2,a3
            BCo = ROL(Ami, 15);
    42ac:	07812c23          	sw	s8,120(sp)
    42b0:	00fc9c13          	slli	s8,s9,0xf
    42b4:	07812e23          	sw	s8,124(sp)
            BCe = ROL(Aga, 36);
    42b8:	00e12a23          	sw	a4,20(sp)
    42bc:	01612c23          	sw	s6,24(sp)
            BCi = ROL(Ake, 10);
    42c0:	06d12823          	sw	a3,112(sp)
    42c4:	07412603          	lw	a2,116(sp)
            BCo = ROL(Ami, 15);
    42c8:	011cdc13          	srli	s8,s9,0x11
            BCu = ROL(Aso, 56);
    42cc:	018d9e13          	slli	t3,s11,0x18
            BCo = ROL(Ami, 15);
    42d0:	00f31c93          	slli	s9,t1,0xf
            BCu = ROL(Aso, 56);
    42d4:	008d5313          	srli	t1,s10,0x8
            BCo = ROL(Ami, 15);
    42d8:	07c12783          	lw	a5,124(sp)
            Eba =   BCa ^((~BCe)&  BCi );
    42dc:	02012703          	lw	a4,32(sp)
            BCi = ROL(Ake, 10);
    42e0:	01766bb3          	or	s7,a2,s7
            BCo = ROL(Ami, 15);
    42e4:	019c6cb3          	or	s9,s8,s9
    42e8:	07812603          	lw	a2,120(sp)
            BCu = ROL(Aso, 56);
    42ec:	006e6c33          	or	s8,t3,t1
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
    42f0:	09012303          	lw	t1,144(sp)
            Eba =   BCa ^((~BCe)&  BCi );
    42f4:	00e876b3          	and	a3,a6,a4
            BCo = ROL(Ami, 15);
    42f8:	00f667b3          	or	a5,a2,a5
            Ebi =   BCi ^((~BCo)&  BCu );
    42fc:	02c12803          	lw	a6,44(sp)
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
    4300:	01f34633          	xor	a2,t1,t6
            Ebi =   BCi ^((~BCo)&  BCu );
    4304:	08812303          	lw	t1,136(sp)
            BCu = ROL(Aso, 56);
    4308:	018d1d13          	slli	s10,s10,0x18
    430c:	008ddd93          	srli	s11,s11,0x8
    4310:	01bd6db3          	or	s11,s10,s11
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
    4314:	09c12d03          	lw	s10,156(sp)
            BCo = ROL(Ami, 15);
    4318:	07912a23          	sw	s9,116(sp)
            Ebi =   BCi ^((~BCo)&  BCu );
    431c:	01037cb3          	and	s9,t1,a6
    4320:	08c12303          	lw	t1,140(sp)
    4324:	03012803          	lw	a6,48(sp)
            Eba =   BCa ^((~BCe)&  BCi );
    4328:	0ed12423          	sw	a3,232(sp)
            Ebe =   BCe ^((~BCi)&  BCo );
    432c:	02412683          	lw	a3,36(sp)
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
    4330:	01ed4d33          	xor	s10,s10,t5
            Eba =   BCa ^((~BCe)&  BCi );
    4334:	01c12e03          	lw	t3,28(sp)
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
    4338:	0fa12023          	sw	s10,224(sp)
            Ebi =   BCi ^((~BCo)&  BCu );
    433c:	01037d33          	and	s10,t1,a6
            Ebo =   BCo ^((~BCu)&  BCa );
    4340:	0a012303          	lw	t1,160(sp)
            BCu = ROL(Aso, 56);
    4344:	07812e23          	sw	s8,124(sp)
            Ebe =   BCe ^((~BCi)&  BCo );
    4348:	00d57c33          	and	s8,a0,a3
    434c:	02812683          	lw	a3,40(sp)
            Eba =   BCa ^((~BCe)&  BCi );
    4350:	01c8f8b3          	and	a7,a7,t3
            Ebo =   BCo ^((~BCu)&  BCa );
    4354:	01f37333          	and	t1,t1,t6
            Eba =   BCa ^((~BCe)&  BCi );
    4358:	0f112223          	sw	a7,228(sp)
            Ebo =   BCo ^((~BCu)&  BCa );
    435c:	0e612e23          	sw	t1,252(sp)
            Ebe =   BCe ^((~BCi)&  BCo );
    4360:	00d5f8b3          	and	a7,a1,a3
            Ebo =   BCo ^((~BCu)&  BCa );
    4364:	0b412303          	lw	t1,180(sp)
            Ebe =   BCe ^((~BCi)&  BCo );
    4368:	0f112823          	sw	a7,240(sp)
            Ega =   BCa ^((~BCe)&  BCi );
    436c:	04412883          	lw	a7,68(sp)
            Ebo =   BCo ^((~BCu)&  BCa );
    4370:	01e37333          	and	t1,t1,t5
            Ega =   BCa ^((~BCe)&  BCi );
    4374:	0b812583          	lw	a1,184(sp)
            BCi = ROL(Ake, 10);
    4378:	07712623          	sw	s7,108(sp)
            BCo = ROL(Ami, 15);
    437c:	06f12c23          	sw	a5,120(sp)
            BCu = ROL(Aso, 56);
    4380:	09b12023          	sw	s11,128(sp)
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
    4384:	0cc12e23          	sw	a2,220(sp)
            Ebe =   BCe ^((~BCi)&  BCo );
    4388:	0f812623          	sw	s8,236(sp)
            Ebi =   BCi ^((~BCo)&  BCu );
    438c:	0f912a23          	sw	s9,244(sp)
    4390:	0fa12c23          	sw	s10,248(sp)
            Ebo =   BCo ^((~BCu)&  BCa );
    4394:	10612023          	sw	t1,256(sp)
            Ega =   BCa ^((~BCe)&  BCi );
    4398:	0114f4b3          	and	s1,s1,a7
    439c:	04812883          	lw	a7,72(sp)
            Ebu =   BCu ^((~BCa)&  BCe );
    43a0:	ffff4313          	not	t1,t5
            Ege =   BCe ^((~BCi)&  BCo );
    43a4:	05012b83          	lw	s7,80(sp)
            Ega =   BCa ^((~BCe)&  BCi );
    43a8:	0115ff33          	and	t5,a1,a7
            Ege =   BCe ^((~BCi)&  BCo );
    43ac:	0bc12583          	lw	a1,188(sp)
            Egi =   BCi ^((~BCo)&  BCu );
    43b0:	05412c03          	lw	s8,84(sp)
    43b4:	05812c83          	lw	s9,88(sp)
            Ege =   BCe ^((~BCi)&  BCo );
    43b8:	0175f533          	and	a0,a1,s7
            Egi =   BCi ^((~BCo)&  BCu );
    43bc:	0c012583          	lw	a1,192(sp)
            Ebu =   BCu ^((~BCa)&  BCe );
    43c0:	ffffce13          	not	t3,t6
            Ego =   BCo ^((~BCu)&  BCa );
    43c4:	03412883          	lw	a7,52(sp)
            Egi =   BCi ^((~BCo)&  BCu );
    43c8:	0185ffb3          	and	t6,a1,s8
    43cc:	0c412583          	lw	a1,196(sp)
            Ega =   BCa ^((~BCe)&  BCi );
    43d0:	11e12223          	sw	t5,260(sp)
            Ege =   BCe ^((~BCi)&  BCo );
    43d4:	04c12f03          	lw	t5,76(sp)
            Egi =   BCi ^((~BCo)&  BCu );
    43d8:	0195f733          	and	a4,a1,s9
            Ego =   BCo ^((~BCu)&  BCa );
    43dc:	0c812583          	lw	a1,200(sp)
            Ege =   BCe ^((~BCi)&  BCo );
    43e0:	01e3f3b3          	and	t2,t2,t5
            Egu =   BCu ^((~BCa)&  BCe );
    43e4:	03c12f03          	lw	t5,60(sp)
            Ego =   BCo ^((~BCu)&  BCa );
    43e8:	0115f7b3          	and	a5,a1,a7
    43ec:	03812883          	lw	a7,56(sp)
    43f0:	0cc12583          	lw	a1,204(sp)
            Eke =   BCe ^((~BCi)&  BCo );
    43f4:	06012d83          	lw	s11,96(sp)
            Ege =   BCe ^((~BCi)&  BCo );
    43f8:	10a12423          	sw	a0,264(sp)
            Ego =   BCo ^((~BCu)&  BCa );
    43fc:	0115f5b3          	and	a1,a1,a7
    4400:	10b12a23          	sw	a1,276(sp)
            Egu =   BCu ^((~BCa)&  BCe );
    4404:	0d012583          	lw	a1,208(sp)
            Eke =   BCe ^((~BCi)&  BCo );
    4408:	fffdc513          	not	a0,s11
    440c:	0ac12d83          	lw	s11,172(sp)
            Egu =   BCu ^((~BCa)&  BCe );
    4410:	01e5f5b3          	and	a1,a1,t5
    4414:	10b12c23          	sw	a1,280(sp)
    4418:	04012f03          	lw	t5,64(sp)
    441c:	0d412583          	lw	a1,212(sp)
            Ego =   BCo ^((~BCu)&  BCa );
    4420:	10f12823          	sw	a5,272(sp)
            Eki =   BCi ^((~BCo)&  BCu );
    4424:	06412783          	lw	a5,100(sp)
            Egu =   BCu ^((~BCa)&  BCe );
    4428:	01e5f5b3          	and	a1,a1,t5
    442c:	10b12e23          	sw	a1,284(sp)
            Eke =   BCe ^((~BCi)&  BCo );
    4430:	fffdc593          	not	a1,s11
            Eku =   BCu ^((~BCa)&  BCe );
    4434:	0d812d83          	lw	s11,216(sp)
            Eka =   BCa ^((~BCe)&  BCi );
    4438:	05c12d03          	lw	s10,92(sp)
            Egi =   BCi ^((~BCo)&  BCu );
    443c:	10e12623          	sw	a4,268(sp)
            Eku =   BCu ^((~BCa)&  BCe );
    4440:	01ddff33          	and	t5,s11,t4
    4444:	12412d83          	lw	s11,292(sp)
            Eki =   BCi ^((~BCo)&  BCu );
    4448:	fff7c713          	not	a4,a5
    444c:	12e12023          	sw	a4,288(sp)
            Eku =   BCu ^((~BCa)&  BCe );
    4450:	01adfdb3          	and	s11,s11,s10
            Eki =   BCi ^((~BCo)&  BCu );
    4454:	06812703          	lw	a4,104(sp)
            Eko =   BCo ^((~BCu)&  BCa );
    4458:	0b012603          	lw	a2,176(sp)
            Eku =   BCu ^((~BCa)&  BCe );
    445c:	13b12223          	sw	s11,292(sp)
            BCa = ROL(Abi, 62);
    4460:	12c12b03          	lw	s6,300(sp)
    4464:	12812c83          	lw	s9,296(sp)
            BCe = ROL(Ago, 55);
    4468:	13412b83          	lw	s7,308(sp)
            BCa = ROL(Abi, 62);
    446c:	01eb1d93          	slli	s11,s6,0x1e
    4470:	002b5c13          	srli	s8,s6,0x2
            BCe = ROL(Ago, 55);
    4474:	13012b03          	lw	s6,304(sp)
            BCa = ROL(Abi, 62);
    4478:	09812623          	sw	s8,140(sp)
            Eka =   BCa ^((~BCe)&  BCi );
    447c:	fffd4813          	not	a6,s10
            BCe = ROL(Ago, 55);
    4480:	009b5c13          	srli	s8,s6,0x9
            BCa = ROL(Abi, 62);
    4484:	002cdd13          	srli	s10,s9,0x2
            BCe = ROL(Ago, 55);
    4488:	017b1b13          	slli	s6,s6,0x17
            BCa = ROL(Abi, 62);
    448c:	01ec9c93          	slli	s9,s9,0x1e
    4490:	09912423          	sw	s9,136(sp)
            BCe = ROL(Ago, 55);
    4494:	09612823          	sw	s6,144(sp)
            BCa = ROL(Abi, 62);
    4498:	01aded33          	or	s10,s11,s10
            BCe = ROL(Ago, 55);
    449c:	009bdb13          	srli	s6,s7,0x9
            BCa = ROL(Abi, 62);
    44a0:	08812d83          	lw	s11,136(sp)
            BCe = ROL(Ago, 55);
    44a4:	09612e23          	sw	s6,156(sp)
            BCa = ROL(Abi, 62);
    44a8:	0da12023          	sw	s10,192(sp)
            BCi = ROL(Aku, 39);
    44ac:	019adb13          	srli	s6,s5,0x19
            BCa = ROL(Abi, 62);
    44b0:	08c12d03          	lw	s10,140(sp)
            BCi = ROL(Aku, 39);
    44b4:	007a9a93          	slli	s5,s5,0x7
    44b8:	0b512023          	sw	s5,160(sp)
    44bc:	019a5a93          	srli	s5,s4,0x19
    44c0:	0b512a23          	sw	s5,180(sp)
            BCo = ROL(Ama, 41);
    44c4:	00991a93          	slli	s5,s2,0x9
    44c8:	01795913          	srli	s2,s2,0x17
    44cc:	0b212e23          	sw	s2,188(sp)
            BCa = ROL(Abi, 62);
    44d0:	01aded33          	or	s10,s11,s10
            BCu = ROL(Ase,  2);
    44d4:	08412903          	lw	s2,132(sp)
            Eki =   BCi ^((~BCo)&  BCu );
    44d8:	fff74693          	not	a3,a4
            BCe = ROL(Ago, 55);
    44dc:	017b9c93          	slli	s9,s7,0x17
            Eko =   BCo ^((~BCu)&  BCa );
    44e0:	fff64713          	not	a4,a2
            BCi = ROL(Aku, 39);
    44e4:	007a1b93          	slli	s7,s4,0x7
            BCu = ROL(Ase,  2);
    44e8:	13812603          	lw	a2,312(sp)
            BCe = ROL(Ago, 55);
    44ec:	018cecb3          	or	s9,s9,s8
            BCa = ROL(Abi, 62);
    44f0:	0da12223          	sw	s10,196(sp)
            BCi = ROL(Aku, 39);
    44f4:	0b412c03          	lw	s8,180(sp)
    44f8:	016bed33          	or	s10,s7,s6
    44fc:	0a012b03          	lw	s6,160(sp)
            BCo = ROL(Ama, 41);
    4500:	0179da13          	srli	s4,s3,0x17
    4504:	00999993          	slli	s3,s3,0x9
    4508:	0b312c23          	sw	s3,184(sp)
    450c:	014aeab3          	or	s5,s5,s4
            BCu = ROL(Ase,  2);
    4510:	01e95993          	srli	s3,s2,0x1e
    4514:	00261913          	slli	s2,a2,0x2
    4518:	01e65613          	srli	a2,a2,0x1e
            BCi = ROL(Aku, 39);
    451c:	018b6b33          	or	s6,s6,s8
            BCe = ROL(Ago, 55);
    4520:	09012d83          	lw	s11,144(sp)
            BCo = ROL(Ama, 41);
    4524:	0bc12c03          	lw	s8,188(sp)
            BCu = ROL(Ase,  2);
    4528:	0cc12c23          	sw	a2,216(sp)
            BCe = ROL(Ago, 55);
    452c:	0d912423          	sw	s9,200(sp)
            BCu = ROL(Ase,  2);
    4530:	08412603          	lw	a2,132(sp)
            BCe = ROL(Ago, 55);
    4534:	09c12c83          	lw	s9,156(sp)
            BCo = ROL(Ama, 41);
    4538:	09512223          	sw	s5,132(sp)
    453c:	0b812a83          	lw	s5,184(sp)
            BCe = ROL(Ago, 55);
    4540:	019dedb3          	or	s11,s11,s9
            BCu = ROL(Ase,  2);
    4544:	0129e933          	or	s2,s3,s2
            BCo = ROL(Ama, 41);
    4548:	018aeab3          	or	s5,s5,s8
            BCe = ROL(Ago, 55);
    454c:	0db12623          	sw	s11,204(sp)
            BCi = ROL(Aku, 39);
    4550:	0da12823          	sw	s10,208(sp)
    4554:	0d612a23          	sw	s6,212(sp)
            BCo = ROL(Ama, 41);
    4558:	09512423          	sw	s5,136(sp)
            BCu = ROL(Ase,  2);
    455c:	09212823          	sw	s2,144(sp)
    4560:	0d812983          	lw	s3,216(sp)
    4564:	00261613          	slli	a2,a2,0x2
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
    4568:	0e412903          	lw	s2,228(sp)
            BCu = ROL(Ase,  2);
    456c:	00c9e9b3          	or	s3,s3,a2
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
    4570:	0dc12603          	lw	a2,220(sp)
            BCu = ROL(Ase,  2);
    4574:	09312623          	sw	s3,140(sp)
            Ebe =   BCe ^((~BCi)&  BCo );
    4578:	09812983          	lw	s3,152(sp)
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
    457c:	01264633          	xor	a2,a2,s2
    4580:	08c12e23          	sw	a2,156(sp)
    4584:	0e812903          	lw	s2,232(sp)
    4588:	0e012603          	lw	a2,224(sp)
            Ebi =   BCi ^((~BCo)&  BCu );
    458c:	01c12a03          	lw	s4,28(sp)
            Ebo =   BCo ^((~BCu)&  BCa );
    4590:	0fc12b83          	lw	s7,252(sp)
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
    4594:	01264633          	xor	a2,a2,s2
    4598:	0ac12023          	sw	a2,160(sp)
            Ebe =   BCe ^((~BCi)&  BCo );
    459c:	09412903          	lw	s2,148(sp)
    45a0:	0ec12603          	lw	a2,236(sp)
            Ebo =   BCo ^((~BCu)&  BCa );
    45a4:	02412b03          	lw	s6,36(sp)
            Ebi =   BCi ^((~BCo)&  BCu );
    45a8:	0f812a83          	lw	s5,248(sp)
            Ebe =   BCe ^((~BCi)&  BCo );
    45ac:	01264633          	xor	a2,a2,s2
    45b0:	08c12a23          	sw	a2,148(sp)
    45b4:	0f012603          	lw	a2,240(sp)
            Ebo =   BCo ^((~BCu)&  BCa );
    45b8:	016bcb33          	xor	s6,s7,s6
    45bc:	03612223          	sw	s6,36(sp)
            Ebe =   BCe ^((~BCi)&  BCo );
    45c0:	01364633          	xor	a2,a2,s3
    45c4:	08c12c23          	sw	a2,152(sp)
            Ebi =   BCi ^((~BCo)&  BCu );
    45c8:	0f412603          	lw	a2,244(sp)
            Ega =   BCa ^((~BCe)&  BCi );
    45cc:	03412b03          	lw	s6,52(sp)
            Ebo =   BCo ^((~BCu)&  BCa );
    45d0:	10012b83          	lw	s7,256(sp)
            Ebi =   BCi ^((~BCo)&  BCu );
    45d4:	01464633          	xor	a2,a2,s4
    45d8:	02012a03          	lw	s4,32(sp)
            Ega =   BCa ^((~BCe)&  BCi );
    45dc:	0164c4b3          	xor	s1,s1,s6
    45e0:	02912a23          	sw	s1,52(sp)
            Ebi =   BCi ^((~BCo)&  BCu );
    45e4:	014acab3          	xor	s5,s5,s4
            Ebo =   BCo ^((~BCu)&  BCa );
    45e8:	02812a03          	lw	s4,40(sp)
            Ega =   BCa ^((~BCe)&  BCi );
    45ec:	10412483          	lw	s1,260(sp)
            Ebi =   BCi ^((~BCo)&  BCu );
    45f0:	00c12e23          	sw	a2,28(sp)
            Ebo =   BCo ^((~BCu)&  BCa );
    45f4:	014bca33          	xor	s4,s7,s4
    45f8:	03412423          	sw	s4,40(sp)
            Ega =   BCa ^((~BCe)&  BCi );
    45fc:	03812a03          	lw	s4,56(sp)
            Ebi =   BCi ^((~BCo)&  BCu );
    4600:	03512023          	sw	s5,32(sp)
            Ebu =   BCu ^((~BCa)&  BCe );
    4604:	01337333          	and	t1,t1,s3
            Ega =   BCa ^((~BCe)&  BCi );
    4608:	0144c4b3          	xor	s1,s1,s4
            Ege =   BCe ^((~BCi)&  BCo );
    460c:	03c12a03          	lw	s4,60(sp)
            Ega =   BCa ^((~BCe)&  BCi );
    4610:	02912c23          	sw	s1,56(sp)
            Eka =   BCa ^((~BCe)&  BCi );
    4614:	fffec893          	not	a7,t4
            Ege =   BCe ^((~BCi)&  BCo );
    4618:	0143ca33          	xor	s4,t2,s4
    461c:	03412e23          	sw	s4,60(sp)
    4620:	04012383          	lw	t2,64(sp)
    4624:	10812b03          	lw	s6,264(sp)
            Ego =   BCo ^((~BCu)&  BCa );
    4628:	05012b83          	lw	s7,80(sp)
            Egu =   BCu ^((~BCa)&  BCe );
    462c:	05412c03          	lw	s8,84(sp)
            Ege =   BCe ^((~BCi)&  BCo );
    4630:	007b43b3          	xor	t2,s6,t2
    4634:	04712023          	sw	t2,64(sp)
            Egi =   BCi ^((~BCo)&  BCu );
    4638:	04412383          	lw	t2,68(sp)
            Egu =   BCu ^((~BCa)&  BCe );
    463c:	05812c83          	lw	s9,88(sp)
            Eku =   BCu ^((~BCa)&  BCe );
    4640:	0b012603          	lw	a2,176(sp)
            Egi =   BCi ^((~BCo)&  BCu );
    4644:	007fc3b3          	xor	t2,t6,t2
    4648:	04712223          	sw	t2,68(sp)
    464c:	04812f83          	lw	t6,72(sp)
    4650:	10c12383          	lw	t2,268(sp)
            Eke =   BCe ^((~BCi)&  BCo );
    4654:	06412a03          	lw	s4,100(sp)
            Eku =   BCu ^((~BCa)&  BCe );
    4658:	00cf4f33          	xor	t5,t5,a2
            Egi =   BCi ^((~BCo)&  BCu );
    465c:	01f3cfb3          	xor	t6,t2,t6
    4660:	05f12423          	sw	t6,72(sp)
            Ego =   BCo ^((~BCu)&  BCa );
    4664:	11012383          	lw	t2,272(sp)
    4668:	04c12f83          	lw	t6,76(sp)
            Eka =   BCa ^((~BCe)&  BCi );
    466c:	06012983          	lw	s3,96(sp)
            Eku =   BCu ^((~BCa)&  BCe );
    4670:	0be12a23          	sw	t5,180(sp)
            Ego =   BCo ^((~BCu)&  BCa );
    4674:	01f3cfb3          	xor	t6,t2,t6
    4678:	11412383          	lw	t2,276(sp)
            Eke =   BCe ^((~BCi)&  BCo );
    467c:	06812f03          	lw	t5,104(sp)
    4680:	01457533          	and	a0,a0,s4
            Ego =   BCo ^((~BCu)&  BCa );
    4684:	0173cbb3          	xor	s7,t2,s7
    4688:	05712823          	sw	s7,80(sp)
            Egu =   BCu ^((~BCa)&  BCe );
    468c:	11812b83          	lw	s7,280(sp)
            Eke =   BCe ^((~BCi)&  BCo );
    4690:	01d54533          	xor	a0,a0,t4
            Eka =   BCa ^((~BCe)&  BCi );
    4694:	0ac12383          	lw	t2,172(sp)
            Egu =   BCu ^((~BCa)&  BCe );
    4698:	018bcc33          	xor	s8,s7,s8
    469c:	11c12b83          	lw	s7,284(sp)
            Ego =   BCo ^((~BCu)&  BCa );
    46a0:	05f12623          	sw	t6,76(sp)
            Egu =   BCu ^((~BCa)&  BCe );
    46a4:	05812a23          	sw	s8,84(sp)
    46a8:	019bccb3          	xor	s9,s7,s9
            Eku =   BCu ^((~BCa)&  BCe );
    46ac:	12412b83          	lw	s7,292(sp)
            Eko =   BCo ^((~BCu)&  BCa );
    46b0:	0a412f83          	lw	t6,164(sp)
            Egu =   BCu ^((~BCa)&  BCe );
    46b4:	05912c23          	sw	s9,88(sp)
            Eku =   BCu ^((~BCa)&  BCe );
    46b8:	005bcbb3          	xor	s7,s7,t0
    46bc:	0b712c23          	sw	s7,184(sp)
            Ebu =   BCu ^((~BCa)&  BCe );
    46c0:	012e7e33          	and	t3,t3,s2
            Eka =   BCa ^((~BCe)&  BCi );
    46c4:	0138f8b3          	and	a7,a7,s3
            Ema =   BCa ^((~BCe)&  BCi );
    46c8:	01412903          	lw	s2,20(sp)
            Eki =   BCi ^((~BCo)&  BCu );
    46cc:	12012983          	lw	s3,288(sp)
            Eke =   BCe ^((~BCi)&  BCo );
    46d0:	01e5f5b3          	and	a1,a1,t5
            Eko =   BCo ^((~BCu)&  BCa );
    46d4:	0a812f03          	lw	t5,168(sp)
            Ema =   BCa ^((~BCe)&  BCi );
    46d8:	01812b03          	lw	s6,24(sp)
            Emo =   BCo ^((~BCu)&  BCa );
    46dc:	07c12a03          	lw	s4,124(sp)
    46e0:	08012483          	lw	s1,128(sp)
            Eke =   BCe ^((~BCi)&  BCo );
    46e4:	0aa12623          	sw	a0,172(sp)
    46e8:	05c12503          	lw	a0,92(sp)
            Eki =   BCi ^((~BCo)&  BCu );
    46ec:	0056f6b3          	and	a3,a3,t0
            Emo =   BCo ^((~BCu)&  BCa );
    46f0:	fffa4a93          	not	s5,s4
            Eke =   BCe ^((~BCi)&  BCo );
    46f4:	00a5c5b3          	xor	a1,a1,a0
            Emo =   BCo ^((~BCu)&  BCa );
    46f8:	fff4ca13          	not	s4,s1
            Ebu =   BCu ^((~BCa)&  BCe );
    46fc:	02c12483          	lw	s1,44(sp)
            Eki =   BCi ^((~BCo)&  BCu );
    4700:	0076c533          	xor	a0,a3,t2
            Eke =   BCe ^((~BCi)&  BCo );
    4704:	04b12e23          	sw	a1,92(sp)
            Eko =   BCo ^((~BCu)&  BCa );
    4708:	06412683          	lw	a3,100(sp)
            Eki =   BCi ^((~BCo)&  BCu );
    470c:	06012583          	lw	a1,96(sp)
    4710:	00c9f633          	and	a2,s3,a2
            Eko =   BCo ^((~BCu)&  BCa );
    4714:	01f77733          	and	a4,a4,t6
            Ebu =   BCu ^((~BCa)&  BCe );
    4718:	009e4e33          	xor	t3,t3,s1
            Eme =   BCe ^((~BCi)&  BCo );
    471c:	06c12c03          	lw	s8,108(sp)
            Eki =   BCi ^((~BCo)&  BCu );
    4720:	00b645b3          	xor	a1,a2,a1
            Eko =   BCo ^((~BCu)&  BCa );
    4724:	00d746b3          	xor	a3,a4,a3
            Ebu =   BCu ^((~BCa)&  BCe );
    4728:	03c12623          	sw	t3,44(sp)
            Eko =   BCo ^((~BCu)&  BCa );
    472c:	06812703          	lw	a4,104(sp)
            Ebu =   BCu ^((~BCa)&  BCe );
    4730:	03012e03          	lw	t3,48(sp)
            Ema =   BCa ^((~BCe)&  BCi );
    4734:	06c12603          	lw	a2,108(sp)
            Eko =   BCo ^((~BCu)&  BCa );
    4738:	fff2c793          	not	a5,t0
            Eka =   BCa ^((~BCe)&  BCi );
    473c:	00787833          	and	a6,a6,t2
            Emi =   BCi ^((~BCo)&  BCu );
    4740:	07812283          	lw	t0,120(sp)
            Eki =   BCi ^((~BCo)&  BCu );
    4744:	06b12023          	sw	a1,96(sp)
            Eme =   BCe ^((~BCi)&  BCo );
    4748:	07412583          	lw	a1,116(sp)
            Eko =   BCo ^((~BCu)&  BCa );
    474c:	01e7f7b3          	and	a5,a5,t5
            Eka =   BCa ^((~BCe)&  BCi );
    4750:	01e84833          	xor	a6,a6,t5
            Eme =   BCe ^((~BCi)&  BCo );
    4754:	07012b83          	lw	s7,112(sp)
            Emi =   BCi ^((~BCo)&  BCu );
    4758:	07412983          	lw	s3,116(sp)
            Ebu =   BCu ^((~BCa)&  BCe );
    475c:	01c34333          	xor	t1,t1,t3
            Eka =   BCa ^((~BCe)&  BCi );
    4760:	01f8c8b3          	xor	a7,a7,t6
            Ema =   BCa ^((~BCe)&  BCi );
    4764:	fff94d93          	not	s11,s2
            Eme =   BCe ^((~BCi)&  BCo );
    4768:	fffc4c93          	not	s9,s8
            Eka =   BCa ^((~BCe)&  BCi );
    476c:	0b012423          	sw	a6,168(sp)
            Eko =   BCo ^((~BCu)&  BCa );
    4770:	00e7c833          	xor	a6,a5,a4
            Emi =   BCi ^((~BCo)&  BCu );
    4774:	08012483          	lw	s1,128(sp)
            Emu =   BCu ^((~BCa)&  BCe );
    4778:	01412703          	lw	a4,20(sp)
            Ema =   BCa ^((~BCe)&  BCi );
    477c:	00cdfdb3          	and	s11,s11,a2
    4780:	fffb4d13          	not	s10,s6
    4784:	07012603          	lw	a2,112(sp)
            Emi =   BCi ^((~BCo)&  BCu );
    4788:	fff2cb13          	not	s6,t0
            Ebu =   BCu ^((~BCa)&  BCe );
    478c:	02612823          	sw	t1,48(sp)
            Emu =   BCu ^((~BCa)&  BCe );
    4790:	01012283          	lw	t0,16(sp)
            Eka =   BCa ^((~BCe)&  BCi );
    4794:	0b112223          	sw	a7,164(sp)
            Eki =   BCi ^((~BCo)&  BCu );
    4798:	0aa12823          	sw	a0,176(sp)
            Eko =   BCo ^((~BCu)&  BCa );
    479c:	07012423          	sw	a6,104(sp)
            Emi =   BCi ^((~BCo)&  BCu );
    47a0:	07c12503          	lw	a0,124(sp)
            Eme =   BCe ^((~BCi)&  BCo );
    47a4:	00bcfcb3          	and	s9,s9,a1
            Emo =   BCo ^((~BCu)&  BCa );
    47a8:	0a812e23          	sw	s0,188(sp)
            Eme =   BCe ^((~BCi)&  BCo );
    47ac:	07812583          	lw	a1,120(sp)
            Eko =   BCo ^((~BCu)&  BCa );
    47b0:	06d12223          	sw	a3,100(sp)
            Emu =   BCu ^((~BCa)&  BCe );
    47b4:	01812683          	lw	a3,24(sp)
            Esa =   BCa ^((~BCe)&  BCi );
    47b8:	0c812803          	lw	a6,200(sp)
            Ese =   BCe ^((~BCi)&  BCo );
            Esi =   BCi ^((~BCo)&  BCu );
    47bc:	08812f03          	lw	t5,136(sp)
            Eso =   BCo ^((~BCu)&  BCa );
    47c0:	08c12f83          	lw	t6,140(sp)
            Eme =   BCe ^((~BCi)&  BCo );
    47c4:	fffbcc13          	not	s8,s7
            Emi =   BCi ^((~BCo)&  BCu );
    47c8:	fff9cb93          	not	s7,s3
            Esa =   BCa ^((~BCe)&  BCi );
    47cc:	0cc12883          	lw	a7,204(sp)
            Ese =   BCe ^((~BCi)&  BCo );
    47d0:	0d412e03          	lw	t3,212(sp)
            Esi =   BCi ^((~BCo)&  BCu );
    47d4:	08412e83          	lw	t4,132(sp)
            Esu =   BCu ^((~BCa)&  BCe );

            //    prepareTheta
            BCa = Eba^Ega^Eka^Ema^Esa;
    47d8:	09c12783          	lw	a5,156(sp)
            Emi =   BCi ^((~BCo)&  BCu );
    47dc:	00abfbb3          	and	s7,s7,a0
    47e0:	009b7b33          	and	s6,s6,s1
            Eso =   BCo ^((~BCu)&  BCa );
    47e4:	ffffc513          	not	a0,t6
            Esa =   BCa ^((~BCe)&  BCi );
    47e8:	fff84493          	not	s1,a6
            Eso =   BCo ^((~BCu)&  BCa );
    47ec:	09012f83          	lw	t6,144(sp)
            Esi =   BCi ^((~BCo)&  BCu );
    47f0:	ffff4813          	not	a6,t5
            BCa = Eba^Ega^Eka^Ema^Esa;
    47f4:	03412f03          	lw	t5,52(sp)
            Eme =   BCe ^((~BCi)&  BCo );
    47f8:	00bc7c33          	and	s8,s8,a1
            Emo =   BCo ^((~BCu)&  BCa );
    47fc:	008afab3          	and	s5,s5,s0
    4800:	005a7a33          	and	s4,s4,t0
            Emu =   BCu ^((~BCa)&  BCe );
    4804:	fff44993          	not	s3,s0
    4808:	fff2c913          	not	s2,t0
            Esa =   BCa ^((~BCe)&  BCi );
    480c:	fff8c413          	not	s0,a7
            Ese =   BCe ^((~BCi)&  BCo );
    4810:	fffe4293          	not	t0,t3
            Esi =   BCi ^((~BCo)&  BCu );
    4814:	fffec893          	not	a7,t4
            Esu =   BCu ^((~BCa)&  BCe );
    4818:	0c412e03          	lw	t3,196(sp)
            BCa = Eba^Ega^Eka^Ema^Esa;
    481c:	0a012e83          	lw	t4,160(sp)
            Eso =   BCo ^((~BCu)&  BCa );
    4820:	ffffc593          	not	a1,t6
            BCa = Eba^Ega^Eka^Ema^Esa;
    4824:	01e7cfb3          	xor	t6,a5,t5
    4828:	03812f03          	lw	t5,56(sp)
            Ese =   BCe ^((~BCi)&  BCo );
    482c:	0d012303          	lw	t1,208(sp)
            BCe = Ebe^Ege^Eke^Eme^Ese;
    4830:	09412783          	lw	a5,148(sp)
            Emu =   BCu ^((~BCa)&  BCe );
    4834:	00e9f9b3          	and	s3,s3,a4
    4838:	00d97933          	and	s2,s2,a3
            BCe = Ebe^Ege^Eke^Eme^Ese;
    483c:	04012703          	lw	a4,64(sp)
            Esu =   BCu ^((~BCa)&  BCe );
    4840:	fffe4693          	not	a3,t3
            BCa = Eba^Ega^Eka^Ema^Esa;
    4844:	01eecf33          	xor	t5,t4,t5
            BCe = Ebe^Ege^Eke^Eme^Ese;
    4848:	09812e03          	lw	t3,152(sp)
    484c:	03c12e83          	lw	t4,60(sp)
            Ese =   BCe ^((~BCi)&  BCo );
    4850:	fff34393          	not	t2,t1
            BCe = Ebe^Ege^Eke^Eme^Ese;
    4854:	00ee4e33          	xor	t3,t3,a4
            Esu =   BCu ^((~BCa)&  BCe );
    4858:	0c012303          	lw	t1,192(sp)
            BCi = Ebi^Egi^Eki^Emi^Esi;
    485c:	04412703          	lw	a4,68(sp)
            BCe = Ebe^Ege^Eke^Eme^Ese;
    4860:	01d7ceb3          	xor	t4,a5,t4
            BCi = Ebi^Egi^Eki^Emi^Esi;
    4864:	01c12783          	lw	a5,28(sp)
            Ema =   BCa ^((~BCe)&  BCi );
    4868:	00cd7d33          	and	s10,s10,a2
            Esu =   BCu ^((~BCa)&  BCe );
    486c:	fff34613          	not	a2,t1
            BCi = Ebi^Egi^Eki^Emi^Esi;
    4870:	00e7c333          	xor	t1,a5,a4
    4874:	04812783          	lw	a5,72(sp)
    4878:	02012703          	lw	a4,32(sp)
            Emu =   BCu ^((~BCa)&  BCe );
    487c:	0d212c23          	sw	s2,216(sp)
            BCo = Ebo^Ego^Eko^Emo^Eso;
    4880:	04c12903          	lw	s2,76(sp)
            BCi = Ebi^Egi^Eki^Emi^Esi;
    4884:	00f74733          	xor	a4,a4,a5
            BCo = Ebo^Ego^Eko^Emo^Eso;
    4888:	02412783          	lw	a5,36(sp)
            Ese =   BCe ^((~BCi)&  BCo );
    488c:	0c712e23          	sw	t2,220(sp)
            BCo = Ebo^Ego^Eko^Emo^Eso;
    4890:	05012383          	lw	t2,80(sp)
    4894:	0127c7b3          	xor	a5,a5,s2
    4898:	02812903          	lw	s2,40(sp)
    489c:	007943b3          	xor	t2,s2,t2
    48a0:	0e712023          	sw	t2,224(sp)
            BCu = Ebu^Egu^Eku^Emu^Esu;
    48a4:	0b412903          	lw	s2,180(sp)
    48a8:	05412383          	lw	t2,84(sp)
    48ac:	0123c3b3          	xor	t2,t2,s2
    48b0:	0e712223          	sw	t2,228(sp)
    48b4:	0b812903          	lw	s2,184(sp)
    48b8:	05812383          	lw	t2,88(sp)
    48bc:	0123c3b3          	xor	t2,t2,s2
            Ema =   BCa ^((~BCe)&  BCi );
    48c0:	0bc12903          	lw	s2,188(sp)
            BCu = Ebu^Egu^Eku^Emu^Esu;
    48c4:	0e712423          	sw	t2,232(sp)
            Ema =   BCa ^((~BCe)&  BCi );
    48c8:	012dc3b3          	xor	t2,s11,s2
            Eme =   BCe ^((~BCi)&  BCo );
    48cc:	01412903          	lw	s2,20(sp)
            Ema =   BCa ^((~BCe)&  BCi );
    48d0:	01012d83          	lw	s11,16(sp)
    48d4:	0a712e23          	sw	t2,188(sp)
            Eme =   BCe ^((~BCi)&  BCo );
    48d8:	012cccb3          	xor	s9,s9,s2
    48dc:	01812903          	lw	s2,24(sp)
            Ema =   BCa ^((~BCe)&  BCi );
    48e0:	01bd4d33          	xor	s10,s10,s11
            Ese =   BCe ^((~BCi)&  BCo );
    48e4:	0dc12383          	lw	t2,220(sp)
            Eme =   BCe ^((~BCi)&  BCo );
    48e8:	012c4db3          	xor	s11,s8,s2
            Emi =   BCi ^((~BCo)&  BCu );
    48ec:	06c12c03          	lw	s8,108(sp)
            Emo =   BCo ^((~BCu)&  BCa );
    48f0:	07812903          	lw	s2,120(sp)
            Eme =   BCe ^((~BCi)&  BCo );
    48f4:	01b12c23          	sw	s11,24(sp)
            Emi =   BCi ^((~BCo)&  BCu );
    48f8:	018bcc33          	xor	s8,s7,s8
    48fc:	07012b83          	lw	s7,112(sp)
            Emu =   BCu ^((~BCa)&  BCe );
    4900:	08012d83          	lw	s11,128(sp)
            Ema =   BCa ^((~BCe)&  BCi );
    4904:	01a12823          	sw	s10,16(sp)
            Emi =   BCi ^((~BCo)&  BCu );
    4908:	017b4bb3          	xor	s7,s6,s7
            Emo =   BCo ^((~BCu)&  BCa );
    490c:	07412b03          	lw	s6,116(sp)
            Esa =   BCa ^((~BCe)&  BCi );
    4910:	0d012d03          	lw	s10,208(sp)
            Eme =   BCe ^((~BCi)&  BCo );
    4914:	01912a23          	sw	s9,20(sp)
            Emo =   BCo ^((~BCu)&  BCa );
    4918:	016acb33          	xor	s6,s5,s6
    491c:	012a4ab3          	xor	s5,s4,s2
            Emu =   BCu ^((~BCa)&  BCe );
    4920:	07c12a03          	lw	s4,124(sp)
    4924:	0d812903          	lw	s2,216(sp)
            Emo =   BCo ^((~BCu)&  BCa );
    4928:	07612a23          	sw	s6,116(sp)
            Emu =   BCu ^((~BCa)&  BCe );
    492c:	0149cb33          	xor	s6,s3,s4
            Esi =   BCi ^((~BCo)&  BCu );
    4930:	08c12a03          	lw	s4,140(sp)
            Ese =   BCe ^((~BCi)&  BCo );
    4934:	08812983          	lw	s3,136(sp)
            Emu =   BCu ^((~BCa)&  BCe );
    4938:	01b94db3          	xor	s11,s2,s11
            Esi =   BCi ^((~BCo)&  BCu );
    493c:	0148f8b3          	and	a7,a7,s4
            Ese =   BCe ^((~BCi)&  BCo );
    4940:	08412903          	lw	s2,132(sp)
            Esi =   BCi ^((~BCo)&  BCu );
    4944:	09012a03          	lw	s4,144(sp)
            Emi =   BCi ^((~BCo)&  BCu );
    4948:	07812623          	sw	s8,108(sp)
            Emu =   BCu ^((~BCa)&  BCe );
    494c:	07612c23          	sw	s6,120(sp)
    4950:	07b12e23          	sw	s11,124(sp)
            Eso =   BCo ^((~BCu)&  BCa );
    4954:	0c012b03          	lw	s6,192(sp)
            Esa =   BCa ^((~BCe)&  BCi );
    4958:	0d412d83          	lw	s11,212(sp)
            Ese =   BCe ^((~BCi)&  BCo );
    495c:	0132f2b3          	and	t0,t0,s3
            Esi =   BCi ^((~BCo)&  BCu );
    4960:	0d112823          	sw	a7,208(sp)
            Emi =   BCi ^((~BCo)&  BCu );
    4964:	07712823          	sw	s7,112(sp)
            Eso =   BCo ^((~BCu)&  BCa );
    4968:	0c412b83          	lw	s7,196(sp)
            BCa = Eba^Ega^Eka^Ema^Esa;
    496c:	0a412983          	lw	s3,164(sp)
            Esi =   BCi ^((~BCo)&  BCu );
    4970:	01487833          	and	a6,a6,s4
            BCe = Ebe^Ege^Eke^Eme^Ese;
    4974:	05c12a03          	lw	s4,92(sp)
            BCa = Eba^Ega^Eka^Ema^Esa;
    4978:	013fcfb3          	xor	t6,t6,s3
    497c:	0a812983          	lw	s3,168(sp)
            Esu =   BCu ^((~BCa)&  BCe );
    4980:	0cc12c83          	lw	s9,204(sp)
            BCe = Ebe^Ege^Eke^Eme^Ese;
    4984:	014e4e33          	xor	t3,t3,s4
            BCa = Eba^Ega^Eka^Ema^Esa;
    4988:	013f4f33          	xor	t5,t5,s3
            BCe = Ebe^Ege^Eke^Eme^Ese;
    498c:	0ac12983          	lw	s3,172(sp)
            BCi = Ebi^Egi^Eki^Emi^Esi;
    4990:	0b012a03          	lw	s4,176(sp)
            Ese =   BCe ^((~BCi)&  BCo );
    4994:	0192c2b3          	xor	t0,t0,s9
            BCe = Ebe^Ege^Eke^Eme^Ese;
    4998:	013eceb3          	xor	t4,t4,s3
            BCi = Ebi^Egi^Eki^Emi^Esi;
    499c:	06012983          	lw	s3,96(sp)
            Ese =   BCe ^((~BCi)&  BCo );
    49a0:	0123f3b3          	and	t2,t2,s2
            BCi = Ebi^Egi^Eki^Emi^Esi;
    49a4:	01474733          	xor	a4,a4,s4
            BCo = Ebo^Ego^Eko^Emo^Eso;
    49a8:	06412903          	lw	s2,100(sp)
    49ac:	0e012a03          	lw	s4,224(sp)
            BCi = Ebi^Egi^Eki^Emi^Esi;
    49b0:	01334333          	xor	t1,t1,s3
            Ese =   BCe ^((~BCi)&  BCo );
    49b4:	0c512023          	sw	t0,192(sp)
            BCo = Ebo^Ego^Eko^Emo^Eso;
    49b8:	06812983          	lw	s3,104(sp)
            Esi =   BCi ^((~BCo)&  BCu );
    49bc:	01b842b3          	xor	t0,a6,s11
            Eso =   BCo ^((~BCu)&  BCa );
    49c0:	08412803          	lw	a6,132(sp)
    49c4:	01657533          	and	a0,a0,s6
            BCo = Ebo^Ego^Eko^Emo^Eso;
    49c8:	0127c7b3          	xor	a5,a5,s2
            Eso =   BCo ^((~BCu)&  BCa );
    49cc:	01054833          	xor	a6,a0,a6
            BCo = Ebo^Ego^Eko^Emo^Eso;
    49d0:	013a4933          	xor	s2,s4,s3
            Eso =   BCo ^((~BCu)&  BCa );
    49d4:	08812503          	lw	a0,136(sp)
            BCu = Ebu^Egu^Eku^Emu^Esu;
    49d8:	0e412a03          	lw	s4,228(sp)
    49dc:	02c12983          	lw	s3,44(sp)
            Esu =   BCu ^((~BCa)&  BCe );
    49e0:	0c812c03          	lw	s8,200(sp)
            Eso =   BCo ^((~BCu)&  BCa );
    49e4:	0175f5b3          	and	a1,a1,s7
            BCu = Ebu^Egu^Eku^Emu^Esu;
    49e8:	0e812883          	lw	a7,232(sp)
    49ec:	013a49b3          	xor	s3,s4,s3
            Eso =   BCo ^((~BCu)&  BCa );
    49f0:	00a5c533          	xor	a0,a1,a0
            BCu = Ebu^Egu^Eku^Emu^Esu;
    49f4:	03012a03          	lw	s4,48(sp)
            Esu =   BCu ^((~BCa)&  BCe );
    49f8:	08c12583          	lw	a1,140(sp)
    49fc:	01867633          	and	a2,a2,s8
            BCu = Ebu^Egu^Eku^Emu^Esu;
    4a00:	0148ca33          	xor	s4,a7,s4
            Esu =   BCu ^((~BCa)&  BCe );
    4a04:	00b64633          	xor	a2,a2,a1
            Esi =   BCi ^((~BCo)&  BCu );
    4a08:	0d012883          	lw	a7,208(sp)
            Esu =   BCu ^((~BCa)&  BCe );
    4a0c:	08c12423          	sw	a2,136(sp)
    4a10:	09012603          	lw	a2,144(sp)
            Esa =   BCa ^((~BCe)&  BCi );
    4a14:	01b47433          	and	s0,s0,s11
    4a18:	01744433          	xor	s0,s0,s7
            Esu =   BCu ^((~BCa)&  BCe );
    4a1c:	0196f6b3          	and	a3,a3,s9
            Ese =   BCe ^((~BCi)&  BCo );
    4a20:	0183cbb3          	xor	s7,t2,s8
            Esi =   BCi ^((~BCo)&  BCu );
    4a24:	01a8c8b3          	xor	a7,a7,s10
            Esu =   BCu ^((~BCa)&  BCe );
    4a28:	00c6cdb3          	xor	s11,a3,a2
            BCe = Ebe^Ege^Eke^Eme^Ese;
    4a2c:	01412c83          	lw	s9,20(sp)
            BCa = Eba^Ega^Eka^Ema^Esa;
    4a30:	0bc12683          	lw	a3,188(sp)
    4a34:	01012603          	lw	a2,16(sp)
            BCe = Ebe^Ege^Eke^Eme^Ese;
    4a38:	01812583          	lw	a1,24(sp)
            BCi = Ebi^Egi^Eki^Emi^Esi;
    4a3c:	06c12c03          	lw	s8,108(sp)
            Esi =   BCi ^((~BCo)&  BCu );
    4a40:	0d112223          	sw	a7,196(sp)
    4a44:	0c512423          	sw	t0,200(sp)
            Eso =   BCo ^((~BCu)&  BCa );
    4a48:	09012223          	sw	a6,132(sp)
            Ese =   BCe ^((~BCi)&  BCo );
    4a4c:	09712023          	sw	s7,128(sp)
            BCi = Ebi^Egi^Eki^Emi^Esi;
    4a50:	07012b83          	lw	s7,112(sp)
            BCu = Ebu^Egu^Eku^Emu^Esu;
    4a54:	07c12803          	lw	a6,124(sp)
            Esa =   BCa ^((~BCe)&  BCi );
    4a58:	01a4f4b3          	and	s1,s1,s10
    4a5c:	0164c4b3          	xor	s1,s1,s6
            BCo = Ebo^Ego^Eko^Emo^Eso;
    4a60:	07412b03          	lw	s6,116(sp)
            Eso =   BCo ^((~BCu)&  BCa );
    4a64:	00050d13          	mv	s10,a0
            BCu = Ebu^Egu^Eku^Emu^Esu;
    4a68:	010a42b3          	xor	t0,s4,a6
    4a6c:	07812503          	lw	a0,120(sp)
            BCo = Ebo^Ego^Eko^Emo^Eso;
    4a70:	08412803          	lw	a6,132(sp)
            BCa = Eba^Ega^Eka^Ema^Esa;
    4a74:	00dfcfb3          	xor	t6,t6,a3
    4a78:	00cf4f33          	xor	t5,t5,a2
            BCe = Ebe^Ege^Eke^Eme^Ese;
    4a7c:	08012683          	lw	a3,128(sp)
    4a80:	0c012603          	lw	a2,192(sp)
            BCo = Ebo^Ego^Eko^Emo^Eso;
    4a84:	0167c7b3          	xor	a5,a5,s6
            BCu = Ebu^Egu^Eku^Emu^Esu;
    4a88:	00a9c3b3          	xor	t2,s3,a0
            BCe = Ebe^Ege^Eke^Eme^Ese;
    4a8c:	019eceb3          	xor	t4,t4,s9
            BCo = Ebo^Ego^Eko^Emo^Eso;
    4a90:	0107c9b3          	xor	s3,a5,a6
            BCe = Ebe^Ege^Eke^Eme^Ese;
    4a94:	00be4e33          	xor	t3,t3,a1
            BCu = Ebu^Egu^Eku^Emu^Esu;
    4a98:	08812783          	lw	a5,136(sp)
            BCe = Ebe^Ege^Eke^Eme^Ese;
    4a9c:	00deceb3          	xor	t4,t4,a3
    4aa0:	00ce4e33          	xor	t3,t3,a2
            BCi = Ebi^Egi^Eki^Emi^Esi;
    4aa4:	0c812583          	lw	a1,200(sp)
            BCo = Ebo^Ego^Eko^Emo^Eso;
    4aa8:	01594933          	xor	s2,s2,s5
            BCa = Eba^Ega^Eka^Ema^Esa;
    4aac:	008f4f33          	xor	t5,t5,s0
            BCo = Ebo^Ego^Eko^Emo^Eso;
    4ab0:	01a94933          	xor	s2,s2,s10
            BCi = Ebi^Egi^Eki^Emi^Esi;
    4ab4:	0c412883          	lw	a7,196(sp)
            BCa = Eba^Ega^Eka^Ema^Esa;
    4ab8:	08812823          	sw	s0,144(sp)
            BCo = Ebo^Ego^Eko^Emo^Eso;
    4abc:	0da12623          	sw	s10,204(sp)

            //thetaRhoPiChiIotaPrepareTheta(round+1, E, A)
            Da = BCu^ROL(BCe, 1);
    4ac0:	01fed413          	srli	s0,t4,0x1f
    4ac4:	001e1d13          	slli	s10,t3,0x1
            BCa = Eba^Ega^Eka^Ema^Esa;
    4ac8:	009fcfb3          	xor	t6,t6,s1
            BCu = Ebu^Egu^Eku^Emu^Esu;
    4acc:	00f3c3b3          	xor	t2,t2,a5
    4ad0:	01b2c2b3          	xor	t0,t0,s11
            BCi = Ebi^Egi^Eki^Emi^Esi;
    4ad4:	01774733          	xor	a4,a4,s7
            Da = BCu^ROL(BCe, 1);
    4ad8:	01a46433          	or	s0,s0,s10
            BCa = Eba^Ega^Eka^Ema^Esa;
    4adc:	08912623          	sw	s1,140(sp)
            Da = BCu^ROL(BCe, 1);
    4ae0:	001e9d13          	slli	s10,t4,0x1
    4ae4:	01fe5493          	srli	s1,t3,0x1f
            BCi = Ebi^Egi^Eki^Emi^Esi;
    4ae8:	00b74a33          	xor	s4,a4,a1
            Da = BCu^ROL(BCe, 1);
    4aec:	01a4e4b3          	or	s1,s1,s10
            BCi = Ebi^Egi^Eki^Emi^Esi;
    4af0:	01834333          	xor	t1,t1,s8
            De = BCa^ROL(BCi, 1);
            Di = BCe^ROL(BCo, 1);
            Do = BCi^ROL(BCu, 1);
    4af4:	01f3dd13          	srli	s10,t2,0x1f
    4af8:	00129593          	slli	a1,t0,0x1
            BCi = Ebi^Egi^Eki^Emi^Esi;
    4afc:	01134333          	xor	t1,t1,a7
            Di = BCe^ROL(BCo, 1);
    4b00:	01f95b13          	srli	s6,s2,0x1f
    4b04:	00199893          	slli	a7,s3,0x1
            Do = BCi^ROL(BCu, 1);
    4b08:	00bd65b3          	or	a1,s10,a1
    4b0c:	01f2dd13          	srli	s10,t0,0x1f
            Da = BCu^ROL(BCe, 1);
    4b10:	005442b3          	xor	t0,s0,t0

            Eba ^= Da;
            BCa = Eba;
            Ege ^= De;
            BCe = ROL(Ege, 44);
            Eki ^= Di;
    4b14:	06012403          	lw	s0,96(sp)
            De = BCa^ROL(BCi, 1);
    4b18:	00131c13          	slli	s8,t1,0x1
    4b1c:	01fa5713          	srli	a4,s4,0x1f
            Di = BCe^ROL(BCo, 1);
    4b20:	011b68b3          	or	a7,s6,a7
    4b24:	01d8c8b3          	xor	a7,a7,t4
    4b28:	01f9db93          	srli	s7,s3,0x1f
    4b2c:	00191813          	slli	a6,s2,0x1
            Do = BCi^ROL(BCu, 1);
    4b30:	00139513          	slli	a0,t2,0x1
            De = BCa^ROL(BCi, 1);
    4b34:	01876733          	or	a4,a4,s8
    4b38:	01f74733          	xor	a4,a4,t6
    4b3c:	001a1c93          	slli	s9,s4,0x1
    4b40:	01f35793          	srli	a5,t1,0x1f
            Du = BCo^ROL(BCa, 1);
    4b44:	001f9613          	slli	a2,t6,0x1
            Di = BCe^ROL(BCo, 1);
    4b48:	010be833          	or	a6,s7,a6
            Do = BCi^ROL(BCu, 1);
    4b4c:	00ad6533          	or	a0,s10,a0
            Eki ^= Di;
    4b50:	01144bb3          	xor	s7,s0,a7
            Du = BCo^ROL(BCa, 1);
    4b54:	01ffdd13          	srli	s10,t6,0x1f
            Eki ^= Di;
    4b58:	0b012403          	lw	s0,176(sp)
            Ege ^= De;
    4b5c:	04012f83          	lw	t6,64(sp)
            De = BCa^ROL(BCi, 1);
    4b60:	0197e7b3          	or	a5,a5,s9
    4b64:	01e7c7b3          	xor	a5,a5,t5
            Di = BCe^ROL(BCo, 1);
    4b68:	01c84833          	xor	a6,a6,t3
            Du = BCo^ROL(BCa, 1);
    4b6c:	001f1693          	slli	a3,t5,0x1
            Do = BCi^ROL(BCu, 1);
    4b70:	0145c5b3          	xor	a1,a1,s4
            Ege ^= De;
    4b74:	00ffcc33          	xor	s8,t6,a5
            Eki ^= Di;
    4b78:	01044b33          	xor	s6,s0,a6
            Abo =   BCo ^((~BCu)&  BCa );
            Abu =   BCu ^((~BCa)&  BCe );

            Ebo ^= Do;
            BCa = ROL(Ebo, 28);
            Egu ^= Du;
    4b7c:	05412f83          	lw	t6,84(sp)
            Ege ^= De;
    4b80:	03c12a03          	lw	s4,60(sp)
            Emo ^= Do;
    4b84:	07412403          	lw	s0,116(sp)
            Du = BCo^ROL(BCa, 1);
    4b88:	00dd66b3          	or	a3,s10,a3
    4b8c:	01ff5d13          	srli	s10,t5,0x1f
    4b90:	00cd6633          	or	a2,s10,a2
            Do = BCi^ROL(BCu, 1);
    4b94:	00654533          	xor	a0,a0,t1
            Du = BCo^ROL(BCa, 1);
    4b98:	01364633          	xor	a2,a2,s3
            Ege ^= De;
    4b9c:	00ea4cb3          	xor	s9,s4,a4
            Emo ^= Do;
    4ba0:	00a44a33          	xor	s4,s0,a0
            Egu ^= Du;
    4ba4:	00cfc433          	xor	s0,t6,a2
    4ba8:	05812f83          	lw	t6,88(sp)
            Du = BCo^ROL(BCa, 1);
    4bac:	0126c6b3          	xor	a3,a3,s2
            Ebo ^= Do;
    4bb0:	02412f03          	lw	t5,36(sp)
            Da = BCu^ROL(BCe, 1);
    4bb4:	0074c3b3          	xor	t2,s1,t2
            Egu ^= Du;
    4bb8:	00dfc4b3          	xor	s1,t6,a3
            BCe = ROL(Egu, 20);
            Eka ^= Da;
    4bbc:	0a412f83          	lw	t6,164(sp)
            Esu ^= Du;
    4bc0:	08812303          	lw	t1,136(sp)
            Ebo ^= Do;
    4bc4:	00af4933          	xor	s2,t5,a0
            BCi = ROL(Eka, 3);
            Eme ^= De;
    4bc8:	01812e03          	lw	t3,24(sp)
            Ebo ^= Do;
    4bcc:	02812f03          	lw	t5,40(sp)
            Eka ^= Da;
    4bd0:	007fceb3          	xor	t4,t6,t2
    4bd4:	0a812f83          	lw	t6,168(sp)
            Esu ^= Du;
    4bd8:	00c34d33          	xor	s10,t1,a2
            Age =   BCe ^((~BCi)&  BCo );
            Agi =   BCi ^((~BCo)&  BCu );
            Ago =   BCo ^((~BCu)&  BCa );
            Agu =   BCu ^((~BCa)&  BCe );

            Ebe ^= De;
    4bdc:	09412303          	lw	t1,148(sp)
            Ebo ^= Do;
    4be0:	00bf49b3          	xor	s3,t5,a1
            Eme ^= De;
    4be4:	00fe4f33          	xor	t5,t3,a5
            Esi ^= Di;
    4be8:	0c412e03          	lw	t3,196(sp)
            Eka ^= Da;
    4bec:	005fcfb3          	xor	t6,t6,t0
            Ebe ^= De;
    4bf0:	00e34333          	xor	t1,t1,a4
            Eka ^= Da;
    4bf4:	05d12a23          	sw	t4,84(sp)
    4bf8:	05f12c23          	sw	t6,88(sp)
            Esi ^= Di;
    4bfc:	011e4eb3          	xor	t4,t3,a7
            Eme ^= De;
    4c00:	01412f83          	lw	t6,20(sp)
            Esi ^= Di;
    4c04:	0c812e03          	lw	t3,200(sp)
            Ebe ^= De;
    4c08:	06612a23          	sw	t1,116(sp)
    4c0c:	09812303          	lw	t1,152(sp)
            Esi ^= Di;
    4c10:	010e4e33          	xor	t3,t3,a6
            Emo ^= Do;
    4c14:	00bacab3          	xor	s5,s5,a1
            Ebe ^= De;
    4c18:	00f34333          	xor	t1,t1,a5
    4c1c:	08612423          	sw	t1,136(sp)
            BCa = ROL(Ebe, 1);
            Egi ^= Di;
    4c20:	04412303          	lw	t1,68(sp)
            Esu ^= Du;
    4c24:	00ddcdb3          	xor	s11,s11,a3
            Eme ^= De;
    4c28:	00efcfb3          	xor	t6,t6,a4
            Egi ^= Di;
    4c2c:	01134333          	xor	t1,t1,a7
    4c30:	08612a23          	sw	t1,148(sp)
    4c34:	04812303          	lw	t1,72(sp)
    4c38:	01034333          	xor	t1,t1,a6
    4c3c:	08612c23          	sw	t1,152(sp)
            BCe = ROL(Egi, 6);
            Eko ^= Do;
    4c40:	06412303          	lw	t1,100(sp)
    4c44:	00a34333          	xor	t1,t1,a0
    4c48:	0a612223          	sw	t1,164(sp)
    4c4c:	06812303          	lw	t1,104(sp)
    4c50:	00b34333          	xor	t1,t1,a1
    4c54:	0a612423          	sw	t1,168(sp)
            BCi = ROL(Eko, 25);
            Emu ^= Du;
    4c58:	07812303          	lw	t1,120(sp)
    4c5c:	00c34333          	xor	t1,t1,a2
    4c60:	0a612823          	sw	t1,176(sp)
    4c64:	07c12303          	lw	t1,124(sp)
    4c68:	00d34333          	xor	t1,t1,a3
    4c6c:	0c612223          	sw	t1,196(sp)
            BCo = ROL(Emu, 8);
            Esa ^= Da;
    4c70:	08c12303          	lw	t1,140(sp)
    4c74:	00734333          	xor	t1,t1,t2
    4c78:	0c612423          	sw	t1,200(sp)
    4c7c:	09012303          	lw	t1,144(sp)
    4c80:	00534333          	xor	t1,t1,t0
    4c84:	0c612c23          	sw	t1,216(sp)
            Ake =   BCe ^((~BCi)&  BCo );
            Aki =   BCi ^((~BCo)&  BCu );
            Ako =   BCo ^((~BCu)&  BCa );
            Aku =   BCu ^((~BCa)&  BCe );

            Ebu ^= Du;
    4c88:	02c12303          	lw	t1,44(sp)
    4c8c:	00c34333          	xor	t1,t1,a2
    4c90:	0c612e23          	sw	t1,220(sp)
    4c94:	03012303          	lw	t1,48(sp)
    4c98:	00d34333          	xor	t1,t1,a3
    4c9c:	0e612023          	sw	t1,224(sp)
            BCa = ROL(Ebu, 27);
            Ega ^= Da;
    4ca0:	03412303          	lw	t1,52(sp)
    4ca4:	00734333          	xor	t1,t1,t2
    4ca8:	0e612223          	sw	t1,228(sp)
    4cac:	03812303          	lw	t1,56(sp)
    4cb0:	00534333          	xor	t1,t1,t0
    4cb4:	0e612423          	sw	t1,232(sp)
            BCe = ROL(Ega, 36);
            Eke ^= De;
    4cb8:	0ac12303          	lw	t1,172(sp)
    4cbc:	00e34333          	xor	t1,t1,a4
    4cc0:	0e612623          	sw	t1,236(sp)
    4cc4:	05c12303          	lw	t1,92(sp)
    4cc8:	00f34333          	xor	t1,t1,a5
    4ccc:	0e612823          	sw	t1,240(sp)
            BCi = ROL(Eke, 10);
            Emi ^= Di;
    4cd0:	06c12303          	lw	t1,108(sp)
    4cd4:	01134333          	xor	t1,t1,a7
    4cd8:	0e612a23          	sw	t1,244(sp)
    4cdc:	07012303          	lw	t1,112(sp)
    4ce0:	01034333          	xor	t1,t1,a6
    4ce4:	0e612c23          	sw	t1,248(sp)
            BCo = ROL(Emi, 15);
            Eso ^= Do;
    4ce8:	08412303          	lw	t1,132(sp)
    4cec:	00a34333          	xor	t1,t1,a0
    4cf0:	10612423          	sw	t1,264(sp)
    4cf4:	0cc12303          	lw	t1,204(sp)
    4cf8:	00b34333          	xor	t1,t1,a1
    4cfc:	10612223          	sw	t1,260(sp)
            Ame =   BCe ^((~BCi)&  BCo );
            Ami =   BCi ^((~BCo)&  BCu );
            Amo =   BCo ^((~BCu)&  BCa );
            Amu =   BCu ^((~BCa)&  BCe );

            Ebi ^= Di;
    4d00:	01c12303          	lw	t1,28(sp)
    4d04:	011348b3          	xor	a7,t1,a7
    4d08:	02012303          	lw	t1,32(sp)
    4d0c:	01034833          	xor	a6,t1,a6
            BCa = ROL(Ebi, 62);
            Ego ^= Do;
    4d10:	04c12303          	lw	t1,76(sp)
    4d14:	00a34533          	xor	a0,t1,a0
    4d18:	05012303          	lw	t1,80(sp)
    4d1c:	00b345b3          	xor	a1,t1,a1
            BCe = ROL(Ego, 55);
            Eku ^= Du;
    4d20:	0b412303          	lw	t1,180(sp)
    4d24:	00c34633          	xor	a2,t1,a2
    4d28:	0b812303          	lw	t1,184(sp)
    4d2c:	00d346b3          	xor	a3,t1,a3
            BCi = ROL(Eku, 39);
            Ema ^= Da;
    4d30:	0bc12303          	lw	t1,188(sp)
    4d34:	00734333          	xor	t1,t1,t2
    4d38:	14612223          	sw	t1,324(sp)
    4d3c:	01012303          	lw	t1,16(sp)
    4d40:	00534333          	xor	t1,t1,t0
    4d44:	14612023          	sw	t1,320(sp)
            BCo = ROL(Ema, 41);
            Ese ^= De;
    4d48:	08012303          	lw	t1,128(sp)
    4d4c:	00e34733          	xor	a4,t1,a4
    4d50:	0c012303          	lw	t1,192(sp)
    4d54:	14e12423          	sw	a4,328(sp)
    4d58:	00f34733          	xor	a4,t1,a5
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
    4d5c:	00c12783          	lw	a5,12(sp)
    4d60:	0087a303          	lw	t1,8(a5)
    4d64:	00c7a783          	lw	a5,12(a5)
    4d68:	0c612823          	sw	t1,208(sp)
    4d6c:	0cf12a23          	sw	a5,212(sp)
            BCe = ROL(Ege, 44);
    4d70:	00cc1793          	slli	a5,s8,0xc
    4d74:	00f12823          	sw	a5,16(sp)
    4d78:	014cd793          	srli	a5,s9,0x14
    4d7c:	00f12a23          	sw	a5,20(sp)
            BCi = ROL(Eki, 43);
    4d80:	00bb1793          	slli	a5,s6,0xb
    4d84:	00f12c23          	sw	a5,24(sp)
    4d88:	015bd793          	srli	a5,s7,0x15
    4d8c:	00f12e23          	sw	a5,28(sp)
            BCo = ROL(Emo, 21);
    4d90:	00ba5793          	srli	a5,s4,0xb
    4d94:	02f12023          	sw	a5,32(sp)
    4d98:	015a9793          	slli	a5,s5,0x15
    4d9c:	02f12223          	sw	a5,36(sp)
            BCu = ROL(Esu, 14);
    4da0:	012d5793          	srli	a5,s10,0x12
    4da4:	02f12423          	sw	a5,40(sp)
    4da8:	00ed9793          	slli	a5,s11,0xe
            BCa = ROL(Ebo, 28);
    4dac:	01c99313          	slli	t1,s3,0x1c
            BCu = ROL(Esu, 14);
    4db0:	02f12623          	sw	a5,44(sp)
            BCa = ROL(Ebo, 28);
    4db4:	00495793          	srli	a5,s2,0x4
    4db8:	02f12823          	sw	a5,48(sp)
    4dbc:	02612a23          	sw	t1,52(sp)
            BCe = ROL(Egu, 20);
    4dc0:	01449313          	slli	t1,s1,0x14
    4dc4:	00c45793          	srli	a5,s0,0xc
    4dc8:	02612e23          	sw	t1,60(sp)
            BCi = ROL(Eka, 3);
    4dcc:	05412303          	lw	t1,84(sp)
            BCe = ROL(Egu, 20);
    4dd0:	02f12c23          	sw	a5,56(sp)
            BCi = ROL(Eka, 3);
    4dd4:	05812783          	lw	a5,88(sp)
            BCe = ROL(Egu, 20);
    4dd8:	01441413          	slli	s0,s0,0x14
    4ddc:	04812023          	sw	s0,64(sp)
            BCi = ROL(Eka, 3);
    4de0:	01d35413          	srli	s0,t1,0x1d
    4de4:	04812223          	sw	s0,68(sp)
    4de8:	00379413          	slli	s0,a5,0x3
    4dec:	04812423          	sw	s0,72(sp)
    4df0:	01d7d413          	srli	s0,a5,0x1d
            BCa = ROL(Ebe, 1);
    4df4:	07412783          	lw	a5,116(sp)
            BCi = ROL(Eka, 3);
    4df8:	04812623          	sw	s0,76(sp)
    4dfc:	00331413          	slli	s0,t1,0x3
    4e00:	04812823          	sw	s0,80(sp)
            BCa = ROL(Ebe, 1);
    4e04:	01f7d313          	srli	t1,a5,0x1f
            BCo = ROL(Eme, 45);
    4e08:	00df1413          	slli	s0,t5,0xd
    4e0c:	04812a23          	sw	s0,84(sp)
            BCa = ROL(Ebe, 1);
    4e10:	06612423          	sw	t1,104(sp)
            BCo = ROL(Eme, 45);
    4e14:	013fd413          	srli	s0,t6,0x13
            BCa = ROL(Ebe, 1);
    4e18:	08812303          	lw	t1,136(sp)
    4e1c:	00179793          	slli	a5,a5,0x1
            BCo = ROL(Eme, 45);
    4e20:	04812c23          	sw	s0,88(sp)
            BCa = ROL(Ebe, 1);
    4e24:	06f12823          	sw	a5,112(sp)
            BCu = ROL(Esi, 61);
    4e28:	01de1413          	slli	s0,t3,0x1d
            BCe = ROL(Egi, 6);
    4e2c:	09412783          	lw	a5,148(sp)
            BCu = ROL(Esi, 61);
    4e30:	003e5e13          	srli	t3,t3,0x3
    4e34:	04812e23          	sw	s0,92(sp)
    4e38:	07c12223          	sw	t3,100(sp)
    4e3c:	003ed413          	srli	s0,t4,0x3
            BCe = ROL(Egi, 6);
    4e40:	09812e03          	lw	t3,152(sp)
            BCu = ROL(Esi, 61);
    4e44:	06812023          	sw	s0,96(sp)
            BCa = ROL(Ebe, 1);
    4e48:	00131413          	slli	s0,t1,0x1
    4e4c:	06812623          	sw	s0,108(sp)
            BCe = ROL(Egi, 6);
    4e50:	01a7d413          	srli	s0,a5,0x1a
    4e54:	06812a23          	sw	s0,116(sp)
    4e58:	006e1413          	slli	s0,t3,0x6
    4e5c:	06812c23          	sw	s0,120(sp)
    4e60:	01ae5413          	srli	s0,t3,0x1a
    4e64:	06812e23          	sw	s0,124(sp)
            BCi = ROL(Eko, 25);
    4e68:	0a412403          	lw	s0,164(sp)
            BCe = ROL(Egi, 6);
    4e6c:	00679793          	slli	a5,a5,0x6
    4e70:	08f12023          	sw	a5,128(sp)
            BCi = ROL(Eko, 25);
    4e74:	00745793          	srli	a5,s0,0x7
    4e78:	08f12223          	sw	a5,132(sp)
    4e7c:	0a812783          	lw	a5,168(sp)
            BCe = ROL(Ege, 44);
    4e80:	00cc9c93          	slli	s9,s9,0xc
    4e84:	014c5c13          	srli	s8,s8,0x14
            BCi = ROL(Eko, 25);
    4e88:	01979e13          	slli	t3,a5,0x19
    4e8c:	09c12423          	sw	t3,136(sp)
    4e90:	0077de13          	srli	t3,a5,0x7
    4e94:	09c12623          	sw	t3,140(sp)
    4e98:	01941e13          	slli	t3,s0,0x19
    4e9c:	09c12823          	sw	t3,144(sp)
            BCo = ROL(Emu, 8);
    4ea0:	0b012403          	lw	s0,176(sp)
    4ea4:	0c412783          	lw	a5,196(sp)
            BCe = ROL(Ege, 44);
    4ea8:	018cec33          	or	s8,s9,s8
            BCo = ROL(Emu, 8);
    4eac:	01845e13          	srli	t3,s0,0x18
    4eb0:	09c12a23          	sw	t3,148(sp)
    4eb4:	00879e13          	slli	t3,a5,0x8
    4eb8:	09c12c23          	sw	t3,152(sp)
    4ebc:	0187de13          	srli	t3,a5,0x18
    4ec0:	0bc12223          	sw	t3,164(sp)
    4ec4:	00841e13          	slli	t3,s0,0x8
            BCu = ROL(Esa, 18);
    4ec8:	0c812403          	lw	s0,200(sp)
    4ecc:	0d812783          	lw	a5,216(sp)
            BCo = ROL(Emu, 8);
    4ed0:	0bc12423          	sw	t3,168(sp)
            BCu = ROL(Esa, 18);
    4ed4:	00e45e13          	srli	t3,s0,0xe
    4ed8:	0bc12623          	sw	t3,172(sp)
    4edc:	01279e13          	slli	t3,a5,0x12
    4ee0:	0bc12823          	sw	t3,176(sp)
    4ee4:	00e7de13          	srli	t3,a5,0xe
    4ee8:	0bc12a23          	sw	t3,180(sp)
    4eec:	01241e13          	slli	t3,s0,0x12
            BCa = ROL(Ebu, 27);
    4ef0:	0dc12403          	lw	s0,220(sp)
    4ef4:	0e012783          	lw	a5,224(sp)
            BCu = ROL(Esa, 18);
    4ef8:	0bc12c23          	sw	t3,184(sp)
            BCa = ROL(Ebu, 27);
    4efc:	00545e13          	srli	t3,s0,0x5
    4f00:	0bc12e23          	sw	t3,188(sp)
    4f04:	01b79e13          	slli	t3,a5,0x1b
    4f08:	0dc12023          	sw	t3,192(sp)
    4f0c:	0057de13          	srli	t3,a5,0x5
            BCe = ROL(Ega, 36);
    4f10:	0e812783          	lw	a5,232(sp)
            BCa = ROL(Ebu, 27);
    4f14:	0dc12223          	sw	t3,196(sp)
    4f18:	01b41e13          	slli	t3,s0,0x1b
            BCe = ROL(Ega, 36);
    4f1c:	0e412403          	lw	s0,228(sp)
            BCa = ROL(Ebu, 27);
    4f20:	0dc12423          	sw	t3,200(sp)
            BCe = ROL(Ega, 36);
    4f24:	00479e13          	slli	t3,a5,0x4
    4f28:	0dc12623          	sw	t3,204(sp)
    4f2c:	01c45e13          	srli	t3,s0,0x1c
    4f30:	00441413          	slli	s0,s0,0x4
    4f34:	0c812e23          	sw	s0,220(sp)
            BCi = ROL(Eke, 10);
    4f38:	0ec12403          	lw	s0,236(sp)
            BCe = ROL(Ega, 36);
    4f3c:	01c7d793          	srli	a5,a5,0x1c
    4f40:	0ef12023          	sw	a5,224(sp)
            BCi = ROL(Eke, 10);
    4f44:	01645793          	srli	a5,s0,0x16
    4f48:	0ef12223          	sw	a5,228(sp)
    4f4c:	0f012783          	lw	a5,240(sp)
            BCe = ROL(Ega, 36);
    4f50:	0dc12c23          	sw	t3,216(sp)
            BCi = ROL(Eki, 43);
    4f54:	015b5b13          	srli	s6,s6,0x15
            BCi = ROL(Eke, 10);
    4f58:	00a79e13          	slli	t3,a5,0xa
    4f5c:	0167d793          	srli	a5,a5,0x16
    4f60:	0ef12623          	sw	a5,236(sp)
    4f64:	00a41793          	slli	a5,s0,0xa
            BCo = ROL(Emi, 15);
    4f68:	0f412403          	lw	s0,244(sp)
            BCi = ROL(Eke, 10);
    4f6c:	0ef12823          	sw	a5,240(sp)
    4f70:	0fc12423          	sw	t3,232(sp)
            BCo = ROL(Emi, 15);
    4f74:	01145793          	srli	a5,s0,0x11
    4f78:	0ef12a23          	sw	a5,244(sp)
    4f7c:	0f812783          	lw	a5,248(sp)
    4f80:	00f41413          	slli	s0,s0,0xf
    4f84:	10812023          	sw	s0,256(sp)
    4f88:	00f79e13          	slli	t3,a5,0xf
    4f8c:	0117d793          	srli	a5,a5,0x11
    4f90:	0ef12e23          	sw	a5,252(sp)
            BCu = ROL(Eso, 56);
    4f94:	10412783          	lw	a5,260(sp)
            BCo = ROL(Emi, 15);
    4f98:	0fc12c23          	sw	t3,248(sp)
            BCi = ROL(Eki, 43);
    4f9c:	00bb9b93          	slli	s7,s7,0xb
            BCu = ROL(Eso, 56);
    4fa0:	01879413          	slli	s0,a5,0x18
    4fa4:	10812223          	sw	s0,260(sp)
    4fa8:	10812403          	lw	s0,264(sp)
    4fac:	0087d793          	srli	a5,a5,0x8
    4fb0:	10f12823          	sw	a5,272(sp)
    4fb4:	00845e13          	srli	t3,s0,0x8
            BCa = ROL(Ebi, 62);
    4fb8:	0028d793          	srli	a5,a7,0x2
            BCu = ROL(Eso, 56);
    4fbc:	01841413          	slli	s0,s0,0x18
            BCa = ROL(Ebi, 62);
    4fc0:	01e89893          	slli	a7,a7,0x1e
            BCu = ROL(Eso, 56);
    4fc4:	10812623          	sw	s0,268(sp)
            BCa = ROL(Ebi, 62);
    4fc8:	11112e23          	sw	a7,284(sp)
    4fcc:	01e81413          	slli	s0,a6,0x1e
            BCe = ROL(Ego, 55);
    4fd0:	00955893          	srli	a7,a0,0x9
            BCa = ROL(Ebi, 62);
    4fd4:	00285813          	srli	a6,a6,0x2
            BCe = ROL(Ego, 55);
    4fd8:	01751513          	slli	a0,a0,0x17
            BCa = ROL(Ebi, 62);
    4fdc:	13012023          	sw	a6,288(sp)
            BCe = ROL(Ego, 55);
    4fe0:	12a12623          	sw	a0,300(sp)
    4fe4:	01759813          	slli	a6,a1,0x17
            BCo = ROL(Ema, 41);
    4fe8:	14012503          	lw	a0,320(sp)
            BCe = ROL(Ego, 55);
    4fec:	0095d593          	srli	a1,a1,0x9
    4ff0:	12b12823          	sw	a1,304(sp)
            BCi = ROL(Eku, 39);
    4ff4:	00769593          	slli	a1,a3,0x7
    4ff8:	12b12a23          	sw	a1,308(sp)
    4ffc:	01965593          	srli	a1,a2,0x19
    5000:	00761613          	slli	a2,a2,0x7
    5004:	12c12e23          	sw	a2,316(sp)
            BCo = ROL(Ema, 41);
    5008:	00951613          	slli	a2,a0,0x9
    500c:	14c12023          	sw	a2,320(sp)
    5010:	14412603          	lw	a2,324(sp)
            BCe = ROL(Ego, 55);
    5014:	13112423          	sw	a7,296(sp)
            BCi = ROL(Eku, 39);
    5018:	12b12c23          	sw	a1,312(sp)
            BCo = ROL(Ema, 41);
    501c:	01765893          	srli	a7,a2,0x17
    5020:	00961593          	slli	a1,a2,0x9
    5024:	01755613          	srli	a2,a0,0x17
            BCu = ROL(Ese, 2);
    5028:	00271513          	slli	a0,a4,0x2
    502c:	01e75713          	srli	a4,a4,0x1e
    5030:	14e12223          	sw	a4,324(sp)
            Eba ^= Da;
    5034:	09c12703          	lw	a4,156(sp)
            BCa = ROL(Ebi, 62);
    5038:	10812a23          	sw	s0,276(sp)
            BCu = ROL(Ese, 2);
    503c:	14812403          	lw	s0,328(sp)
            Eba ^= Da;
    5040:	007743b3          	xor	t2,a4,t2
    5044:	0a012703          	lw	a4,160(sp)
            BCa = ROL(Ebi, 62);
    5048:	10f12c23          	sw	a5,280(sp)
            BCe = ROL(Ego, 55);
    504c:	13012223          	sw	a6,292(sp)
            Eba ^= Da;
    5050:	005742b3          	xor	t0,a4,t0
            BCu = ROL(Ese, 2);
    5054:	01e45813          	srli	a6,s0,0x1e
            BCe = ROL(Ege, 44);
    5058:	01012703          	lw	a4,16(sp)
            BCu = ROL(Ese, 2);
    505c:	00241793          	slli	a5,s0,0x2
            BCe = ROL(Ege, 44);
    5060:	01412403          	lw	s0,20(sp)
            BCu = ROL(Eso, 56);
    5064:	11c12423          	sw	t3,264(sp)
            BCi = ROL(Eki, 43);
    5068:	016bebb3          	or	s7,s7,s6
            BCe = ROL(Ege, 44);
    506c:	00876733          	or	a4,a4,s0
    5070:	00e12823          	sw	a4,16(sp)
            BCi = ROL(Eki, 43);
    5074:	01812403          	lw	s0,24(sp)
    5078:	01c12c83          	lw	s9,28(sp)
            BCo = ROL(Emo, 21);
    507c:	02412b03          	lw	s6,36(sp)
    5080:	00bada93          	srli	s5,s5,0xb
            BCi = ROL(Eki, 43);
    5084:	01946cb3          	or	s9,s0,s9
            BCo = ROL(Emo, 21);
    5088:	02012403          	lw	s0,32(sp)
    508c:	015a1a13          	slli	s4,s4,0x15
    5090:	014aea33          	or	s4,s5,s4
    5094:	01646b33          	or	s6,s0,s6
            BCu = ROL(Esu, 14);
    5098:	02c12a83          	lw	s5,44(sp)
    509c:	02812403          	lw	s0,40(sp)
    50a0:	012ddd93          	srli	s11,s11,0x12
    50a4:	00ed1d13          	slli	s10,s10,0xe
    50a8:	01546ab3          	or	s5,s0,s5
    50ac:	01512a23          	sw	s5,20(sp)
            BCa = ROL(Ebo, 28);
    50b0:	03012403          	lw	s0,48(sp)
            BCu = ROL(Esu, 14);
    50b4:	01adeab3          	or	s5,s11,s10
            BCa = ROL(Ebo, 28);
    50b8:	03412d03          	lw	s10,52(sp)
    50bc:	0049d993          	srli	s3,s3,0x4
    50c0:	01c91913          	slli	s2,s2,0x1c
    50c4:	01a46d33          	or	s10,s0,s10
    50c8:	0129e933          	or	s2,s3,s2
            BCe = ROL(Egu, 20);
    50cc:	03812403          	lw	s0,56(sp)
    50d0:	03c12983          	lw	s3,60(sp)
    50d4:	00c4d493          	srli	s1,s1,0xc
            BCa = ROL(Ebo, 28);
    50d8:	01a12e23          	sw	s10,28(sp)
            BCe = ROL(Egu, 20);
    50dc:	013469b3          	or	s3,s0,s3
    50e0:	04012403          	lw	s0,64(sp)
    50e4:	03312023          	sw	s3,32(sp)
            BCi = ROL(Eka, 3);
    50e8:	04812983          	lw	s3,72(sp)
            BCe = ROL(Egu, 20);
    50ec:	0084e433          	or	s0,s1,s0
            BCi = ROL(Eka, 3);
    50f0:	04412483          	lw	s1,68(sp)
            BCo = ROL(Eme, 45);
    50f4:	05812d03          	lw	s10,88(sp)
    50f8:	00df9f93          	slli	t6,t6,0xd
            BCi = ROL(Eka, 3);
    50fc:	0134e4b3          	or	s1,s1,s3
    5100:	02912423          	sw	s1,40(sp)
    5104:	05012983          	lw	s3,80(sp)
    5108:	04c12483          	lw	s1,76(sp)
            BCo = ROL(Eme, 45);
    510c:	013f5f13          	srli	t5,t5,0x13
    5110:	01efef33          	or	t5,t6,t5
            BCi = ROL(Eka, 3);
    5114:	0134e4b3          	or	s1,s1,s3
            BCo = ROL(Eme, 45);
    5118:	05412983          	lw	s3,84(sp)
            BCu = ROL(Esi, 61);
    511c:	05c12f83          	lw	t6,92(sp)
    5120:	06412e03          	lw	t3,100(sp)
            BCo = ROL(Eme, 45);
    5124:	01a9e9b3          	or	s3,s3,s10
            BCu = ROL(Esi, 61);
    5128:	06012d03          	lw	s10,96(sp)
    512c:	01de9e93          	slli	t4,t4,0x1d
    5130:	01ceee33          	or	t3,t4,t3
    5134:	01afefb3          	or	t6,t6,s10
            BCa = ROL(Ebe, 1);
    5138:	06812e83          	lw	t4,104(sp)
            BCu = ROL(Esi, 61);
    513c:	03f12823          	sw	t6,48(sp)
            BCa = ROL(Ebe, 1);
    5140:	06c12f83          	lw	t6,108(sp)
    5144:	01f35313          	srli	t1,t1,0x1f
            BCa = ROL(Ebo, 28);
    5148:	01212c23          	sw	s2,24(sp)
            BCa = ROL(Ebe, 1);
    514c:	01feeeb3          	or	t4,t4,t6
    5150:	07012f83          	lw	t6,112(sp)
            BCi = ROL(Eka, 3);
    5154:	02912223          	sw	s1,36(sp)
            BCo = ROL(Eme, 45);
    5158:	03312623          	sw	s3,44(sp)
            BCa = ROL(Ebe, 1);
    515c:	01f36333          	or	t1,t1,t6
            BCu = ROL(Esi, 61);
    5160:	03c12a23          	sw	t3,52(sp)
            BCa = ROL(Ebe, 1);
    5164:	03d12e23          	sw	t4,60(sp)
    5168:	02612c23          	sw	t1,56(sp)
            BCe = ROL(Egi, 6);
    516c:	07812d03          	lw	s10,120(sp)
    5170:	07412f83          	lw	t6,116(sp)
    5174:	08012903          	lw	s2,128(sp)
            BCi = ROL(Eko, 25);
    5178:	08812e03          	lw	t3,136(sp)
            BCe = ROL(Egi, 6);
    517c:	01afefb3          	or	t6,t6,s10
    5180:	07c12d03          	lw	s10,124(sp)
            BCi = ROL(Eko, 25);
    5184:	08c12d83          	lw	s11,140(sp)
            BCo = ROL(Emu, 8);
    5188:	09812e83          	lw	t4,152(sp)
            BCe = ROL(Egi, 6);
    518c:	012d6d33          	or	s10,s10,s2
            BCi = ROL(Eko, 25);
    5190:	08412903          	lw	s2,132(sp)
            BCu = ROL(Esa, 18);
    5194:	0b012703          	lw	a4,176(sp)
            BCe = ROL(Egi, 6);
    5198:	05f12223          	sw	t6,68(sp)
            BCi = ROL(Eko, 25);
    519c:	01c96933          	or	s2,s2,t3
    51a0:	09012e03          	lw	t3,144(sp)
            BCa = ROL(Ebu, 27);
    51a4:	0bc12f83          	lw	t6,188(sp)
    51a8:	0c412483          	lw	s1,196(sp)
            BCi = ROL(Eko, 25);
    51ac:	01cdedb3          	or	s11,s11,t3
            BCo = ROL(Emu, 8);
    51b0:	09412e03          	lw	t3,148(sp)
            BCe = ROL(Ega, 36);
    51b4:	0cc12983          	lw	s3,204(sp)
            BCe = ROL(Egi, 6);
    51b8:	05a12023          	sw	s10,64(sp)
            BCo = ROL(Emu, 8);
    51bc:	01de6333          	or	t1,t3,t4
    51c0:	0a812e83          	lw	t4,168(sp)
    51c4:	0a412e03          	lw	t3,164(sp)
            BCi = ROL(Eko, 25);
    51c8:	05212623          	sw	s2,76(sp)
    51cc:	05b12423          	sw	s11,72(sp)
            BCo = ROL(Emu, 8);
    51d0:	01de6e33          	or	t3,t3,t4
            BCu = ROL(Esa, 18);
    51d4:	0ac12e83          	lw	t4,172(sp)
            BCo = ROL(Emu, 8);
    51d8:	05c12823          	sw	t3,80(sp)
            BCu = ROL(Esa, 18);
    51dc:	0b812e03          	lw	t3,184(sp)
    51e0:	00eeeeb3          	or	t4,t4,a4
    51e4:	0b412703          	lw	a4,180(sp)
            BCo = ROL(Emu, 8);
    51e8:	04612a23          	sw	t1,84(sp)
            BCu = ROL(Esa, 18);
    51ec:	05d12e23          	sw	t4,92(sp)
    51f0:	01c76733          	or	a4,a4,t3
            BCa = ROL(Ebu, 27);
    51f4:	0c012e03          	lw	t3,192(sp)
            BCu = ROL(Esa, 18);
    51f8:	04e12c23          	sw	a4,88(sp)
            BCi = ROL(Eku, 39);
    51fc:	0196d693          	srli	a3,a3,0x19
            BCa = ROL(Ebu, 27);
    5200:	01cfefb3          	or	t6,t6,t3
    5204:	0c812e03          	lw	t3,200(sp)
    5208:	07f12223          	sw	t6,100(sp)
            BCo = ROL(Ema, 41);
    520c:	00c5e5b3          	or	a1,a1,a2
            BCa = ROL(Ebu, 27);
    5210:	01c4e4b3          	or	s1,s1,t3
            BCe = ROL(Ega, 36);
    5214:	0d812e03          	lw	t3,216(sp)
            BCa = ROL(Ebu, 27);
    5218:	06912023          	sw	s1,96(sp)
            BCu = ROL(Ese, 2);
    521c:	00a86633          	or	a2,a6,a0
            BCe = ROL(Ega, 36);
    5220:	01c9e9b3          	or	s3,s3,t3
    5224:	07312423          	sw	s3,104(sp)
    5228:	0e012903          	lw	s2,224(sp)
    522c:	0dc12d03          	lw	s10,220(sp)
            BCi = ROL(Eke, 10);
    5230:	0e812e03          	lw	t3,232(sp)
    5234:	0f012e83          	lw	t4,240(sp)
            BCe = ROL(Ega, 36);
    5238:	012d6d33          	or	s10,s10,s2
            BCi = ROL(Eke, 10);
    523c:	0e412903          	lw	s2,228(sp)
            BCo = ROL(Emi, 15);
    5240:	10012d83          	lw	s11,256(sp)
            BCu = ROL(Eso, 56);
    5244:	10812703          	lw	a4,264(sp)
            BCi = ROL(Eke, 10);
    5248:	01c96933          	or	s2,s2,t3
    524c:	0ec12e03          	lw	t3,236(sp)
            BCu = ROL(Eso, 56);
    5250:	11012f83          	lw	t6,272(sp)
            BCa = ROL(Ebi, 62);
    5254:	11812483          	lw	s1,280(sp)
            BCi = ROL(Eke, 10);
    5258:	01de6333          	or	t1,t3,t4
            BCo = ROL(Emi, 15);
    525c:	0f812e83          	lw	t4,248(sp)
    5260:	0f412e03          	lw	t3,244(sp)
            BCa = ROL(Ebi, 62);
    5264:	12012983          	lw	s3,288(sp)
            BCe = ROL(Ega, 36);
    5268:	07a12623          	sw	s10,108(sp)
            BCo = ROL(Emi, 15);
    526c:	01de6e33          	or	t3,t3,t4
    5270:	0fc12e83          	lw	t4,252(sp)
            BCe = ROL(Ego, 55);
    5274:	12812d03          	lw	s10,296(sp)
            BCi = ROL(Eke, 10);
    5278:	07212a23          	sw	s2,116(sp)
            BCo = ROL(Emi, 15);
    527c:	01beeeb3          	or	t4,t4,s11
            BCu = ROL(Eso, 56);
    5280:	10412d83          	lw	s11,260(sp)
            BCe = ROL(Ego, 55);
    5284:	13012903          	lw	s2,304(sp)
            BCi = ROL(Eke, 10);
    5288:	06612823          	sw	t1,112(sp)
            BCu = ROL(Eso, 56);
    528c:	00ededb3          	or	s11,s11,a4
    5290:	10c12703          	lw	a4,268(sp)
            BCo = ROL(Emi, 15);
    5294:	07c12e23          	sw	t3,124(sp)
    5298:	07d12c23          	sw	t4,120(sp)
            BCu = ROL(Eso, 56);
    529c:	01f76733          	or	a4,a4,t6
            BCa = ROL(Ebi, 62);
    52a0:	11412f83          	lw	t6,276(sp)
            BCu = ROL(Eso, 56);
    52a4:	09b12023          	sw	s11,128(sp)
    52a8:	08e12223          	sw	a4,132(sp)
            BCa = ROL(Ebi, 62);
    52ac:	009fefb3          	or	t6,t6,s1
    52b0:	11c12483          	lw	s1,284(sp)
    52b4:	09f12423          	sw	t6,136(sp)
    52b8:	0134e4b3          	or	s1,s1,s3
            BCe = ROL(Ego, 55);
    52bc:	12412983          	lw	s3,292(sp)
            BCa = ROL(Ebi, 62);
    52c0:	08912623          	sw	s1,140(sp)
            Aga =   BCa ^((~BCe)&  BCi );
    52c4:	fff44493          	not	s1,s0
            BCe = ROL(Ego, 55);
    52c8:	01a9e9b3          	or	s3,s3,s10
    52cc:	12c12d03          	lw	s10,300(sp)
    52d0:	09312823          	sw	s3,144(sp)
            Abu =   BCu ^((~BCa)&  BCe );
    52d4:	fff3c993          	not	s3,t2
            BCe = ROL(Ego, 55);
    52d8:	012d6d33          	or	s10,s10,s2
    52dc:	09a12a23          	sw	s10,148(sp)
            BCi = ROL(Eku, 39);
    52e0:	13812e03          	lw	t3,312(sp)
    52e4:	13412903          	lw	s2,308(sp)
            BCu = ROL(Ese, 2);
    52e8:	14412703          	lw	a4,324(sp)
            Age =   BCe ^((~BCi)&  BCo );
    52ec:	02812303          	lw	t1,40(sp)
            BCi = ROL(Eku, 39);
    52f0:	01c96933          	or	s2,s2,t3
    52f4:	13c12e03          	lw	t3,316(sp)
            BCu = ROL(Ese, 2);
    52f8:	00f76533          	or	a0,a4,a5
            Agi =   BCi ^((~BCo)&  BCu );
    52fc:	02c12e83          	lw	t4,44(sp)
            BCi = ROL(Eku, 39);
    5300:	00de66b3          	or	a3,t3,a3
    5304:	08d12e23          	sw	a3,156(sp)
            BCo = ROL(Ema, 41);
    5308:	14012683          	lw	a3,320(sp)
            Age =   BCe ^((~BCi)&  BCo );
    530c:	02412e03          	lw	t3,36(sp)
            Ago =   BCo ^((~BCu)&  BCa );
    5310:	03412803          	lw	a6,52(sp)
            BCu = ROL(Ese, 2);
    5314:	0aa12423          	sw	a0,168(sp)
            Ago =   BCo ^((~BCu)&  BCa );
    5318:	03012503          	lw	a0,48(sp)
            BCo = ROL(Ema, 41);
    531c:	0116e8b3          	or	a7,a3,a7
            Abi =   BCi ^((~BCo)&  BCu );
    5320:	fffb4793          	not	a5,s6
            BCi = ROL(Eku, 39);
    5324:	09212c23          	sw	s2,152(sp)
            Abu =   BCu ^((~BCa)&  BCe );
    5328:	0a512a23          	sw	t0,180(sp)
    532c:	fff2c913          	not	s2,t0
            Age =   BCe ^((~BCi)&  BCo );
    5330:	fff34293          	not	t0,t1
            Aba =   BCa ^((~BCe)&  BCi );
    5334:	01012703          	lw	a4,16(sp)
            BCo = ROL(Ema, 41);
    5338:	0b112023          	sw	a7,160(sp)
    533c:	0ab12223          	sw	a1,164(sp)
            Aga =   BCa ^((~BCe)&  BCi );
    5340:	02012883          	lw	a7,32(sp)
            BCu = ROL(Ese, 2);
    5344:	0ac12623          	sw	a2,172(sp)
            Aba =   BCa ^((~BCe)&  BCi );
    5348:	0b812c23          	sw	s8,184(sp)
            Abo =   BCo ^((~BCu)&  BCa );
    534c:	01412603          	lw	a2,20(sp)
            Abe =   BCe ^((~BCi)&  BCo );
    5350:	0b912e23          	sw	s9,188(sp)
    5354:	0d712023          	sw	s7,192(sp)
            Abi =   BCi ^((~BCo)&  BCu );
    5358:	0d412223          	sw	s4,196(sp)
    535c:	0d612423          	sw	s6,200(sp)
    5360:	0ef12223          	sw	a5,228(sp)
            Abo =   BCo ^((~BCu)&  BCa );
    5364:	0d512623          	sw	s5,204(sp)
            Abu =   BCu ^((~BCa)&  BCe );
    5368:	0a712823          	sw	t2,176(sp)
            Aga =   BCa ^((~BCe)&  BCi );
    536c:	0c812e23          	sw	s0,220(sp)
            Age =   BCe ^((~BCi)&  BCo );
    5370:	fffe4393          	not	t2,t3
    5374:	0e512423          	sw	t0,232(sp)
            Agi =   BCi ^((~BCo)&  BCu );
    5378:	fffecf93          	not	t6,t4
    537c:	0fe12023          	sw	t5,224(sp)
            Ago =   BCo ^((~BCu)&  BCa );
    5380:	fff54e93          	not	t4,a0
    5384:	fff84e13          	not	t3,a6
            Agu =   BCu ^((~BCa)&  BCe );
    5388:	01812803          	lw	a6,24(sp)
    538c:	01c12503          	lw	a0,28(sp)
            Ako =   BCo ^((~BCu)&  BCa );
    5390:	05c12b03          	lw	s6,92(sp)
            Aka =   BCa ^((~BCe)&  BCi );
    5394:	04412683          	lw	a3,68(sp)
            Aki =   BCi ^((~BCo)&  BCu );
    5398:	05412783          	lw	a5,84(sp)
            Ako =   BCo ^((~BCu)&  BCa );
    539c:	fffb4293          	not	t0,s6
            Aku =   BCu ^((~BCa)&  BCe );
    53a0:	03812b03          	lw	s6,56(sp)
            Ako =   BCo ^((~BCu)&  BCa );
    53a4:	0e512623          	sw	t0,236(sp)
            Aba =   BCa ^((~BCe)&  BCi );
    53a8:	fff74d93          	not	s11,a4
            Aku =   BCu ^((~BCa)&  BCe );
    53ac:	fffb4293          	not	t0,s6
    53b0:	03c12b03          	lw	s6,60(sp)
    53b4:	0e512823          	sw	t0,240(sp)
            Ake =   BCe ^((~BCi)&  BCo );
    53b8:	04c12703          	lw	a4,76(sp)
            Aku =   BCu ^((~BCa)&  BCe );
    53bc:	fffb4293          	not	t0,s6
            Ama =   BCa ^((~BCe)&  BCi );
    53c0:	06812b03          	lw	s6,104(sp)
            Aku =   BCu ^((~BCa)&  BCe );
    53c4:	0e512a23          	sw	t0,244(sp)
            Aba =   BCa ^((~BCe)&  BCi );
    53c8:	fffc4d13          	not	s10,s8
            Ama =   BCa ^((~BCe)&  BCi );
    53cc:	fffb4293          	not	t0,s6
    53d0:	06c12b03          	lw	s6,108(sp)
    53d4:	0e512c23          	sw	t0,248(sp)
            Abe =   BCe ^((~BCi)&  BCo );
    53d8:	fffbcc13          	not	s8,s7
            Ama =   BCa ^((~BCe)&  BCi );
    53dc:	fffb4293          	not	t0,s6
            Ame =   BCe ^((~BCi)&  BCo );
    53e0:	07012b03          	lw	s6,112(sp)
            Ama =   BCa ^((~BCe)&  BCi );
    53e4:	0e512e23          	sw	t0,252(sp)
            Abi =   BCi ^((~BCo)&  BCu );
    53e8:	fffa4b93          	not	s7,s4
            Ame =   BCe ^((~BCi)&  BCo );
    53ec:	fffb4293          	not	t0,s6
    53f0:	07412b03          	lw	s6,116(sp)
    53f4:	10512223          	sw	t0,260(sp)
            Abo =   BCo ^((~BCu)&  BCa );
    53f8:	fff64a13          	not	s4,a2
            Ame =   BCe ^((~BCi)&  BCo );
    53fc:	fffb4293          	not	t0,s6
            Ami =   BCi ^((~BCo)&  BCu );
    5400:	07812b03          	lw	s6,120(sp)
            Ame =   BCe ^((~BCi)&  BCo );
    5404:	10512423          	sw	t0,264(sp)
            Aka =   BCa ^((~BCe)&  BCi );
    5408:	04012603          	lw	a2,64(sp)
            Ami =   BCi ^((~BCo)&  BCu );
    540c:	fffb4293          	not	t0,s6
    5410:	07c12b03          	lw	s6,124(sp)
    5414:	10512623          	sw	t0,268(sp)
            Ake =   BCe ^((~BCi)&  BCo );
    5418:	04812583          	lw	a1,72(sp)
            Ami =   BCi ^((~BCo)&  BCu );
    541c:	fffb4293          	not	t0,s6
            Amo =   BCo ^((~BCu)&  BCa );
    5420:	08012b03          	lw	s6,128(sp)
            Ami =   BCi ^((~BCo)&  BCu );
    5424:	10512823          	sw	t0,272(sp)
            Aga =   BCa ^((~BCe)&  BCi );
    5428:	fff8c413          	not	s0,a7
            Amo =   BCo ^((~BCu)&  BCa );
    542c:	fffb4293          	not	t0,s6
    5430:	08412b03          	lw	s6,132(sp)
    5434:	10512a23          	sw	t0,276(sp)
            Agu =   BCu ^((~BCa)&  BCe );
    5438:	fff84313          	not	t1,a6
            Amo =   BCo ^((~BCu)&  BCa );
    543c:	fffb4293          	not	t0,s6
            Amu =   BCu ^((~BCa)&  BCe );
    5440:	06012b03          	lw	s6,96(sp)
            Amo =   BCo ^((~BCu)&  BCa );
    5444:	10512c23          	sw	t0,280(sp)
            Agu =   BCu ^((~BCa)&  BCe );
    5448:	fff54893          	not	a7,a0
            Amu =   BCu ^((~BCa)&  BCe );
    544c:	fffb4293          	not	t0,s6
            Aka =   BCa ^((~BCe)&  BCi );
    5450:	fff64813          	not	a6,a2
    5454:	fff6c513          	not	a0,a3
            Ake =   BCe ^((~BCi)&  BCo );
    5458:	fff74613          	not	a2,a4
            Aki =   BCi ^((~BCo)&  BCu );
    545c:	05012683          	lw	a3,80(sp)
    5460:	fff7c713          	not	a4,a5
            Amu =   BCu ^((~BCa)&  BCe );
    5464:	10512e23          	sw	t0,284(sp)
            Ako =   BCo ^((~BCu)&  BCa );
    5468:	05812783          	lw	a5,88(sp)
            Amu =   BCu ^((~BCa)&  BCe );
    546c:	06412b03          	lw	s6,100(sp)
            Abe =   BCe ^((~BCi)&  BCo );
    5470:	fffccc93          	not	s9,s9
            Abo =   BCo ^((~BCu)&  BCa );
    5474:	fffaca93          	not	s5,s5
            Amu =   BCu ^((~BCa)&  BCe );
    5478:	fffb4293          	not	t0,s6
            Asa =   BCa ^((~BCe)&  BCi );
    547c:	09012b03          	lw	s6,144(sp)
            Amu =   BCu ^((~BCa)&  BCe );
    5480:	12512023          	sw	t0,288(sp)
            Agi =   BCi ^((~BCo)&  BCu );
    5484:	ffff4f13          	not	t5,t5
            Asa =   BCa ^((~BCe)&  BCi );
    5488:	fffb4293          	not	t0,s6
    548c:	09412b03          	lw	s6,148(sp)
    5490:	12512223          	sw	t0,292(sp)
            Ake =   BCe ^((~BCi)&  BCo );
    5494:	fff5c593          	not	a1,a1
            Asa =   BCa ^((~BCe)&  BCi );
    5498:	fffb4293          	not	t0,s6
            Ase =   BCe ^((~BCi)&  BCo );
    549c:	09812b03          	lw	s6,152(sp)
            Asa =   BCa ^((~BCe)&  BCi );
    54a0:	12512423          	sw	t0,296(sp)
            Aki =   BCi ^((~BCo)&  BCu );
    54a4:	fff6c693          	not	a3,a3
            Ase =   BCe ^((~BCi)&  BCo );
    54a8:	fffb4293          	not	t0,s6
    54ac:	09c12b03          	lw	s6,156(sp)
    54b0:	12512623          	sw	t0,300(sp)
            Ako =   BCo ^((~BCu)&  BCa );
    54b4:	fff7c793          	not	a5,a5
            Ase =   BCe ^((~BCi)&  BCo );
    54b8:	fffb4293          	not	t0,s6
            Asi =   BCi ^((~BCo)&  BCu );
    54bc:	0a012b03          	lw	s6,160(sp)
            Ase =   BCe ^((~BCi)&  BCo );
    54c0:	12512823          	sw	t0,304(sp)
            Asi =   BCi ^((~BCo)&  BCu );
    54c4:	fffb4293          	not	t0,s6
    54c8:	0a412b03          	lw	s6,164(sp)
    54cc:	12512a23          	sw	t0,308(sp)
    54d0:	fffb4293          	not	t0,s6
            Aso =   BCo ^((~BCu)&  BCa );
    54d4:	0a812b03          	lw	s6,168(sp)
            Asi =   BCi ^((~BCo)&  BCu );
    54d8:	12512c23          	sw	t0,312(sp)
            Aso =   BCo ^((~BCu)&  BCa );
    54dc:	fffb4293          	not	t0,s6
    54e0:	0ac12b03          	lw	s6,172(sp)
    54e4:	12512e23          	sw	t0,316(sp)
    54e8:	fffb4293          	not	t0,s6
            Asu =   BCu ^((~BCa)&  BCe );
    54ec:	08812b03          	lw	s6,136(sp)
            Aso =   BCo ^((~BCu)&  BCa );
    54f0:	14512023          	sw	t0,320(sp)
            Asu =   BCu ^((~BCa)&  BCe );
    54f4:	fffb4293          	not	t0,s6
    54f8:	08c12b03          	lw	s6,140(sp)
    54fc:	14512223          	sw	t0,324(sp)
    5500:	fffb4293          	not	t0,s6
    5504:	14512423          	sw	t0,328(sp)
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
    5508:	0b012b03          	lw	s6,176(sp)
    550c:	0d012283          	lw	t0,208(sp)
    5510:	0162c2b3          	xor	t0,t0,s6
    5514:	0c512823          	sw	t0,208(sp)
    5518:	0b412b03          	lw	s6,180(sp)
    551c:	0d412283          	lw	t0,212(sp)
    5520:	0162c2b3          	xor	t0,t0,s6
            Aba =   BCa ^((~BCe)&  BCi );
    5524:	0bc12b03          	lw	s6,188(sp)
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
    5528:	0c512a23          	sw	t0,212(sp)
            Aba =   BCa ^((~BCe)&  BCi );
    552c:	016dfb33          	and	s6,s11,s6
    5530:	0d612c23          	sw	s6,216(sp)
    5534:	0c012b03          	lw	s6,192(sp)
            Abe =   BCe ^((~BCi)&  BCo );
    5538:	0c412d83          	lw	s11,196(sp)
            Aba =   BCa ^((~BCe)&  BCi );
    553c:	016d7d33          	and	s10,s10,s6
            Abe =   BCe ^((~BCi)&  BCo );
    5540:	0c812b03          	lw	s6,200(sp)
    5544:	01bcfcb3          	and	s9,s9,s11
            Abi =   BCi ^((~BCo)&  BCu );
    5548:	0e412d83          	lw	s11,228(sp)
            Abe =   BCe ^((~BCi)&  BCo );
    554c:	016c7c33          	and	s8,s8,s6
            Abi =   BCi ^((~BCo)&  BCu );
    5550:	0cc12b03          	lw	s6,204(sp)
            Age =   BCe ^((~BCi)&  BCo );
    5554:	0e812283          	lw	t0,232(sp)
            Abi =   BCi ^((~BCo)&  BCu );
    5558:	016bfbb3          	and	s7,s7,s6
    555c:	01412b03          	lw	s6,20(sp)
    5560:	016dfb33          	and	s6,s11,s6
            Abo =   BCo ^((~BCu)&  BCa );
    5564:	0b012d83          	lw	s11,176(sp)
    5568:	01bafab3          	and	s5,s5,s11
    556c:	0b412d83          	lw	s11,180(sp)
    5570:	01ba7a33          	and	s4,s4,s11
            Abu =   BCu ^((~BCa)&  BCe );
    5574:	01012d83          	lw	s11,16(sp)
    5578:	01b9f9b3          	and	s3,s3,s11
    557c:	0b812d83          	lw	s11,184(sp)
    5580:	01b97933          	and	s2,s2,s11
            Aga =   BCa ^((~BCe)&  BCi );
    5584:	02412d83          	lw	s11,36(sp)
    5588:	01b4f4b3          	and	s1,s1,s11
    558c:	02812d83          	lw	s11,40(sp)
    5590:	01b47433          	and	s0,s0,s11
            Age =   BCe ^((~BCi)&  BCo );
    5594:	02c12d83          	lw	s11,44(sp)
    5598:	01b3f3b3          	and	t2,t2,s11
    559c:	0e012d83          	lw	s11,224(sp)
    55a0:	0e712223          	sw	t2,228(sp)
            Ako =   BCo ^((~BCu)&  BCa );
    55a4:	0ec12383          	lw	t2,236(sp)
            Age =   BCe ^((~BCi)&  BCo );
    55a8:	01b2f2b3          	and	t0,t0,s11
            Agi =   BCi ^((~BCo)&  BCu );
    55ac:	03012d83          	lw	s11,48(sp)
    55b0:	01bfffb3          	and	t6,t6,s11
    55b4:	03412d83          	lw	s11,52(sp)
    55b8:	01bf7f33          	and	t5,t5,s11
            Ago =   BCo ^((~BCu)&  BCa );
    55bc:	01812d83          	lw	s11,24(sp)
    55c0:	01befeb3          	and	t4,t4,s11
    55c4:	01c12d83          	lw	s11,28(sp)
    55c8:	01be7e33          	and	t3,t3,s11
            Agu =   BCu ^((~BCa)&  BCe );
    55cc:	0dc12d83          	lw	s11,220(sp)
    55d0:	01b37333          	and	t1,t1,s11
    55d4:	02012d83          	lw	s11,32(sp)
    55d8:	01b8f8b3          	and	a7,a7,s11
            Aka =   BCa ^((~BCe)&  BCi );
    55dc:	04812d83          	lw	s11,72(sp)
    55e0:	01b87833          	and	a6,a6,s11
    55e4:	04c12d83          	lw	s11,76(sp)
    55e8:	01b57533          	and	a0,a0,s11
            Ake =   BCe ^((~BCi)&  BCo );
    55ec:	05012d83          	lw	s11,80(sp)
    55f0:	01b5f5b3          	and	a1,a1,s11
    55f4:	05412d83          	lw	s11,84(sp)
    55f8:	01b67633          	and	a2,a2,s11
            Aki =   BCi ^((~BCo)&  BCu );
    55fc:	05812d83          	lw	s11,88(sp)
    5600:	01b6f6b3          	and	a3,a3,s11
    5604:	05c12d83          	lw	s11,92(sp)
    5608:	01b77733          	and	a4,a4,s11
            Ako =   BCo ^((~BCu)&  BCa );
    560c:	03812d83          	lw	s11,56(sp)
    5610:	01b7f7b3          	and	a5,a5,s11
    5614:	03c12d83          	lw	s11,60(sp)
    5618:	01b3f3b3          	and	t2,t2,s11
    561c:	0e712623          	sw	t2,236(sp)
            Aku =   BCu ^((~BCa)&  BCe );
    5620:	04012d83          	lw	s11,64(sp)
    5624:	0f012383          	lw	t2,240(sp)
    5628:	01b3f3b3          	and	t2,t2,s11
    562c:	0e712823          	sw	t2,240(sp)
    5630:	0f412383          	lw	t2,244(sp)
    5634:	04412d83          	lw	s11,68(sp)
    5638:	01b3f3b3          	and	t2,t2,s11
    563c:	0e712a23          	sw	t2,244(sp)
            Ama =   BCa ^((~BCe)&  BCi );
    5640:	07012d83          	lw	s11,112(sp)
    5644:	0f812383          	lw	t2,248(sp)
    5648:	01b3f3b3          	and	t2,t2,s11
    564c:	0e712c23          	sw	t2,248(sp)
    5650:	07412d83          	lw	s11,116(sp)
    5654:	0fc12383          	lw	t2,252(sp)
    5658:	01b3f3b3          	and	t2,t2,s11
    565c:	10712023          	sw	t2,256(sp)
            Ame =   BCe ^((~BCi)&  BCo );
    5660:	07812d83          	lw	s11,120(sp)
    5664:	10412383          	lw	t2,260(sp)
    5668:	01b3f3b3          	and	t2,t2,s11
    566c:	10712223          	sw	t2,260(sp)
    5670:	07c12d83          	lw	s11,124(sp)
    5674:	10812383          	lw	t2,264(sp)
    5678:	01b3f3b3          	and	t2,t2,s11
    567c:	10712423          	sw	t2,264(sp)
            Ami =   BCi ^((~BCo)&  BCu );
    5680:	08012d83          	lw	s11,128(sp)
    5684:	10c12383          	lw	t2,268(sp)
    5688:	01b3f3b3          	and	t2,t2,s11
    568c:	10712623          	sw	t2,268(sp)
    5690:	08412d83          	lw	s11,132(sp)
    5694:	11012383          	lw	t2,272(sp)
    5698:	01b3f3b3          	and	t2,t2,s11
    569c:	10712823          	sw	t2,272(sp)
            Amo =   BCo ^((~BCu)&  BCa );
    56a0:	06012d83          	lw	s11,96(sp)
    56a4:	11412383          	lw	t2,276(sp)
    56a8:	01b3f3b3          	and	t2,t2,s11
    56ac:	10712a23          	sw	t2,276(sp)
    56b0:	06412d83          	lw	s11,100(sp)
    56b4:	11812383          	lw	t2,280(sp)
    56b8:	01b3f3b3          	and	t2,t2,s11
    56bc:	10712c23          	sw	t2,280(sp)
            Amu =   BCu ^((~BCa)&  BCe );
    56c0:	06812d83          	lw	s11,104(sp)
    56c4:	11c12383          	lw	t2,284(sp)
    56c8:	01b3f3b3          	and	t2,t2,s11
    56cc:	10712e23          	sw	t2,284(sp)
    56d0:	06c12d83          	lw	s11,108(sp)
    56d4:	12012383          	lw	t2,288(sp)
    56d8:	01b3f3b3          	and	t2,t2,s11
    56dc:	12712023          	sw	t2,288(sp)
            Asa =   BCa ^((~BCe)&  BCi );
    56e0:	12412383          	lw	t2,292(sp)
    56e4:	09812d83          	lw	s11,152(sp)
    56e8:	01b3f3b3          	and	t2,t2,s11
    56ec:	12712223          	sw	t2,292(sp)
    56f0:	09c12d83          	lw	s11,156(sp)
    56f4:	12812383          	lw	t2,296(sp)
    56f8:	01b3f3b3          	and	t2,t2,s11
    56fc:	12712423          	sw	t2,296(sp)
            Ase =   BCe ^((~BCi)&  BCo );
    5700:	0a012d83          	lw	s11,160(sp)
    5704:	12c12383          	lw	t2,300(sp)
    5708:	01b3f3b3          	and	t2,t2,s11
    570c:	12712623          	sw	t2,300(sp)
    5710:	0a412d83          	lw	s11,164(sp)
    5714:	13012383          	lw	t2,304(sp)
    5718:	01b3f3b3          	and	t2,t2,s11
    571c:	12712823          	sw	t2,304(sp)
            Asi =   BCi ^((~BCo)&  BCu );
    5720:	0a812d83          	lw	s11,168(sp)
    5724:	13412383          	lw	t2,308(sp)
    5728:	01b3f3b3          	and	t2,t2,s11
    572c:	12712a23          	sw	t2,308(sp)
    5730:	0ac12d83          	lw	s11,172(sp)
    5734:	13812383          	lw	t2,312(sp)
    5738:	01b3f3b3          	and	t2,t2,s11
    573c:	12712c23          	sw	t2,312(sp)
            Aso =   BCo ^((~BCu)&  BCa );
    5740:	08812d83          	lw	s11,136(sp)
    5744:	13c12383          	lw	t2,316(sp)
    5748:	01b3f3b3          	and	t2,t2,s11
    574c:	12712e23          	sw	t2,316(sp)
    5750:	08c12d83          	lw	s11,140(sp)
    5754:	14012383          	lw	t2,320(sp)
    5758:	01b3f3b3          	and	t2,t2,s11
    575c:	14712023          	sw	t2,320(sp)
            Asu =   BCu ^((~BCa)&  BCe );
    5760:	09012d83          	lw	s11,144(sp)
    5764:	14412383          	lw	t2,324(sp)
    5768:	01b3f3b3          	and	t2,t2,s11
    576c:	14712223          	sw	t2,324(sp)
    5770:	09412d83          	lw	s11,148(sp)
    5774:	14812383          	lw	t2,328(sp)
    5778:	01b3f3b3          	and	t2,t2,s11
        for(round = 0; round < NROUNDS; round += 2) {
    577c:	00c12d83          	lw	s11,12(sp)
            Asu =   BCu ^((~BCa)&  BCe );
    5780:	14712423          	sw	t2,328(sp)
        for(round = 0; round < NROUNDS; round += 2) {
    5784:	010d8d93          	addi	s11,s11,16
    5788:	01b12623          	sw	s11,12(sp)
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
    578c:	0d012383          	lw	t2,208(sp)
    5790:	0d812d83          	lw	s11,216(sp)
    5794:	01b3c3b3          	xor	t2,t2,s11
    5798:	0a712823          	sw	t2,176(sp)
    579c:	0d412383          	lw	t2,212(sp)
            Abe =   BCe ^((~BCi)&  BCo );
    57a0:	01012d83          	lw	s11,16(sp)
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
    57a4:	01a3cd33          	xor	s10,t2,s10
    57a8:	0ba12a23          	sw	s10,180(sp)
            Abe =   BCe ^((~BCi)&  BCo );
    57ac:	01bccd33          	xor	s10,s9,s11
    57b0:	0b812d83          	lw	s11,184(sp)
            Abi =   BCi ^((~BCo)&  BCu );
    57b4:	0bc12c83          	lw	s9,188(sp)
            Age =   BCe ^((~BCi)&  BCo );
    57b8:	0e412383          	lw	t2,228(sp)
            Abe =   BCe ^((~BCi)&  BCo );
    57bc:	01bc4c33          	xor	s8,s8,s11
    57c0:	0b812c23          	sw	s8,184(sp)
            Abi =   BCi ^((~BCo)&  BCu );
    57c4:	019bcc33          	xor	s8,s7,s9
    57c8:	0c012b83          	lw	s7,192(sp)
            Abo =   BCo ^((~BCu)&  BCa );
    57cc:	0c412d83          	lw	s11,196(sp)
            Abe =   BCe ^((~BCi)&  BCo );
    57d0:	01a12823          	sw	s10,16(sp)
            Abi =   BCi ^((~BCo)&  BCu );
    57d4:	017b4bb3          	xor	s7,s6,s7
            Abo =   BCo ^((~BCu)&  BCa );
    57d8:	0c812b03          	lw	s6,200(sp)
            Abi =   BCi ^((~BCo)&  BCu );
    57dc:	0d712023          	sw	s7,192(sp)
            Abo =   BCo ^((~BCu)&  BCa );
    57e0:	01bacbb3          	xor	s7,s5,s11
            Abu =   BCu ^((~BCa)&  BCe );
    57e4:	0cc12a83          	lw	s5,204(sp)
            Abo =   BCo ^((~BCu)&  BCa );
    57e8:	016a4a33          	xor	s4,s4,s6
            Abu =   BCu ^((~BCa)&  BCe );
    57ec:	01412b03          	lw	s6,20(sp)
    57f0:	0159c9b3          	xor	s3,s3,s5
    57f4:	0d312623          	sw	s3,204(sp)
    57f8:	016949b3          	xor	s3,s2,s6
            Aga =   BCa ^((~BCe)&  BCi );
    57fc:	01812903          	lw	s2,24(sp)
    5800:	01c12d83          	lw	s11,28(sp)
            Abo =   BCo ^((~BCu)&  BCa );
    5804:	0d712223          	sw	s7,196(sp)
            Aga =   BCa ^((~BCe)&  BCi );
    5808:	0124c4b3          	xor	s1,s1,s2
    580c:	0c912a23          	sw	s1,212(sp)
    5810:	01b444b3          	xor	s1,s0,s11
            Age =   BCe ^((~BCi)&  BCo );
    5814:	0dc12403          	lw	s0,220(sp)
    5818:	02012d83          	lw	s11,32(sp)
            Abi =   BCi ^((~BCo)&  BCu );
    581c:	0b812e23          	sw	s8,188(sp)
            Age =   BCe ^((~BCi)&  BCo );
    5820:	0083c3b3          	xor	t2,t2,s0
    5824:	01b2c433          	xor	s0,t0,s11
            Agi =   BCi ^((~BCo)&  BCu );
    5828:	02412283          	lw	t0,36(sp)
            Abo =   BCo ^((~BCu)&  BCa );
    582c:	0d412423          	sw	s4,200(sp)
            Abu =   BCu ^((~BCa)&  BCe );
    5830:	0d312823          	sw	s3,208(sp)
            Agi =   BCi ^((~BCo)&  BCu );
    5834:	005fcfb3          	xor	t6,t6,t0
    5838:	01f12e23          	sw	t6,28(sp)
            Aga =   BCa ^((~BCe)&  BCi );
    583c:	0c912c23          	sw	s1,216(sp)
            Age =   BCe ^((~BCi)&  BCo );
    5840:	0e712e23          	sw	t2,252(sp)
    5844:	00812a23          	sw	s0,20(sp)
            Agi =   BCi ^((~BCo)&  BCu );
    5848:	02812d83          	lw	s11,40(sp)
    584c:	01bf4fb3          	xor	t6,t5,s11
            Ago =   BCo ^((~BCu)&  BCa );
    5850:	02c12d83          	lw	s11,44(sp)
            Agi =   BCi ^((~BCo)&  BCu );
    5854:	03f12023          	sw	t6,32(sp)
            Ago =   BCo ^((~BCu)&  BCa );
    5858:	01beceb3          	xor	t4,t4,s11
    585c:	0e012d83          	lw	s11,224(sp)
    5860:	0dd12e23          	sw	t4,220(sp)
    5864:	01be4e33          	xor	t3,t3,s11
            Agu =   BCu ^((~BCa)&  BCe );
    5868:	03012d83          	lw	s11,48(sp)
            Ago =   BCo ^((~BCu)&  BCa );
    586c:	0fc12023          	sw	t3,224(sp)
            Agu =   BCu ^((~BCa)&  BCe );
    5870:	01b34333          	xor	t1,t1,s11
    5874:	03412d83          	lw	s11,52(sp)
    5878:	00612c23          	sw	t1,24(sp)
    587c:	01b8c333          	xor	t1,a7,s11
            Aka =   BCa ^((~BCe)&  BCi );
    5880:	03812883          	lw	a7,56(sp)
    5884:	03c12d83          	lw	s11,60(sp)
            Agu =   BCu ^((~BCa)&  BCe );
    5888:	02612223          	sw	t1,36(sp)
            Aka =   BCa ^((~BCe)&  BCi );
    588c:	01184833          	xor	a6,a6,a7
    5890:	03012423          	sw	a6,40(sp)
    5894:	01b54833          	xor	a6,a0,s11
            Ake =   BCe ^((~BCi)&  BCo );
    5898:	04012503          	lw	a0,64(sp)
    589c:	04412d83          	lw	s11,68(sp)
            Aka =   BCa ^((~BCe)&  BCi );
    58a0:	03012623          	sw	a6,44(sp)
            Ake =   BCe ^((~BCi)&  BCo );
    58a4:	00a5c533          	xor	a0,a1,a0
            Aki =   BCi ^((~BCo)&  BCu );
    58a8:	04812583          	lw	a1,72(sp)
            Ake =   BCe ^((~BCi)&  BCo );
    58ac:	01b64633          	xor	a2,a2,s11
            Aki =   BCi ^((~BCo)&  BCu );
    58b0:	04c12d83          	lw	s11,76(sp)
    58b4:	00b6c933          	xor	s2,a3,a1
            Ako =   BCo ^((~BCu)&  BCa );
    58b8:	05012683          	lw	a3,80(sp)
            Ake =   BCe ^((~BCi)&  BCo );
    58bc:	0ec12423          	sw	a2,232(sp)
            Aki =   BCi ^((~BCo)&  BCu );
    58c0:	01b74b33          	xor	s6,a4,s11
            Ako =   BCo ^((~BCu)&  BCa );
    58c4:	00d7c633          	xor	a2,a5,a3
    58c8:	05412d83          	lw	s11,84(sp)
    58cc:	0ec12683          	lw	a3,236(sp)
            Aku =   BCu ^((~BCa)&  BCe );
    58d0:	05812783          	lw	a5,88(sp)
            Ako =   BCo ^((~BCu)&  BCa );
    58d4:	02c12823          	sw	a2,48(sp)
    58d8:	01b6c633          	xor	a2,a3,s11
            Aku =   BCu ^((~BCa)&  BCe );
    58dc:	0f012683          	lw	a3,240(sp)
    58e0:	05c12d83          	lw	s11,92(sp)
            Ako =   BCo ^((~BCu)&  BCa );
    58e4:	02c12a23          	sw	a2,52(sp)
            Aku =   BCu ^((~BCa)&  BCe );
    58e8:	00f6c633          	xor	a2,a3,a5
    58ec:	0f412683          	lw	a3,244(sp)
    58f0:	0ec12623          	sw	a2,236(sp)
            Ake =   BCe ^((~BCi)&  BCo );
    58f4:	0ea12223          	sw	a0,228(sp)
            Aku =   BCu ^((~BCa)&  BCe );
    58f8:	01b6c633          	xor	a2,a3,s11
    58fc:	0ec12823          	sw	a2,240(sp)
            Ama =   BCa ^((~BCe)&  BCi );
    5900:	0f812683          	lw	a3,248(sp)
    5904:	06012783          	lw	a5,96(sp)
    5908:	06412d83          	lw	s11,100(sp)
    590c:	00f6c633          	xor	a2,a3,a5
    5910:	10012683          	lw	a3,256(sp)
    5914:	0ec12a23          	sw	a2,244(sp)
            Ami =   BCi ^((~BCo)&  BCu );
    5918:	07012783          	lw	a5,112(sp)
            Ama =   BCa ^((~BCe)&  BCi );
    591c:	01b6c633          	xor	a2,a3,s11
            Ame =   BCe ^((~BCi)&  BCo );
    5920:	10412683          	lw	a3,260(sp)
    5924:	06812d83          	lw	s11,104(sp)
            Ama =   BCa ^((~BCe)&  BCi );
    5928:	0ec12c23          	sw	a2,248(sp)
            Ame =   BCe ^((~BCi)&  BCo );
    592c:	01b6c633          	xor	a2,a3,s11
    5930:	10812683          	lw	a3,264(sp)
    5934:	06c12d83          	lw	s11,108(sp)
    5938:	02c12c23          	sw	a2,56(sp)
    593c:	01b6c633          	xor	a2,a3,s11
            Ami =   BCi ^((~BCo)&  BCu );
    5940:	10c12683          	lw	a3,268(sp)
    5944:	07412d83          	lw	s11,116(sp)
            Ame =   BCe ^((~BCi)&  BCo );
    5948:	02c12e23          	sw	a2,60(sp)
            Ami =   BCi ^((~BCo)&  BCu );
    594c:	00f6c633          	xor	a2,a3,a5
    5950:	11012683          	lw	a3,272(sp)
            Amo =   BCo ^((~BCu)&  BCa );
    5954:	07812783          	lw	a5,120(sp)
            Ami =   BCi ^((~BCo)&  BCu );
    5958:	04c12e23          	sw	a2,92(sp)
    595c:	01b6c633          	xor	a2,a3,s11
            Amo =   BCo ^((~BCu)&  BCa );
    5960:	11412683          	lw	a3,276(sp)
    5964:	07c12d83          	lw	s11,124(sp)
            Ami =   BCi ^((~BCo)&  BCu );
    5968:	06c12023          	sw	a2,96(sp)
            Amo =   BCo ^((~BCu)&  BCa );
    596c:	00f6cbb3          	xor	s7,a3,a5
    5970:	11812683          	lw	a3,280(sp)
    5974:	01b6cd33          	xor	s10,a3,s11
            Amu =   BCu ^((~BCa)&  BCe );
    5978:	11c12683          	lw	a3,284(sp)
    597c:	08012d83          	lw	s11,128(sp)
    5980:	01b6c633          	xor	a2,a3,s11
    5984:	12012683          	lw	a3,288(sp)
    5988:	08412d83          	lw	s11,132(sp)
    598c:	04c12023          	sw	a2,64(sp)
    5990:	01b6c633          	xor	a2,a3,s11
            Asa =   BCa ^((~BCe)&  BCi );
    5994:	12412683          	lw	a3,292(sp)
    5998:	08812d83          	lw	s11,136(sp)
            Amu =   BCu ^((~BCa)&  BCe );
    599c:	04c12223          	sw	a2,68(sp)
            Asa =   BCa ^((~BCe)&  BCi );
    59a0:	01b6c633          	xor	a2,a3,s11
    59a4:	12812683          	lw	a3,296(sp)
    59a8:	08c12d83          	lw	s11,140(sp)
    59ac:	04c12423          	sw	a2,72(sp)
    59b0:	01b6c633          	xor	a2,a3,s11
    59b4:	04c12623          	sw	a2,76(sp)
            Ase =   BCe ^((~BCi)&  BCo );
    59b8:	12c12683          	lw	a3,300(sp)
    59bc:	09012d83          	lw	s11,144(sp)
            Asu =   BCu ^((~BCa)&  BCe );
    59c0:	0a812703          	lw	a4,168(sp)
    59c4:	0ac12783          	lw	a5,172(sp)
            Ase =   BCe ^((~BCi)&  BCo );
    59c8:	01b6c633          	xor	a2,a3,s11
    59cc:	13012683          	lw	a3,304(sp)
    59d0:	09412d83          	lw	s11,148(sp)
    59d4:	06c12623          	sw	a2,108(sp)
    59d8:	01b6c633          	xor	a2,a3,s11
            Asi =   BCi ^((~BCo)&  BCu );
    59dc:	13412683          	lw	a3,308(sp)
    59e0:	09812d83          	lw	s11,152(sp)
            Ase =   BCe ^((~BCi)&  BCo );
    59e4:	06c12823          	sw	a2,112(sp)
            Asi =   BCi ^((~BCo)&  BCu );
    59e8:	01b6c633          	xor	a2,a3,s11
    59ec:	13812683          	lw	a3,312(sp)
    59f0:	09c12d83          	lw	s11,156(sp)
    59f4:	04c12823          	sw	a2,80(sp)
    59f8:	01b6c633          	xor	a2,a3,s11
            Aso =   BCo ^((~BCu)&  BCa );
    59fc:	13c12683          	lw	a3,316(sp)
    5a00:	0a012d83          	lw	s11,160(sp)
            Asi =   BCi ^((~BCo)&  BCu );
    5a04:	04c12a23          	sw	a2,84(sp)
            Aso =   BCo ^((~BCu)&  BCa );
    5a08:	01b6c633          	xor	a2,a3,s11
    5a0c:	14012683          	lw	a3,320(sp)
    5a10:	0a412d83          	lw	s11,164(sp)
    5a14:	06c12223          	sw	a2,100(sp)
    5a18:	01b6c633          	xor	a2,a3,s11
            Asu =   BCu ^((~BCa)&  BCe );
    5a1c:	14412683          	lw	a3,324(sp)
            Aso =   BCo ^((~BCu)&  BCa );
    5a20:	06c12423          	sw	a2,104(sp)
            Asu =   BCu ^((~BCa)&  BCe );
    5a24:	00e6cdb3          	xor	s11,a3,a4
    5a28:	14812703          	lw	a4,328(sp)
    5a2c:	00f74ab3          	xor	s5,a4,a5
        for(round = 0; round < NROUNDS; round += 2) {
    5a30:	00c12783          	lw	a5,12(sp)
    5a34:	00003717          	auipc	a4,0x3
    5a38:	07c70713          	addi	a4,a4,124 # 8ab0 <pqcrystals_dilithium_fips202_ref_KeccakF_RoundConstants+0xc0>
    5a3c:	00f70463          	beq	a4,a5,5a44 <KeccakF1600_StatePermute+0x217c>
    5a40:	858fe06f          	j	3a98 <KeccakF1600_StatePermute+0x1d0>
        }

        //copyToState(state, A)
        state[ 0] = Aba;
    5a44:	14c12503          	lw	a0,332(sp)
    5a48:	0b012783          	lw	a5,176(sp)
    5a4c:	00090c93          	mv	s9,s2
        state[ 1] = Abe;
        state[ 2] = Abi;
        state[ 3] = Abo;
    5a50:	01452e23          	sw	s4,28(a0)
        state[ 0] = Aba;
    5a54:	00f52023          	sw	a5,0(a0)
    5a58:	0b412783          	lw	a5,180(sp)
        state[ 4] = Abu;
        state[ 5] = Aga;
    5a5c:	02952623          	sw	s1,44(a0)
        state[ 6] = Age;
    5a60:	02852a23          	sw	s0,52(a0)
        state[ 0] = Aba;
    5a64:	00f52223          	sw	a5,4(a0)
        state[ 1] = Abe;
    5a68:	01012783          	lw	a5,16(sp)
        state[ 6] = Age;
    5a6c:	02752823          	sw	t2,48(a0)
        state[ 7] = Agi;
    5a70:	03f52e23          	sw	t6,60(a0)
        state[ 1] = Abe;
    5a74:	00f52423          	sw	a5,8(a0)
    5a78:	0b812783          	lw	a5,184(sp)
        state[ 8] = Ago;
    5a7c:	05d52023          	sw	t4,64(a0)
    5a80:	05c52223          	sw	t3,68(a0)
        state[ 1] = Abe;
    5a84:	00f52623          	sw	a5,12(a0)
        state[ 2] = Abi;
    5a88:	0bc12783          	lw	a5,188(sp)
    5a8c:	00f52823          	sw	a5,16(a0)
    5a90:	0c012783          	lw	a5,192(sp)
    5a94:	00f52a23          	sw	a5,20(a0)
        state[ 3] = Abo;
    5a98:	0c412783          	lw	a5,196(sp)
    5a9c:	00f52c23          	sw	a5,24(a0)
        state[ 4] = Abu;
    5aa0:	0cc12783          	lw	a5,204(sp)
    5aa4:	02f52023          	sw	a5,32(a0)
    5aa8:	0d012783          	lw	a5,208(sp)
    5aac:	02f52223          	sw	a5,36(a0)
        state[ 5] = Aga;
    5ab0:	0d412783          	lw	a5,212(sp)
    5ab4:	02f52423          	sw	a5,40(a0)
        state[ 7] = Agi;
    5ab8:	01c12783          	lw	a5,28(sp)
    5abc:	02f52c23          	sw	a5,56(a0)
        state[ 9] = Agu;
    5ac0:	01812783          	lw	a5,24(sp)
    5ac4:	04f52423          	sw	a5,72(a0)
    5ac8:	04652623          	sw	t1,76(a0)
        state[10] = Aka;
    5acc:	02812783          	lw	a5,40(sp)
        state[11] = Ake;
        state[12] = Aki;
    5ad0:	07952023          	sw	s9,96(a0)
    5ad4:	07652223          	sw	s6,100(a0)
        state[10] = Aka;
    5ad8:	04f52823          	sw	a5,80(a0)
        state[11] = Ake;
    5adc:	0e412783          	lw	a5,228(sp)
        state[13] = Ako;
        state[14] = Aku;
        state[15] = Ama;
        state[16] = Ame;
        state[17] = Ami;
        state[18] = Amo;
    5ae0:	09752823          	sw	s7,144(a0)
    5ae4:	09a52a23          	sw	s10,148(a0)
        state[11] = Ake;
    5ae8:	04f52c23          	sw	a5,88(a0)
    5aec:	0e812783          	lw	a5,232(sp)
        state[10] = Aka;
    5af0:	05052a23          	sw	a6,84(a0)
        state[11] = Ake;
    5af4:	04f52e23          	sw	a5,92(a0)
        state[13] = Ako;
    5af8:	03012783          	lw	a5,48(sp)
    5afc:	06f52423          	sw	a5,104(a0)
    5b00:	03412783          	lw	a5,52(sp)
    5b04:	06f52623          	sw	a5,108(a0)
        state[14] = Aku;
    5b08:	0ec12783          	lw	a5,236(sp)
    5b0c:	06f52823          	sw	a5,112(a0)
    5b10:	0f012783          	lw	a5,240(sp)
    5b14:	06f52a23          	sw	a5,116(a0)
        state[15] = Ama;
    5b18:	0f412783          	lw	a5,244(sp)
    5b1c:	06f52c23          	sw	a5,120(a0)
    5b20:	0f812783          	lw	a5,248(sp)
    5b24:	06f52e23          	sw	a5,124(a0)
        state[16] = Ame;
    5b28:	03812783          	lw	a5,56(sp)
    5b2c:	08f52023          	sw	a5,128(a0)
    5b30:	03c12783          	lw	a5,60(sp)
    5b34:	08f52223          	sw	a5,132(a0)
        state[17] = Ami;
    5b38:	05c12783          	lw	a5,92(sp)
    5b3c:	08f52423          	sw	a5,136(a0)
    5b40:	06012783          	lw	a5,96(sp)
    5b44:	08f52623          	sw	a5,140(a0)
        state[19] = Amu;
    5b48:	04012783          	lw	a5,64(sp)
    5b4c:	08f52c23          	sw	a5,152(a0)
    5b50:	04412783          	lw	a5,68(sp)
        state[20] = Asa;
        state[21] = Ase;
        state[22] = Asi;
        state[23] = Aso;
        state[24] = Asu;
}
    5b54:	17c12403          	lw	s0,380(sp)
        state[24] = Asu;
    5b58:	0db52023          	sw	s11,192(a0)
        state[19] = Amu;
    5b5c:	08f52e23          	sw	a5,156(a0)
        state[20] = Asa;
    5b60:	04812783          	lw	a5,72(sp)
        state[24] = Asu;
    5b64:	0d552223          	sw	s5,196(a0)
        state[23] = Aso;
    5b68:	0ac52e23          	sw	a2,188(a0)
        state[20] = Asa;
    5b6c:	0af52023          	sw	a5,160(a0)
    5b70:	04c12783          	lw	a5,76(sp)
}
    5b74:	17812483          	lw	s1,376(sp)
    5b78:	17412903          	lw	s2,372(sp)
        state[20] = Asa;
    5b7c:	0af52223          	sw	a5,164(a0)
        state[21] = Ase;
    5b80:	06c12783          	lw	a5,108(sp)
}
    5b84:	17012983          	lw	s3,368(sp)
    5b88:	16c12a03          	lw	s4,364(sp)
        state[21] = Ase;
    5b8c:	0af52423          	sw	a5,168(a0)
    5b90:	07012783          	lw	a5,112(sp)
}
    5b94:	16812a83          	lw	s5,360(sp)
    5b98:	16412b03          	lw	s6,356(sp)
        state[21] = Ase;
    5b9c:	0af52623          	sw	a5,172(a0)
        state[22] = Asi;
    5ba0:	05012783          	lw	a5,80(sp)
}
    5ba4:	16012b83          	lw	s7,352(sp)
    5ba8:	15c12c03          	lw	s8,348(sp)
        state[22] = Asi;
    5bac:	0af52823          	sw	a5,176(a0)
    5bb0:	05412783          	lw	a5,84(sp)
}
    5bb4:	15812c83          	lw	s9,344(sp)
    5bb8:	15412d03          	lw	s10,340(sp)
        state[22] = Asi;
    5bbc:	0af52a23          	sw	a5,180(a0)
        state[23] = Aso;
    5bc0:	06412783          	lw	a5,100(sp)
}
    5bc4:	15012d83          	lw	s11,336(sp)
        state[23] = Aso;
    5bc8:	0af52c23          	sw	a5,184(a0)
}
    5bcc:	18010113          	addi	sp,sp,384
    5bd0:	00008067          	ret

00005bd4 <keccak_absorb>:
static unsigned int keccak_absorb(uint64_t s[25],
                                  unsigned int pos,
                                  unsigned int r,
                                  const uint8_t *in,
                                  size_t inlen)
{
    5bd4:	fe010113          	addi	sp,sp,-32
    5bd8:	00812c23          	sw	s0,24(sp)
    5bdc:	00912a23          	sw	s1,20(sp)
    5be0:	01312623          	sw	s3,12(sp)
  unsigned int i;

  while(pos+inlen >= r) {
    5be4:	00e58f33          	add	t5,a1,a4
{
    5be8:	00112e23          	sw	ra,28(sp)
    5bec:	01212823          	sw	s2,16(sp)
    5bf0:	00050493          	mv	s1,a0
    5bf4:	00068413          	mv	s0,a3
  while(pos+inlen >= r) {
    5bf8:	000f0993          	mv	s3,t5
    5bfc:	0acf6a63          	bltu	t5,a2,5cb0 <keccak_absorb+0xdc>
    5c00:	00060913          	mv	s2,a2
    for(i=pos;i<r;i++)
    5c04:	08c5fa63          	bgeu	a1,a2,5c98 <keccak_absorb+0xc4>
    5c08:	40b907b3          	sub	a5,s2,a1
{
    5c0c:	00040813          	mv	a6,s0
    5c10:	00f406b3          	add	a3,s0,a5
    5c14:	408585b3          	sub	a1,a1,s0
      s[i/8] ^= (uint64_t)*in++ << 8*(i%8);
    5c18:	01f00513          	li	a0,31
    5c1c:	0280006f          	j	5c44 <keccak_absorb+0x70>
    5c20:	0007ae03          	lw	t3,0(a5)
    5c24:	0047a703          	lw	a4,4(a5)
    5c28:	00689333          	sll	t1,a7,t1
    5c2c:	00000893          	li	a7,0
    5c30:	011e48b3          	xor	a7,t3,a7
    5c34:	00674733          	xor	a4,a4,t1
    5c38:	0117a023          	sw	a7,0(a5)
    5c3c:	00e7a223          	sw	a4,4(a5)
    for(i=pos;i<r;i++)
    5c40:	04d80a63          	beq	a6,a3,5c94 <keccak_absorb+0xc0>
    5c44:	00b807b3          	add	a5,a6,a1
      s[i/8] ^= (uint64_t)*in++ << 8*(i%8);
    5c48:	00084883          	lbu	a7,0(a6)
    5c4c:	0077f713          	andi	a4,a5,7
    5c50:	00371713          	slli	a4,a4,0x3
    5c54:	ff87f793          	andi	a5,a5,-8
    5c58:	fe070313          	addi	t1,a4,-32
    5c5c:	40e50e33          	sub	t3,a0,a4
    5c60:	00f487b3          	add	a5,s1,a5
    5c64:	00180813          	addi	a6,a6,1
    5c68:	0018de93          	srli	t4,a7,0x1
    5c6c:	fa035ae3          	bgez	t1,5c20 <keccak_absorb+0x4c>
    5c70:	01ced333          	srl	t1,t4,t3
    5c74:	00e898b3          	sll	a7,a7,a4
    5c78:	0007ae03          	lw	t3,0(a5)
    5c7c:	0047a703          	lw	a4,4(a5)
    5c80:	011e48b3          	xor	a7,t3,a7
    5c84:	00674733          	xor	a4,a4,t1
    5c88:	0117a023          	sw	a7,0(a5)
    5c8c:	00e7a223          	sw	a4,4(a5)
    for(i=pos;i<r;i++)
    5c90:	fad81ae3          	bne	a6,a3,5c44 <keccak_absorb+0x70>
      s[i/8] ^= (uint64_t)*in++ << 8*(i%8);
    5c94:	00080413          	mv	s0,a6
    inlen -= r-pos;
    KeccakF1600_StatePermute(s);
    5c98:	00048513          	mv	a0,s1
    inlen -= r-pos;
    5c9c:	412f09b3          	sub	s3,t5,s2
    KeccakF1600_StatePermute(s);
    5ca0:	c29fd0ef          	jal	ra,38c8 <KeccakF1600_StatePermute>
  while(pos+inlen >= r) {
    5ca4:	00098f13          	mv	t5,s3
    pos = 0;
    5ca8:	00000593          	li	a1,0
  while(pos+inlen >= r) {
    5cac:	f529fee3          	bgeu	s3,s2,5c08 <keccak_absorb+0x34>
  }

  for(i=pos;i<pos+inlen;i++)
    5cb0:	0b35f863          	bgeu	a1,s3,5d60 <keccak_absorb+0x18c>
    5cb4:	40b987b3          	sub	a5,s3,a1
    5cb8:	00040613          	mv	a2,s0
    5cbc:	00f406b3          	add	a3,s0,a5
    5cc0:	408585b3          	sub	a1,a1,s0
    s[i/8] ^= (uint64_t)*in++ << 8*(i%8);
    5cc4:	01f00e13          	li	t3,31
    5cc8:	0280006f          	j	5cf0 <keccak_absorb+0x11c>
    5ccc:	0007a883          	lw	a7,0(a5)
    5cd0:	0047a703          	lw	a4,4(a5)
    5cd4:	01051833          	sll	a6,a0,a6
    5cd8:	00000513          	li	a0,0
    5cdc:	00a8c533          	xor	a0,a7,a0
    5ce0:	01074733          	xor	a4,a4,a6
    5ce4:	00a7a023          	sw	a0,0(a5)
    5ce8:	00e7a223          	sw	a4,4(a5)
  for(i=pos;i<pos+inlen;i++)
    5cec:	04d60a63          	beq	a2,a3,5d40 <keccak_absorb+0x16c>
    5cf0:	00b607b3          	add	a5,a2,a1
    s[i/8] ^= (uint64_t)*in++ << 8*(i%8);
    5cf4:	00064503          	lbu	a0,0(a2)
    5cf8:	0077f713          	andi	a4,a5,7
    5cfc:	00371713          	slli	a4,a4,0x3
    5d00:	ff87f793          	andi	a5,a5,-8
    5d04:	fe070813          	addi	a6,a4,-32
    5d08:	40ee08b3          	sub	a7,t3,a4
    5d0c:	00f487b3          	add	a5,s1,a5
    5d10:	00160613          	addi	a2,a2,1
    5d14:	00155313          	srli	t1,a0,0x1
    5d18:	fa085ae3          	bgez	a6,5ccc <keccak_absorb+0xf8>
    5d1c:	01135833          	srl	a6,t1,a7
    5d20:	00e51533          	sll	a0,a0,a4
    5d24:	0007a883          	lw	a7,0(a5)
    5d28:	0047a703          	lw	a4,4(a5)
    5d2c:	00a8c533          	xor	a0,a7,a0
    5d30:	01074733          	xor	a4,a4,a6
    5d34:	00a7a023          	sw	a0,0(a5)
    5d38:	00e7a223          	sw	a4,4(a5)
  for(i=pos;i<pos+inlen;i++)
    5d3c:	fad61ae3          	bne	a2,a3,5cf0 <keccak_absorb+0x11c>

  return i;
}
    5d40:	01c12083          	lw	ra,28(sp)
    5d44:	01812403          	lw	s0,24(sp)
    5d48:	01412483          	lw	s1,20(sp)
    5d4c:	01012903          	lw	s2,16(sp)
    5d50:	00098513          	mv	a0,s3
    5d54:	00c12983          	lw	s3,12(sp)
    5d58:	02010113          	addi	sp,sp,32
    5d5c:	00008067          	ret
    5d60:	01c12083          	lw	ra,28(sp)
    5d64:	01812403          	lw	s0,24(sp)
  for(i=pos;i<pos+inlen;i++)
    5d68:	00058993          	mv	s3,a1
}
    5d6c:	01412483          	lw	s1,20(sp)
    5d70:	01012903          	lw	s2,16(sp)
    5d74:	00098513          	mv	a0,s3
    5d78:	00c12983          	lw	s3,12(sp)
    5d7c:	02010113          	addi	sp,sp,32
    5d80:	00008067          	ret

00005d84 <keccak_absorb_once.constprop.1>:
*              - unsigned int r: rate in bytes (e.g., 168 for SHAKE128)
*              - const uint8_t *in: pointer to input to be absorbed into s
*              - size_t inlen: length of input in bytes
*              - uint8_t p: domain-separation byte for different Keccak-derived functions
**************************************************/
static void keccak_absorb_once(uint64_t s[25],
    5d84:	fe010113          	addi	sp,sp,-32
    5d88:	01212823          	sw	s2,16(sp)
    5d8c:	01612023          	sw	s6,0(sp)
    5d90:	00060913          	mv	s2,a2
    5d94:	00058b13          	mv	s6,a1
                               uint8_t p)
{
  unsigned int i;

  for(i=0;i<25;i++)
    s[i] = 0;
    5d98:	0c800613          	li	a2,200
    5d9c:	00000593          	li	a1,0
static void keccak_absorb_once(uint64_t s[25],
    5da0:	00912a23          	sw	s1,20(sp)
    5da4:	01312623          	sw	s3,12(sp)
    5da8:	00112e23          	sw	ra,28(sp)
    5dac:	00812c23          	sw	s0,24(sp)
    5db0:	01412423          	sw	s4,8(sp)
    5db4:	01512223          	sw	s5,4(sp)
    5db8:	00050993          	mv	s3,a0
    5dbc:	00068493          	mv	s1,a3
    s[i] = 0;
    5dc0:	19c020ef          	jal	ra,7f5c <memset>

  while(inlen >= r) {
    5dc4:	08700793          	li	a5,135
    5dc8:	0b27f663          	bgeu	a5,s2,5e74 <keccak_absorb_once.constprop.1+0xf0>
    5dcc:	088b0a93          	addi	s5,s6,136
    5dd0:	000a8a13          	mv	s4,s5
    5dd4:	08700413          	li	s0,135
    for(i=0;i<r/8;i++)
    5dd8:	000b0793          	mv	a5,s6
    5ddc:	00098693          	mv	a3,s3
    r |= (uint64_t)x[i] << 8*i;
    5de0:	0017c703          	lbu	a4,1(a5)
    5de4:	0027ce03          	lbu	t3,2(a5)
    5de8:	0057c803          	lbu	a6,5(a5)
    5dec:	0047cf03          	lbu	t5,4(a5)
    5df0:	0067c503          	lbu	a0,6(a5)
    5df4:	0007ce83          	lbu	t4,0(a5)
    5df8:	0037c583          	lbu	a1,3(a5)
    5dfc:	0077c603          	lbu	a2,7(a5)
    5e00:	00871713          	slli	a4,a4,0x8
    5e04:	010e1e13          	slli	t3,t3,0x10
    5e08:	00881813          	slli	a6,a6,0x8
      s[i] ^= load64(in+8*i);
    5e0c:	0006a303          	lw	t1,0(a3)
    5e10:	0046a883          	lw	a7,4(a3)
    r |= (uint64_t)x[i] << 8*i;
    5e14:	01c76733          	or	a4,a4,t3
    5e18:	01e86833          	or	a6,a6,t5
    5e1c:	01051513          	slli	a0,a0,0x10
    5e20:	01d76733          	or	a4,a4,t4
    5e24:	01861613          	slli	a2,a2,0x18
    5e28:	01859593          	slli	a1,a1,0x18
    5e2c:	01056533          	or	a0,a0,a6
    5e30:	00e5e5b3          	or	a1,a1,a4
    5e34:	00a66733          	or	a4,a2,a0
      s[i] ^= load64(in+8*i);
    5e38:	00e8c733          	xor	a4,a7,a4
    5e3c:	00b34633          	xor	a2,t1,a1
    5e40:	00c6a023          	sw	a2,0(a3)
    5e44:	00e6a223          	sw	a4,4(a3)
    for(i=0;i<r/8;i++)
    5e48:	00878793          	addi	a5,a5,8
    5e4c:	00868693          	addi	a3,a3,8
    5e50:	f94798e3          	bne	a5,s4,5de0 <keccak_absorb_once.constprop.1+0x5c>
    in += r;
    inlen -= r;
    KeccakF1600_StatePermute(s);
    5e54:	00098513          	mv	a0,s3
    inlen -= r;
    5e58:	f7890913          	addi	s2,s2,-136
    in += r;
    5e5c:	000a8b13          	mv	s6,s5
    KeccakF1600_StatePermute(s);
    5e60:	a69fd0ef          	jal	ra,38c8 <KeccakF1600_StatePermute>
  while(inlen >= r) {
    5e64:	088a0a13          	addi	s4,s4,136
    5e68:	01247663          	bgeu	s0,s2,5e74 <keccak_absorb_once.constprop.1+0xf0>
    5e6c:	088a8a93          	addi	s5,s5,136
    5e70:	f69ff06f          	j	5dd8 <keccak_absorb_once.constprop.1+0x54>
  }

  for(i=0;i<inlen;i++)
    5e74:	0e090c63          	beqz	s2,5f6c <keccak_absorb_once.constprop.1+0x1e8>
    5e78:	00000693          	li	a3,0
    s[i/8] ^= (uint64_t)in[i] << 8*(i%8);
    5e7c:	01f00893          	li	a7,31
    5e80:	02c0006f          	j	5eac <keccak_absorb_once.constprop.1+0x128>
    5e84:	00072803          	lw	a6,0(a4)
    5e88:	00472583          	lw	a1,4(a4)
    5e8c:	00c51633          	sll	a2,a0,a2
    5e90:	00000513          	li	a0,0
    5e94:	00a84533          	xor	a0,a6,a0
    5e98:	00c5c633          	xor	a2,a1,a2
  for(i=0;i<inlen;i++)
    5e9c:	00168693          	addi	a3,a3,1
    s[i/8] ^= (uint64_t)in[i] << 8*(i%8);
    5ea0:	00a72023          	sw	a0,0(a4)
    5ea4:	00c72223          	sw	a2,4(a4)
  for(i=0;i<inlen;i++)
    5ea8:	04d90a63          	beq	s2,a3,5efc <keccak_absorb_once.constprop.1+0x178>
    s[i/8] ^= (uint64_t)in[i] << 8*(i%8);
    5eac:	0076f593          	andi	a1,a3,7
    5eb0:	00359593          	slli	a1,a1,0x3
    5eb4:	ff86f713          	andi	a4,a3,-8
    5eb8:	00db0533          	add	a0,s6,a3
    5ebc:	fe058613          	addi	a2,a1,-32
    5ec0:	00054503          	lbu	a0,0(a0)
    5ec4:	40b887b3          	sub	a5,a7,a1
    5ec8:	00e98733          	add	a4,s3,a4
    5ecc:	fa065ce3          	bgez	a2,5e84 <keccak_absorb_once.constprop.1+0x100>
    5ed0:	00072803          	lw	a6,0(a4)
    5ed4:	00155613          	srli	a2,a0,0x1
    5ed8:	00b51533          	sll	a0,a0,a1
    5edc:	00472583          	lw	a1,4(a4)
    5ee0:	00f65633          	srl	a2,a2,a5
    5ee4:	00a84533          	xor	a0,a6,a0
    5ee8:	00c5c633          	xor	a2,a1,a2
  for(i=0;i<inlen;i++)
    5eec:	00168693          	addi	a3,a3,1
    s[i/8] ^= (uint64_t)in[i] << 8*(i%8);
    5ef0:	00a72023          	sw	a0,0(a4)
    5ef4:	00c72223          	sw	a2,4(a4)
  for(i=0;i<inlen;i++)
    5ef8:	fad91ae3          	bne	s2,a3,5eac <keccak_absorb_once.constprop.1+0x128>

  s[i/8] ^= (uint64_t)p << 8*(i%8);
    5efc:	00797713          	andi	a4,s2,7
    5f00:	ff897793          	andi	a5,s2,-8
    5f04:	00371913          	slli	s2,a4,0x3
    5f08:	fe090713          	addi	a4,s2,-32
    5f0c:	00f987b3          	add	a5,s3,a5
    5f10:	06074063          	bltz	a4,5f70 <keccak_absorb_once.constprop.1+0x1ec>
    5f14:	00e49733          	sll	a4,s1,a4
    5f18:	00000493          	li	s1,0
    5f1c:	0007a603          	lw	a2,0(a5)
    5f20:	0047a683          	lw	a3,4(a5)
  s[(r-1)/8] ^= 1ULL << 63;
}
    5f24:	01c12083          	lw	ra,28(sp)
  s[i/8] ^= (uint64_t)p << 8*(i%8);
    5f28:	00964633          	xor	a2,a2,s1
    5f2c:	00e6c733          	xor	a4,a3,a4
    5f30:	00e7a223          	sw	a4,4(a5)
    5f34:	00c7a023          	sw	a2,0(a5)
  s[(r-1)/8] ^= 1ULL << 63;
    5f38:	0849a783          	lw	a5,132(s3)
}
    5f3c:	01812403          	lw	s0,24(sp)
  s[(r-1)/8] ^= 1ULL << 63;
    5f40:	80000737          	lui	a4,0x80000
    5f44:	00e7c7b3          	xor	a5,a5,a4
    5f48:	08f9a223          	sw	a5,132(s3)
}
    5f4c:	01412483          	lw	s1,20(sp)
    5f50:	01012903          	lw	s2,16(sp)
    5f54:	00c12983          	lw	s3,12(sp)
    5f58:	00812a03          	lw	s4,8(sp)
    5f5c:	00412a83          	lw	s5,4(sp)
    5f60:	00012b03          	lw	s6,0(sp)
    5f64:	02010113          	addi	sp,sp,32
    5f68:	00008067          	ret
  for(i=0;i<inlen;i++)
    5f6c:	00098793          	mv	a5,s3
  s[i/8] ^= (uint64_t)p << 8*(i%8);
    5f70:	01f00693          	li	a3,31
    5f74:	0014d713          	srli	a4,s1,0x1
    5f78:	412686b3          	sub	a3,a3,s2
    5f7c:	00d75733          	srl	a4,a4,a3
    5f80:	012494b3          	sll	s1,s1,s2
    5f84:	f99ff06f          	j	5f1c <keccak_absorb_once.constprop.1+0x198>

00005f88 <keccak_absorb_once.constprop.2>:
static void keccak_absorb_once(uint64_t s[25],
    5f88:	fe010113          	addi	sp,sp,-32
    5f8c:	00912a23          	sw	s1,20(sp)
    5f90:	01512223          	sw	s5,4(sp)
    5f94:	00060493          	mv	s1,a2
    5f98:	00058a93          	mv	s5,a1
    s[i] = 0;
    5f9c:	0c800613          	li	a2,200
    5fa0:	00000593          	li	a1,0
static void keccak_absorb_once(uint64_t s[25],
    5fa4:	01212823          	sw	s2,16(sp)
    5fa8:	00112e23          	sw	ra,28(sp)
    5fac:	00812c23          	sw	s0,24(sp)
    5fb0:	01312623          	sw	s3,12(sp)
    5fb4:	01412423          	sw	s4,8(sp)
    5fb8:	00050913          	mv	s2,a0
    s[i] = 0;
    5fbc:	7a1010ef          	jal	ra,7f5c <memset>
  while(inlen >= r) {
    5fc0:	0a700793          	li	a5,167
    5fc4:	0a97f663          	bgeu	a5,s1,6070 <keccak_absorb_once.constprop.2+0xe8>
    5fc8:	0a8a8a13          	addi	s4,s5,168
    5fcc:	000a0993          	mv	s3,s4
    5fd0:	0a700413          	li	s0,167
    for(i=0;i<r/8;i++)
    5fd4:	000a8793          	mv	a5,s5
    5fd8:	00090693          	mv	a3,s2
    r |= (uint64_t)x[i] << 8*i;
    5fdc:	0017c703          	lbu	a4,1(a5)
    5fe0:	0027ce03          	lbu	t3,2(a5)
    5fe4:	0057c803          	lbu	a6,5(a5)
    5fe8:	0047cf03          	lbu	t5,4(a5)
    5fec:	0067c503          	lbu	a0,6(a5)
    5ff0:	0007ce83          	lbu	t4,0(a5)
    5ff4:	0037c583          	lbu	a1,3(a5)
    5ff8:	0077c603          	lbu	a2,7(a5)
    5ffc:	00871713          	slli	a4,a4,0x8
    6000:	010e1e13          	slli	t3,t3,0x10
    6004:	00881813          	slli	a6,a6,0x8
      s[i] ^= load64(in+8*i);
    6008:	0006a303          	lw	t1,0(a3)
    600c:	0046a883          	lw	a7,4(a3)
    r |= (uint64_t)x[i] << 8*i;
    6010:	01c76733          	or	a4,a4,t3
    6014:	01e86833          	or	a6,a6,t5
    6018:	01051513          	slli	a0,a0,0x10
    601c:	01d76733          	or	a4,a4,t4
    6020:	01861613          	slli	a2,a2,0x18
    6024:	01859593          	slli	a1,a1,0x18
    6028:	01056533          	or	a0,a0,a6
    602c:	00e5e5b3          	or	a1,a1,a4
    6030:	00a66733          	or	a4,a2,a0
      s[i] ^= load64(in+8*i);
    6034:	00e8c733          	xor	a4,a7,a4
    6038:	00b34633          	xor	a2,t1,a1
    603c:	00c6a023          	sw	a2,0(a3)
    6040:	00e6a223          	sw	a4,4(a3)
    for(i=0;i<r/8;i++)
    6044:	00878793          	addi	a5,a5,8
    6048:	00868693          	addi	a3,a3,8
    604c:	f93798e3          	bne	a5,s3,5fdc <keccak_absorb_once.constprop.2+0x54>
    KeccakF1600_StatePermute(s);
    6050:	00090513          	mv	a0,s2
    inlen -= r;
    6054:	f5848493          	addi	s1,s1,-168
    in += r;
    6058:	000a0a93          	mv	s5,s4
    KeccakF1600_StatePermute(s);
    605c:	86dfd0ef          	jal	ra,38c8 <KeccakF1600_StatePermute>
  while(inlen >= r) {
    6060:	0a898993          	addi	s3,s3,168
    6064:	00947663          	bgeu	s0,s1,6070 <keccak_absorb_once.constprop.2+0xe8>
    6068:	0a8a0a13          	addi	s4,s4,168
    606c:	f69ff06f          	j	5fd4 <keccak_absorb_once.constprop.2+0x4c>
  for(i=0;i<inlen;i++)
    6070:	10048863          	beqz	s1,6180 <keccak_absorb_once.constprop.2+0x1f8>
    6074:	00000693          	li	a3,0
    s[i/8] ^= (uint64_t)in[i] << 8*(i%8);
    6078:	01f00893          	li	a7,31
    607c:	02c0006f          	j	60a8 <keccak_absorb_once.constprop.2+0x120>
    6080:	00072803          	lw	a6,0(a4) # 80000000 <_end_of_memory+0x7ffd0000>
    6084:	00472583          	lw	a1,4(a4)
    6088:	00c51633          	sll	a2,a0,a2
    608c:	00000513          	li	a0,0
    6090:	00a84533          	xor	a0,a6,a0
    6094:	00c5c633          	xor	a2,a1,a2
  for(i=0;i<inlen;i++)
    6098:	00168693          	addi	a3,a3,1
    s[i/8] ^= (uint64_t)in[i] << 8*(i%8);
    609c:	00a72023          	sw	a0,0(a4)
    60a0:	00c72223          	sw	a2,4(a4)
  for(i=0;i<inlen;i++)
    60a4:	04d48a63          	beq	s1,a3,60f8 <keccak_absorb_once.constprop.2+0x170>
    s[i/8] ^= (uint64_t)in[i] << 8*(i%8);
    60a8:	0076f593          	andi	a1,a3,7
    60ac:	00359593          	slli	a1,a1,0x3
    60b0:	ff86f713          	andi	a4,a3,-8
    60b4:	00da8533          	add	a0,s5,a3
    60b8:	fe058613          	addi	a2,a1,-32
    60bc:	00054503          	lbu	a0,0(a0)
    60c0:	40b887b3          	sub	a5,a7,a1
    60c4:	00e90733          	add	a4,s2,a4
    60c8:	fa065ce3          	bgez	a2,6080 <keccak_absorb_once.constprop.2+0xf8>
    60cc:	00072803          	lw	a6,0(a4)
    60d0:	00155613          	srli	a2,a0,0x1
    60d4:	00b51533          	sll	a0,a0,a1
    60d8:	00472583          	lw	a1,4(a4)
    60dc:	00f65633          	srl	a2,a2,a5
    60e0:	00a84533          	xor	a0,a6,a0
    60e4:	00c5c633          	xor	a2,a1,a2
  for(i=0;i<inlen;i++)
    60e8:	00168693          	addi	a3,a3,1
    s[i/8] ^= (uint64_t)in[i] << 8*(i%8);
    60ec:	00a72023          	sw	a0,0(a4)
    60f0:	00c72223          	sw	a2,4(a4)
  for(i=0;i<inlen;i++)
    60f4:	fad49ae3          	bne	s1,a3,60a8 <keccak_absorb_once.constprop.2+0x120>
  s[i/8] ^= (uint64_t)p << 8*(i%8);
    60f8:	0074f613          	andi	a2,s1,7
    60fc:	00361613          	slli	a2,a2,0x3
    6100:	ff84f793          	andi	a5,s1,-8
    6104:	fe060693          	addi	a3,a2,-32
    6108:	00f907b3          	add	a5,s2,a5
    610c:	0406ce63          	bltz	a3,6168 <keccak_absorb_once.constprop.2+0x1e0>
    6110:	01f00713          	li	a4,31
    6114:	00d71733          	sll	a4,a4,a3
    6118:	00000693          	li	a3,0
    611c:	0007a583          	lw	a1,0(a5)
    6120:	0047a603          	lw	a2,4(a5)
}
    6124:	01c12083          	lw	ra,28(sp)
  s[i/8] ^= (uint64_t)p << 8*(i%8);
    6128:	00d5c6b3          	xor	a3,a1,a3
    612c:	00e64733          	xor	a4,a2,a4
    6130:	00e7a223          	sw	a4,4(a5)
    6134:	00d7a023          	sw	a3,0(a5)
  s[(r-1)/8] ^= 1ULL << 63;
    6138:	0a492783          	lw	a5,164(s2)
}
    613c:	01812403          	lw	s0,24(sp)
  s[(r-1)/8] ^= 1ULL << 63;
    6140:	80000737          	lui	a4,0x80000
    6144:	00e7c7b3          	xor	a5,a5,a4
    6148:	0af92223          	sw	a5,164(s2)
}
    614c:	01412483          	lw	s1,20(sp)
    6150:	01012903          	lw	s2,16(sp)
    6154:	00c12983          	lw	s3,12(sp)
    6158:	00812a03          	lw	s4,8(sp)
    615c:	00412a83          	lw	s5,4(sp)
    6160:	02010113          	addi	sp,sp,32
    6164:	00008067          	ret
  s[i/8] ^= (uint64_t)p << 8*(i%8);
    6168:	01f00693          	li	a3,31
    616c:	40c685b3          	sub	a1,a3,a2
    6170:	00f00713          	li	a4,15
    6174:	00b75733          	srl	a4,a4,a1
    6178:	00c696b3          	sll	a3,a3,a2
    617c:	fa1ff06f          	j	611c <keccak_absorb_once.constprop.2+0x194>
  for(i=0;i<inlen;i++)
    6180:	00090793          	mv	a5,s2
    6184:	01f00693          	li	a3,31
    6188:	00000713          	li	a4,0
    618c:	f91ff06f          	j	611c <keccak_absorb_once.constprop.2+0x194>

00006190 <pqcrystals_dilithium_fips202_ref_shake128_init>:
* Description: Initilizes Keccak state for use as SHAKE128 XOF
*
* Arguments:   - keccak_state *state: pointer to (uninitialized) Keccak state
**************************************************/
void shake128_init(keccak_state *state)
{
    6190:	ff010113          	addi	sp,sp,-16
    s[i] = 0;
    6194:	0c800613          	li	a2,200
    6198:	00000593          	li	a1,0
{
    619c:	00812423          	sw	s0,8(sp)
    61a0:	00112623          	sw	ra,12(sp)
    61a4:	00050413          	mv	s0,a0
    s[i] = 0;
    61a8:	5b5010ef          	jal	ra,7f5c <memset>
  keccak_init(state->s);
  state->pos = 0;
}
    61ac:	00c12083          	lw	ra,12(sp)
  state->pos = 0;
    61b0:	0c042423          	sw	zero,200(s0)
}
    61b4:	00812403          	lw	s0,8(sp)
    61b8:	01010113          	addi	sp,sp,16
    61bc:	00008067          	ret

000061c0 <pqcrystals_dilithium_fips202_ref_shake128_absorb>:
* Arguments:   - keccak_state *state: pointer to (initialized) output Keccak state
*              - const uint8_t *in: pointer to input to be absorbed into s
*              - size_t inlen: length of input in bytes
**************************************************/
void shake128_absorb(keccak_state *state, const uint8_t *in, size_t inlen)
{
    61c0:	00058693          	mv	a3,a1
  state->pos = keccak_absorb(state->s, state->pos, SHAKE128_RATE, in, inlen);
    61c4:	0c852583          	lw	a1,200(a0)
{
    61c8:	ff010113          	addi	sp,sp,-16
    61cc:	00060713          	mv	a4,a2
  state->pos = keccak_absorb(state->s, state->pos, SHAKE128_RATE, in, inlen);
    61d0:	0a800613          	li	a2,168
{
    61d4:	00812423          	sw	s0,8(sp)
    61d8:	00112623          	sw	ra,12(sp)
    61dc:	00050413          	mv	s0,a0
  state->pos = keccak_absorb(state->s, state->pos, SHAKE128_RATE, in, inlen);
    61e0:	9f5ff0ef          	jal	ra,5bd4 <keccak_absorb>
}
    61e4:	00c12083          	lw	ra,12(sp)
  state->pos = keccak_absorb(state->s, state->pos, SHAKE128_RATE, in, inlen);
    61e8:	0ca42423          	sw	a0,200(s0)
}
    61ec:	00812403          	lw	s0,8(sp)
    61f0:	01010113          	addi	sp,sp,16
    61f4:	00008067          	ret

000061f8 <pqcrystals_dilithium_fips202_ref_shake128_finalize>:
*
* Arguments:   - keccak_state *state: pointer to Keccak state
**************************************************/
void shake128_finalize(keccak_state *state)
{
  keccak_finalize(state->s, state->pos, SHAKE128_RATE, 0x1F);
    61f8:	0c852783          	lw	a5,200(a0)
  s[pos/8] ^= (uint64_t)p << 8*(pos%8);
    61fc:	0077f713          	andi	a4,a5,7
    6200:	00371713          	slli	a4,a4,0x3
    6204:	ff87f793          	andi	a5,a5,-8
    6208:	fe070693          	addi	a3,a4,-32 # 7fffffe0 <_end_of_memory+0x7ffcffe0>
    620c:	00f507b3          	add	a5,a0,a5
    6210:	0406c263          	bltz	a3,6254 <pqcrystals_dilithium_fips202_ref_shake128_finalize+0x5c>
    6214:	01f00613          	li	a2,31
    6218:	00d61633          	sll	a2,a2,a3
    621c:	00000593          	li	a1,0
    6220:	0007a683          	lw	a3,0(a5)
    6224:	0047a703          	lw	a4,4(a5)
    6228:	00b6c6b3          	xor	a3,a3,a1
    622c:	00c74733          	xor	a4,a4,a2
    6230:	00e7a223          	sw	a4,4(a5)
    6234:	00d7a023          	sw	a3,0(a5)
  s[r/8-1] ^= 1ULL << 63;
    6238:	0a452783          	lw	a5,164(a0)
  state->pos = SHAKE128_RATE;
    623c:	0a800713          	li	a4,168
    6240:	0ce52423          	sw	a4,200(a0)
  s[r/8-1] ^= 1ULL << 63;
    6244:	80000737          	lui	a4,0x80000
    6248:	00e7c7b3          	xor	a5,a5,a4
    624c:	0af52223          	sw	a5,164(a0)
}
    6250:	00008067          	ret
  s[pos/8] ^= (uint64_t)p << 8*(pos%8);
    6254:	01f00593          	li	a1,31
    6258:	40e586b3          	sub	a3,a1,a4
    625c:	00f00613          	li	a2,15
    6260:	00d65633          	srl	a2,a2,a3
    6264:	00e595b3          	sll	a1,a1,a4
    6268:	fb9ff06f          	j	6220 <pqcrystals_dilithium_fips202_ref_shake128_finalize+0x28>

0000626c <pqcrystals_dilithium_fips202_ref_shake128_squeeze>:
* Arguments:   - uint8_t *out: pointer to output blocks
*              - size_t outlen : number of bytes to be squeezed (written to output)
*              - keccak_state *s: pointer to input/output Keccak state
**************************************************/
void shake128_squeeze(uint8_t *out, size_t outlen, keccak_state *state)
{
    626c:	fe010113          	addi	sp,sp,-32
    6270:	00912a23          	sw	s1,20(sp)
    6274:	00112e23          	sw	ra,28(sp)
    6278:	00812c23          	sw	s0,24(sp)
    627c:	01212823          	sw	s2,16(sp)
    6280:	01312623          	sw	s3,12(sp)
    6284:	01412423          	sw	s4,8(sp)
  state->pos = keccak_squeeze(out, outlen, state->s, state->pos, SHAKE128_RATE);
    6288:	0c862783          	lw	a5,200(a2)
{
    628c:	00060493          	mv	s1,a2
  while(outlen) {
    6290:	0a058e63          	beqz	a1,634c <pqcrystals_dilithium_fips202_ref_shake128_squeeze+0xe0>
    if(pos == r) {
    6294:	0a800713          	li	a4,168
    6298:	00058a13          	mv	s4,a1
    629c:	00050413          	mv	s0,a0
    62a0:	0ce78863          	beq	a5,a4,6370 <pqcrystals_dilithium_fips202_ref_shake128_squeeze+0x104>
    for(i=pos;i < r && i < pos+outlen; i++)
    62a4:	0a700713          	li	a4,167
    62a8:	08f76c63          	bltu	a4,a5,6340 <pqcrystals_dilithium_fips202_ref_shake128_squeeze+0xd4>
    62ac:	00fa0633          	add	a2,s4,a5
    62b0:	00060893          	mv	a7,a2
    62b4:	fec7fce3          	bgeu	a5,a2,62ac <pqcrystals_dilithium_fips202_ref_shake128_squeeze+0x40>
      *out++ = s[i/8] >> 8*(i%8);
    62b8:	01f00993          	li	s3,31
    for(i=pos;i < r && i < pos+outlen; i++)
    62bc:	0a700913          	li	s2,167
    62c0:	01c0006f          	j	62dc <pqcrystals_dilithium_fips202_ref_shake128_squeeze+0x70>
      *out++ = s[i/8] >> 8*(i%8);
    62c4:	00472703          	lw	a4,4(a4) # 80000004 <_end_of_memory+0x7ffd0004>
    for(i=pos;i < r && i < pos+outlen; i++)
    62c8:	00178793          	addi	a5,a5,1
      *out++ = s[i/8] >> 8*(i%8);
    62cc:	00b75733          	srl	a4,a4,a1
    62d0:	fee40fa3          	sb	a4,-1(s0)
    for(i=pos;i < r && i < pos+outlen; i++)
    62d4:	04f96663          	bltu	s2,a5,6320 <pqcrystals_dilithium_fips202_ref_shake128_squeeze+0xb4>
    62d8:	07178663          	beq	a5,a7,6344 <pqcrystals_dilithium_fips202_ref_shake128_squeeze+0xd8>
      *out++ = s[i/8] >> 8*(i%8);
    62dc:	0077f693          	andi	a3,a5,7
    62e0:	00369693          	slli	a3,a3,0x3
    62e4:	ff87f713          	andi	a4,a5,-8
    62e8:	fe068593          	addi	a1,a3,-32
    62ec:	40d98833          	sub	a6,s3,a3
    62f0:	00e48733          	add	a4,s1,a4
    62f4:	00140413          	addi	s0,s0,1
    62f8:	fc05d6e3          	bgez	a1,62c4 <pqcrystals_dilithium_fips202_ref_shake128_squeeze+0x58>
    62fc:	00472583          	lw	a1,4(a4)
    6300:	00072703          	lw	a4,0(a4)
    for(i=pos;i < r && i < pos+outlen; i++)
    6304:	00178793          	addi	a5,a5,1
      *out++ = s[i/8] >> 8*(i%8);
    6308:	00159593          	slli	a1,a1,0x1
    630c:	010595b3          	sll	a1,a1,a6
    6310:	00d75733          	srl	a4,a4,a3
    6314:	00e5e733          	or	a4,a1,a4
    6318:	fee40fa3          	sb	a4,-1(s0)
    for(i=pos;i < r && i < pos+outlen; i++)
    631c:	faf97ee3          	bgeu	s2,a5,62d8 <pqcrystals_dilithium_fips202_ref_shake128_squeeze+0x6c>
    outlen -= i-pos;
    6320:	40f60a33          	sub	s4,a2,a5
  while(outlen) {
    6324:	02f60463          	beq	a2,a5,634c <pqcrystals_dilithium_fips202_ref_shake128_squeeze+0xe0>
      KeccakF1600_StatePermute(s);
    6328:	00048513          	mv	a0,s1
    632c:	d9cfd0ef          	jal	ra,38c8 <KeccakF1600_StatePermute>
    6330:	000a0893          	mv	a7,s4
      pos = 0;
    6334:	00000793          	li	a5,0
    6338:	000a0613          	mv	a2,s4
    633c:	fa1ff06f          	j	62dc <pqcrystals_dilithium_fips202_ref_shake128_squeeze+0x70>
  while(outlen) {
    6340:	0000006f          	j	6340 <pqcrystals_dilithium_fips202_ref_shake128_squeeze+0xd4>
    outlen -= i-pos;
    6344:	40f60a33          	sub	s4,a2,a5
  while(outlen) {
    6348:	f6f612e3          	bne	a2,a5,62ac <pqcrystals_dilithium_fips202_ref_shake128_squeeze+0x40>
}
    634c:	01c12083          	lw	ra,28(sp)
    6350:	01812403          	lw	s0,24(sp)
  state->pos = keccak_squeeze(out, outlen, state->s, state->pos, SHAKE128_RATE);
    6354:	0cf4a423          	sw	a5,200(s1)
}
    6358:	01012903          	lw	s2,16(sp)
    635c:	01412483          	lw	s1,20(sp)
    6360:	00c12983          	lw	s3,12(sp)
    6364:	00812a03          	lw	s4,8(sp)
    6368:	02010113          	addi	sp,sp,32
    636c:	00008067          	ret
      KeccakF1600_StatePermute(s);
    6370:	00060513          	mv	a0,a2
    6374:	d54fd0ef          	jal	ra,38c8 <KeccakF1600_StatePermute>
    6378:	000a0893          	mv	a7,s4
      pos = 0;
    637c:	00000793          	li	a5,0
    6380:	000a0613          	mv	a2,s4
    6384:	f35ff06f          	j	62b8 <pqcrystals_dilithium_fips202_ref_shake128_squeeze+0x4c>

00006388 <pqcrystals_dilithium_fips202_ref_shake128_absorb_once>:
* Arguments:   - keccak_state *state: pointer to (uninitialized) output Keccak state
*              - const uint8_t *in: pointer to input to be absorbed into s
*              - size_t inlen: length of input in bytes
**************************************************/
void shake128_absorb_once(keccak_state *state, const uint8_t *in, size_t inlen)
{
    6388:	ff010113          	addi	sp,sp,-16
    638c:	00812423          	sw	s0,8(sp)
    6390:	00112623          	sw	ra,12(sp)
    6394:	00050413          	mv	s0,a0
  keccak_absorb_once(state->s, SHAKE128_RATE, in, inlen, 0x1F);
    6398:	bf1ff0ef          	jal	ra,5f88 <keccak_absorb_once.constprop.2>
  state->pos = SHAKE128_RATE;
    639c:	0a800793          	li	a5,168
}
    63a0:	00c12083          	lw	ra,12(sp)
  state->pos = SHAKE128_RATE;
    63a4:	0cf42423          	sw	a5,200(s0)
}
    63a8:	00812403          	lw	s0,8(sp)
    63ac:	01010113          	addi	sp,sp,16
    63b0:	00008067          	ret

000063b4 <pqcrystals_dilithium_fips202_ref_shake128_squeezeblocks>:
  while(nblocks) {
    63b4:	0c058463          	beqz	a1,647c <pqcrystals_dilithium_fips202_ref_shake128_squeezeblocks+0xc8>
* Arguments:   - uint8_t *out: pointer to output blocks
*              - size_t nblocks: number of blocks to be squeezed (written to output)
*              - keccak_state *s: pointer to input/output Keccak state
**************************************************/
void shake128_squeezeblocks(uint8_t *out, size_t nblocks, keccak_state *state)
{
    63b8:	fe010113          	addi	sp,sp,-32
    63bc:	01412423          	sw	s4,8(sp)
    63c0:	0a850a13          	addi	s4,a0,168
    63c4:	00812c23          	sw	s0,24(sp)
    63c8:	00912a23          	sw	s1,20(sp)
    63cc:	01212823          	sw	s2,16(sp)
    63d0:	01312623          	sw	s3,12(sp)
    63d4:	00112e23          	sw	ra,28(sp)
    63d8:	00058993          	mv	s3,a1
    63dc:	00050413          	mv	s0,a0
    63e0:	00060913          	mv	s2,a2
    63e4:	000a0493          	mv	s1,s4
    KeccakF1600_StatePermute(s);
    63e8:	00090513          	mv	a0,s2
    63ec:	cdcfd0ef          	jal	ra,38c8 <KeccakF1600_StatePermute>
    for(i=0;i<r/8;i++)
    63f0:	00090613          	mv	a2,s2
    63f4:	00040793          	mv	a5,s0
      store64(out+8*i, s[i]);
    63f8:	00062683          	lw	a3,0(a2)
    63fc:	00462703          	lw	a4,4(a2)
    for(i=0;i<r/8;i++)
    6400:	00878793          	addi	a5,a5,8
    x[i] = u >> 8*i;
    6404:	0086de93          	srli	t4,a3,0x8
    6408:	0106de13          	srli	t3,a3,0x10
    640c:	0186d313          	srli	t1,a3,0x18
    6410:	00875893          	srli	a7,a4,0x8
    6414:	01075813          	srli	a6,a4,0x10
    6418:	01875593          	srli	a1,a4,0x18
    641c:	ffd78ca3          	sb	t4,-7(a5)
    6420:	ffc78d23          	sb	t3,-6(a5)
    6424:	fe678da3          	sb	t1,-5(a5)
    6428:	ff178ea3          	sb	a7,-3(a5)
    642c:	ff078f23          	sb	a6,-2(a5)
    6430:	feb78fa3          	sb	a1,-1(a5)
    6434:	fed78c23          	sb	a3,-8(a5)
    6438:	fee78e23          	sb	a4,-4(a5)
    for(i=0;i<r/8;i++)
    643c:	00860613          	addi	a2,a2,8
    6440:	faf49ce3          	bne	s1,a5,63f8 <pqcrystals_dilithium_fips202_ref_shake128_squeezeblocks+0x44>
    nblocks -= 1;
    6444:	fff98993          	addi	s3,s3,-1
    out += r;
    6448:	000a0413          	mv	s0,s4
  while(nblocks) {
    644c:	0a848493          	addi	s1,s1,168
    6450:	00098663          	beqz	s3,645c <pqcrystals_dilithium_fips202_ref_shake128_squeezeblocks+0xa8>
    6454:	0a8a0a13          	addi	s4,s4,168
    6458:	f91ff06f          	j	63e8 <pqcrystals_dilithium_fips202_ref_shake128_squeezeblocks+0x34>
  keccak_squeezeblocks(out, nblocks, state->s, SHAKE128_RATE);
}
    645c:	01c12083          	lw	ra,28(sp)
    6460:	01812403          	lw	s0,24(sp)
    6464:	01412483          	lw	s1,20(sp)
    6468:	01012903          	lw	s2,16(sp)
    646c:	00c12983          	lw	s3,12(sp)
    6470:	00812a03          	lw	s4,8(sp)
    6474:	02010113          	addi	sp,sp,32
    6478:	00008067          	ret
    647c:	00008067          	ret

00006480 <pqcrystals_dilithium_fips202_ref_shake256_init>:
*
* Description: Initilizes Keccak state for use as SHAKE256 XOF
*
* Arguments:   - keccak_state *state: pointer to (uninitialized) Keccak state
**************************************************/
void shake256_init(keccak_state *state)
    6480:	ff010113          	addi	sp,sp,-16
    6484:	0c800613          	li	a2,200
    6488:	00000593          	li	a1,0
    648c:	00812423          	sw	s0,8(sp)
    6490:	00112623          	sw	ra,12(sp)
    6494:	00050413          	mv	s0,a0
    6498:	2c5010ef          	jal	ra,7f5c <memset>
    649c:	00c12083          	lw	ra,12(sp)
    64a0:	0c042423          	sw	zero,200(s0)
    64a4:	00812403          	lw	s0,8(sp)
    64a8:	01010113          	addi	sp,sp,16
    64ac:	00008067          	ret

000064b0 <pqcrystals_dilithium_fips202_ref_shake256_absorb>:
* Arguments:   - keccak_state *state: pointer to (initialized) output Keccak state
*              - const uint8_t *in: pointer to input to be absorbed into s
*              - size_t inlen: length of input in bytes
**************************************************/
void shake256_absorb(keccak_state *state, const uint8_t *in, size_t inlen)
{
    64b0:	00058693          	mv	a3,a1
  state->pos = keccak_absorb(state->s, state->pos, SHAKE256_RATE, in, inlen);
    64b4:	0c852583          	lw	a1,200(a0)
{
    64b8:	ff010113          	addi	sp,sp,-16
    64bc:	00060713          	mv	a4,a2
  state->pos = keccak_absorb(state->s, state->pos, SHAKE256_RATE, in, inlen);
    64c0:	08800613          	li	a2,136
{
    64c4:	00812423          	sw	s0,8(sp)
    64c8:	00112623          	sw	ra,12(sp)
    64cc:	00050413          	mv	s0,a0
  state->pos = keccak_absorb(state->s, state->pos, SHAKE256_RATE, in, inlen);
    64d0:	f04ff0ef          	jal	ra,5bd4 <keccak_absorb>
}
    64d4:	00c12083          	lw	ra,12(sp)
  state->pos = keccak_absorb(state->s, state->pos, SHAKE256_RATE, in, inlen);
    64d8:	0ca42423          	sw	a0,200(s0)
}
    64dc:	00812403          	lw	s0,8(sp)
    64e0:	01010113          	addi	sp,sp,16
    64e4:	00008067          	ret

000064e8 <pqcrystals_dilithium_fips202_ref_shake256_finalize>:
*
* Arguments:   - keccak_state *state: pointer to Keccak state
**************************************************/
void shake256_finalize(keccak_state *state)
{
  keccak_finalize(state->s, state->pos, SHAKE256_RATE, 0x1F);
    64e8:	0c852783          	lw	a5,200(a0)
  s[pos/8] ^= (uint64_t)p << 8*(pos%8);
    64ec:	0077f713          	andi	a4,a5,7
    64f0:	00371713          	slli	a4,a4,0x3
    64f4:	ff87f793          	andi	a5,a5,-8
    64f8:	fe070693          	addi	a3,a4,-32
    64fc:	00f507b3          	add	a5,a0,a5
    6500:	0406c263          	bltz	a3,6544 <pqcrystals_dilithium_fips202_ref_shake256_finalize+0x5c>
    6504:	01f00613          	li	a2,31
    6508:	00d61633          	sll	a2,a2,a3
    650c:	00000593          	li	a1,0
    6510:	0007a683          	lw	a3,0(a5)
    6514:	0047a703          	lw	a4,4(a5)
    6518:	00b6c6b3          	xor	a3,a3,a1
    651c:	00c74733          	xor	a4,a4,a2
    6520:	00e7a223          	sw	a4,4(a5)
    6524:	00d7a023          	sw	a3,0(a5)
  s[r/8-1] ^= 1ULL << 63;
    6528:	08452783          	lw	a5,132(a0)
  state->pos = SHAKE256_RATE;
    652c:	08800713          	li	a4,136
    6530:	0ce52423          	sw	a4,200(a0)
  s[r/8-1] ^= 1ULL << 63;
    6534:	80000737          	lui	a4,0x80000
    6538:	00e7c7b3          	xor	a5,a5,a4
    653c:	08f52223          	sw	a5,132(a0)
}
    6540:	00008067          	ret
  s[pos/8] ^= (uint64_t)p << 8*(pos%8);
    6544:	01f00593          	li	a1,31
    6548:	40e586b3          	sub	a3,a1,a4
    654c:	00f00613          	li	a2,15
    6550:	00d65633          	srl	a2,a2,a3
    6554:	00e595b3          	sll	a1,a1,a4
    6558:	fb9ff06f          	j	6510 <pqcrystals_dilithium_fips202_ref_shake256_finalize+0x28>

0000655c <pqcrystals_dilithium_fips202_ref_shake256_squeeze>:
* Arguments:   - uint8_t *out: pointer to output blocks
*              - size_t outlen : number of bytes to be squeezed (written to output)
*              - keccak_state *s: pointer to input/output Keccak state
**************************************************/
void shake256_squeeze(uint8_t *out, size_t outlen, keccak_state *state)
{
    655c:	fe010113          	addi	sp,sp,-32
    6560:	00912a23          	sw	s1,20(sp)
    6564:	00112e23          	sw	ra,28(sp)
    6568:	00812c23          	sw	s0,24(sp)
    656c:	01212823          	sw	s2,16(sp)
    6570:	01312623          	sw	s3,12(sp)
    6574:	01412423          	sw	s4,8(sp)
  state->pos = keccak_squeeze(out, outlen, state->s, state->pos, SHAKE256_RATE);
    6578:	0c862783          	lw	a5,200(a2)
{
    657c:	00060493          	mv	s1,a2
  while(outlen) {
    6580:	0a058e63          	beqz	a1,663c <pqcrystals_dilithium_fips202_ref_shake256_squeeze+0xe0>
    if(pos == r) {
    6584:	08800713          	li	a4,136
    6588:	00058a13          	mv	s4,a1
    658c:	00050413          	mv	s0,a0
    6590:	0ce78863          	beq	a5,a4,6660 <pqcrystals_dilithium_fips202_ref_shake256_squeeze+0x104>
    for(i=pos;i < r && i < pos+outlen; i++)
    6594:	08700713          	li	a4,135
    6598:	08f76c63          	bltu	a4,a5,6630 <pqcrystals_dilithium_fips202_ref_shake256_squeeze+0xd4>
    659c:	00fa0633          	add	a2,s4,a5
    65a0:	00060893          	mv	a7,a2
    65a4:	fec7fce3          	bgeu	a5,a2,659c <pqcrystals_dilithium_fips202_ref_shake256_squeeze+0x40>
      *out++ = s[i/8] >> 8*(i%8);
    65a8:	01f00993          	li	s3,31
    for(i=pos;i < r && i < pos+outlen; i++)
    65ac:	08700913          	li	s2,135
    65b0:	01c0006f          	j	65cc <pqcrystals_dilithium_fips202_ref_shake256_squeeze+0x70>
      *out++ = s[i/8] >> 8*(i%8);
    65b4:	00472703          	lw	a4,4(a4) # 80000004 <_end_of_memory+0x7ffd0004>
    for(i=pos;i < r && i < pos+outlen; i++)
    65b8:	00178793          	addi	a5,a5,1
      *out++ = s[i/8] >> 8*(i%8);
    65bc:	00b75733          	srl	a4,a4,a1
    65c0:	fee40fa3          	sb	a4,-1(s0)
    for(i=pos;i < r && i < pos+outlen; i++)
    65c4:	04f96663          	bltu	s2,a5,6610 <pqcrystals_dilithium_fips202_ref_shake256_squeeze+0xb4>
    65c8:	07178663          	beq	a5,a7,6634 <pqcrystals_dilithium_fips202_ref_shake256_squeeze+0xd8>
      *out++ = s[i/8] >> 8*(i%8);
    65cc:	0077f693          	andi	a3,a5,7
    65d0:	00369693          	slli	a3,a3,0x3
    65d4:	ff87f713          	andi	a4,a5,-8
    65d8:	fe068593          	addi	a1,a3,-32
    65dc:	40d98833          	sub	a6,s3,a3
    65e0:	00e48733          	add	a4,s1,a4
    65e4:	00140413          	addi	s0,s0,1
    65e8:	fc05d6e3          	bgez	a1,65b4 <pqcrystals_dilithium_fips202_ref_shake256_squeeze+0x58>
    65ec:	00472583          	lw	a1,4(a4)
    65f0:	00072703          	lw	a4,0(a4)
    for(i=pos;i < r && i < pos+outlen; i++)
    65f4:	00178793          	addi	a5,a5,1
      *out++ = s[i/8] >> 8*(i%8);
    65f8:	00159593          	slli	a1,a1,0x1
    65fc:	010595b3          	sll	a1,a1,a6
    6600:	00d75733          	srl	a4,a4,a3
    6604:	00e5e733          	or	a4,a1,a4
    6608:	fee40fa3          	sb	a4,-1(s0)
    for(i=pos;i < r && i < pos+outlen; i++)
    660c:	faf97ee3          	bgeu	s2,a5,65c8 <pqcrystals_dilithium_fips202_ref_shake256_squeeze+0x6c>
    outlen -= i-pos;
    6610:	40f60a33          	sub	s4,a2,a5
  while(outlen) {
    6614:	02f60463          	beq	a2,a5,663c <pqcrystals_dilithium_fips202_ref_shake256_squeeze+0xe0>
      KeccakF1600_StatePermute(s);
    6618:	00048513          	mv	a0,s1
    661c:	aacfd0ef          	jal	ra,38c8 <KeccakF1600_StatePermute>
    6620:	000a0893          	mv	a7,s4
      pos = 0;
    6624:	00000793          	li	a5,0
    6628:	000a0613          	mv	a2,s4
    662c:	fa1ff06f          	j	65cc <pqcrystals_dilithium_fips202_ref_shake256_squeeze+0x70>
  while(outlen) {
    6630:	0000006f          	j	6630 <pqcrystals_dilithium_fips202_ref_shake256_squeeze+0xd4>
    outlen -= i-pos;
    6634:	40f60a33          	sub	s4,a2,a5
  while(outlen) {
    6638:	f6f612e3          	bne	a2,a5,659c <pqcrystals_dilithium_fips202_ref_shake256_squeeze+0x40>
}
    663c:	01c12083          	lw	ra,28(sp)
    6640:	01812403          	lw	s0,24(sp)
  state->pos = keccak_squeeze(out, outlen, state->s, state->pos, SHAKE256_RATE);
    6644:	0cf4a423          	sw	a5,200(s1)
}
    6648:	01012903          	lw	s2,16(sp)
    664c:	01412483          	lw	s1,20(sp)
    6650:	00c12983          	lw	s3,12(sp)
    6654:	00812a03          	lw	s4,8(sp)
    6658:	02010113          	addi	sp,sp,32
    665c:	00008067          	ret
      KeccakF1600_StatePermute(s);
    6660:	00060513          	mv	a0,a2
    6664:	a64fd0ef          	jal	ra,38c8 <KeccakF1600_StatePermute>
    6668:	000a0893          	mv	a7,s4
      pos = 0;
    666c:	00000793          	li	a5,0
    6670:	000a0613          	mv	a2,s4
    6674:	f35ff06f          	j	65a8 <pqcrystals_dilithium_fips202_ref_shake256_squeeze+0x4c>

00006678 <pqcrystals_dilithium_fips202_ref_shake256_absorb_once>:
* Arguments:   - keccak_state *state: pointer to (uninitialized) output Keccak state
*              - const uint8_t *in: pointer to input to be absorbed into s
*              - size_t inlen: length of input in bytes
**************************************************/
void shake256_absorb_once(keccak_state *state, const uint8_t *in, size_t inlen)
{
    6678:	ff010113          	addi	sp,sp,-16
  keccak_absorb_once(state->s, SHAKE256_RATE, in, inlen, 0x1F);
    667c:	01f00693          	li	a3,31
{
    6680:	00812423          	sw	s0,8(sp)
    6684:	00112623          	sw	ra,12(sp)
    6688:	00050413          	mv	s0,a0
  keccak_absorb_once(state->s, SHAKE256_RATE, in, inlen, 0x1F);
    668c:	ef8ff0ef          	jal	ra,5d84 <keccak_absorb_once.constprop.1>
  state->pos = SHAKE256_RATE;
    6690:	08800793          	li	a5,136
}
    6694:	00c12083          	lw	ra,12(sp)
  state->pos = SHAKE256_RATE;
    6698:	0cf42423          	sw	a5,200(s0)
}
    669c:	00812403          	lw	s0,8(sp)
    66a0:	01010113          	addi	sp,sp,16
    66a4:	00008067          	ret

000066a8 <pqcrystals_dilithium_fips202_ref_shake256_squeezeblocks>:
  while(nblocks) {
    66a8:	0c058463          	beqz	a1,6770 <pqcrystals_dilithium_fips202_ref_shake256_squeezeblocks+0xc8>
* Arguments:   - uint8_t *out: pointer to output blocks
*              - size_t nblocks: number of blocks to be squeezed (written to output)
*              - keccak_state *s: pointer to input/output Keccak state
**************************************************/
void shake256_squeezeblocks(uint8_t *out, size_t nblocks, keccak_state *state)
{
    66ac:	fe010113          	addi	sp,sp,-32
    66b0:	01412423          	sw	s4,8(sp)
    66b4:	08850a13          	addi	s4,a0,136
    66b8:	00812c23          	sw	s0,24(sp)
    66bc:	00912a23          	sw	s1,20(sp)
    66c0:	01212823          	sw	s2,16(sp)
    66c4:	01312623          	sw	s3,12(sp)
    66c8:	00112e23          	sw	ra,28(sp)
    66cc:	00058993          	mv	s3,a1
    66d0:	00050413          	mv	s0,a0
    66d4:	00060913          	mv	s2,a2
    66d8:	000a0493          	mv	s1,s4
    KeccakF1600_StatePermute(s);
    66dc:	00090513          	mv	a0,s2
    66e0:	9e8fd0ef          	jal	ra,38c8 <KeccakF1600_StatePermute>
    for(i=0;i<r/8;i++)
    66e4:	00090613          	mv	a2,s2
    66e8:	00040793          	mv	a5,s0
      store64(out+8*i, s[i]);
    66ec:	00062683          	lw	a3,0(a2)
    66f0:	00462703          	lw	a4,4(a2)
    for(i=0;i<r/8;i++)
    66f4:	00878793          	addi	a5,a5,8
    x[i] = u >> 8*i;
    66f8:	0086de93          	srli	t4,a3,0x8
    66fc:	0106de13          	srli	t3,a3,0x10
    6700:	0186d313          	srli	t1,a3,0x18
    6704:	00875893          	srli	a7,a4,0x8
    6708:	01075813          	srli	a6,a4,0x10
    670c:	01875593          	srli	a1,a4,0x18
    6710:	ffd78ca3          	sb	t4,-7(a5)
    6714:	ffc78d23          	sb	t3,-6(a5)
    6718:	fe678da3          	sb	t1,-5(a5)
    671c:	ff178ea3          	sb	a7,-3(a5)
    6720:	ff078f23          	sb	a6,-2(a5)
    6724:	feb78fa3          	sb	a1,-1(a5)
    6728:	fed78c23          	sb	a3,-8(a5)
    672c:	fee78e23          	sb	a4,-4(a5)
    for(i=0;i<r/8;i++)
    6730:	00860613          	addi	a2,a2,8
    6734:	faf49ce3          	bne	s1,a5,66ec <pqcrystals_dilithium_fips202_ref_shake256_squeezeblocks+0x44>
    nblocks -= 1;
    6738:	fff98993          	addi	s3,s3,-1
    out += r;
    673c:	000a0413          	mv	s0,s4
  while(nblocks) {
    6740:	08848493          	addi	s1,s1,136
    6744:	00098663          	beqz	s3,6750 <pqcrystals_dilithium_fips202_ref_shake256_squeezeblocks+0xa8>
    6748:	088a0a13          	addi	s4,s4,136
    674c:	f91ff06f          	j	66dc <pqcrystals_dilithium_fips202_ref_shake256_squeezeblocks+0x34>
  keccak_squeezeblocks(out, nblocks, state->s, SHAKE256_RATE);
}
    6750:	01c12083          	lw	ra,28(sp)
    6754:	01812403          	lw	s0,24(sp)
    6758:	01412483          	lw	s1,20(sp)
    675c:	01012903          	lw	s2,16(sp)
    6760:	00c12983          	lw	s3,12(sp)
    6764:	00812a03          	lw	s4,8(sp)
    6768:	02010113          	addi	sp,sp,32
    676c:	00008067          	ret
    6770:	00008067          	ret

00006774 <pqcrystals_dilithium_fips202_ref_shake128>:
*              - size_t outlen: requested output length in bytes
*              - const uint8_t *in: pointer to input
*              - size_t inlen: length of input in bytes
**************************************************/
void shake128(uint8_t *out, size_t outlen, const uint8_t *in, size_t inlen)
{
    6774:	f1010113          	addi	sp,sp,-240
    6778:	00060793          	mv	a5,a2
    677c:	0e812423          	sw	s0,232(sp)
    6780:	0e912223          	sw	s1,228(sp)
    6784:	00050413          	mv	s0,a0
    6788:	00058493          	mv	s1,a1
  keccak_absorb_once(state->s, SHAKE128_RATE, in, inlen, 0x1F);
    678c:	00068613          	mv	a2,a3
    6790:	00078593          	mv	a1,a5
    6794:	00010513          	mv	a0,sp
{
    6798:	0f212023          	sw	s2,224(sp)
    679c:	0d312e23          	sw	s3,220(sp)
    67a0:	0d412c23          	sw	s4,216(sp)
    67a4:	0d512a23          	sw	s5,212(sp)
    67a8:	0e112623          	sw	ra,236(sp)
  keccak_absorb_once(state->s, SHAKE128_RATE, in, inlen, 0x1F);
    67ac:	fdcff0ef          	jal	ra,5f88 <keccak_absorb_once.constprop.2>
  state->pos = SHAKE128_RATE;
    67b0:	0a800793          	li	a5,168
  size_t nblocks;
  keccak_state state;

  shake128_absorb_once(&state, in, inlen);
  nblocks = outlen/SHAKE128_RATE;
    67b4:	02f4d933          	divu	s2,s1,a5
  state->pos = SHAKE128_RATE;
    67b8:	0cf12423          	sw	a5,200(sp)
  while(nblocks) {
    67bc:	0a700793          	li	a5,167
    67c0:	00040a93          	mv	s5,s0
    67c4:	0a810993          	addi	s3,sp,168
    67c8:	00090a13          	mv	s4,s2
    67cc:	0697f663          	bgeu	a5,s1,6838 <pqcrystals_dilithium_fips202_ref_shake128+0xc4>
    KeccakF1600_StatePermute(s);
    67d0:	00010513          	mv	a0,sp
    67d4:	8f4fd0ef          	jal	ra,38c8 <KeccakF1600_StatePermute>
    for(i=0;i<r/8;i++)
    67d8:	00010713          	mv	a4,sp
    67dc:	000a8793          	mv	a5,s5
      store64(out+8*i, s[i]);
    67e0:	00072603          	lw	a2,0(a4)
    67e4:	00472683          	lw	a3,4(a4)
    for(i=0;i<r/8;i++)
    67e8:	00870713          	addi	a4,a4,8
    x[i] = u >> 8*i;
    67ec:	00865e13          	srli	t3,a2,0x8
    67f0:	01065313          	srli	t1,a2,0x10
    67f4:	01865893          	srli	a7,a2,0x18
    67f8:	0086d813          	srli	a6,a3,0x8
    67fc:	0106d513          	srli	a0,a3,0x10
    6800:	0186d593          	srli	a1,a3,0x18
    6804:	00c78023          	sb	a2,0(a5)
    6808:	01c780a3          	sb	t3,1(a5)
    680c:	00678123          	sb	t1,2(a5)
    6810:	011781a3          	sb	a7,3(a5)
    6814:	00d78223          	sb	a3,4(a5)
    6818:	010782a3          	sb	a6,5(a5)
    681c:	00a78323          	sb	a0,6(a5)
    6820:	00b783a3          	sb	a1,7(a5)
    for(i=0;i<r/8;i++)
    6824:	00878793          	addi	a5,a5,8
    6828:	fae99ce3          	bne	s3,a4,67e0 <pqcrystals_dilithium_fips202_ref_shake128+0x6c>
    nblocks -= 1;
    682c:	fffa0a13          	addi	s4,s4,-1
    out += r;
    6830:	0a8a8a93          	addi	s5,s5,168
  while(nblocks) {
    6834:	f80a1ee3          	bnez	s4,67d0 <pqcrystals_dilithium_fips202_ref_shake128+0x5c>
  shake128_squeezeblocks(out, nblocks, &state);
  outlen -= nblocks*SHAKE128_RATE;
    6838:	0a800793          	li	a5,168
    683c:	02f4f9b3          	remu	s3,s1,a5
    6840:	02f907b3          	mul	a5,s2,a5
  out += nblocks*SHAKE128_RATE;
    6844:	00f40433          	add	s0,s0,a5
  while(outlen) {
    6848:	0c098463          	beqz	s3,6910 <pqcrystals_dilithium_fips202_ref_shake128+0x19c>
      KeccakF1600_StatePermute(s);
    684c:	00010513          	mv	a0,sp
    6850:	878fd0ef          	jal	ra,38c8 <KeccakF1600_StatePermute>
      *out++ = s[i/8] >> 8*(i%8);
    6854:	01f00493          	li	s1,31
      KeccakF1600_StatePermute(s);
    6858:	00098513          	mv	a0,s3
      pos = 0;
    685c:	00000813          	li	a6,0
    for(i=pos;i < r && i < pos+outlen; i++)
    6860:	0a800913          	li	s2,168
      pos = 0;
    6864:	00080713          	mv	a4,a6
    6868:	01c0006f          	j	6884 <pqcrystals_dilithium_fips202_ref_shake128+0x110>
      *out++ = s[i/8] >> 8*(i%8);
    686c:	f347a783          	lw	a5,-204(a5)
    for(i=pos;i < r && i < pos+outlen; i++)
    6870:	00170713          	addi	a4,a4,1
      *out++ = s[i/8] >> 8*(i%8);
    6874:	00c7d7b3          	srl	a5,a5,a2
    6878:	fef40fa3          	sb	a5,-1(s0)
    for(i=pos;i < r && i < pos+outlen; i++)
    687c:	05270863          	beq	a4,s2,68cc <pqcrystals_dilithium_fips202_ref_shake128+0x158>
    6880:	06a70663          	beq	a4,a0,68ec <pqcrystals_dilithium_fips202_ref_shake128+0x178>
      *out++ = s[i/8] >> 8*(i%8);
    6884:	00777693          	andi	a3,a4,7
    6888:	00369693          	slli	a3,a3,0x3
    688c:	ff877793          	andi	a5,a4,-8
    6890:	0d078793          	addi	a5,a5,208
    6894:	fe068613          	addi	a2,a3,-32
    6898:	40d485b3          	sub	a1,s1,a3
    689c:	002787b3          	add	a5,a5,sp
    68a0:	00140413          	addi	s0,s0,1
    68a4:	fc0654e3          	bgez	a2,686c <pqcrystals_dilithium_fips202_ref_shake128+0xf8>
    68a8:	f347a603          	lw	a2,-204(a5)
    68ac:	f307a783          	lw	a5,-208(a5)
    for(i=pos;i < r && i < pos+outlen; i++)
    68b0:	00170713          	addi	a4,a4,1
      *out++ = s[i/8] >> 8*(i%8);
    68b4:	00161613          	slli	a2,a2,0x1
    68b8:	00b61633          	sll	a2,a2,a1
    68bc:	00d7d7b3          	srl	a5,a5,a3
    68c0:	00f667b3          	or	a5,a2,a5
    68c4:	fef40fa3          	sb	a5,-1(s0)
    for(i=pos;i < r && i < pos+outlen; i++)
    68c8:	fb271ce3          	bne	a4,s2,6880 <pqcrystals_dilithium_fips202_ref_shake128+0x10c>
    outlen -= i-pos;
    68cc:	010989b3          	add	s3,s3,a6
    68d0:	f5898993          	addi	s3,s3,-168
  while(outlen) {
    68d4:	02098e63          	beqz	s3,6910 <pqcrystals_dilithium_fips202_ref_shake128+0x19c>
      KeccakF1600_StatePermute(s);
    68d8:	00010513          	mv	a0,sp
    68dc:	fedfc0ef          	jal	ra,38c8 <KeccakF1600_StatePermute>
    68e0:	00098513          	mv	a0,s3
      pos = 0;
    68e4:	00000813          	li	a6,0
    68e8:	f7dff06f          	j	6864 <pqcrystals_dilithium_fips202_ref_shake128+0xf0>
    outlen -= i-pos;
    68ec:	01098833          	add	a6,s3,a6
    68f0:	40e809b3          	sub	s3,a6,a4
  while(outlen) {
    68f4:	00e80e63          	beq	a6,a4,6910 <pqcrystals_dilithium_fips202_ref_shake128+0x19c>
    68f8:	01370533          	add	a0,a4,s3
    for(i=pos;i < r && i < pos+outlen; i++)
    68fc:	00070813          	mv	a6,a4
    6900:	00050793          	mv	a5,a0
    6904:	f6f760e3          	bltu	a4,a5,6864 <pqcrystals_dilithium_fips202_ref_shake128+0xf0>
    6908:	f4f76ee3          	bltu	a4,a5,6864 <pqcrystals_dilithium_fips202_ref_shake128+0xf0>
    690c:	ff9ff06f          	j	6904 <pqcrystals_dilithium_fips202_ref_shake128+0x190>
  shake128_squeeze(out, outlen, &state);
}
    6910:	0ec12083          	lw	ra,236(sp)
    6914:	0e812403          	lw	s0,232(sp)
    6918:	0e412483          	lw	s1,228(sp)
    691c:	0e012903          	lw	s2,224(sp)
    6920:	0dc12983          	lw	s3,220(sp)
    6924:	0d812a03          	lw	s4,216(sp)
    6928:	0d412a83          	lw	s5,212(sp)
    692c:	0f010113          	addi	sp,sp,240
    6930:	00008067          	ret

00006934 <pqcrystals_dilithium_fips202_ref_shake256>:
*              - size_t outlen: requested output length in bytes
*              - const uint8_t *in: pointer to input
*              - size_t inlen: length of input in bytes
**************************************************/
void shake256(uint8_t *out, size_t outlen, const uint8_t *in, size_t inlen)
{
    6934:	f1010113          	addi	sp,sp,-240
    6938:	00060793          	mv	a5,a2
    693c:	0e812423          	sw	s0,232(sp)
    6940:	0e912223          	sw	s1,228(sp)
    6944:	00068613          	mv	a2,a3
    6948:	00050413          	mv	s0,a0
    694c:	00058493          	mv	s1,a1
  keccak_absorb_once(state->s, SHAKE256_RATE, in, inlen, 0x1F);
    6950:	01f00693          	li	a3,31
    6954:	00078593          	mv	a1,a5
    6958:	00010513          	mv	a0,sp
{
    695c:	0f212023          	sw	s2,224(sp)
    6960:	0d312e23          	sw	s3,220(sp)
    6964:	0d412c23          	sw	s4,216(sp)
    6968:	0d512a23          	sw	s5,212(sp)
    696c:	0e112623          	sw	ra,236(sp)
  keccak_absorb_once(state->s, SHAKE256_RATE, in, inlen, 0x1F);
    6970:	c14ff0ef          	jal	ra,5d84 <keccak_absorb_once.constprop.1>
  state->pos = SHAKE256_RATE;
    6974:	08800793          	li	a5,136
  size_t nblocks;
  keccak_state state;

  shake256_absorb_once(&state, in, inlen);
  nblocks = outlen/SHAKE256_RATE;
    6978:	02f4d933          	divu	s2,s1,a5
  state->pos = SHAKE256_RATE;
    697c:	0cf12423          	sw	a5,200(sp)
  while(nblocks) {
    6980:	08700793          	li	a5,135
    6984:	00040a93          	mv	s5,s0
    6988:	08810993          	addi	s3,sp,136
    698c:	00090a13          	mv	s4,s2
    6990:	0697f663          	bgeu	a5,s1,69fc <pqcrystals_dilithium_fips202_ref_shake256+0xc8>
    KeccakF1600_StatePermute(s);
    6994:	00010513          	mv	a0,sp
    6998:	f31fc0ef          	jal	ra,38c8 <KeccakF1600_StatePermute>
    for(i=0;i<r/8;i++)
    699c:	00010713          	mv	a4,sp
    69a0:	000a8793          	mv	a5,s5
      store64(out+8*i, s[i]);
    69a4:	00072603          	lw	a2,0(a4)
    69a8:	00472683          	lw	a3,4(a4)
    for(i=0;i<r/8;i++)
    69ac:	00870713          	addi	a4,a4,8
    x[i] = u >> 8*i;
    69b0:	00865e13          	srli	t3,a2,0x8
    69b4:	01065313          	srli	t1,a2,0x10
    69b8:	01865893          	srli	a7,a2,0x18
    69bc:	0086d813          	srli	a6,a3,0x8
    69c0:	0106d513          	srli	a0,a3,0x10
    69c4:	0186d593          	srli	a1,a3,0x18
    69c8:	00c78023          	sb	a2,0(a5)
    69cc:	01c780a3          	sb	t3,1(a5)
    69d0:	00678123          	sb	t1,2(a5)
    69d4:	011781a3          	sb	a7,3(a5)
    69d8:	00d78223          	sb	a3,4(a5)
    69dc:	010782a3          	sb	a6,5(a5)
    69e0:	00a78323          	sb	a0,6(a5)
    69e4:	00b783a3          	sb	a1,7(a5)
    for(i=0;i<r/8;i++)
    69e8:	00878793          	addi	a5,a5,8
    69ec:	fae99ce3          	bne	s3,a4,69a4 <pqcrystals_dilithium_fips202_ref_shake256+0x70>
    nblocks -= 1;
    69f0:	fffa0a13          	addi	s4,s4,-1
    out += r;
    69f4:	088a8a93          	addi	s5,s5,136
  while(nblocks) {
    69f8:	f80a1ee3          	bnez	s4,6994 <pqcrystals_dilithium_fips202_ref_shake256+0x60>
  shake256_squeezeblocks(out, nblocks, &state);
  outlen -= nblocks*SHAKE256_RATE;
    69fc:	08800993          	li	s3,136
    6a00:	0334f9b3          	remu	s3,s1,s3
    6a04:	00491793          	slli	a5,s2,0x4
    6a08:	012787b3          	add	a5,a5,s2
    6a0c:	00379793          	slli	a5,a5,0x3
  out += nblocks*SHAKE256_RATE;
    6a10:	00f40433          	add	s0,s0,a5
  while(outlen) {
    6a14:	0c098463          	beqz	s3,6adc <pqcrystals_dilithium_fips202_ref_shake256+0x1a8>
      KeccakF1600_StatePermute(s);
    6a18:	00010513          	mv	a0,sp
    6a1c:	eadfc0ef          	jal	ra,38c8 <KeccakF1600_StatePermute>
      *out++ = s[i/8] >> 8*(i%8);
    6a20:	01f00913          	li	s2,31
      KeccakF1600_StatePermute(s);
    6a24:	00098513          	mv	a0,s3
      pos = 0;
    6a28:	00000813          	li	a6,0
    for(i=pos;i < r && i < pos+outlen; i++)
    6a2c:	08800493          	li	s1,136
      pos = 0;
    6a30:	00080713          	mv	a4,a6
    6a34:	01c0006f          	j	6a50 <pqcrystals_dilithium_fips202_ref_shake256+0x11c>
      *out++ = s[i/8] >> 8*(i%8);
    6a38:	f347a783          	lw	a5,-204(a5)
    for(i=pos;i < r && i < pos+outlen; i++)
    6a3c:	00170713          	addi	a4,a4,1
      *out++ = s[i/8] >> 8*(i%8);
    6a40:	00c7d7b3          	srl	a5,a5,a2
    6a44:	fef40fa3          	sb	a5,-1(s0)
    for(i=pos;i < r && i < pos+outlen; i++)
    6a48:	04970863          	beq	a4,s1,6a98 <pqcrystals_dilithium_fips202_ref_shake256+0x164>
    6a4c:	06a70663          	beq	a4,a0,6ab8 <pqcrystals_dilithium_fips202_ref_shake256+0x184>
      *out++ = s[i/8] >> 8*(i%8);
    6a50:	00777693          	andi	a3,a4,7
    6a54:	00369693          	slli	a3,a3,0x3
    6a58:	ff877793          	andi	a5,a4,-8
    6a5c:	0d078793          	addi	a5,a5,208
    6a60:	fe068613          	addi	a2,a3,-32
    6a64:	40d905b3          	sub	a1,s2,a3
    6a68:	002787b3          	add	a5,a5,sp
    6a6c:	00140413          	addi	s0,s0,1
    6a70:	fc0654e3          	bgez	a2,6a38 <pqcrystals_dilithium_fips202_ref_shake256+0x104>
    6a74:	f347a603          	lw	a2,-204(a5)
    6a78:	f307a783          	lw	a5,-208(a5)
    for(i=pos;i < r && i < pos+outlen; i++)
    6a7c:	00170713          	addi	a4,a4,1
      *out++ = s[i/8] >> 8*(i%8);
    6a80:	00161613          	slli	a2,a2,0x1
    6a84:	00b61633          	sll	a2,a2,a1
    6a88:	00d7d7b3          	srl	a5,a5,a3
    6a8c:	00f667b3          	or	a5,a2,a5
    6a90:	fef40fa3          	sb	a5,-1(s0)
    for(i=pos;i < r && i < pos+outlen; i++)
    6a94:	fa971ce3          	bne	a4,s1,6a4c <pqcrystals_dilithium_fips202_ref_shake256+0x118>
    outlen -= i-pos;
    6a98:	01098833          	add	a6,s3,a6
    6a9c:	f7880993          	addi	s3,a6,-136
  while(outlen) {
    6aa0:	02098e63          	beqz	s3,6adc <pqcrystals_dilithium_fips202_ref_shake256+0x1a8>
      KeccakF1600_StatePermute(s);
    6aa4:	00010513          	mv	a0,sp
    6aa8:	e21fc0ef          	jal	ra,38c8 <KeccakF1600_StatePermute>
    6aac:	00098513          	mv	a0,s3
      pos = 0;
    6ab0:	00000813          	li	a6,0
    6ab4:	f7dff06f          	j	6a30 <pqcrystals_dilithium_fips202_ref_shake256+0xfc>
    outlen -= i-pos;
    6ab8:	01098833          	add	a6,s3,a6
    6abc:	40e809b3          	sub	s3,a6,a4
  while(outlen) {
    6ac0:	00e80e63          	beq	a6,a4,6adc <pqcrystals_dilithium_fips202_ref_shake256+0x1a8>
    6ac4:	01370533          	add	a0,a4,s3
    for(i=pos;i < r && i < pos+outlen; i++)
    6ac8:	00070813          	mv	a6,a4
    6acc:	00050793          	mv	a5,a0
    6ad0:	f6f760e3          	bltu	a4,a5,6a30 <pqcrystals_dilithium_fips202_ref_shake256+0xfc>
    6ad4:	f4f76ee3          	bltu	a4,a5,6a30 <pqcrystals_dilithium_fips202_ref_shake256+0xfc>
    6ad8:	ff9ff06f          	j	6ad0 <pqcrystals_dilithium_fips202_ref_shake256+0x19c>
  shake256_squeeze(out, outlen, &state);
}
    6adc:	0ec12083          	lw	ra,236(sp)
    6ae0:	0e812403          	lw	s0,232(sp)
    6ae4:	0e412483          	lw	s1,228(sp)
    6ae8:	0e012903          	lw	s2,224(sp)
    6aec:	0dc12983          	lw	s3,220(sp)
    6af0:	0d812a03          	lw	s4,216(sp)
    6af4:	0d412a83          	lw	s5,212(sp)
    6af8:	0f010113          	addi	sp,sp,240
    6afc:	00008067          	ret

00006b00 <pqcrystals_dilithium_fips202_ref_sha3_256>:
* Arguments:   - uint8_t *h: pointer to output (32 bytes)
*              - const uint8_t *in: pointer to input
*              - size_t inlen: length of input in bytes
**************************************************/
void sha3_256(uint8_t h[32], const uint8_t *in, size_t inlen)
{
    6b00:	ef010113          	addi	sp,sp,-272
    6b04:	10812423          	sw	s0,264(sp)
  unsigned int i;
  uint64_t s[25];

  keccak_absorb_once(s, SHA3_256_RATE, in, inlen, 0x06);
    6b08:	00600693          	li	a3,6
{
    6b0c:	00050413          	mv	s0,a0
  keccak_absorb_once(s, SHA3_256_RATE, in, inlen, 0x06);
    6b10:	00810513          	addi	a0,sp,8
{
    6b14:	10112623          	sw	ra,268(sp)
    6b18:	10912223          	sw	s1,260(sp)
    6b1c:	11212023          	sw	s2,256(sp)
    6b20:	0f312e23          	sw	s3,252(sp)
    6b24:	0f412c23          	sw	s4,248(sp)
    6b28:	0f512a23          	sw	s5,244(sp)
    6b2c:	0f612823          	sw	s6,240(sp)
    6b30:	0f712623          	sw	s7,236(sp)
    6b34:	0f812423          	sw	s8,232(sp)
    6b38:	0f912223          	sw	s9,228(sp)
    6b3c:	0fa12023          	sw	s10,224(sp)
    6b40:	0db12e23          	sw	s11,220(sp)
  keccak_absorb_once(s, SHA3_256_RATE, in, inlen, 0x06);
    6b44:	a40ff0ef          	jal	ra,5d84 <keccak_absorb_once.constprop.1>
  KeccakF1600_StatePermute(s);
    6b48:	00810513          	addi	a0,sp,8
    6b4c:	d7dfc0ef          	jal	ra,38c8 <KeccakF1600_StatePermute>
  for(i=0;i<4;i++)
    store64(h+8*i,s[i]);
    6b50:	00812883          	lw	a7,8(sp)
    6b54:	00c12803          	lw	a6,12(sp)
    6b58:	01012503          	lw	a0,16(sp)
    6b5c:	01412583          	lw	a1,20(sp)
    6b60:	01812603          	lw	a2,24(sp)
    6b64:	01c12683          	lw	a3,28(sp)
    6b68:	02412783          	lw	a5,36(sp)
    6b6c:	02012703          	lw	a4,32(sp)
    x[i] = u >> 8*i;
    6b70:	0088dd93          	srli	s11,a7,0x8
    6b74:	0108dd13          	srli	s10,a7,0x10
    6b78:	0188dc93          	srli	s9,a7,0x18
    6b7c:	00885c13          	srli	s8,a6,0x8
    6b80:	01085b93          	srli	s7,a6,0x10
    6b84:	01885b13          	srli	s6,a6,0x18
    6b88:	00855a93          	srli	s5,a0,0x8
    6b8c:	01055a13          	srli	s4,a0,0x10
    6b90:	01855993          	srli	s3,a0,0x18
    6b94:	0085d913          	srli	s2,a1,0x8
    6b98:	0105d493          	srli	s1,a1,0x10
    6b9c:	0185d393          	srli	t2,a1,0x18
    6ba0:	00865293          	srli	t0,a2,0x8
    6ba4:	01065f93          	srli	t6,a2,0x10
    6ba8:	01865f13          	srli	t5,a2,0x18
    6bac:	0086de93          	srli	t4,a3,0x8
    6bb0:	0106de13          	srli	t3,a3,0x10
    6bb4:	0186d313          	srli	t1,a3,0x18
    6bb8:	01140023          	sb	a7,0(s0)
    6bbc:	01b400a3          	sb	s11,1(s0)
    6bc0:	01a40123          	sb	s10,2(s0)
    6bc4:	019401a3          	sb	s9,3(s0)
    6bc8:	01040223          	sb	a6,4(s0)
    6bcc:	018402a3          	sb	s8,5(s0)
    6bd0:	01740323          	sb	s7,6(s0)
    6bd4:	016403a3          	sb	s6,7(s0)
    6bd8:	00a40423          	sb	a0,8(s0)
    6bdc:	015404a3          	sb	s5,9(s0)
    6be0:	01440523          	sb	s4,10(s0)
    6be4:	013405a3          	sb	s3,11(s0)
    6be8:	00b40623          	sb	a1,12(s0)
    6bec:	012406a3          	sb	s2,13(s0)
    6bf0:	00940723          	sb	s1,14(s0)
    6bf4:	00c40823          	sb	a2,16(s0)
    6bf8:	00d40a23          	sb	a3,20(s0)
    6bfc:	007407a3          	sb	t2,15(s0)
    6c00:	005408a3          	sb	t0,17(s0)
    6c04:	01f40923          	sb	t6,18(s0)
    6c08:	01e409a3          	sb	t5,19(s0)
    6c0c:	01d40aa3          	sb	t4,21(s0)
    6c10:	01c40b23          	sb	t3,22(s0)
    6c14:	00640ba3          	sb	t1,23(s0)
    6c18:	00875893          	srli	a7,a4,0x8
    6c1c:	01075813          	srli	a6,a4,0x10
    6c20:	01875513          	srli	a0,a4,0x18
    6c24:	0087d593          	srli	a1,a5,0x8
    6c28:	0107d613          	srli	a2,a5,0x10
    6c2c:	0187d693          	srli	a3,a5,0x18
    6c30:	00e40c23          	sb	a4,24(s0)
    6c34:	01140ca3          	sb	a7,25(s0)
    6c38:	01040d23          	sb	a6,26(s0)
    6c3c:	00a40da3          	sb	a0,27(s0)
    6c40:	00f40e23          	sb	a5,28(s0)
    6c44:	00b40ea3          	sb	a1,29(s0)
    6c48:	00c40f23          	sb	a2,30(s0)
    6c4c:	00d40fa3          	sb	a3,31(s0)
}
    6c50:	10c12083          	lw	ra,268(sp)
    6c54:	10812403          	lw	s0,264(sp)
    6c58:	10412483          	lw	s1,260(sp)
    6c5c:	10012903          	lw	s2,256(sp)
    6c60:	0fc12983          	lw	s3,252(sp)
    6c64:	0f812a03          	lw	s4,248(sp)
    6c68:	0f412a83          	lw	s5,244(sp)
    6c6c:	0f012b03          	lw	s6,240(sp)
    6c70:	0ec12b83          	lw	s7,236(sp)
    6c74:	0e812c03          	lw	s8,232(sp)
    6c78:	0e412c83          	lw	s9,228(sp)
    6c7c:	0e012d03          	lw	s10,224(sp)
    6c80:	0dc12d83          	lw	s11,220(sp)
    6c84:	11010113          	addi	sp,sp,272
    6c88:	00008067          	ret

00006c8c <pqcrystals_dilithium_fips202_ref_sha3_512>:
* Arguments:   - uint8_t *h: pointer to output (64 bytes)
*              - const uint8_t *in: pointer to input
*              - size_t inlen: length of input in bytes
**************************************************/
void sha3_512(uint8_t h[64], const uint8_t *in, size_t inlen)
{
    6c8c:	ef010113          	addi	sp,sp,-272
    6c90:	10912223          	sw	s1,260(sp)
    6c94:	11212023          	sw	s2,256(sp)
    6c98:	0f512a23          	sw	s5,244(sp)
    6c9c:	00050493          	mv	s1,a0
    6ca0:	00058a93          	mv	s5,a1
    6ca4:	00060913          	mv	s2,a2
    s[i] = 0;
    6ca8:	00000593          	li	a1,0
    6cac:	0c800613          	li	a2,200
    6cb0:	00810513          	addi	a0,sp,8
{
    6cb4:	10112623          	sw	ra,268(sp)
    6cb8:	10812423          	sw	s0,264(sp)
    6cbc:	0f312e23          	sw	s3,252(sp)
    6cc0:	0f412c23          	sw	s4,248(sp)
    6cc4:	0f612823          	sw	s6,240(sp)
    6cc8:	0f712623          	sw	s7,236(sp)
    6ccc:	0f812423          	sw	s8,232(sp)
    6cd0:	0f912223          	sw	s9,228(sp)
    6cd4:	0fa12023          	sw	s10,224(sp)
    6cd8:	0db12e23          	sw	s11,220(sp)
    s[i] = 0;
    6cdc:	280010ef          	jal	ra,7f5c <memset>
  while(inlen >= r) {
    6ce0:	04700793          	li	a5,71
    6ce4:	0b27f663          	bgeu	a5,s2,6d90 <pqcrystals_dilithium_fips202_ref_sha3_512+0x104>
    6ce8:	048a8a13          	addi	s4,s5,72
    6cec:	000a0993          	mv	s3,s4
    6cf0:	04700413          	li	s0,71
    for(i=0;i<r/8;i++)
    6cf4:	000a8793          	mv	a5,s5
    6cf8:	00810693          	addi	a3,sp,8
    r |= (uint64_t)x[i] << 8*i;
    6cfc:	0017c703          	lbu	a4,1(a5)
    6d00:	0027ce03          	lbu	t3,2(a5)
    6d04:	0057c803          	lbu	a6,5(a5)
    6d08:	0047cf03          	lbu	t5,4(a5)
    6d0c:	0067c503          	lbu	a0,6(a5)
    6d10:	0007ce83          	lbu	t4,0(a5)
    6d14:	0037c583          	lbu	a1,3(a5)
    6d18:	0077c603          	lbu	a2,7(a5)
    6d1c:	00871713          	slli	a4,a4,0x8
    6d20:	010e1e13          	slli	t3,t3,0x10
    6d24:	00881813          	slli	a6,a6,0x8
      s[i] ^= load64(in+8*i);
    6d28:	0006a303          	lw	t1,0(a3)
    6d2c:	0046a883          	lw	a7,4(a3)
    r |= (uint64_t)x[i] << 8*i;
    6d30:	01c76733          	or	a4,a4,t3
    6d34:	01e86833          	or	a6,a6,t5
    6d38:	01051513          	slli	a0,a0,0x10
    6d3c:	01d76733          	or	a4,a4,t4
    6d40:	01861613          	slli	a2,a2,0x18
    6d44:	01859593          	slli	a1,a1,0x18
    6d48:	01056533          	or	a0,a0,a6
    6d4c:	00e5e5b3          	or	a1,a1,a4
    6d50:	00a66733          	or	a4,a2,a0
      s[i] ^= load64(in+8*i);
    6d54:	00e8c733          	xor	a4,a7,a4
    6d58:	00b34633          	xor	a2,t1,a1
    6d5c:	00c6a023          	sw	a2,0(a3)
    6d60:	00e6a223          	sw	a4,4(a3)
    for(i=0;i<r/8;i++)
    6d64:	00878793          	addi	a5,a5,8
    6d68:	00868693          	addi	a3,a3,8
    6d6c:	f8f998e3          	bne	s3,a5,6cfc <pqcrystals_dilithium_fips202_ref_sha3_512+0x70>
    KeccakF1600_StatePermute(s);
    6d70:	00810513          	addi	a0,sp,8
    inlen -= r;
    6d74:	fb890913          	addi	s2,s2,-72
    in += r;
    6d78:	000a0a93          	mv	s5,s4
    KeccakF1600_StatePermute(s);
    6d7c:	b4dfc0ef          	jal	ra,38c8 <KeccakF1600_StatePermute>
  while(inlen >= r) {
    6d80:	04898993          	addi	s3,s3,72
    6d84:	01247663          	bgeu	s0,s2,6d90 <pqcrystals_dilithium_fips202_ref_sha3_512+0x104>
    6d88:	048a0a13          	addi	s4,s4,72
    6d8c:	f69ff06f          	j	6cf4 <pqcrystals_dilithium_fips202_ref_sha3_512+0x68>
  for(i=0;i<inlen;i++)
    6d90:	32090e63          	beqz	s2,70cc <pqcrystals_dilithium_fips202_ref_sha3_512+0x440>
    6d94:	00000613          	li	a2,0
    s[i/8] ^= (uint64_t)in[i] << 8*(i%8);
    6d98:	01f00893          	li	a7,31
    6d9c:	02c0006f          	j	6dc8 <pqcrystals_dilithium_fips202_ref_sha3_512+0x13c>
    6da0:	00072803          	lw	a6,0(a4)
    6da4:	00472503          	lw	a0,4(a4)
    6da8:	00000693          	li	a3,0
    6dac:	00b795b3          	sll	a1,a5,a1
    6db0:	00d84833          	xor	a6,a6,a3
    6db4:	00b546b3          	xor	a3,a0,a1
  for(i=0;i<inlen;i++)
    6db8:	00160613          	addi	a2,a2,1
    s[i/8] ^= (uint64_t)in[i] << 8*(i%8);
    6dbc:	01072023          	sw	a6,0(a4)
    6dc0:	00d72223          	sw	a3,4(a4)
  for(i=0;i<inlen;i++)
    6dc4:	04c90c63          	beq	s2,a2,6e1c <pqcrystals_dilithium_fips202_ref_sha3_512+0x190>
    s[i/8] ^= (uint64_t)in[i] << 8*(i%8);
    6dc8:	00767693          	andi	a3,a2,7
    6dcc:	00369693          	slli	a3,a3,0x3
    6dd0:	00810793          	addi	a5,sp,8
    6dd4:	ff867713          	andi	a4,a2,-8
    6dd8:	00ca8533          	add	a0,s5,a2
    6ddc:	fe068593          	addi	a1,a3,-32
    6de0:	00e78733          	add	a4,a5,a4
    6de4:	40d88833          	sub	a6,a7,a3
    6de8:	00054783          	lbu	a5,0(a0)
    6dec:	fa05dae3          	bgez	a1,6da0 <pqcrystals_dilithium_fips202_ref_sha3_512+0x114>
    6df0:	0017d593          	srli	a1,a5,0x1
    6df4:	00472503          	lw	a0,4(a4)
    6df8:	0105d5b3          	srl	a1,a1,a6
    6dfc:	00072803          	lw	a6,0(a4)
    6e00:	00d796b3          	sll	a3,a5,a3
  for(i=0;i<inlen;i++)
    6e04:	00160613          	addi	a2,a2,1
    s[i/8] ^= (uint64_t)in[i] << 8*(i%8);
    6e08:	00d84833          	xor	a6,a6,a3
    6e0c:	00b546b3          	xor	a3,a0,a1
    6e10:	01072023          	sw	a6,0(a4)
    6e14:	00d72223          	sw	a3,4(a4)
  for(i=0;i<inlen;i++)
    6e18:	fac918e3          	bne	s2,a2,6dc8 <pqcrystals_dilithium_fips202_ref_sha3_512+0x13c>
  s[i/8] ^= (uint64_t)p << 8*(i%8);
    6e1c:	00797613          	andi	a2,s2,7
    6e20:	00361613          	slli	a2,a2,0x3
    6e24:	ff897793          	andi	a5,s2,-8
    6e28:	00810713          	addi	a4,sp,8
    6e2c:	fe060693          	addi	a3,a2,-32
    6e30:	00f707b3          	add	a5,a4,a5
    6e34:	2606ce63          	bltz	a3,70b0 <pqcrystals_dilithium_fips202_ref_sha3_512+0x424>
    6e38:	00600713          	li	a4,6
    6e3c:	00d71733          	sll	a4,a4,a3
    6e40:	00000693          	li	a3,0
    6e44:	0007a583          	lw	a1,0(a5)
    6e48:	0047a603          	lw	a2,4(a5)
  unsigned int i;
  uint64_t s[25];

  keccak_absorb_once(s, SHA3_512_RATE, in, inlen, 0x06);
  KeccakF1600_StatePermute(s);
    6e4c:	00810513          	addi	a0,sp,8
  s[i/8] ^= (uint64_t)p << 8*(i%8);
    6e50:	00d5c6b3          	xor	a3,a1,a3
    6e54:	00e64733          	xor	a4,a2,a4
    6e58:	00d7a023          	sw	a3,0(a5)
    6e5c:	00e7a223          	sw	a4,4(a5)
  s[(r-1)/8] ^= 1ULL << 63;
    6e60:	04c12783          	lw	a5,76(sp)
    6e64:	80000737          	lui	a4,0x80000
    6e68:	00e7c7b3          	xor	a5,a5,a4
    6e6c:	04f12623          	sw	a5,76(sp)
  KeccakF1600_StatePermute(s);
    6e70:	a59fc0ef          	jal	ra,38c8 <KeccakF1600_StatePermute>
  for(i=0;i<8;i++)
    store64(h+8*i,s[i]);
    6e74:	00812803          	lw	a6,8(sp)
    6e78:	00c12503          	lw	a0,12(sp)
    6e7c:	01012583          	lw	a1,16(sp)
    6e80:	01412603          	lw	a2,20(sp)
    6e84:	01812683          	lw	a3,24(sp)
    6e88:	01c12783          	lw	a5,28(sp)
    6e8c:	02012703          	lw	a4,32(sp)
    x[i] = u >> 8*i;
    6e90:	00885d13          	srli	s10,a6,0x8
    6e94:	01085c93          	srli	s9,a6,0x10
    6e98:	01885c13          	srli	s8,a6,0x18
    6e9c:	00855b93          	srli	s7,a0,0x8
    6ea0:	01055b13          	srli	s6,a0,0x10
    6ea4:	01855a93          	srli	s5,a0,0x18
    6ea8:	0085da13          	srli	s4,a1,0x8
    6eac:	0105d993          	srli	s3,a1,0x10
    6eb0:	0185d913          	srli	s2,a1,0x18
    6eb4:	00865413          	srli	s0,a2,0x8
    6eb8:	01065393          	srli	t2,a2,0x10
    6ebc:	01865293          	srli	t0,a2,0x18
    6ec0:	0086df93          	srli	t6,a3,0x8
    6ec4:	0106df13          	srli	t5,a3,0x10
    6ec8:	0186de93          	srli	t4,a3,0x18
    6ecc:	0087de13          	srli	t3,a5,0x8
    6ed0:	0107d313          	srli	t1,a5,0x10
    6ed4:	0187d893          	srli	a7,a5,0x18
    6ed8:	01048023          	sb	a6,0(s1)
    6edc:	01a480a3          	sb	s10,1(s1)
    6ee0:	01948123          	sb	s9,2(s1)
    6ee4:	018481a3          	sb	s8,3(s1)
    6ee8:	00a48223          	sb	a0,4(s1)
    6eec:	017482a3          	sb	s7,5(s1)
    6ef0:	01648323          	sb	s6,6(s1)
    6ef4:	015483a3          	sb	s5,7(s1)
    6ef8:	00b48423          	sb	a1,8(s1)
    6efc:	014484a3          	sb	s4,9(s1)
    6f00:	01348523          	sb	s3,10(s1)
    6f04:	012485a3          	sb	s2,11(s1)
    6f08:	00c48623          	sb	a2,12(s1)
    6f0c:	008486a3          	sb	s0,13(s1)
    6f10:	00748723          	sb	t2,14(s1)
    6f14:	005487a3          	sb	t0,15(s1)
    6f18:	00d48823          	sb	a3,16(s1)
    6f1c:	01f488a3          	sb	t6,17(s1)
    6f20:	01e48923          	sb	t5,18(s1)
    6f24:	01d489a3          	sb	t4,19(s1)
    6f28:	00f48a23          	sb	a5,20(s1)
    6f2c:	01c48aa3          	sb	t3,21(s1)
    6f30:	00648b23          	sb	t1,22(s1)
    6f34:	01148ba3          	sb	a7,23(s1)
    store64(h+8*i,s[i]);
    6f38:	02412803          	lw	a6,36(sp)
    x[i] = u >> 8*i;
    6f3c:	00e48c23          	sb	a4,24(s1)
    store64(h+8*i,s[i]);
    6f40:	02812503          	lw	a0,40(sp)
    6f44:	02c12583          	lw	a1,44(sp)
    6f48:	03012603          	lw	a2,48(sp)
    6f4c:	03412683          	lw	a3,52(sp)
    6f50:	03812783          	lw	a5,56(sp)
    x[i] = u >> 8*i;
    6f54:	00875d13          	srli	s10,a4,0x8
    6f58:	01075c93          	srli	s9,a4,0x10
    6f5c:	00885d93          	srli	s11,a6,0x8
    6f60:	01085c13          	srli	s8,a6,0x10
    6f64:	01885b93          	srli	s7,a6,0x18
    6f68:	00855b13          	srli	s6,a0,0x8
    6f6c:	01055a93          	srli	s5,a0,0x10
    6f70:	01855a13          	srli	s4,a0,0x18
    6f74:	0085d993          	srli	s3,a1,0x8
    6f78:	0105d913          	srli	s2,a1,0x10
    6f7c:	0185d413          	srli	s0,a1,0x18
    6f80:	0086df13          	srli	t5,a3,0x8
    6f84:	0106de93          	srli	t4,a3,0x10
    6f88:	0186de13          	srli	t3,a3,0x18
    6f8c:	0087d313          	srli	t1,a5,0x8
    6f90:	0107d893          	srli	a7,a5,0x10
    6f94:	01875713          	srli	a4,a4,0x18
    6f98:	00865393          	srli	t2,a2,0x8
    6f9c:	01065293          	srli	t0,a2,0x10
    6fa0:	01865f93          	srli	t6,a2,0x18
    6fa4:	01a48ca3          	sb	s10,25(s1)
    6fa8:	01948d23          	sb	s9,26(s1)
    6fac:	00e48da3          	sb	a4,27(s1)
    6fb0:	01048e23          	sb	a6,28(s1)
    6fb4:	01b48ea3          	sb	s11,29(s1)
    6fb8:	01848f23          	sb	s8,30(s1)
    6fbc:	01748fa3          	sb	s7,31(s1)
    6fc0:	02a48023          	sb	a0,32(s1)
    6fc4:	036480a3          	sb	s6,33(s1)
    6fc8:	03548123          	sb	s5,34(s1)
    6fcc:	034481a3          	sb	s4,35(s1)
    6fd0:	02b48223          	sb	a1,36(s1)
    6fd4:	033482a3          	sb	s3,37(s1)
    6fd8:	03248323          	sb	s2,38(s1)
    6fdc:	028483a3          	sb	s0,39(s1)
    6fe0:	02c48423          	sb	a2,40(s1)
    6fe4:	02d48623          	sb	a3,44(s1)
    6fe8:	03e486a3          	sb	t5,45(s1)
    6fec:	03d48723          	sb	t4,46(s1)
    6ff0:	03c487a3          	sb	t3,47(s1)
    6ff4:	02f48823          	sb	a5,48(s1)
    6ff8:	026488a3          	sb	t1,49(s1)
    6ffc:	03148923          	sb	a7,50(s1)
    7000:	027484a3          	sb	t2,41(s1)
    7004:	02548523          	sb	t0,42(s1)
    7008:	03f485a3          	sb	t6,43(s1)
    700c:	0187d793          	srli	a5,a5,0x18
    store64(h+8*i,s[i]);
    7010:	03c12683          	lw	a3,60(sp)
    x[i] = u >> 8*i;
    7014:	02f489a3          	sb	a5,51(s1)
    store64(h+8*i,s[i]);
    7018:	04012703          	lw	a4,64(sp)
    701c:	04412783          	lw	a5,68(sp)
    x[i] = u >> 8*i;
    7020:	0086df13          	srli	t5,a3,0x8
    7024:	0106de93          	srli	t4,a3,0x10
    7028:	0186de13          	srli	t3,a3,0x18
    702c:	00875313          	srli	t1,a4,0x8
    7030:	01075893          	srli	a7,a4,0x10
    7034:	01875813          	srli	a6,a4,0x18
    7038:	0087d513          	srli	a0,a5,0x8
    703c:	0107d593          	srli	a1,a5,0x10
    7040:	0187d613          	srli	a2,a5,0x18
    7044:	02d48a23          	sb	a3,52(s1)
    7048:	03e48aa3          	sb	t5,53(s1)
    704c:	03d48b23          	sb	t4,54(s1)
    7050:	03c48ba3          	sb	t3,55(s1)
    7054:	02e48c23          	sb	a4,56(s1)
    7058:	02648ca3          	sb	t1,57(s1)
    705c:	03148d23          	sb	a7,58(s1)
    7060:	03048da3          	sb	a6,59(s1)
    7064:	02f48e23          	sb	a5,60(s1)
    7068:	02a48ea3          	sb	a0,61(s1)
    706c:	02b48f23          	sb	a1,62(s1)
    7070:	02c48fa3          	sb	a2,63(s1)
}
    7074:	10c12083          	lw	ra,268(sp)
    7078:	10812403          	lw	s0,264(sp)
    707c:	10412483          	lw	s1,260(sp)
    7080:	10012903          	lw	s2,256(sp)
    7084:	0fc12983          	lw	s3,252(sp)
    7088:	0f812a03          	lw	s4,248(sp)
    708c:	0f412a83          	lw	s5,244(sp)
    7090:	0f012b03          	lw	s6,240(sp)
    7094:	0ec12b83          	lw	s7,236(sp)
    7098:	0e812c03          	lw	s8,232(sp)
    709c:	0e412c83          	lw	s9,228(sp)
    70a0:	0e012d03          	lw	s10,224(sp)
    70a4:	0dc12d83          	lw	s11,220(sp)
    70a8:	11010113          	addi	sp,sp,272
    70ac:	00008067          	ret
  s[i/8] ^= (uint64_t)p << 8*(i%8);
    70b0:	01f00693          	li	a3,31
    70b4:	40c686b3          	sub	a3,a3,a2
    70b8:	00300713          	li	a4,3
    70bc:	00d75733          	srl	a4,a4,a3
    70c0:	00600693          	li	a3,6
    70c4:	00c696b3          	sll	a3,a3,a2
    70c8:	d7dff06f          	j	6e44 <pqcrystals_dilithium_fips202_ref_sha3_512+0x1b8>
  for(i=0;i<inlen;i++)
    70cc:	00600693          	li	a3,6
    70d0:	00000713          	li	a4,0
    70d4:	00810793          	addi	a5,sp,8
    70d8:	d6dff06f          	j	6e44 <pqcrystals_dilithium_fips202_ref_sha3_512+0x1b8>

000070dc <pqcrystals_dilithium3_ref_dilithium_shake128_stream_init>:
#include "params.h"
#include "symmetric.h"
#include "fips202.h"

void dilithium_shake128_stream_init(keccak_state *state, const uint8_t seed[SEEDBYTES], uint16_t nonce)
{
    70dc:	fe010113          	addi	sp,sp,-32
    70e0:	00112e23          	sw	ra,28(sp)
    70e4:	00812c23          	sw	s0,24(sp)
    70e8:	00912a23          	sw	s1,20(sp)
    70ec:	00050413          	mv	s0,a0
    70f0:	00058493          	mv	s1,a1
  uint8_t t[2];
  t[0] = nonce;
    70f4:	00c11623          	sh	a2,12(sp)
  t[1] = nonce >> 8;

  shake128_init(state);
    70f8:	898ff0ef          	jal	ra,6190 <pqcrystals_dilithium_fips202_ref_shake128_init>
  shake128_absorb(state, seed, SEEDBYTES);
    70fc:	00048593          	mv	a1,s1
    7100:	00040513          	mv	a0,s0
    7104:	02000613          	li	a2,32
    7108:	8b8ff0ef          	jal	ra,61c0 <pqcrystals_dilithium_fips202_ref_shake128_absorb>
  shake128_absorb(state, t, 2);
    710c:	00c10593          	addi	a1,sp,12
    7110:	00040513          	mv	a0,s0
    7114:	00200613          	li	a2,2
    7118:	8a8ff0ef          	jal	ra,61c0 <pqcrystals_dilithium_fips202_ref_shake128_absorb>
  shake128_finalize(state);
    711c:	00040513          	mv	a0,s0
    7120:	8d8ff0ef          	jal	ra,61f8 <pqcrystals_dilithium_fips202_ref_shake128_finalize>
}
    7124:	01c12083          	lw	ra,28(sp)
    7128:	01812403          	lw	s0,24(sp)
    712c:	01412483          	lw	s1,20(sp)
    7130:	02010113          	addi	sp,sp,32
    7134:	00008067          	ret

00007138 <pqcrystals_dilithium3_ref_dilithium_shake256_stream_init>:

void dilithium_shake256_stream_init(keccak_state *state, const uint8_t seed[CRHBYTES], uint16_t nonce)
{
    7138:	fe010113          	addi	sp,sp,-32
    713c:	00112e23          	sw	ra,28(sp)
    7140:	00812c23          	sw	s0,24(sp)
    7144:	00912a23          	sw	s1,20(sp)
    7148:	00050413          	mv	s0,a0
    714c:	00058493          	mv	s1,a1
  uint8_t t[2];
  t[0] = nonce;
    7150:	00c11623          	sh	a2,12(sp)
  t[1] = nonce >> 8;

  shake256_init(state);
    7154:	b2cff0ef          	jal	ra,6480 <pqcrystals_dilithium_fips202_ref_shake256_init>
  shake256_absorb(state, seed, CRHBYTES);
    7158:	00048593          	mv	a1,s1
    715c:	00040513          	mv	a0,s0
    7160:	04000613          	li	a2,64
    7164:	b4cff0ef          	jal	ra,64b0 <pqcrystals_dilithium_fips202_ref_shake256_absorb>
  shake256_absorb(state, t, 2);
    7168:	00c10593          	addi	a1,sp,12
    716c:	00040513          	mv	a0,s0
    7170:	00200613          	li	a2,2
    7174:	b3cff0ef          	jal	ra,64b0 <pqcrystals_dilithium_fips202_ref_shake256_absorb>
  shake256_finalize(state);
    7178:	00040513          	mv	a0,s0
    717c:	b6cff0ef          	jal	ra,64e8 <pqcrystals_dilithium_fips202_ref_shake256_finalize>
}
    7180:	01c12083          	lw	ra,28(sp)
    7184:	01812403          	lw	s0,24(sp)
    7188:	01412483          	lw	s1,20(sp)
    718c:	02010113          	addi	sp,sp,32
    7190:	00008067          	ret

00007194 <__addsf3>:
#include "soft-fp.h"
#include "single.h"

SFtype
__addsf3 (SFtype a, SFtype b)
{
    7194:	ff010113          	addi	sp,sp,-16
  FP_DECL_S (B);
  FP_DECL_S (R);
  SFtype r;

  FP_INIT_ROUNDMODE;
  FP_UNPACK_SEMIRAW_S (A, a);
    7198:	00800737          	lui	a4,0x800
    719c:	fff70713          	addi	a4,a4,-1 # 7fffff <_end_of_memory+0x7cffff>
  FP_UNPACK_SEMIRAW_S (B, b);
    71a0:	0175d613          	srli	a2,a1,0x17
{
    71a4:	00812423          	sw	s0,8(sp)
  FP_UNPACK_SEMIRAW_S (A, a);
    71a8:	01755413          	srli	s0,a0,0x17
    71ac:	00a777b3          	and	a5,a4,a0
{
    71b0:	01212023          	sw	s2,0(sp)
  FP_UNPACK_SEMIRAW_S (B, b);
    71b4:	00b77733          	and	a4,a4,a1
  FP_UNPACK_SEMIRAW_S (A, a);
    71b8:	0ff47413          	zext.b	s0,s0
  FP_UNPACK_SEMIRAW_S (B, b);
    71bc:	0ff67613          	zext.b	a2,a2
{
    71c0:	00112623          	sw	ra,12(sp)
    71c4:	00912223          	sw	s1,4(sp)
  FP_UNPACK_SEMIRAW_S (A, a);
    71c8:	01f55913          	srli	s2,a0,0x1f
  FP_UNPACK_SEMIRAW_S (B, b);
    71cc:	01f5d593          	srli	a1,a1,0x1f
  FP_UNPACK_SEMIRAW_S (A, a);
    71d0:	00379793          	slli	a5,a5,0x3
  FP_UNPACK_SEMIRAW_S (B, b);
    71d4:	00371713          	slli	a4,a4,0x3
  FP_ADD_S (R, A, B);
    71d8:	40c406b3          	sub	a3,s0,a2
    71dc:	20b91863          	bne	s2,a1,73ec <__addsf3+0x258>
    71e0:	12d05863          	blez	a3,7310 <__addsf3+0x17c>
    71e4:	02061e63          	bnez	a2,7220 <__addsf3+0x8c>
    71e8:	1e070e63          	beqz	a4,73e4 <__addsf3+0x250>
    71ec:	fff68613          	addi	a2,a3,-1
    71f0:	02061063          	bnez	a2,7210 <__addsf3+0x7c>
    71f4:	00e787b3          	add	a5,a5,a4
    71f8:	04000737          	lui	a4,0x4000
    71fc:	00e7f733          	and	a4,a5,a4
    7200:	00200413          	li	s0,2
    7204:	0e071863          	bnez	a4,72f4 <__addsf3+0x160>
    7208:	00100413          	li	s0,1
    720c:	0340006f          	j	7240 <__addsf3+0xac>
    7210:	0ff00593          	li	a1,255
    7214:	02b69063          	bne	a3,a1,7234 <__addsf3+0xa0>
    7218:	0ff00413          	li	s0,255
    721c:	0240006f          	j	7240 <__addsf3+0xac>
    7220:	0ff00613          	li	a2,255
    7224:	00c40e63          	beq	s0,a2,7240 <__addsf3+0xac>
    7228:	04000637          	lui	a2,0x4000
    722c:	00c76733          	or	a4,a4,a2
    7230:	00068613          	mv	a2,a3
    7234:	01b00693          	li	a3,27
    7238:	08c6d263          	bge	a3,a2,72bc <__addsf3+0x128>
    723c:	00178793          	addi	a5,a5,1
  FP_PACK_SEMIRAW_S (r, R);
    7240:	0077f713          	andi	a4,a5,7
    7244:	00070a63          	beqz	a4,7258 <__addsf3+0xc4>
    7248:	00f7f713          	andi	a4,a5,15
    724c:	00400693          	li	a3,4
    7250:	00d70463          	beq	a4,a3,7258 <__addsf3+0xc4>
    7254:	00478793          	addi	a5,a5,4
    7258:	04000737          	lui	a4,0x4000
    725c:	00e7f733          	and	a4,a5,a4
    7260:	38070063          	beqz	a4,75e0 <__addsf3+0x44c>
    7264:	00140413          	addi	s0,s0,1
    7268:	0ff00713          	li	a4,255
    726c:	00000493          	li	s1,0
    7270:	00e40a63          	beq	s0,a4,7284 <__addsf3+0xf0>
    7274:	0037d493          	srli	s1,a5,0x3
    7278:	1f8007b7          	lui	a5,0x1f800
    727c:	fff78793          	addi	a5,a5,-1 # 1f7fffff <_end_of_memory+0x1f7cffff>
    7280:	00f4f4b3          	and	s1,s1,a5
    7284:	01741413          	slli	s0,s0,0x17
    7288:	7f8007b7          	lui	a5,0x7f800
    728c:	00949493          	slli	s1,s1,0x9
    7290:	0094d493          	srli	s1,s1,0x9
    7294:	00f47433          	and	s0,s0,a5
    7298:	00946433          	or	s0,s0,s1
    729c:	01f91513          	slli	a0,s2,0x1f
  FP_HANDLE_EXCEPTIONS;

  return r;
}
    72a0:	00c12083          	lw	ra,12(sp)
    72a4:	00a46533          	or	a0,s0,a0
    72a8:	00812403          	lw	s0,8(sp)
    72ac:	00412483          	lw	s1,4(sp)
    72b0:	00012903          	lw	s2,0(sp)
    72b4:	01010113          	addi	sp,sp,16
    72b8:	00008067          	ret
  FP_ADD_S (R, A, B);
    72bc:	02000693          	li	a3,32
    72c0:	40c686b3          	sub	a3,a3,a2
    72c4:	00c755b3          	srl	a1,a4,a2
    72c8:	00d71733          	sll	a4,a4,a3
    72cc:	00e03733          	snez	a4,a4
    72d0:	00e5e733          	or	a4,a1,a4
    72d4:	00e787b3          	add	a5,a5,a4
    72d8:	04000737          	lui	a4,0x4000
    72dc:	00e7f733          	and	a4,a5,a4
    72e0:	f60700e3          	beqz	a4,7240 <__addsf3+0xac>
    72e4:	00140413          	addi	s0,s0,1
    72e8:	0ff00713          	li	a4,255
  FP_PACK_SEMIRAW_S (r, R);
    72ec:	00000493          	li	s1,0
  FP_ADD_S (R, A, B);
    72f0:	f8e40ae3          	beq	s0,a4,7284 <__addsf3+0xf0>
    72f4:	7e000737          	lui	a4,0x7e000
    72f8:	0017f693          	andi	a3,a5,1
    72fc:	fff70713          	addi	a4,a4,-1 # 7dffffff <_end_of_memory+0x7dfcffff>
    7300:	0017d793          	srli	a5,a5,0x1
    7304:	00e7f7b3          	and	a5,a5,a4
    7308:	00d7e7b3          	or	a5,a5,a3
    730c:	f35ff06f          	j	7240 <__addsf3+0xac>
    7310:	06068a63          	beqz	a3,7384 <__addsf3+0x1f0>
    7314:	408606b3          	sub	a3,a2,s0
    7318:	02041063          	bnez	s0,7338 <__addsf3+0x1a4>
    731c:	2a078263          	beqz	a5,75c0 <__addsf3+0x42c>
    7320:	fff68593          	addi	a1,a3,-1
    7324:	ec0588e3          	beqz	a1,71f4 <__addsf3+0x60>
    7328:	0ff00513          	li	a0,255
    732c:	02a69063          	bne	a3,a0,734c <__addsf3+0x1b8>
  FP_UNPACK_SEMIRAW_S (B, b);
    7330:	00070793          	mv	a5,a4
    7334:	ee5ff06f          	j	7218 <__addsf3+0x84>
  FP_ADD_S (R, A, B);
    7338:	0ff00593          	li	a1,255
    733c:	feb60ae3          	beq	a2,a1,7330 <__addsf3+0x19c>
    7340:	040005b7          	lui	a1,0x4000
    7344:	00b7e7b3          	or	a5,a5,a1
    7348:	00068593          	mv	a1,a3
    734c:	01b00693          	li	a3,27
    7350:	00b6d863          	bge	a3,a1,7360 <__addsf3+0x1cc>
    7354:	00170793          	addi	a5,a4,1
  FP_UNPACK_SEMIRAW_S (B, b);
    7358:	00060413          	mv	s0,a2
    735c:	ee5ff06f          	j	7240 <__addsf3+0xac>
  FP_ADD_S (R, A, B);
    7360:	02000693          	li	a3,32
    7364:	40b686b3          	sub	a3,a3,a1
    7368:	00b7d533          	srl	a0,a5,a1
    736c:	00d797b3          	sll	a5,a5,a3
    7370:	00f037b3          	snez	a5,a5
    7374:	00f567b3          	or	a5,a0,a5
    7378:	00e787b3          	add	a5,a5,a4
  FP_UNPACK_SEMIRAW_S (B, b);
    737c:	00060413          	mv	s0,a2
    7380:	f59ff06f          	j	72d8 <__addsf3+0x144>
  FP_ADD_S (R, A, B);
    7384:	00140693          	addi	a3,s0,1
    7388:	0fe6f613          	andi	a2,a3,254
    738c:	04061463          	bnez	a2,73d4 <__addsf3+0x240>
    7390:	02041663          	bnez	s0,73bc <__addsf3+0x228>
    7394:	22078a63          	beqz	a5,75c8 <__addsf3+0x434>
    7398:	ea0704e3          	beqz	a4,7240 <__addsf3+0xac>
    739c:	00e787b3          	add	a5,a5,a4
    73a0:	04000737          	lui	a4,0x4000
    73a4:	00e7f733          	and	a4,a5,a4
    73a8:	e8070ce3          	beqz	a4,7240 <__addsf3+0xac>
    73ac:	fc000737          	lui	a4,0xfc000
    73b0:	fff70713          	addi	a4,a4,-1 # fbffffff <_end_of_memory+0xfbfcffff>
    73b4:	00e7f7b3          	and	a5,a5,a4
    73b8:	e51ff06f          	j	7208 <__addsf3+0x74>
    73bc:	f6078ae3          	beqz	a5,7330 <__addsf3+0x19c>
    73c0:	e4070ce3          	beqz	a4,7218 <__addsf3+0x84>
  FP_PACK_SEMIRAW_S (r, R);
    73c4:	00000913          	li	s2,0
    73c8:	0ff00413          	li	s0,255
    73cc:	004004b7          	lui	s1,0x400
    73d0:	eb5ff06f          	j	7284 <__addsf3+0xf0>
  FP_ADD_S (R, A, B);
    73d4:	0ff00613          	li	a2,255
    73d8:	22c68063          	beq	a3,a2,75f8 <__addsf3+0x464>
    73dc:	00e78733          	add	a4,a5,a4
    73e0:	00175793          	srli	a5,a4,0x1
  FP_UNPACK_SEMIRAW_S (A, a);
    73e4:	00068413          	mv	s0,a3
    73e8:	e59ff06f          	j	7240 <__addsf3+0xac>
  FP_ADD_S (R, A, B);
    73ec:	08d05063          	blez	a3,746c <__addsf3+0x2d8>
    73f0:	06061263          	bnez	a2,7454 <__addsf3+0x2c0>
    73f4:	fe0708e3          	beqz	a4,73e4 <__addsf3+0x250>
    73f8:	fff68613          	addi	a2,a3,-1
    73fc:	00061863          	bnez	a2,740c <__addsf3+0x278>
    7400:	40e787b3          	sub	a5,a5,a4
  FP_UNPACK_SEMIRAW_S (B, b);
    7404:	00100413          	li	s0,1
  FP_ADD_S (R, A, B);
    7408:	0340006f          	j	743c <__addsf3+0x2a8>
    740c:	0ff00593          	li	a1,255
    7410:	e0b684e3          	beq	a3,a1,7218 <__addsf3+0x84>
    7414:	01b00593          	li	a1,27
    7418:	00100693          	li	a3,1
    741c:	00c5ce63          	blt	a1,a2,7438 <__addsf3+0x2a4>
    7420:	02000693          	li	a3,32
    7424:	40c686b3          	sub	a3,a3,a2
    7428:	00c755b3          	srl	a1,a4,a2
    742c:	00d71733          	sll	a4,a4,a3
    7430:	00e03733          	snez	a4,a4
    7434:	00e5e6b3          	or	a3,a1,a4
    7438:	40d787b3          	sub	a5,a5,a3
    743c:	040004b7          	lui	s1,0x4000
    7440:	0097f733          	and	a4,a5,s1
    7444:	de070ee3          	beqz	a4,7240 <__addsf3+0xac>
    7448:	fff48493          	addi	s1,s1,-1 # 3ffffff <_end_of_memory+0x3fcffff>
    744c:	0097f4b3          	and	s1,a5,s1
    7450:	1140006f          	j	7564 <__addsf3+0x3d0>
    7454:	0ff00613          	li	a2,255
    7458:	dec404e3          	beq	s0,a2,7240 <__addsf3+0xac>
    745c:	04000637          	lui	a2,0x4000
    7460:	00c76733          	or	a4,a4,a2
    7464:	00068613          	mv	a2,a3
    7468:	fadff06f          	j	7414 <__addsf3+0x280>
    746c:	08068063          	beqz	a3,74ec <__addsf3+0x358>
    7470:	408606b3          	sub	a3,a2,s0
    7474:	02041863          	bnez	s0,74a4 <__addsf3+0x310>
    7478:	14078c63          	beqz	a5,75d0 <__addsf3+0x43c>
    747c:	fff68513          	addi	a0,a3,-1
    7480:	00051863          	bnez	a0,7490 <__addsf3+0x2fc>
    7484:	40f707b3          	sub	a5,a4,a5
    7488:	00058913          	mv	s2,a1
    748c:	f79ff06f          	j	7404 <__addsf3+0x270>
    7490:	0ff00813          	li	a6,255
    7494:	03069263          	bne	a3,a6,74b8 <__addsf3+0x324>
  FP_UNPACK_SEMIRAW_S (B, b);
    7498:	00070793          	mv	a5,a4
  FP_ADD_S (R, A, B);
    749c:	0ff00413          	li	s0,255
    74a0:	1380006f          	j	75d8 <__addsf3+0x444>
    74a4:	0ff00513          	li	a0,255
    74a8:	fea608e3          	beq	a2,a0,7498 <__addsf3+0x304>
    74ac:	04000537          	lui	a0,0x4000
    74b0:	00a7e7b3          	or	a5,a5,a0
    74b4:	00068513          	mv	a0,a3
    74b8:	01b00813          	li	a6,27
    74bc:	00100693          	li	a3,1
    74c0:	00a84e63          	blt	a6,a0,74dc <__addsf3+0x348>
    74c4:	02000693          	li	a3,32
    74c8:	40a686b3          	sub	a3,a3,a0
    74cc:	00a7d833          	srl	a6,a5,a0
    74d0:	00d797b3          	sll	a5,a5,a3
    74d4:	00f037b3          	snez	a5,a5
    74d8:	00f866b3          	or	a3,a6,a5
    74dc:	40d707b3          	sub	a5,a4,a3
  FP_UNPACK_SEMIRAW_S (B, b);
    74e0:	00060413          	mv	s0,a2
    74e4:	00058913          	mv	s2,a1
    74e8:	f55ff06f          	j	743c <__addsf3+0x2a8>
  FP_ADD_S (R, A, B);
    74ec:	00140693          	addi	a3,s0,1
    74f0:	0fe6f693          	andi	a3,a3,254
    74f4:	04069c63          	bnez	a3,754c <__addsf3+0x3b8>
    74f8:	04041063          	bnez	s0,7538 <__addsf3+0x3a4>
    74fc:	00079a63          	bnez	a5,7510 <__addsf3+0x37c>
    7500:	00070793          	mv	a5,a4
    7504:	0c071a63          	bnez	a4,75d8 <__addsf3+0x444>
  FP_PACK_SEMIRAW_S (r, R);
    7508:	00000493          	li	s1,0
    750c:	0240006f          	j	7530 <__addsf3+0x39c>
  FP_ADD_S (R, A, B);
    7510:	d20708e3          	beqz	a4,7240 <__addsf3+0xac>
    7514:	40e784b3          	sub	s1,a5,a4
    7518:	040006b7          	lui	a3,0x4000
    751c:	00d4f6b3          	and	a3,s1,a3
    7520:	40f707b3          	sub	a5,a4,a5
    7524:	0a069a63          	bnez	a3,75d8 <__addsf3+0x444>
    7528:	00048793          	mv	a5,s1
    752c:	d0049ae3          	bnez	s1,7240 <__addsf3+0xac>
    7530:	00000913          	li	s2,0
    7534:	d51ff06f          	j	7284 <__addsf3+0xf0>
    7538:	e80794e3          	bnez	a5,73c0 <__addsf3+0x22c>
    753c:	e80704e3          	beqz	a4,73c4 <__addsf3+0x230>
    7540:	00070793          	mv	a5,a4
    7544:	00058913          	mv	s2,a1
    7548:	cd1ff06f          	j	7218 <__addsf3+0x84>
    754c:	40e784b3          	sub	s1,a5,a4
    7550:	040006b7          	lui	a3,0x4000
    7554:	00d4f6b3          	and	a3,s1,a3
    7558:	04068463          	beqz	a3,75a0 <__addsf3+0x40c>
    755c:	40f704b3          	sub	s1,a4,a5
    7560:	00058913          	mv	s2,a1
    7564:	00048513          	mv	a0,s1
    7568:	1a9000ef          	jal	ra,7f10 <__clzsi2>
    756c:	ffb50513          	addi	a0,a0,-5 # 3fffffb <_end_of_memory+0x3fcfffb>
    7570:	00a494b3          	sll	s1,s1,a0
    7574:	02854c63          	blt	a0,s0,75ac <__addsf3+0x418>
    7578:	40850533          	sub	a0,a0,s0
    757c:	00150513          	addi	a0,a0,1
    7580:	02000713          	li	a4,32
    7584:	40a70733          	sub	a4,a4,a0
    7588:	00a4d7b3          	srl	a5,s1,a0
    758c:	00e494b3          	sll	s1,s1,a4
    7590:	009034b3          	snez	s1,s1
    7594:	0097e7b3          	or	a5,a5,s1
    7598:	00000413          	li	s0,0
    759c:	ca5ff06f          	j	7240 <__addsf3+0xac>
    75a0:	fc0492e3          	bnez	s1,7564 <__addsf3+0x3d0>
    75a4:	00000413          	li	s0,0
    75a8:	f89ff06f          	j	7530 <__addsf3+0x39c>
    75ac:	fc0007b7          	lui	a5,0xfc000
    75b0:	fff78793          	addi	a5,a5,-1 # fbffffff <_end_of_memory+0xfbfcffff>
    75b4:	40a40433          	sub	s0,s0,a0
    75b8:	00f4f7b3          	and	a5,s1,a5
    75bc:	c85ff06f          	j	7240 <__addsf3+0xac>
  FP_UNPACK_SEMIRAW_S (B, b);
    75c0:	00070793          	mv	a5,a4
    75c4:	e21ff06f          	j	73e4 <__addsf3+0x250>
    75c8:	00070793          	mv	a5,a4
    75cc:	c75ff06f          	j	7240 <__addsf3+0xac>
    75d0:	00070793          	mv	a5,a4
    75d4:	00068413          	mv	s0,a3
    75d8:	00058913          	mv	s2,a1
    75dc:	c65ff06f          	j	7240 <__addsf3+0xac>
  FP_PACK_SEMIRAW_S (r, R);
    75e0:	0037d493          	srli	s1,a5,0x3
    75e4:	0ff00793          	li	a5,255
    75e8:	c8f41ee3          	bne	s0,a5,7284 <__addsf3+0xf0>
    75ec:	c8048ce3          	beqz	s1,7284 <__addsf3+0xf0>
    75f0:	004004b7          	lui	s1,0x400
    75f4:	f3dff06f          	j	7530 <__addsf3+0x39c>
    75f8:	0ff00413          	li	s0,255
    75fc:	00000493          	li	s1,0
    7600:	c85ff06f          	j	7284 <__addsf3+0xf0>

00007604 <__divsf3>:
#include "soft-fp.h"
#include "single.h"

SFtype
__divsf3 (SFtype a, SFtype b)
{
    7604:	fd010113          	addi	sp,sp,-48
    7608:	02912223          	sw	s1,36(sp)
    760c:	01755493          	srli	s1,a0,0x17
    7610:	03212023          	sw	s2,32(sp)
    7614:	01512a23          	sw	s5,20(sp)
    7618:	01612823          	sw	s6,16(sp)
  FP_DECL_S (B);
  FP_DECL_S (R);
  SFtype r;

  FP_INIT_ROUNDMODE;
  FP_UNPACK_S (A, a);
    761c:	00951a93          	slli	s5,a0,0x9
{
    7620:	02112623          	sw	ra,44(sp)
    7624:	02812423          	sw	s0,40(sp)
    7628:	01312e23          	sw	s3,28(sp)
    762c:	01412c23          	sw	s4,24(sp)
    7630:	01712623          	sw	s7,12(sp)
    7634:	01812423          	sw	s8,8(sp)
    7638:	0ff4f493          	zext.b	s1,s1
    763c:	00058b13          	mv	s6,a1
  FP_UNPACK_S (A, a);
    7640:	009ada93          	srli	s5,s5,0x9
    7644:	01f55913          	srli	s2,a0,0x1f
    7648:	08048463          	beqz	s1,76d0 <__divsf3+0xcc>
    764c:	0ff00793          	li	a5,255
    7650:	0af48063          	beq	s1,a5,76f0 <__divsf3+0xec>
    7654:	003a9a93          	slli	s5,s5,0x3
    7658:	040007b7          	lui	a5,0x4000
    765c:	00faeab3          	or	s5,s5,a5
    7660:	f8148493          	addi	s1,s1,-127 # 3fff81 <_end_of_memory+0x3cff81>
    7664:	00000b93          	li	s7,0
  FP_UNPACK_S (B, b);
    7668:	017b5793          	srli	a5,s6,0x17
    766c:	009b1413          	slli	s0,s6,0x9
    7670:	0ff7f793          	zext.b	a5,a5
    7674:	00945413          	srli	s0,s0,0x9
    7678:	01fb5b13          	srli	s6,s6,0x1f
    767c:	08078a63          	beqz	a5,7710 <__divsf3+0x10c>
    7680:	0ff00713          	li	a4,255
    7684:	0ae78663          	beq	a5,a4,7730 <__divsf3+0x12c>
    7688:	00341413          	slli	s0,s0,0x3
    768c:	04000737          	lui	a4,0x4000
    7690:	00e46433          	or	s0,s0,a4
    7694:	f8178793          	addi	a5,a5,-127 # 3ffff81 <_end_of_memory+0x3fcff81>
    7698:	00000713          	li	a4,0
  FP_DIV_S (R, A, B);
    769c:	40f48a33          	sub	s4,s1,a5
    76a0:	002b9793          	slli	a5,s7,0x2
    76a4:	00e7e7b3          	or	a5,a5,a4
    76a8:	fff78793          	addi	a5,a5,-1
    76ac:	00e00693          	li	a3,14
    76b0:	016949b3          	xor	s3,s2,s6
    76b4:	0cf6e663          	bltu	a3,a5,7780 <__divsf3+0x17c>
    76b8:	000096b7          	lui	a3,0x9
    76bc:	00279793          	slli	a5,a5,0x2
    76c0:	ab068693          	addi	a3,a3,-1360 # 8ab0 <pqcrystals_dilithium_fips202_ref_KeccakF_RoundConstants+0xc0>
    76c4:	00d787b3          	add	a5,a5,a3
    76c8:	0007a783          	lw	a5,0(a5)
    76cc:	00078067          	jr	a5
  FP_UNPACK_S (A, a);
    76d0:	020a8a63          	beqz	s5,7704 <__divsf3+0x100>
    76d4:	000a8513          	mv	a0,s5
    76d8:	039000ef          	jal	ra,7f10 <__clzsi2>
    76dc:	ffb50793          	addi	a5,a0,-5
    76e0:	f8a00493          	li	s1,-118
    76e4:	00fa9ab3          	sll	s5,s5,a5
    76e8:	40a484b3          	sub	s1,s1,a0
    76ec:	f79ff06f          	j	7664 <__divsf3+0x60>
    76f0:	0ff00493          	li	s1,255
    76f4:	00300b93          	li	s7,3
    76f8:	f60a98e3          	bnez	s5,7668 <__divsf3+0x64>
    76fc:	00200b93          	li	s7,2
    7700:	f69ff06f          	j	7668 <__divsf3+0x64>
    7704:	00000493          	li	s1,0
    7708:	00100b93          	li	s7,1
    770c:	f5dff06f          	j	7668 <__divsf3+0x64>
  FP_UNPACK_S (B, b);
    7710:	02040a63          	beqz	s0,7744 <__divsf3+0x140>
    7714:	00040513          	mv	a0,s0
    7718:	7f8000ef          	jal	ra,7f10 <__clzsi2>
    771c:	ffb50793          	addi	a5,a0,-5
    7720:	00f41433          	sll	s0,s0,a5
    7724:	f8a00793          	li	a5,-118
    7728:	40a787b3          	sub	a5,a5,a0
    772c:	f6dff06f          	j	7698 <__divsf3+0x94>
    7730:	0ff00793          	li	a5,255
    7734:	00300713          	li	a4,3
    7738:	f60412e3          	bnez	s0,769c <__divsf3+0x98>
    773c:	00200713          	li	a4,2
    7740:	f5dff06f          	j	769c <__divsf3+0x98>
    7744:	00000793          	li	a5,0
    7748:	00100713          	li	a4,1
    774c:	f51ff06f          	j	769c <__divsf3+0x98>
  FP_UNPACK_S (A, a);
    7750:	00090993          	mv	s3,s2
    7754:	000a8413          	mv	s0,s5
  FP_DIV_S (R, A, B);
    7758:	000b8713          	mv	a4,s7
  FP_PACK_S (r, R);
    775c:	00200793          	li	a5,2
    7760:	22f70063          	beq	a4,a5,7980 <__divsf3+0x37c>
    7764:	00300793          	li	a5,3
    7768:	20f70463          	beq	a4,a5,7970 <__divsf3+0x36c>
    776c:	00100793          	li	a5,1
    7770:	0ef71c63          	bne	a4,a5,7868 <__divsf3+0x264>
    7774:	00000793          	li	a5,0
    7778:	00000713          	li	a4,0
    777c:	1340006f          	j	78b0 <__divsf3+0x2ac>
  FP_DIV_S (R, A, B);
    7780:	00541c13          	slli	s8,s0,0x5
    7784:	168afa63          	bgeu	s5,s0,78f8 <__divsf3+0x2f4>
    7788:	fffa0a13          	addi	s4,s4,-1
    778c:	00000413          	li	s0,0
    7790:	010c5b13          	srli	s6,s8,0x10
    7794:	00010937          	lui	s2,0x10
    7798:	000b0593          	mv	a1,s6
    779c:	fff90913          	addi	s2,s2,-1 # ffff <_gp+0x6adb>
    77a0:	000a8513          	mv	a0,s5
    77a4:	6c0000ef          	jal	ra,7e64 <__hidden___udivsi3>
    77a8:	012c7933          	and	s2,s8,s2
    77ac:	00050593          	mv	a1,a0
    77b0:	00050b93          	mv	s7,a0
    77b4:	00090513          	mv	a0,s2
    77b8:	680000ef          	jal	ra,7e38 <__mulsi3>
    77bc:	00050493          	mv	s1,a0
    77c0:	000b0593          	mv	a1,s6
    77c4:	000a8513          	mv	a0,s5
    77c8:	6e4000ef          	jal	ra,7eac <__umodsi3>
    77cc:	01045793          	srli	a5,s0,0x10
    77d0:	01051513          	slli	a0,a0,0x10
    77d4:	00a7e7b3          	or	a5,a5,a0
    77d8:	000b8413          	mv	s0,s7
    77dc:	0097fe63          	bgeu	a5,s1,77f8 <__divsf3+0x1f4>
    77e0:	00fc07b3          	add	a5,s8,a5
    77e4:	fffb8413          	addi	s0,s7,-1
    77e8:	0187e863          	bltu	a5,s8,77f8 <__divsf3+0x1f4>
    77ec:	0097f663          	bgeu	a5,s1,77f8 <__divsf3+0x1f4>
    77f0:	ffeb8413          	addi	s0,s7,-2
    77f4:	018787b3          	add	a5,a5,s8
    77f8:	409784b3          	sub	s1,a5,s1
    77fc:	000b0593          	mv	a1,s6
    7800:	00048513          	mv	a0,s1
    7804:	660000ef          	jal	ra,7e64 <__hidden___udivsi3>
    7808:	00050593          	mv	a1,a0
    780c:	00050a93          	mv	s5,a0
    7810:	00090513          	mv	a0,s2
    7814:	624000ef          	jal	ra,7e38 <__mulsi3>
    7818:	00050913          	mv	s2,a0
    781c:	000b0593          	mv	a1,s6
    7820:	00048513          	mv	a0,s1
    7824:	688000ef          	jal	ra,7eac <__umodsi3>
    7828:	01051793          	slli	a5,a0,0x10
    782c:	000a8713          	mv	a4,s5
    7830:	0327f263          	bgeu	a5,s2,7854 <__divsf3+0x250>
    7834:	018786b3          	add	a3,a5,s8
    7838:	00f6b633          	sltu	a2,a3,a5
    783c:	fffa8713          	addi	a4,s5,-1
    7840:	00068793          	mv	a5,a3
    7844:	00061863          	bnez	a2,7854 <__divsf3+0x250>
    7848:	0126f663          	bgeu	a3,s2,7854 <__divsf3+0x250>
    784c:	ffea8713          	addi	a4,s5,-2
    7850:	018687b3          	add	a5,a3,s8
    7854:	01041413          	slli	s0,s0,0x10
    7858:	412787b3          	sub	a5,a5,s2
    785c:	00e46433          	or	s0,s0,a4
    7860:	00f037b3          	snez	a5,a5
    7864:	00f46433          	or	s0,s0,a5
  FP_PACK_S (r, R);
    7868:	07fa0713          	addi	a4,s4,127
    786c:	0ae05063          	blez	a4,790c <__divsf3+0x308>
    7870:	00747793          	andi	a5,s0,7
    7874:	00078a63          	beqz	a5,7888 <__divsf3+0x284>
    7878:	00f47793          	andi	a5,s0,15
    787c:	00400693          	li	a3,4
    7880:	00d78463          	beq	a5,a3,7888 <__divsf3+0x284>
    7884:	00440413          	addi	s0,s0,4
    7888:	080007b7          	lui	a5,0x8000
    788c:	00f477b3          	and	a5,s0,a5
    7890:	00078a63          	beqz	a5,78a4 <__divsf3+0x2a0>
    7894:	f80007b7          	lui	a5,0xf8000
    7898:	fff78793          	addi	a5,a5,-1 # f7ffffff <_end_of_memory+0xf7fcffff>
    789c:	00f47433          	and	s0,s0,a5
    78a0:	080a0713          	addi	a4,s4,128
    78a4:	0fe00793          	li	a5,254
    78a8:	0ce7cc63          	blt	a5,a4,7980 <__divsf3+0x37c>
    78ac:	00345793          	srli	a5,s0,0x3
  FP_HANDLE_EXCEPTIONS;

  return r;
}
    78b0:	02c12083          	lw	ra,44(sp)
    78b4:	02812403          	lw	s0,40(sp)
  FP_PACK_S (r, R);
    78b8:	00979793          	slli	a5,a5,0x9
    78bc:	01771713          	slli	a4,a4,0x17
    78c0:	0097d793          	srli	a5,a5,0x9
    78c4:	01f99513          	slli	a0,s3,0x1f
    78c8:	00f76733          	or	a4,a4,a5
}
    78cc:	02412483          	lw	s1,36(sp)
    78d0:	02012903          	lw	s2,32(sp)
    78d4:	01c12983          	lw	s3,28(sp)
    78d8:	01812a03          	lw	s4,24(sp)
    78dc:	01412a83          	lw	s5,20(sp)
    78e0:	01012b03          	lw	s6,16(sp)
    78e4:	00c12b83          	lw	s7,12(sp)
    78e8:	00812c03          	lw	s8,8(sp)
    78ec:	00a76533          	or	a0,a4,a0
    78f0:	03010113          	addi	sp,sp,48
    78f4:	00008067          	ret
  FP_DIV_S (R, A, B);
    78f8:	01fa9413          	slli	s0,s5,0x1f
    78fc:	001ada93          	srli	s5,s5,0x1
    7900:	e91ff06f          	j	7790 <__divsf3+0x18c>
  FP_UNPACK_S (B, b);
    7904:	000b0993          	mv	s3,s6
  FP_DIV_S (R, A, B);
    7908:	e55ff06f          	j	775c <__divsf3+0x158>
  FP_PACK_S (r, R);
    790c:	00100693          	li	a3,1
    7910:	00070c63          	beqz	a4,7928 <__divsf3+0x324>
    7914:	40e686b3          	sub	a3,a3,a4
    7918:	01b00613          	li	a2,27
    791c:	00000793          	li	a5,0
    7920:	00000713          	li	a4,0
    7924:	f8d646e3          	blt	a2,a3,78b0 <__divsf3+0x2ac>
    7928:	09ea0493          	addi	s1,s4,158
    792c:	00d456b3          	srl	a3,s0,a3
    7930:	00941433          	sll	s0,s0,s1
    7934:	00803433          	snez	s0,s0
    7938:	0086e7b3          	or	a5,a3,s0
    793c:	0077f713          	andi	a4,a5,7
    7940:	00070a63          	beqz	a4,7954 <__divsf3+0x350>
    7944:	00f7f713          	andi	a4,a5,15
    7948:	00400693          	li	a3,4
    794c:	00d70463          	beq	a4,a3,7954 <__divsf3+0x350>
    7950:	00478793          	addi	a5,a5,4
    7954:	04000737          	lui	a4,0x4000
    7958:	00e7f733          	and	a4,a5,a4
    795c:	0037d793          	srli	a5,a5,0x3
    7960:	f40708e3          	beqz	a4,78b0 <__divsf3+0x2ac>
    7964:	00000793          	li	a5,0
    7968:	00100713          	li	a4,1
    796c:	f45ff06f          	j	78b0 <__divsf3+0x2ac>
    7970:	004007b7          	lui	a5,0x400
    7974:	0ff00713          	li	a4,255
    7978:	00000993          	li	s3,0
    797c:	f35ff06f          	j	78b0 <__divsf3+0x2ac>
    7980:	00000793          	li	a5,0
    7984:	0ff00713          	li	a4,255
    7988:	f29ff06f          	j	78b0 <__divsf3+0x2ac>

0000798c <__mulsf3>:
#include "soft-fp.h"
#include "single.h"

SFtype
__mulsf3 (SFtype a, SFtype b)
{
    798c:	fe010113          	addi	sp,sp,-32
    7990:	01212823          	sw	s2,16(sp)
    7994:	01755913          	srli	s2,a0,0x17
    7998:	00912a23          	sw	s1,20(sp)
    799c:	01312623          	sw	s3,12(sp)
    79a0:	01512223          	sw	s5,4(sp)
  FP_DECL_S (B);
  FP_DECL_S (R);
  SFtype r;

  FP_INIT_ROUNDMODE;
  FP_UNPACK_S (A, a);
    79a4:	00951493          	slli	s1,a0,0x9
{
    79a8:	00112e23          	sw	ra,28(sp)
    79ac:	00812c23          	sw	s0,24(sp)
    79b0:	01412423          	sw	s4,8(sp)
    79b4:	0ff97913          	zext.b	s2,s2
    79b8:	00058a93          	mv	s5,a1
  FP_UNPACK_S (A, a);
    79bc:	0094d493          	srli	s1,s1,0x9
    79c0:	01f55993          	srli	s3,a0,0x1f
    79c4:	1a090e63          	beqz	s2,7b80 <__mulsf3+0x1f4>
    79c8:	0ff00793          	li	a5,255
    79cc:	1cf90a63          	beq	s2,a5,7ba0 <__mulsf3+0x214>
    79d0:	00349493          	slli	s1,s1,0x3
    79d4:	040007b7          	lui	a5,0x4000
    79d8:	00f4e4b3          	or	s1,s1,a5
    79dc:	f8190913          	addi	s2,s2,-127
    79e0:	00000a13          	li	s4,0
  FP_UNPACK_S (B, b);
    79e4:	017ad793          	srli	a5,s5,0x17
    79e8:	009a9413          	slli	s0,s5,0x9
    79ec:	0ff7f793          	zext.b	a5,a5
    79f0:	00945413          	srli	s0,s0,0x9
    79f4:	01fada93          	srli	s5,s5,0x1f
    79f8:	1c078463          	beqz	a5,7bc0 <__mulsf3+0x234>
    79fc:	0ff00713          	li	a4,255
    7a00:	1ee78063          	beq	a5,a4,7be0 <__mulsf3+0x254>
    7a04:	00341413          	slli	s0,s0,0x3
    7a08:	04000737          	lui	a4,0x4000
    7a0c:	00e46433          	or	s0,s0,a4
    7a10:	f8178793          	addi	a5,a5,-127 # 3ffff81 <_end_of_memory+0x3fcff81>
    7a14:	00000713          	li	a4,0
  FP_MUL_S (R, A, B);
    7a18:	00f90933          	add	s2,s2,a5
    7a1c:	002a1793          	slli	a5,s4,0x2
    7a20:	00e7e7b3          	or	a5,a5,a4
    7a24:	00a00693          	li	a3,10
    7a28:	0159c833          	xor	a6,s3,s5
    7a2c:	00190893          	addi	a7,s2,1
    7a30:	20f6cc63          	blt	a3,a5,7c48 <__mulsf3+0x2bc>
    7a34:	00200693          	li	a3,2
    7a38:	1cf6c463          	blt	a3,a5,7c00 <__mulsf3+0x274>
    7a3c:	fff78793          	addi	a5,a5,-1
    7a40:	00100693          	li	a3,1
    7a44:	1ef6f063          	bgeu	a3,a5,7c24 <__mulsf3+0x298>
    7a48:	00010eb7          	lui	t4,0x10
    7a4c:	fffe8313          	addi	t1,t4,-1 # ffff <_gp+0x6adb>
    7a50:	0104df93          	srli	t6,s1,0x10
    7a54:	01045f13          	srli	t5,s0,0x10
    7a58:	0064f4b3          	and	s1,s1,t1
    7a5c:	00647433          	and	s0,s0,t1
    7a60:	00048513          	mv	a0,s1
    7a64:	00040593          	mv	a1,s0
    7a68:	3d0000ef          	jal	ra,7e38 <__mulsi3>
    7a6c:	00050713          	mv	a4,a0
    7a70:	000f0593          	mv	a1,t5
    7a74:	00048513          	mv	a0,s1
    7a78:	3c0000ef          	jal	ra,7e38 <__mulsi3>
    7a7c:	00050793          	mv	a5,a0
    7a80:	00040593          	mv	a1,s0
    7a84:	000f8513          	mv	a0,t6
    7a88:	3b0000ef          	jal	ra,7e38 <__mulsi3>
    7a8c:	00050e13          	mv	t3,a0
    7a90:	000f0593          	mv	a1,t5
    7a94:	000f8513          	mv	a0,t6
    7a98:	3a0000ef          	jal	ra,7e38 <__mulsi3>
    7a9c:	01075413          	srli	s0,a4,0x10
    7aa0:	01c787b3          	add	a5,a5,t3
    7aa4:	00f40433          	add	s0,s0,a5
    7aa8:	00050693          	mv	a3,a0
    7aac:	01c47463          	bgeu	s0,t3,7ab4 <__mulsf3+0x128>
    7ab0:	01d506b3          	add	a3,a0,t4
    7ab4:	006477b3          	and	a5,s0,t1
    7ab8:	00677733          	and	a4,a4,t1
    7abc:	01079793          	slli	a5,a5,0x10
    7ac0:	00e787b3          	add	a5,a5,a4
    7ac4:	00679713          	slli	a4,a5,0x6
    7ac8:	01045413          	srli	s0,s0,0x10
    7acc:	00e03733          	snez	a4,a4
    7ad0:	01a7d793          	srli	a5,a5,0x1a
    7ad4:	00d40433          	add	s0,s0,a3
    7ad8:	00f767b3          	or	a5,a4,a5
    7adc:	00641413          	slli	s0,s0,0x6
    7ae0:	00f46433          	or	s0,s0,a5
    7ae4:	080007b7          	lui	a5,0x8000
    7ae8:	00f477b3          	and	a5,s0,a5
    7aec:	16078e63          	beqz	a5,7c68 <__mulsf3+0x2dc>
    7af0:	00145793          	srli	a5,s0,0x1
    7af4:	00147413          	andi	s0,s0,1
    7af8:	0087e433          	or	s0,a5,s0
  FP_PACK_S (r, R);
    7afc:	07f88513          	addi	a0,a7,127
    7b00:	16a05863          	blez	a0,7c70 <__mulsf3+0x2e4>
    7b04:	00747793          	andi	a5,s0,7
    7b08:	00078a63          	beqz	a5,7b1c <__mulsf3+0x190>
    7b0c:	00f47793          	andi	a5,s0,15
    7b10:	00400713          	li	a4,4
    7b14:	00e78463          	beq	a5,a4,7b1c <__mulsf3+0x190>
    7b18:	00440413          	addi	s0,s0,4
    7b1c:	080007b7          	lui	a5,0x8000
    7b20:	00f477b3          	and	a5,s0,a5
    7b24:	00078a63          	beqz	a5,7b38 <__mulsf3+0x1ac>
    7b28:	f80007b7          	lui	a5,0xf8000
    7b2c:	fff78793          	addi	a5,a5,-1 # f7ffffff <_end_of_memory+0xf7fcffff>
    7b30:	00f47433          	and	s0,s0,a5
    7b34:	08088513          	addi	a0,a7,128
    7b38:	0fe00793          	li	a5,254
    7b3c:	1aa7c463          	blt	a5,a0,7ce4 <__mulsf3+0x358>
    7b40:	00345793          	srli	a5,s0,0x3
  FP_HANDLE_EXCEPTIONS;

  return r;
}
    7b44:	01c12083          	lw	ra,28(sp)
    7b48:	01812403          	lw	s0,24(sp)
  FP_PACK_S (r, R);
    7b4c:	00979793          	slli	a5,a5,0x9
    7b50:	01751513          	slli	a0,a0,0x17
    7b54:	0097d793          	srli	a5,a5,0x9
    7b58:	00f56533          	or	a0,a0,a5
    7b5c:	01f81813          	slli	a6,a6,0x1f
}
    7b60:	01412483          	lw	s1,20(sp)
    7b64:	01012903          	lw	s2,16(sp)
    7b68:	00c12983          	lw	s3,12(sp)
    7b6c:	00812a03          	lw	s4,8(sp)
    7b70:	00412a83          	lw	s5,4(sp)
    7b74:	01056533          	or	a0,a0,a6
    7b78:	02010113          	addi	sp,sp,32
    7b7c:	00008067          	ret
  FP_UNPACK_S (A, a);
    7b80:	02048a63          	beqz	s1,7bb4 <__mulsf3+0x228>
    7b84:	00048513          	mv	a0,s1
    7b88:	388000ef          	jal	ra,7f10 <__clzsi2>
    7b8c:	ffb50793          	addi	a5,a0,-5
    7b90:	f8a00913          	li	s2,-118
    7b94:	00f494b3          	sll	s1,s1,a5
    7b98:	40a90933          	sub	s2,s2,a0
    7b9c:	e45ff06f          	j	79e0 <__mulsf3+0x54>
    7ba0:	0ff00913          	li	s2,255
    7ba4:	00300a13          	li	s4,3
    7ba8:	e2049ee3          	bnez	s1,79e4 <__mulsf3+0x58>
    7bac:	00200a13          	li	s4,2
    7bb0:	e35ff06f          	j	79e4 <__mulsf3+0x58>
    7bb4:	00000913          	li	s2,0
    7bb8:	00100a13          	li	s4,1
    7bbc:	e29ff06f          	j	79e4 <__mulsf3+0x58>
  FP_UNPACK_S (B, b);
    7bc0:	02040a63          	beqz	s0,7bf4 <__mulsf3+0x268>
    7bc4:	00040513          	mv	a0,s0
    7bc8:	348000ef          	jal	ra,7f10 <__clzsi2>
    7bcc:	ffb50793          	addi	a5,a0,-5
    7bd0:	00f41433          	sll	s0,s0,a5
    7bd4:	f8a00793          	li	a5,-118
    7bd8:	40a787b3          	sub	a5,a5,a0
    7bdc:	e39ff06f          	j	7a14 <__mulsf3+0x88>
    7be0:	0ff00793          	li	a5,255
    7be4:	00300713          	li	a4,3
    7be8:	e20418e3          	bnez	s0,7a18 <__mulsf3+0x8c>
    7bec:	00200713          	li	a4,2
    7bf0:	e29ff06f          	j	7a18 <__mulsf3+0x8c>
    7bf4:	00000793          	li	a5,0
    7bf8:	00100713          	li	a4,1
    7bfc:	e1dff06f          	j	7a18 <__mulsf3+0x8c>
    7c00:	00100693          	li	a3,1
    7c04:	00f697b3          	sll	a5,a3,a5
  FP_MUL_S (R, A, B);
    7c08:	5307f693          	andi	a3,a5,1328
    7c0c:	04069863          	bnez	a3,7c5c <__mulsf3+0x2d0>
    7c10:	2407f693          	andi	a3,a5,576
    7c14:	0c069063          	bnez	a3,7cd4 <__mulsf3+0x348>
    7c18:	0887f793          	andi	a5,a5,136
    7c1c:	e20786e3          	beqz	a5,7a48 <__mulsf3+0xbc>
  FP_UNPACK_S (B, b);
    7c20:	000a8813          	mv	a6,s5
  FP_PACK_S (r, R);
    7c24:	00200793          	li	a5,2
    7c28:	0af70e63          	beq	a4,a5,7ce4 <__mulsf3+0x358>
    7c2c:	00300793          	li	a5,3
    7c30:	0af70263          	beq	a4,a5,7cd4 <__mulsf3+0x348>
    7c34:	00100793          	li	a5,1
    7c38:	ecf712e3          	bne	a4,a5,7afc <__mulsf3+0x170>
    7c3c:	00000793          	li	a5,0
    7c40:	00000513          	li	a0,0
    7c44:	f01ff06f          	j	7b44 <__mulsf3+0x1b8>
  FP_MUL_S (R, A, B);
    7c48:	00f00693          	li	a3,15
    7c4c:	08d78463          	beq	a5,a3,7cd4 <__mulsf3+0x348>
    7c50:	00b00693          	li	a3,11
  FP_UNPACK_S (A, a);
    7c54:	00098813          	mv	a6,s3
  FP_MUL_S (R, A, B);
    7c58:	fcd784e3          	beq	a5,a3,7c20 <__mulsf3+0x294>
    7c5c:	00048413          	mv	s0,s1
    7c60:	000a0713          	mv	a4,s4
    7c64:	fc1ff06f          	j	7c24 <__mulsf3+0x298>
    7c68:	00090893          	mv	a7,s2
    7c6c:	e91ff06f          	j	7afc <__mulsf3+0x170>
  FP_PACK_S (r, R);
    7c70:	00100713          	li	a4,1
    7c74:	00050c63          	beqz	a0,7c8c <__mulsf3+0x300>
    7c78:	40a70733          	sub	a4,a4,a0
    7c7c:	01b00693          	li	a3,27
    7c80:	00000793          	li	a5,0
    7c84:	00000513          	li	a0,0
    7c88:	eae6cee3          	blt	a3,a4,7b44 <__mulsf3+0x1b8>
    7c8c:	09e88893          	addi	a7,a7,158
    7c90:	00e45733          	srl	a4,s0,a4
    7c94:	01141433          	sll	s0,s0,a7
    7c98:	00803433          	snez	s0,s0
    7c9c:	008767b3          	or	a5,a4,s0
    7ca0:	0077f713          	andi	a4,a5,7
    7ca4:	00070a63          	beqz	a4,7cb8 <__mulsf3+0x32c>
    7ca8:	00f7f713          	andi	a4,a5,15
    7cac:	00400693          	li	a3,4
    7cb0:	00d70463          	beq	a4,a3,7cb8 <__mulsf3+0x32c>
    7cb4:	00478793          	addi	a5,a5,4
    7cb8:	04000737          	lui	a4,0x4000
    7cbc:	00e7f733          	and	a4,a5,a4
    7cc0:	0037d793          	srli	a5,a5,0x3
    7cc4:	f6070ee3          	beqz	a4,7c40 <__mulsf3+0x2b4>
    7cc8:	00000793          	li	a5,0
    7ccc:	00100513          	li	a0,1
    7cd0:	e75ff06f          	j	7b44 <__mulsf3+0x1b8>
    7cd4:	004007b7          	lui	a5,0x400
    7cd8:	0ff00513          	li	a0,255
    7cdc:	00000813          	li	a6,0
    7ce0:	e65ff06f          	j	7b44 <__mulsf3+0x1b8>
    7ce4:	00000793          	li	a5,0
    7ce8:	0ff00513          	li	a0,255
    7cec:	e59ff06f          	j	7b44 <__mulsf3+0x1b8>

00007cf0 <__fixunssfsi>:
  FP_DECL_EX;
  FP_DECL_S (A);
  USItype r;

  FP_INIT_EXCEPTIONS;
  FP_UNPACK_RAW_S (A, a);
    7cf0:	01755793          	srli	a5,a0,0x17
    7cf4:	00800637          	lui	a2,0x800
    7cf8:	fff60693          	addi	a3,a2,-1 # 7fffff <_end_of_memory+0x7cffff>
    7cfc:	0ff7f793          	zext.b	a5,a5
  FP_TO_INT_S (r, A, SI_BITS, 0);
    7d00:	07e00593          	li	a1,126
  FP_UNPACK_RAW_S (A, a);
    7d04:	00a6f6b3          	and	a3,a3,a0
    7d08:	01f55713          	srli	a4,a0,0x1f
  FP_TO_INT_S (r, A, SI_BITS, 0);
    7d0c:	00000513          	li	a0,0
    7d10:	02f5de63          	bge	a1,a5,7d4c <__fixunssfsi+0x5c>
    7d14:	02071c63          	bnez	a4,7d4c <__fixunssfsi+0x5c>
    7d18:	09e00713          	li	a4,158
    7d1c:	fff00513          	li	a0,-1
    7d20:	02f74663          	blt	a4,a5,7d4c <__fixunssfsi+0x5c>
    7d24:	09500713          	li	a4,149
    7d28:	00c6e533          	or	a0,a3,a2
    7d2c:	00f75863          	bge	a4,a5,7d3c <__fixunssfsi+0x4c>
    7d30:	f6a78793          	addi	a5,a5,-150 # 3fff6a <_end_of_memory+0x3cff6a>
    7d34:	00f51533          	sll	a0,a0,a5
    7d38:	00008067          	ret
    7d3c:	09600713          	li	a4,150
    7d40:	40f707b3          	sub	a5,a4,a5
    7d44:	00f55533          	srl	a0,a0,a5
    7d48:	00008067          	ret
  FP_HANDLE_EXCEPTIONS;

  return r;
}
    7d4c:	00008067          	ret

00007d50 <__floatunsisf>:
#include "soft-fp.h"
#include "single.h"

SFtype
__floatunsisf (USItype i)
{
    7d50:	ff010113          	addi	sp,sp,-16
    7d54:	00812423          	sw	s0,8(sp)
    7d58:	00112623          	sw	ra,12(sp)
    7d5c:	00050413          	mv	s0,a0
  FP_DECL_EX;
  FP_DECL_S (A);
  SFtype a;

  FP_INIT_ROUNDMODE;
  FP_FROM_INT_S (A, i, SI_BITS, USItype);
    7d60:	00000793          	li	a5,0
    7d64:	02050463          	beqz	a0,7d8c <__floatunsisf+0x3c>
    7d68:	1a8000ef          	jal	ra,7f10 <__clzsi2>
    7d6c:	09e00793          	li	a5,158
    7d70:	40a787b3          	sub	a5,a5,a0
    7d74:	09600713          	li	a4,150
    7d78:	02f74a63          	blt	a4,a5,7dac <__floatunsisf+0x5c>
    7d7c:	00800713          	li	a4,8
    7d80:	0ae50863          	beq	a0,a4,7e30 <__floatunsisf+0xe0>
    7d84:	ff850513          	addi	a0,a0,-8
    7d88:	00a41433          	sll	s0,s0,a0
  FP_PACK_RAW_S (a, A);
    7d8c:	00941413          	slli	s0,s0,0x9
    7d90:	00945413          	srli	s0,s0,0x9
    7d94:	01779513          	slli	a0,a5,0x17
  FP_HANDLE_EXCEPTIONS;

  return a;
}
    7d98:	00c12083          	lw	ra,12(sp)
    7d9c:	00856533          	or	a0,a0,s0
    7da0:	00812403          	lw	s0,8(sp)
    7da4:	01010113          	addi	sp,sp,16
    7da8:	00008067          	ret
  FP_FROM_INT_S (A, i, SI_BITS, USItype);
    7dac:	09900713          	li	a4,153
    7db0:	06f75663          	bge	a4,a5,7e1c <__floatunsisf+0xcc>
    7db4:	01b50713          	addi	a4,a0,27
    7db8:	00500693          	li	a3,5
    7dbc:	00e41733          	sll	a4,s0,a4
    7dc0:	40a686b3          	sub	a3,a3,a0
    7dc4:	00e03733          	snez	a4,a4
    7dc8:	00d45433          	srl	s0,s0,a3
    7dcc:	00876433          	or	s0,a4,s0
    7dd0:	fc000737          	lui	a4,0xfc000
    7dd4:	fff70713          	addi	a4,a4,-1 # fbffffff <_end_of_memory+0xfbfcffff>
    7dd8:	00747693          	andi	a3,s0,7
    7ddc:	00e47733          	and	a4,s0,a4
    7de0:	00068a63          	beqz	a3,7df4 <__floatunsisf+0xa4>
    7de4:	00f47413          	andi	s0,s0,15
    7de8:	00400693          	li	a3,4
    7dec:	00d40463          	beq	s0,a3,7df4 <__floatunsisf+0xa4>
    7df0:	00470713          	addi	a4,a4,4
    7df4:	040006b7          	lui	a3,0x4000
    7df8:	00d776b3          	and	a3,a4,a3
    7dfc:	00068c63          	beqz	a3,7e14 <__floatunsisf+0xc4>
    7e00:	fc0007b7          	lui	a5,0xfc000
    7e04:	fff78793          	addi	a5,a5,-1 # fbffffff <_end_of_memory+0xfbfcffff>
    7e08:	00f77733          	and	a4,a4,a5
    7e0c:	09f00793          	li	a5,159
    7e10:	40a787b3          	sub	a5,a5,a0
    7e14:	00375413          	srli	s0,a4,0x3
    7e18:	f75ff06f          	j	7d8c <__floatunsisf+0x3c>
    7e1c:	00500693          	li	a3,5
    7e20:	ffb50713          	addi	a4,a0,-5
    7e24:	fad506e3          	beq	a0,a3,7dd0 <__floatunsisf+0x80>
    7e28:	00e41433          	sll	s0,s0,a4
    7e2c:	fa5ff06f          	j	7dd0 <__floatunsisf+0x80>
    7e30:	09600793          	li	a5,150
    7e34:	f59ff06f          	j	7d8c <__floatunsisf+0x3c>

00007e38 <__mulsi3>:
/* Our RV64 64-bit routine is equivalent to our RV32 32-bit routine.  */
# define __muldi3 __mulsi3
#endif

FUNC_BEGIN (__muldi3)
  mv     a2, a0
    7e38:	00050613          	mv	a2,a0
  li     a0, 0
    7e3c:	00000513          	li	a0,0
.L1:
  andi   a3, a1, 1
    7e40:	0015f693          	andi	a3,a1,1
  beqz   a3, .L2
    7e44:	00068463          	beqz	a3,7e4c <__mulsi3+0x14>
  add    a0, a0, a2
    7e48:	00c50533          	add	a0,a0,a2
.L2:
  srli   a1, a1, 1
    7e4c:	0015d593          	srli	a1,a1,0x1
  slli   a2, a2, 1
    7e50:	00161613          	slli	a2,a2,0x1
  bnez   a1, .L1
    7e54:	fe0596e3          	bnez	a1,7e40 <__mulsi3+0x8>
  ret
    7e58:	00008067          	ret

00007e5c <__divsi3>:
  li    t0, -1
  beq   a1, t0, .L20
#endif

FUNC_BEGIN (__divdi3)
  bltz  a0, .L10
    7e5c:	06054063          	bltz	a0,7ebc <__umodsi3+0x10>
  bltz  a1, .L11
    7e60:	0605c663          	bltz	a1,7ecc <__umodsi3+0x20>

00007e64 <__hidden___udivsi3>:
  /* Since the quotient is positive, fall into __udivdi3.  */

FUNC_BEGIN (__udivdi3)
  mv    a2, a1
    7e64:	00058613          	mv	a2,a1
  mv    a1, a0
    7e68:	00050593          	mv	a1,a0
  li    a0, -1
    7e6c:	fff00513          	li	a0,-1
  beqz  a2, .L5
    7e70:	02060c63          	beqz	a2,7ea8 <__hidden___udivsi3+0x44>
  li    a3, 1
    7e74:	00100693          	li	a3,1
  bgeu  a2, a1, .L2
    7e78:	00b67a63          	bgeu	a2,a1,7e8c <__hidden___udivsi3+0x28>
.L1:
  blez  a2, .L2
    7e7c:	00c05863          	blez	a2,7e8c <__hidden___udivsi3+0x28>
  slli  a2, a2, 1
    7e80:	00161613          	slli	a2,a2,0x1
  slli  a3, a3, 1
    7e84:	00169693          	slli	a3,a3,0x1
  bgtu  a1, a2, .L1
    7e88:	feb66ae3          	bltu	a2,a1,7e7c <__hidden___udivsi3+0x18>
.L2:
  li    a0, 0
    7e8c:	00000513          	li	a0,0
.L3:
  bltu  a1, a2, .L4
    7e90:	00c5e663          	bltu	a1,a2,7e9c <__hidden___udivsi3+0x38>
  sub   a1, a1, a2
    7e94:	40c585b3          	sub	a1,a1,a2
  or    a0, a0, a3
    7e98:	00d56533          	or	a0,a0,a3
.L4:
  srli  a3, a3, 1
    7e9c:	0016d693          	srli	a3,a3,0x1
  srli  a2, a2, 1
    7ea0:	00165613          	srli	a2,a2,0x1
  bnez  a3, .L3
    7ea4:	fe0696e3          	bnez	a3,7e90 <__hidden___udivsi3+0x2c>
.L5:
  ret
    7ea8:	00008067          	ret

00007eac <__umodsi3>:
FUNC_END (__udivdi3)
HIDDEN_DEF (__udivdi3)

FUNC_BEGIN (__umoddi3)
  /* Call __udivdi3(a0, a1), then return the remainder, which is in a1.  */
  move  t0, ra
    7eac:	00008293          	mv	t0,ra
  jal   HIDDEN_JUMPTARGET(__udivdi3)
    7eb0:	fb5ff0ef          	jal	ra,7e64 <__hidden___udivsi3>
  move  a0, a1
    7eb4:	00058513          	mv	a0,a1
  jr    t0
    7eb8:	00028067          	jr	t0
FUNC_END (__umoddi3)

  /* Handle negative arguments to __divdi3.  */
.L10:
  neg   a0, a0
    7ebc:	40a00533          	neg	a0,a0
  /* Zero is handled as a negative so that the result will not be inverted.  */
  bgtz  a1, .L12     /* Compute __udivdi3(-a0, a1), then negate the result.  */
    7ec0:	00b04863          	bgtz	a1,7ed0 <__umodsi3+0x24>

  neg   a1, a1
    7ec4:	40b005b3          	neg	a1,a1
  j     HIDDEN_JUMPTARGET(__udivdi3)     /* Compute __udivdi3(-a0, -a1).  */
    7ec8:	f9dff06f          	j	7e64 <__hidden___udivsi3>
.L11:                /* Compute __udivdi3(a0, -a1), then negate the result.  */
  neg   a1, a1
    7ecc:	40b005b3          	neg	a1,a1
.L12:
  move  t0, ra
    7ed0:	00008293          	mv	t0,ra
  jal   HIDDEN_JUMPTARGET(__udivdi3)
    7ed4:	f91ff0ef          	jal	ra,7e64 <__hidden___udivsi3>
  neg   a0, a0
    7ed8:	40a00533          	neg	a0,a0
  jr    t0
    7edc:	00028067          	jr	t0

00007ee0 <__modsi3>:
FUNC_END (__divdi3)

FUNC_BEGIN (__moddi3)
  move   t0, ra
    7ee0:	00008293          	mv	t0,ra
  bltz   a1, .L31
    7ee4:	0005ca63          	bltz	a1,7ef8 <__modsi3+0x18>
  bltz   a0, .L32
    7ee8:	00054c63          	bltz	a0,7f00 <__modsi3+0x20>
.L30:
  jal    HIDDEN_JUMPTARGET(__udivdi3)    /* The dividend is not negative.  */
    7eec:	f79ff0ef          	jal	ra,7e64 <__hidden___udivsi3>
  move   a0, a1
    7ef0:	00058513          	mv	a0,a1
  jr     t0
    7ef4:	00028067          	jr	t0
.L31:
  neg    a1, a1
    7ef8:	40b005b3          	neg	a1,a1
  bgez   a0, .L30
    7efc:	fe0558e3          	bgez	a0,7eec <__modsi3+0xc>
.L32:
  neg    a0, a0
    7f00:	40a00533          	neg	a0,a0
  jal    HIDDEN_JUMPTARGET(__udivdi3)    /* The dividend is hella negative.  */
    7f04:	f61ff0ef          	jal	ra,7e64 <__hidden___udivsi3>
  neg    a0, a1
    7f08:	40b00533          	neg	a0,a1
  jr     t0
    7f0c:	00028067          	jr	t0

00007f10 <__clzsi2>:
int
__clzSI2 (UWtype x)
{
  Wtype ret;

  count_leading_zeros (ret, x);
    7f10:	000107b7          	lui	a5,0x10
    7f14:	02f57a63          	bgeu	a0,a5,7f48 <__clzsi2+0x38>
    7f18:	10053793          	sltiu	a5,a0,256
    7f1c:	0017c793          	xori	a5,a5,1
    7f20:	00379793          	slli	a5,a5,0x3
    7f24:	00009737          	lui	a4,0x9
    7f28:	02000693          	li	a3,32
    7f2c:	40f686b3          	sub	a3,a3,a5
    7f30:	00f55533          	srl	a0,a0,a5
    7f34:	aec70793          	addi	a5,a4,-1300 # 8aec <__clz_tab>
    7f38:	00a787b3          	add	a5,a5,a0
    7f3c:	0007c503          	lbu	a0,0(a5) # 10000 <_gp+0x6adc>

  return ret;
}
    7f40:	40a68533          	sub	a0,a3,a0
    7f44:	00008067          	ret
  count_leading_zeros (ret, x);
    7f48:	01000737          	lui	a4,0x1000
    7f4c:	01000793          	li	a5,16
    7f50:	fce56ae3          	bltu	a0,a4,7f24 <__clzsi2+0x14>
    7f54:	01800793          	li	a5,24
    7f58:	fcdff06f          	j	7f24 <__clzsi2+0x14>

00007f5c <memset>:
    7f5c:	00f00313          	li	t1,15
    7f60:	00050713          	mv	a4,a0
    7f64:	02c37e63          	bgeu	t1,a2,7fa0 <memset+0x44>
    7f68:	00f77793          	andi	a5,a4,15
    7f6c:	0a079063          	bnez	a5,800c <memset+0xb0>
    7f70:	08059263          	bnez	a1,7ff4 <memset+0x98>
    7f74:	ff067693          	andi	a3,a2,-16
    7f78:	00f67613          	andi	a2,a2,15
    7f7c:	00e686b3          	add	a3,a3,a4
    7f80:	00b72023          	sw	a1,0(a4) # 1000000 <_end_of_memory+0xfd0000>
    7f84:	00b72223          	sw	a1,4(a4)
    7f88:	00b72423          	sw	a1,8(a4)
    7f8c:	00b72623          	sw	a1,12(a4)
    7f90:	01070713          	addi	a4,a4,16
    7f94:	fed766e3          	bltu	a4,a3,7f80 <memset+0x24>
    7f98:	00061463          	bnez	a2,7fa0 <memset+0x44>
    7f9c:	00008067          	ret
    7fa0:	40c306b3          	sub	a3,t1,a2
    7fa4:	00269693          	slli	a3,a3,0x2
    7fa8:	00000297          	auipc	t0,0x0
    7fac:	005686b3          	add	a3,a3,t0
    7fb0:	00c68067          	jr	12(a3) # 400000c <_end_of_memory+0x3fd000c>
    7fb4:	00b70723          	sb	a1,14(a4)
    7fb8:	00b706a3          	sb	a1,13(a4)
    7fbc:	00b70623          	sb	a1,12(a4)
    7fc0:	00b705a3          	sb	a1,11(a4)
    7fc4:	00b70523          	sb	a1,10(a4)
    7fc8:	00b704a3          	sb	a1,9(a4)
    7fcc:	00b70423          	sb	a1,8(a4)
    7fd0:	00b703a3          	sb	a1,7(a4)
    7fd4:	00b70323          	sb	a1,6(a4)
    7fd8:	00b702a3          	sb	a1,5(a4)
    7fdc:	00b70223          	sb	a1,4(a4)
    7fe0:	00b701a3          	sb	a1,3(a4)
    7fe4:	00b70123          	sb	a1,2(a4)
    7fe8:	00b700a3          	sb	a1,1(a4)
    7fec:	00b70023          	sb	a1,0(a4)
    7ff0:	00008067          	ret
    7ff4:	0ff5f593          	zext.b	a1,a1
    7ff8:	00859693          	slli	a3,a1,0x8
    7ffc:	00d5e5b3          	or	a1,a1,a3
    8000:	01059693          	slli	a3,a1,0x10
    8004:	00d5e5b3          	or	a1,a1,a3
    8008:	f6dff06f          	j	7f74 <memset+0x18>
    800c:	00279693          	slli	a3,a5,0x2
    8010:	00000297          	auipc	t0,0x0
    8014:	005686b3          	add	a3,a3,t0
    8018:	00008293          	mv	t0,ra
    801c:	fa0680e7          	jalr	-96(a3)
    8020:	00028093          	mv	ra,t0
    8024:	ff078793          	addi	a5,a5,-16
    8028:	40f70733          	sub	a4,a4,a5
    802c:	00f60633          	add	a2,a2,a5
    8030:	f6c378e3          	bgeu	t1,a2,7fa0 <memset+0x44>
    8034:	f3dff06f          	j	7f70 <memset+0x14>

Disassembly of section .text.startup:

00008038 <main>:
#include "../uart.h"
#endif

#ifdef RISCV_PROCESSOR
int main(void)
{
    8038:	ffffd2b7          	lui	t0,0xffffd
    803c:	81010113          	addi	sp,sp,-2032
    8040:	8f028293          	addi	t0,t0,-1808 # ffffc8f0 <_end_of_memory+0xfffcc8f0>
    8044:	7e812423          	sw	s0,2024(sp)
    8048:	7da12023          	sw	s10,1984(sp)
    804c:	7bb12e23          	sw	s11,1980(sp)
    8050:	7e112623          	sw	ra,2028(sp)
    8054:	7e912223          	sw	s1,2020(sp)
    8058:	7f212023          	sw	s2,2016(sp)
    805c:	7d312e23          	sw	s3,2012(sp)
    8060:	7d412c23          	sw	s4,2008(sp)
    8064:	7d512a23          	sw	s5,2004(sp)
    8068:	7d612823          	sw	s6,2000(sp)
    806c:	7d712623          	sw	s7,1996(sp)
    8070:	7d812423          	sw	s8,1992(sp)
    8074:	7d912223          	sw	s9,1988(sp)
  uint8_t sm[MLEN + CRYPTO_BYTES];
  uint8_t pk[CRYPTO_PUBLICKEYBYTES];
  uint8_t sk[CRYPTO_SECRETKEYBYTES];

#ifdef UART
  uart_send_string("\n\rHi Dilithium");
    8078:	00001517          	auipc	a0,0x1
    807c:	b7450513          	addi	a0,a0,-1164 # 8bec <__clz_tab+0x100>
{
    8080:	00510133          	add	sp,sp,t0
  uart_send_string("\n\rHi Dilithium");
    8084:	809fb0ef          	jal	ra,388c <uart_send_string>

  for(i = 0; i < NTESTS; ++i) {    
#ifdef UART
    uart_send_string("\n\rCreate keys");
#endif
    randombytes(m, MLEN);
    8088:	00004637          	lui	a2,0x4
    808c:	ffffd7b7          	lui	a5,0xffffd
    8090:	91878413          	addi	s0,a5,-1768 # ffffc918 <_end_of_memory+0xfffcc918>
    8094:	ea060593          	addi	a1,a2,-352 # 3ea0 <KeccakF1600_StatePermute+0x5d8>
    8098:	02010513          	addi	a0,sp,32
    809c:	008585b3          	add	a1,a1,s0
    
#ifdef PROFILING_STAGES
    asm("csrrs s2, "TICKS_REGISTER", zero");
#endif
    crypto_sign_keypair(pk, sk);
    80a0:	fffffdb7          	lui	s11,0xfffff
    80a4:	060d8d93          	addi	s11,s11,96 # fffff060 <_end_of_memory+0xfffcf060>
    randombytes(m, MLEN);
    80a8:	00a58433          	add	s0,a1,a0
    crypto_sign_keypair(pk, sk);
    80ac:	ea060593          	addi	a1,a2,-352
    80b0:	ffffc737          	lui	a4,0xffffc
    80b4:	01b585b3          	add	a1,a1,s11
    80b8:	17870693          	addi	a3,a4,376 # ffffc178 <_end_of_memory+0xfffcc178>
    80bc:	00a58db3          	add	s11,a1,a0
    80c0:	ea060593          	addi	a1,a2,-352
    80c4:	00d585b3          	add	a1,a1,a3
    80c8:	00a586b3          	add	a3,a1,a0
    uart_send_string("\nSign message");
#endif
#ifdef PROFILING_STAGES
    asm("csrrs s4, "TICKS_REGISTER", zero");
#endif
    crypto_sign(sm, &smlen, m, MLEN, sk);
    80cc:	17470793          	addi	a5,a4,372
    crypto_sign_keypair(pk, sk);
    80d0:	00d12223          	sw	a3,4(sp)
    crypto_sign(sm, &smlen, m, MLEN, sk);
    80d4:	00060693          	mv	a3,a2
    80d8:	ea060613          	addi	a2,a2,-352
    80dc:	00f60633          	add	a2,a2,a5
    80e0:	00a607b3          	add	a5,a2,a0
    80e4:	00f12c23          	sw	a5,24(sp)
    80e8:	ffffe7b7          	lui	a5,0xffffe
    80ec:	34878793          	addi	a5,a5,840 # ffffe348 <_end_of_memory+0xfffce348>
    80f0:	ea068613          	addi	a2,a3,-352
    80f4:	00f60633          	add	a2,a2,a5
    80f8:	00a607b3          	add	a5,a2,a0
    uart_send_string("\nVerify signature");
#endif
#ifdef PROFILING_STAGES
    asm("csrrs s6, "TICKS_REGISTER", zero");
#endif
    ret = crypto_sign_open(m2, &mlen, sm, smlen, pk);
    80fc:	17070713          	addi	a4,a4,368
    crypto_sign(sm, &smlen, m, MLEN, sk);
    8100:	00f12423          	sw	a5,8(sp)
    ret = crypto_sign_open(m2, &mlen, sm, smlen, pk);
    8104:	ea068793          	addi	a5,a3,-352
    8108:	00e787b3          	add	a5,a5,a4
    810c:	00a787b3          	add	a5,a5,a0
  for(i = 0; i < NTESTS; ++i) {    
    8110:	00000d13          	li	s10,0
    ret = crypto_sign_open(m2, &mlen, sm, smlen, pk);
    8114:	00f12e23          	sw	a5,28(sp)
    uart_send_string("\n\rCreate keys");
    8118:	00001517          	auipc	a0,0x1
    811c:	ae450513          	addi	a0,a0,-1308 # 8bfc <__clz_tab+0x110>
    8120:	f6cfb0ef          	jal	ra,388c <uart_send_string>
    randombytes(m, MLEN);
    8124:	03b00593          	li	a1,59
    8128:	00040513          	mv	a0,s0
    812c:	eedf70ef          	jal	ra,18 <randombytes>
    asm("csrrs s2, "TICKS_REGISTER", zero");
    8130:	c0102973          	rdtime	s2
    crypto_sign_keypair(pk, sk);
    8134:	00412503          	lw	a0,4(sp)
    8138:	000d8593          	mv	a1,s11
    813c:	a2cf80ef          	jal	ra,368 <pqcrystals_dilithium3_ref_keypair>
    asm("csrrs s3, "TICKS_REGISTER", zero");
    8140:	c01029f3          	rdtime	s3
    print_runtime(cycle_start, cycle_end);
    8144:	00098593          	mv	a1,s3
    8148:	00090513          	mv	a0,s2
    814c:	01312023          	sw	s3,0(sp)
    8150:	cc8fb0ef          	jal	ra,3618 <print_runtime>
    keys_avg = ((cycle_end - cycle_start) + i*keys_avg) / (i+1); // obtaining average per new sample
    8154:	000d0513          	mv	a0,s10
    8158:	bf9ff0ef          	jal	ra,7d50 <__floatunsisf>
    815c:	001d0d13          	addi	s10,s10,1
    8160:	00050c93          	mv	s9,a0
    8164:	000d0513          	mv	a0,s10
    8168:	be9ff0ef          	jal	ra,7d50 <__floatunsisf>
    816c:	00012583          	lw	a1,0(sp)
    8170:	00050793          	mv	a5,a0
    8174:	00078c13          	mv	s8,a5
    8178:	41258533          	sub	a0,a1,s2
    817c:	bd5ff0ef          	jal	ra,7d50 <__floatunsisf>
    8180:	00001797          	auipc	a5,0x1
    8184:	bb078793          	addi	a5,a5,-1104 # 8d30 <keys_avg.2>
    8188:	0007a583          	lw	a1,0(a5)
    818c:	00a12023          	sw	a0,0(sp)
    8190:	000c8513          	mv	a0,s9
    8194:	ff8ff0ef          	jal	ra,798c <__mulsf3>
    8198:	00050593          	mv	a1,a0
    819c:	00012503          	lw	a0,0(sp)
    81a0:	ff5fe0ef          	jal	ra,7194 <__addsf3>
    81a4:	000c0593          	mv	a1,s8
    81a8:	c5cff0ef          	jal	ra,7604 <__divsf3>
    81ac:	00050793          	mv	a5,a0
    81b0:	00001697          	auipc	a3,0x1
    81b4:	b8068693          	addi	a3,a3,-1152 # 8d30 <keys_avg.2>
    uart_send_string("\nSign message");
    81b8:	00001517          	auipc	a0,0x1
    81bc:	a5450513          	addi	a0,a0,-1452 # 8c0c <__clz_tab+0x120>
    keys_avg = ((cycle_end - cycle_start) + i*keys_avg) / (i+1); // obtaining average per new sample
    81c0:	00f6a023          	sw	a5,0(a3)
    uart_send_string("\nSign message");
    81c4:	ec8fb0ef          	jal	ra,388c <uart_send_string>
    asm("csrrs s4, "TICKS_REGISTER", zero");
    81c8:	c0102a73          	rdtime	s4
    crypto_sign(sm, &smlen, m, MLEN, sk);
    81cc:	01812583          	lw	a1,24(sp)
    81d0:	00812503          	lw	a0,8(sp)
    81d4:	03b00693          	li	a3,59
    81d8:	000d8713          	mv	a4,s11
    81dc:	00040613          	mv	a2,s0
    81e0:	8c9f80ef          	jal	ra,aa8 <pqcrystals_dilithium3_ref>
    asm("csrrs s5, "TICKS_REGISTER", zero");
    81e4:	c0102af3          	rdtime	s5
    print_runtime(cycle_start2, cycle_end2);
    81e8:	000a0513          	mv	a0,s4
    81ec:	000a8593          	mv	a1,s5
    81f0:	01512623          	sw	s5,12(sp)
    81f4:	01412023          	sw	s4,0(sp)
    81f8:	c20fb0ef          	jal	ra,3618 <print_runtime>
    sign_avg = ((cycle_end2 - cycle_start2) + i*sign_avg) / (i+1); 
    81fc:	00c12583          	lw	a1,12(sp)
    8200:	00012503          	lw	a0,0(sp)
    8204:	40a58533          	sub	a0,a1,a0
    8208:	b49ff0ef          	jal	ra,7d50 <__floatunsisf>
    820c:	00001797          	auipc	a5,0x1
    8210:	b2078793          	addi	a5,a5,-1248 # 8d2c <sign_avg.1>
    8214:	0007a583          	lw	a1,0(a5)
    8218:	00a12023          	sw	a0,0(sp)
    821c:	000c8513          	mv	a0,s9
    8220:	f6cff0ef          	jal	ra,798c <__mulsf3>
    8224:	00050593          	mv	a1,a0
    8228:	00012503          	lw	a0,0(sp)
    822c:	f69fe0ef          	jal	ra,7194 <__addsf3>
    8230:	000c0593          	mv	a1,s8
    8234:	bd0ff0ef          	jal	ra,7604 <__divsf3>
    8238:	00050793          	mv	a5,a0
    823c:	00001697          	auipc	a3,0x1
    8240:	af068693          	addi	a3,a3,-1296 # 8d2c <sign_avg.1>
    uart_send_string("\nVerify signature");
    8244:	00001517          	auipc	a0,0x1
    8248:	9d850513          	addi	a0,a0,-1576 # 8c1c <__clz_tab+0x130>
    sign_avg = ((cycle_end2 - cycle_start2) + i*sign_avg) / (i+1); 
    824c:	00f6a023          	sw	a5,0(a3)
    uart_send_string("\nVerify signature");
    8250:	e3cfb0ef          	jal	ra,388c <uart_send_string>
    asm("csrrs s6, "TICKS_REGISTER", zero");
    8254:	c0102b73          	rdtime	s6
    ret = crypto_sign_open(m2, &mlen, sm, smlen, pk);
    8258:	ffffd7b7          	lui	a5,0xffffd
    825c:	63078813          	addi	a6,a5,1584 # ffffd630 <_end_of_memory+0xfffcd630>
    8260:	000047b7          	lui	a5,0x4
    8264:	ea078793          	addi	a5,a5,-352 # 3ea0 <KeccakF1600_StatePermute+0x5d8>
    8268:	010787b3          	add	a5,a5,a6
    826c:	02010713          	addi	a4,sp,32
    8270:	00e78833          	add	a6,a5,a4
    8274:	03412683          	lw	a3,52(sp)
    8278:	00412703          	lw	a4,4(sp)
    827c:	00812603          	lw	a2,8(sp)
    8280:	01c12583          	lw	a1,28(sp)
    8284:	00080513          	mv	a0,a6
    8288:	01012a23          	sw	a6,20(sp)
    828c:	bf5f80ef          	jal	ra,e80 <pqcrystals_dilithium3_ref_open>
    8290:	00a12823          	sw	a0,16(sp)
#ifdef PROFILING_STAGES
    asm("csrrs s7, "TICKS_REGISTER", zero");
    8294:	c0102bf3          	rdtime	s7
    print_runtime(cycle_start3, cycle_end3);
    8298:	000b8593          	mv	a1,s7
    829c:	000b0513          	mv	a0,s6
    82a0:	01712623          	sw	s7,12(sp)
    82a4:	01612023          	sw	s6,0(sp)
    82a8:	b70fb0ef          	jal	ra,3618 <print_runtime>
    verify_avg = ((cycle_end3 - cycle_start3) + i*verify_avg) / (i+1); 
    82ac:	00c12583          	lw	a1,12(sp)
    82b0:	00012503          	lw	a0,0(sp)
    82b4:	40a58533          	sub	a0,a1,a0
    82b8:	a99ff0ef          	jal	ra,7d50 <__floatunsisf>
    82bc:	00001797          	auipc	a5,0x1
    82c0:	a6c78793          	addi	a5,a5,-1428 # 8d28 <verify_avg.0>
    82c4:	0007a583          	lw	a1,0(a5)
    82c8:	00a12023          	sw	a0,0(sp)
    82cc:	000c8513          	mv	a0,s9
    82d0:	ebcff0ef          	jal	ra,798c <__mulsf3>
    82d4:	00050593          	mv	a1,a0
    82d8:	00012503          	lw	a0,0(sp)
    82dc:	eb9fe0ef          	jal	ra,7194 <__addsf3>
    82e0:	000c0593          	mv	a1,s8
    82e4:	b20ff0ef          	jal	ra,7604 <__divsf3>
    82e8:	00001797          	auipc	a5,0x1
    82ec:	a4078793          	addi	a5,a5,-1472 # 8d28 <verify_avg.0>
    82f0:	00a7a023          	sw	a0,0(a5)
#endif

    if(ret) {
    82f4:	01012783          	lw	a5,16(sp)
    82f8:	01412803          	lw	a6,20(sp)
    82fc:	2a079863          	bnez	a5,85ac <main+0x574>
#ifdef UART
      uart_send_string("\n\rVerification failed");
#endif
      return -1;
    }
    if(smlen != MLEN + CRYPTO_BYTES) {
    8300:	03412703          	lw	a4,52(sp)
    8304:	000017b7          	lui	a5,0x1
    8308:	d1878793          	addi	a5,a5,-744 # d18 <pqcrystals_dilithium3_ref_verify+0x1e8>
    830c:	2af71863          	bne	a4,a5,85bc <main+0x584>
      //fprintf(stderr, "Signed message lengths wrong\n");
      uart_send_string("\n\rSigned message lengths wrong");
      return -1;
    }
    if(mlen != MLEN) {
    8310:	03012703          	lw	a4,48(sp)
    8314:	03b00793          	li	a5,59
    8318:	2af71a63          	bne	a4,a5,85cc <main+0x594>
      //fprintf(stderr, "Message lengths wrong\n");
      uart_send_string("\n\rMessage lengths wrong");
      return -1;
    }
    for(j = 0; j < MLEN; ++j) {
    831c:	02012623          	sw	zero,44(sp)
    8320:	00100793          	li	a5,1
    8324:	00000593          	li	a1,0
    8328:	03c00513          	li	a0,60
    832c:	0140006f          	j	8340 <main+0x308>
    8330:	00078493          	mv	s1,a5
    8334:	00100593          	li	a1,1
    8338:	08a70e63          	beq	a4,a0,83d4 <main+0x39c>
    833c:	00070793          	mv	a5,a4
      if(m2[j] != m[j]) {
    8340:	00f806b3          	add	a3,a6,a5
    8344:	00f40733          	add	a4,s0,a5
    8348:	fff6c603          	lbu	a2,-1(a3)
    834c:	fff74683          	lbu	a3,-1(a4)
    for(j = 0; j < MLEN; ++j) {
    8350:	00178713          	addi	a4,a5,1
      if(m2[j] != m[j]) {
    8354:	fcd60ee3          	beq	a2,a3,8330 <main+0x2f8>
    8358:	02058263          	beqz	a1,837c <main+0x344>
    835c:	00004737          	lui	a4,0x4
    8360:	ffffc7b7          	lui	a5,0xffffc
    8364:	ea070713          	addi	a4,a4,-352 # 3ea0 <KeccakF1600_StatePermute+0x5d8>
    8368:	00f70733          	add	a4,a4,a5
    836c:	02010793          	addi	a5,sp,32
    8370:	00f707b3          	add	a5,a4,a5
    8374:	00f12023          	sw	a5,0(sp)
    8378:	1697a623          	sw	s1,364(a5) # ffffc16c <_end_of_memory+0xfffcc16c>
        //fprintf(stderr, "Messages don't match\n");
        uart_send_string("\n\rMessages don't match");
    837c:	00001517          	auipc	a0,0x1
    8380:	90450513          	addi	a0,a0,-1788 # 8c80 <__clz_tab+0x194>
    8384:	d08fb0ef          	jal	ra,388c <uart_send_string>
  uart_send_string(str);
#endif
  
  // Busy wait
  for(;;);
}
    8388:	000032b7          	lui	t0,0x3
    838c:	71028293          	addi	t0,t0,1808 # 3710 <print_runtime+0xf8>
    8390:	00510133          	add	sp,sp,t0
    8394:	7ec12083          	lw	ra,2028(sp)
    8398:	7e812403          	lw	s0,2024(sp)
    839c:	7e412483          	lw	s1,2020(sp)
    83a0:	7e012903          	lw	s2,2016(sp)
    83a4:	7dc12983          	lw	s3,2012(sp)
    83a8:	7d812a03          	lw	s4,2008(sp)
    83ac:	7d412a83          	lw	s5,2004(sp)
    83b0:	7d012b03          	lw	s6,2000(sp)
    83b4:	7cc12b83          	lw	s7,1996(sp)
    83b8:	7c812c03          	lw	s8,1992(sp)
    83bc:	7c412c83          	lw	s9,1988(sp)
    83c0:	7c012d03          	lw	s10,1984(sp)
    83c4:	7bc12d83          	lw	s11,1980(sp)
    83c8:	fff00513          	li	a0,-1
    83cc:	7f010113          	addi	sp,sp,2032
    83d0:	00008067          	ret
    83d4:	00004737          	lui	a4,0x4
    83d8:	ffffc7b7          	lui	a5,0xffffc
    83dc:	ea070693          	addi	a3,a4,-352 # 3ea0 <KeccakF1600_StatePermute+0x5d8>
    randombytes((uint8_t *)&j, sizeof(j));
    83e0:	16c78513          	addi	a0,a5,364 # ffffc16c <_end_of_memory+0xfffcc16c>
    83e4:	00f686b3          	add	a3,a3,a5
    83e8:	02010793          	addi	a5,sp,32
    83ec:	00f687b3          	add	a5,a3,a5
    83f0:	00f12023          	sw	a5,0(sp)
    83f4:	00012683          	lw	a3,0(sp)
    83f8:	ea070793          	addi	a5,a4,-352
    83fc:	00a787b3          	add	a5,a5,a0
    8400:	02010713          	addi	a4,sp,32
    8404:	00e78533          	add	a0,a5,a4
    8408:	00400593          	li	a1,4
    840c:	03b00793          	li	a5,59
    8410:	16f6a623          	sw	a5,364(a3)
    8414:	c05f70ef          	jal	ra,18 <randombytes>
      randombytes(&b, 1);
    8418:	00004737          	lui	a4,0x4
    841c:	ffffccb7          	lui	s9,0xffffc
    8420:	16bc8c13          	addi	s8,s9,363 # ffffc16b <_end_of_memory+0xfffcc16b>
    8424:	ea070793          	addi	a5,a4,-352 # 3ea0 <KeccakF1600_StatePermute+0x5d8>
    8428:	018787b3          	add	a5,a5,s8
    842c:	02010713          	addi	a4,sp,32
    8430:	00e78c33          	add	s8,a5,a4
    8434:	00100593          	li	a1,1
    8438:	000c0513          	mv	a0,s8
    843c:	bddf70ef          	jal	ra,18 <randombytes>
    } while(!b);
    8440:	00012783          	lw	a5,0(sp)
    8444:	16b7c783          	lbu	a5,363(a5)
    8448:	fe0786e3          	beqz	a5,8434 <main+0x3fc>
    sm[j % (MLEN + CRYPTO_BYTES)] += b;
    844c:	00012703          	lw	a4,0(sp)
    ret = crypto_sign_open(m2, &mlen, sm, smlen, pk);
    8450:	000048b7          	lui	a7,0x4
    8454:	ea088513          	addi	a0,a7,-352 # 3ea0 <KeccakF1600_StatePermute+0x5d8>
    sm[j % (MLEN + CRYPTO_BYTES)] += b;
    8458:	16c72803          	lw	a6,364(a4)
    845c:	00001737          	lui	a4,0x1
    8460:	d1870713          	addi	a4,a4,-744 # d18 <pqcrystals_dilithium3_ref_verify+0x1e8>
    8464:	02e87833          	remu	a6,a6,a4
    ret = crypto_sign_open(m2, &mlen, sm, smlen, pk);
    8468:	00012703          	lw	a4,0(sp)
    sm[j % (MLEN + CRYPTO_BYTES)] += b;
    846c:	ffffe637          	lui	a2,0xffffe
    ret = crypto_sign_open(m2, &mlen, sm, smlen, pk);
    8470:	34860613          	addi	a2,a2,840 # ffffe348 <_end_of_memory+0xfffce348>
    8474:	17472683          	lw	a3,372(a4)
    8478:	178c8713          	addi	a4,s9,376
    847c:	00e50533          	add	a0,a0,a4
    8480:	02010713          	addi	a4,sp,32
    8484:	00e50733          	add	a4,a0,a4
    8488:	ea088513          	addi	a0,a7,-352
    848c:	00c50533          	add	a0,a0,a2
    8490:	02010613          	addi	a2,sp,32
    8494:	170c8593          	addi	a1,s9,368
    8498:	00c50633          	add	a2,a0,a2
    849c:	ea088513          	addi	a0,a7,-352
    84a0:	00b50533          	add	a0,a0,a1
    84a4:	02010593          	addi	a1,sp,32
    84a8:	00b505b3          	add	a1,a0,a1
    84ac:	ffffd537          	lui	a0,0xffffd
    84b0:	63050513          	addi	a0,a0,1584 # ffffd630 <_end_of_memory+0xfffcd630>
    84b4:	ea088893          	addi	a7,a7,-352
    84b8:	00a888b3          	add	a7,a7,a0
    84bc:	02010513          	addi	a0,sp,32
    84c0:	00a88533          	add	a0,a7,a0
    sm[j % (MLEN + CRYPTO_BYTES)] += b;
    84c4:	000028b7          	lui	a7,0x2
    84c8:	ea088893          	addi	a7,a7,-352 # 1ea0 <pqcrystals_dilithium3_ref_polyveck_uniform_eta+0x54>
    84cc:	02010313          	addi	t1,sp,32
    84d0:	006888b3          	add	a7,a7,t1
    84d4:	01088833          	add	a6,a7,a6
    84d8:	34884883          	lbu	a7,840(a6)
    84dc:	011787b3          	add	a5,a5,a7
    84e0:	34f80423          	sb	a5,840(a6)
    ret = crypto_sign_open(m2, &mlen, sm, smlen, pk);
    84e4:	99df80ef          	jal	ra,e80 <pqcrystals_dilithium3_ref_open>
    if(!ret) {
    84e8:	0e050a63          	beqz	a0,85dc <main+0x5a4>
  for(i = 0; i < NTESTS; ++i) {    
    84ec:	000027b7          	lui	a5,0x2
    84f0:	71078793          	addi	a5,a5,1808 # 2710 <pqcrystals_dilithium3_ref_poly_make_hint+0x84>
    84f4:	c2fd12e3          	bne	s10,a5,8118 <main+0xe0>
  itoa(pbuf, (unsigned int)keys_avg, 10);
    84f8:	00001797          	auipc	a5,0x1
    84fc:	83878793          	addi	a5,a5,-1992 # 8d30 <keys_avg.2>
    8500:	0007a503          	lw	a0,0(a5)
    8504:	00001417          	auipc	s0,0x1
    8508:	82040413          	addi	s0,s0,-2016 # 8d24 <pbuf>
    850c:	fe4ff0ef          	jal	ra,7cf0 <__fixunssfsi>
    8510:	00050593          	mv	a1,a0
    8514:	00042503          	lw	a0,0(s0)
    8518:	00a00613          	li	a2,10
    851c:	89cfb0ef          	jal	ra,35b8 <itoa>
  uart_send_string("\n\rKeys average: ");
    8520:	00000517          	auipc	a0,0x0
    8524:	79450513          	addi	a0,a0,1940 # 8cb4 <__clz_tab+0x1c8>
    8528:	b64fb0ef          	jal	ra,388c <uart_send_string>
  uart_send_string(str);
    852c:	00001517          	auipc	a0,0x1
    8530:	82c50513          	addi	a0,a0,-2004 # 8d58 <str>
    8534:	b58fb0ef          	jal	ra,388c <uart_send_string>
  itoa(pbuf, (unsigned int)sign_avg, 10);
    8538:	00000797          	auipc	a5,0x0
    853c:	7f478793          	addi	a5,a5,2036 # 8d2c <sign_avg.1>
    8540:	0007a503          	lw	a0,0(a5)
    8544:	facff0ef          	jal	ra,7cf0 <__fixunssfsi>
    8548:	00050593          	mv	a1,a0
    854c:	00042503          	lw	a0,0(s0)
    8550:	00a00613          	li	a2,10
    8554:	864fb0ef          	jal	ra,35b8 <itoa>
  uart_send_string("\nSign average: ");
    8558:	00000517          	auipc	a0,0x0
    855c:	77050513          	addi	a0,a0,1904 # 8cc8 <__clz_tab+0x1dc>
    8560:	b2cfb0ef          	jal	ra,388c <uart_send_string>
  uart_send_string(str);
    8564:	00000517          	auipc	a0,0x0
    8568:	7f450513          	addi	a0,a0,2036 # 8d58 <str>
    856c:	b20fb0ef          	jal	ra,388c <uart_send_string>
  itoa(pbuf, (unsigned int)verify_avg, 10);
    8570:	00000797          	auipc	a5,0x0
    8574:	7b878793          	addi	a5,a5,1976 # 8d28 <verify_avg.0>
    8578:	0007a503          	lw	a0,0(a5)
    857c:	f74ff0ef          	jal	ra,7cf0 <__fixunssfsi>
    8580:	00050593          	mv	a1,a0
    8584:	00042503          	lw	a0,0(s0)
    8588:	00a00613          	li	a2,10
    858c:	82cfb0ef          	jal	ra,35b8 <itoa>
  uart_send_string("\nVerify average: ");
    8590:	00000517          	auipc	a0,0x0
    8594:	74850513          	addi	a0,a0,1864 # 8cd8 <__clz_tab+0x1ec>
    8598:	af4fb0ef          	jal	ra,388c <uart_send_string>
  uart_send_string(str);
    859c:	00000517          	auipc	a0,0x0
    85a0:	7bc50513          	addi	a0,a0,1980 # 8d58 <str>
    85a4:	ae8fb0ef          	jal	ra,388c <uart_send_string>
  for(;;);
    85a8:	0000006f          	j	85a8 <main+0x570>
      uart_send_string("\n\rVerification failed");
    85ac:	00000517          	auipc	a0,0x0
    85b0:	68450513          	addi	a0,a0,1668 # 8c30 <__clz_tab+0x144>
    85b4:	ad8fb0ef          	jal	ra,388c <uart_send_string>
      return -1;
    85b8:	dd1ff06f          	j	8388 <main+0x350>
      uart_send_string("\n\rSigned message lengths wrong");
    85bc:	00000517          	auipc	a0,0x0
    85c0:	68c50513          	addi	a0,a0,1676 # 8c48 <__clz_tab+0x15c>
    85c4:	ac8fb0ef          	jal	ra,388c <uart_send_string>
      return -1;
    85c8:	dc1ff06f          	j	8388 <main+0x350>
      uart_send_string("\n\rMessage lengths wrong");
    85cc:	00000517          	auipc	a0,0x0
    85d0:	69c50513          	addi	a0,a0,1692 # 8c68 <__clz_tab+0x17c>
    85d4:	ab8fb0ef          	jal	ra,388c <uart_send_string>
      return -1;
    85d8:	db1ff06f          	j	8388 <main+0x350>
      uart_send_string("Trivial forgeries possible\n");
    85dc:	00000517          	auipc	a0,0x0
    85e0:	6bc50513          	addi	a0,a0,1724 # 8c98 <__clz_tab+0x1ac>
    85e4:	aa8fb0ef          	jal	ra,388c <uart_send_string>
      return -1;
    85e8:	da1ff06f          	j	8388 <main+0x350>
