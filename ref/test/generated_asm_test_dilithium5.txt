
/home/josejuan/git_repos/fpau_tests/pqc_sw/dilithium/ref/test/test_dilithium5:     file format elf32-littleriscv


Disassembly of section .text.init:

00000000 <_start>:
.section .text.init

.globl _start
_start:
  la gp, _gp
   0:	00009197          	auipc	gp,0x9
   4:	61418193          	addi	gp,gp,1556 # 9614 <_gp>
  la sp, _end_of_memory
   8:	00030117          	auipc	sp,0x30
   c:	ff810113          	addi	sp,sp,-8 # 30000 <_end_of_memory>
  jal main
  10:	134080ef          	jal	ra,8144 <main>
1:
  j 1b
  14:	0000006f          	j	14 <_start+0x14>

Disassembly of section .text:

00000018 <randombytes>:
  unsigned int i;
  uint8_t buf[8];
  static uint64_t ctr = 0;

  for(i = 0; i < 8; ++i)
    buf[i] = ctr >> 8*i;
      18:	00009317          	auipc	t1,0x9
      1c:	e1030313          	addi	t1,t1,-496 # 8e28 <ctr.0>
      20:	00032683          	lw	a3,0(t1)
      24:	00432603          	lw	a2,4(t1)
      28:	ff010e37          	lui	t3,0xff010
      2c:	0086d893          	srli	a7,a3,0x8
      30:	00865813          	srli	a6,a2,0x8
      34:	0ff8f893          	zext.b	a7,a7
      38:	0ff87813          	zext.b	a6,a6
      3c:	00889893          	slli	a7,a7,0x8
      40:	0ff6f713          	zext.b	a4,a3
      44:	00881813          	slli	a6,a6,0x8
      48:	0ff67793          	zext.b	a5,a2
      4c:	fffe0e13          	addi	t3,t3,-1 # ff00ffff <_end_of_memory+0xfefdffff>
      50:	01176733          	or	a4,a4,a7
      54:	0107e7b3          	or	a5,a5,a6
      58:	00ff0eb7          	lui	t4,0xff0
      5c:	00ff08b7          	lui	a7,0xff0
      60:	01d6feb3          	and	t4,a3,t4
      64:	011678b3          	and	a7,a2,a7
      68:	01c77733          	and	a4,a4,t3
      6c:	01c7f7b3          	and	a5,a5,t3
      70:	01000837          	lui	a6,0x1000
      74:	fff80813          	addi	a6,a6,-1 # ffffff <_end_of_memory+0xfcffff>

  ctr++;
      78:	00168f13          	addi	t5,a3,1
    buf[i] = ctr >> 8*i;
      7c:	01d76733          	or	a4,a4,t4
      80:	0186de13          	srli	t3,a3,0x18
      84:	0117e7b3          	or	a5,a5,a7
      88:	01865893          	srli	a7,a2,0x18
void randombytes(uint8_t *out, size_t outlen) {
      8c:	fe010113          	addi	sp,sp,-32
  ctr++;
      90:	00df36b3          	sltu	a3,t5,a3
    buf[i] = ctr >> 8*i;
      94:	018e1e13          	slli	t3,t3,0x18
      98:	01077733          	and	a4,a4,a6
      9c:	01889893          	slli	a7,a7,0x18
      a0:	0107f7b3          	and	a5,a5,a6
      a4:	01c76733          	or	a4,a4,t3
  ctr++;
      a8:	00c68833          	add	a6,a3,a2
    buf[i] = ctr >> 8*i;
      ac:	0117e7b3          	or	a5,a5,a7
  shake128(out, outlen, buf, 8);
      b0:	00810613          	addi	a2,sp,8
      b4:	00800693          	li	a3,8
void randombytes(uint8_t *out, size_t outlen) {
      b8:	00112e23          	sw	ra,28(sp)
    buf[i] = ctr >> 8*i;
      bc:	00e12423          	sw	a4,8(sp)
      c0:	00f12623          	sw	a5,12(sp)
  ctr++;
      c4:	01e32023          	sw	t5,0(t1)
      c8:	01032223          	sw	a6,4(t1)
  shake128(out, outlen, buf, 8);
      cc:	7b4060ef          	jal	ra,6880 <pqcrystals_dilithium_fips202_ref_shake128>
}
      d0:	01c12083          	lw	ra,28(sp)
      d4:	02010113          	addi	sp,sp,32
      d8:	00008067          	ret

000000dc <orca_register_timer_handler>:

#endif //#if ORCA_INTERRUPT_HANDLERS


orca_exception_handler orca_register_timer_handler(orca_exception_handler the_handler,void** the_context){
	orca_exception_handler old=timer_handler;
      dc:	00009797          	auipc	a5,0x9
      e0:	d6078793          	addi	a5,a5,-672 # 8e3c <timer_handler>
      e4:	0007a683          	lw	a3,0(a5)
	void* old_context=timer_context;
      e8:	00009717          	auipc	a4,0x9
      ec:	d5070713          	addi	a4,a4,-688 # 8e38 <timer_context>
	timer_handler = the_handler;
      f0:	00a7a023          	sw	a0,0(a5)
	void* old_context=timer_context;
      f4:	00072783          	lw	a5,0(a4)
	if(the_context){
      f8:	00058863          	beqz	a1,108 <orca_register_timer_handler+0x2c>
		timer_context = *the_context;
      fc:	0005a603          	lw	a2,0(a1)
		*the_context = old_context;
     100:	00f5a023          	sw	a5,0(a1)
		timer_context = *the_context;
     104:	00c72023          	sw	a2,0(a4)
	}
	return old;
}
     108:	00068513          	mv	a0,a3
     10c:	00008067          	ret

00000110 <orca_register_ecall_handler>:
orca_exception_handler orca_register_ecall_handler(orca_exception_handler the_handler,void** the_context){
	orca_exception_handler old=ecall_handler;
     110:	00009797          	auipc	a5,0x9
     114:	d2478793          	addi	a5,a5,-732 # 8e34 <ecall_handler>
     118:	0007a683          	lw	a3,0(a5)
	void* old_context=ecall_context;
     11c:	00009717          	auipc	a4,0x9
     120:	d1470713          	addi	a4,a4,-748 # 8e30 <ecall_context>
	ecall_handler = the_handler;
     124:	00a7a023          	sw	a0,0(a5)
	void* old_context=ecall_context;
     128:	00072783          	lw	a5,0(a4)
	if(the_context){
     12c:	00058863          	beqz	a1,13c <orca_register_ecall_handler+0x2c>
		ecall_context = *the_context;
     130:	0005a603          	lw	a2,0(a1)
		*the_context = old_context;
     134:	00f5a023          	sw	a5,0(a1)
		ecall_context = *the_context;
     138:	00c72023          	sw	a2,0(a4)
	}
	return old;
}
     13c:	00068513          	mv	a0,a3
     140:	00008067          	ret

00000144 <register_orca_illegal_instruction_handler>:

//Register an illegal instruction
int register_orca_illegal_instruction_handler(orca_illegal_instruction_handler the_handler, void *the_context){
	int return_code = 0;
	if(illegal_instruction_handler){
     144:	00009797          	auipc	a5,0x9
     148:	d0078793          	addi	a5,a5,-768 # 8e44 <illegal_instruction_handler>
     14c:	0007a703          	lw	a4,0(a5)
		return_code |= ORCA_EXCEPTION_ALREADY_REGISTERED;
	}
	illegal_instruction_handler = the_handler;
     150:	00a7a023          	sw	a0,0(a5)
	illegal_instruction_context = the_context;
     154:	00009797          	auipc	a5,0x9
     158:	cec78793          	addi	a5,a5,-788 # 8e40 <illegal_instruction_context>
     15c:	00b7a023          	sw	a1,0(a5)
	return return_code;
}
     160:	00e03533          	snez	a0,a4
     164:	00008067          	ret

00000168 <orca_register_interrupt_handler>:

	return return_code;
#else //#if ORCA_INTERRUPT_HANDLERS
		return ORCA_UNSUPPORTED_EXCEPTION_REGISTRATION;
#endif //#else //#if ORCA_INTERRUPT_HANDLERS
}
     168:	00200513          	li	a0,2
     16c:	00008067          	ret

00000170 <handle_exception>:

//Handle an exception.  Illegal instructions and interrupts can be
//passed to handlers set using the
//register_orca_illegal_instruction_handler() and
//register_orca_interrupt_handler() calls respectively.
int handle_exception(size_t cause, size_t epc, size_t regs[32]){
     170:	ff010113          	addi	sp,sp,-16
     174:	00812423          	sw	s0,8(sp)
     178:	00112623          	sw	ra,12(sp)
	switch(cause){
     17c:	00b00713          	li	a4,11
int handle_exception(size_t cause, size_t epc, size_t regs[32]){
     180:	00058413          	mv	s0,a1
	switch(cause){
     184:	0ee50263          	beq	a0,a4,268 <handle_exception+0xf8>
     188:	00050793          	mv	a5,a0
     18c:	06a76c63          	bltu	a4,a0,204 <handle_exception+0x94>
     190:	00400713          	li	a4,4
     194:	00060693          	mv	a3,a2
     198:	10e50463          	beq	a0,a4,2a0 <handle_exception+0x130>
     19c:	00600713          	li	a4,6
     1a0:	08e51663          	bne	a0,a4,22c <handle_exception+0xbc>
		if(timer_handler){
			timer_handler(timer_context);
			break;
		}else{ while(1); }
	case CAUSE_MISALIGNED_STORE:
		handle_misaligned_store(*((size_t*)epc), regs);
     1a4:	0005a783          	lw	a5,0(a1)
	csrr(mtval,address);
     1a8:	34302673          	csrr	a2,mtval
	size_t regval =reg[(instr>>15) & 0x1F] ;
     1ac:	00d7d713          	srli	a4,a5,0xd
     1b0:	07c77713          	andi	a4,a4,124
     1b4:	00e68733          	add	a4,a3,a4
     1b8:	00072703          	lw	a4,0(a4)
	switch((instr >>12) &3){
     1bc:	00c7d793          	srli	a5,a5,0xc
     1c0:	0037f793          	andi	a5,a5,3
		address[1] = ((regval>>8)&0xFF);
     1c4:	00875693          	srli	a3,a4,0x8
	switch((instr >>12) &3){
     1c8:	00100513          	li	a0,1
		address[0] = regval&0xFF;
     1cc:	0ff77593          	zext.b	a1,a4
		address[1] = ((regval>>8)&0xFF);
     1d0:	0ff6f693          	zext.b	a3,a3
	switch((instr >>12) &3){
     1d4:	00a78a63          	beq	a5,a0,1e8 <handle_exception+0x78>
		address[2] = ((regval>>16)&0xFF);
     1d8:	01075793          	srli	a5,a4,0x10
		address[3] = ((regval>>24)&0xFF);
     1dc:	01875713          	srli	a4,a4,0x18
		address[2] = ((regval>>16)&0xFF);
     1e0:	00f60123          	sb	a5,2(a2)
		address[3] = ((regval>>24)&0xFF);
     1e4:	00e601a3          	sb	a4,3(a2)
		break;
     1e8:	00d600a3          	sb	a3,1(a2)
     1ec:	00b60023          	sb	a1,0(a2)
	default:
		while(1);

	}
	return epc;
}
     1f0:	00c12083          	lw	ra,12(sp)
		epc+=4;
     1f4:	00440513          	addi	a0,s0,4
}
     1f8:	00812403          	lw	s0,8(sp)
     1fc:	01010113          	addi	sp,sp,16
     200:	00008067          	ret
	switch(cause){
     204:	80000737          	lui	a4,0x80000
     208:	00770693          	addi	a3,a4,7 # 80000007 <_end_of_memory+0x7ffd0007>
     20c:	0ed50c63          	beq	a0,a3,304 <handle_exception+0x194>
     210:	00b70713          	addi	a4,a4,11
	return epc;
     214:	00058513          	mv	a0,a1
	switch(cause){
     218:	14e79663          	bne	a5,a4,364 <handle_exception+0x1f4>
}
     21c:	00c12083          	lw	ra,12(sp)
     220:	00812403          	lw	s0,8(sp)
     224:	01010113          	addi	sp,sp,16
     228:	00008067          	ret
	switch(cause){
     22c:	00200713          	li	a4,2
     230:	02e51a63          	bne	a0,a4,264 <handle_exception+0xf4>
		if(illegal_instruction_handler){
     234:	00009797          	auipc	a5,0x9
     238:	c1078793          	addi	a5,a5,-1008 # 8e44 <illegal_instruction_handler>
     23c:	0007a783          	lw	a5,0(a5)
     240:	02078063          	beqz	a5,260 <handle_exception+0xf0>
}
     244:	00812403          	lw	s0,8(sp)
			epc=illegal_instruction_handler(cause,epc,regs,illegal_instruction_context);
     248:	00009717          	auipc	a4,0x9
     24c:	bf870713          	addi	a4,a4,-1032 # 8e40 <illegal_instruction_context>
}
     250:	00c12083          	lw	ra,12(sp)
			epc=illegal_instruction_handler(cause,epc,regs,illegal_instruction_context);
     254:	00072683          	lw	a3,0(a4)
}
     258:	01010113          	addi	sp,sp,16
			epc=illegal_instruction_handler(cause,epc,regs,illegal_instruction_context);
     25c:	00078067          	jr	a5
		}else{while(1);}
     260:	0000006f          	j	260 <handle_exception+0xf0>
		while(1);
     264:	0000006f          	j	264 <handle_exception+0xf4>
		if(ecall_handler){
     268:	00009797          	auipc	a5,0x9
     26c:	bcc78793          	addi	a5,a5,-1076 # 8e34 <ecall_handler>
     270:	0007a783          	lw	a5,0(a5)
     274:	02078463          	beqz	a5,29c <handle_exception+0x12c>
			ecall_handler(ecall_context);
     278:	00009717          	auipc	a4,0x9
     27c:	bb870713          	addi	a4,a4,-1096 # 8e30 <ecall_context>
     280:	00072503          	lw	a0,0(a4)
     284:	000780e7          	jalr	a5
}
     288:	00c12083          	lw	ra,12(sp)
			epc+=4;
     28c:	00440513          	addi	a0,s0,4
}
     290:	00812403          	lw	s0,8(sp)
     294:	01010113          	addi	sp,sp,16
     298:	00008067          	ret
		}else{ while(1); }
     29c:	0000006f          	j	29c <handle_exception+0x12c>
		handle_misaligned_load(*((size_t*)epc), regs);
     2a0:	0005a783          	lw	a5,0(a1)
	csrr(mtval,address);
     2a4:	34302673          	csrr	a2,mtval
	switch((instr >>12) &3){
     2a8:	00c7d713          	srli	a4,a5,0xc
     2ac:	00377713          	andi	a4,a4,3
     2b0:	00100593          	li	a1,1
     2b4:	08b70463          	beq	a4,a1,33c <handle_exception+0x1cc>
		intval=(address[3]<<24) | (address[2] << 16) | (address[1] <<8) | address[0];
     2b8:	00164503          	lbu	a0,1(a2)
     2bc:	00064803          	lbu	a6,0(a2)
     2c0:	00264583          	lbu	a1,2(a2)
     2c4:	00364703          	lbu	a4,3(a2)
     2c8:	00851513          	slli	a0,a0,0x8
     2cc:	01056533          	or	a0,a0,a6
     2d0:	01059613          	slli	a2,a1,0x10
     2d4:	00a66633          	or	a2,a2,a0
     2d8:	01871713          	slli	a4,a4,0x18
     2dc:	00c76733          	or	a4,a4,a2
	reg[(instr>>7) & 0x1F] = intval;
     2e0:	0057d793          	srli	a5,a5,0x5
}
     2e4:	00c12083          	lw	ra,12(sp)
		epc+=4;
     2e8:	00440513          	addi	a0,s0,4
	reg[(instr>>7) & 0x1F] = intval;
     2ec:	07c7f793          	andi	a5,a5,124
}
     2f0:	00812403          	lw	s0,8(sp)
	reg[(instr>>7) & 0x1F] = intval;
     2f4:	00f686b3          	add	a3,a3,a5
     2f8:	00e6a023          	sw	a4,0(a3)
}
     2fc:	01010113          	addi	sp,sp,16
     300:	00008067          	ret
		if(timer_handler){
     304:	00009797          	auipc	a5,0x9
     308:	b3878793          	addi	a5,a5,-1224 # 8e3c <timer_handler>
     30c:	0007a783          	lw	a5,0(a5)
     310:	02078463          	beqz	a5,338 <handle_exception+0x1c8>
			timer_handler(timer_context);
     314:	00009717          	auipc	a4,0x9
     318:	b2470713          	addi	a4,a4,-1244 # 8e38 <timer_context>
     31c:	00072503          	lw	a0,0(a4)
     320:	000780e7          	jalr	a5
}
     324:	00c12083          	lw	ra,12(sp)
	return epc;
     328:	00040513          	mv	a0,s0
}
     32c:	00812403          	lw	s0,8(sp)
     330:	01010113          	addi	sp,sp,16
     334:	00008067          	ret
		}else{ while(1); }
     338:	0000006f          	j	338 <handle_exception+0x1c8>
		intval=(address[1]<<8) | address[0];
     33c:	00164703          	lbu	a4,1(a2)
     340:	00064583          	lbu	a1,0(a2)
		if(!(instr & (1<<14))){//signed
     344:	00004637          	lui	a2,0x4
     348:	00871713          	slli	a4,a4,0x8
     34c:	00c7f633          	and	a2,a5,a2
     350:	00b76733          	or	a4,a4,a1
     354:	f80616e3          	bnez	a2,2e0 <handle_exception+0x170>
	reg[(instr>>7) & 0x1F] = intval;
     358:	01071713          	slli	a4,a4,0x10
     35c:	41075713          	srai	a4,a4,0x10
     360:	f81ff06f          	j	2e0 <handle_exception+0x170>
     364:	f01ff06f          	j	264 <handle_exception+0xf4>

00000368 <pqcrystals_dilithium5_ref_keypair>:
*              - uint8_t *sk: pointer to output private key (allocated
*                             array of CRYPTO_SECRETKEYBYTES bytes)
*
* Returns 0 (success)
**************************************************/
int crypto_sign_keypair(uint8_t *pk, uint8_t *sk) {
     368:	fffe92b7          	lui	t0,0xfffe9
     36c:	81010113          	addi	sp,sp,-2032
     370:	f2028293          	addi	t0,t0,-224 # fffe8f20 <_end_of_memory+0xfffb8f20>
     374:	7e112623          	sw	ra,2028(sp)
     378:	7e812423          	sw	s0,2024(sp)
     37c:	7e912223          	sw	s1,2020(sp)
     380:	7f212023          	sw	s2,2016(sp)
     384:	7d312e23          	sw	s3,2012(sp)
     388:	7d412c23          	sw	s4,2008(sp)
     38c:	00510133          	add	sp,sp,t0
#if defined(HW_TESTING_SEEDINIT_TO_ZERO)
  uint8_t seedbuf[2*SEEDBYTES + CRHBYTES] = {0};
     390:	07c00613          	li	a2,124
int crypto_sign_keypair(uint8_t *pk, uint8_t *sk) {
     394:	00050493          	mv	s1,a0
     398:	00058913          	mv	s2,a1
  uint8_t seedbuf[2*SEEDBYTES + CRHBYTES] = {0};
     39c:	03410513          	addi	a0,sp,52
     3a0:	00000593          	li	a1,0
  polyvecl mat[K];
  polyvecl s1, s1hat;
  polyveck s2, t1, t0;

  /* Get randomness for rho, rhoprime and key */
  randombytes(seedbuf, SEEDBYTES);
     3a4:	00018a37          	lui	s4,0x18
  uint8_t seedbuf[2*SEEDBYTES + CRHBYTES] = {0};
     3a8:	fffe8437          	lui	s0,0xfffe8
     3ac:	02012823          	sw	zero,48(sp)
     3b0:	4b9070ef          	jal	ra,8068 <memset>
  randombytes(seedbuf, SEEDBYTES);
     3b4:	78040413          	addi	s0,s0,1920 # fffe8780 <_end_of_memory+0xfffb8780>
     3b8:	8a0a0793          	addi	a5,s4,-1888 # 178a0 <_gp+0xe28c>
     3bc:	008787b3          	add	a5,a5,s0
     3c0:	01010713          	addi	a4,sp,16
     3c4:	00e78433          	add	s0,a5,a4
     3c8:	00040513          	mv	a0,s0
     3cc:	02000593          	li	a1,32
     3d0:	c49ff0ef          	jal	ra,18 <randombytes>
  shake256(seedbuf, 2*SEEDBYTES + CRHBYTES, seedbuf, SEEDBYTES);
     3d4:	02000693          	li	a3,32
     3d8:	00040613          	mv	a2,s0
     3dc:	00040513          	mv	a0,s0
     3e0:	08000593          	li	a1,128
     3e4:	65c060ef          	jal	ra,6a40 <pqcrystals_dilithium_fips202_ref_shake256>
  rhoprime = rho + SEEDBYTES;
  key = rhoprime + CRHBYTES;

  /* Expand matrix */
#ifndef NTT_TESTING
  polyvec_matrix_expand(mat, rho);
     3e8:	ffff2537          	lui	a0,0xffff2
     3ec:	8a0a0793          	addi	a5,s4,-1888
     3f0:	00a787b3          	add	a5,a5,a0
     3f4:	01010713          	addi	a4,sp,16
     3f8:	00e78533          	add	a0,a5,a4
     3fc:	00040593          	mv	a1,s0
     400:	4e4010ef          	jal	ra,18e4 <pqcrystals_dilithium5_ref_polyvec_matrix_expand>
#endif

  /* Sample short vectors s1 and s2 */
  polyvecl_uniform_eta(&s1, rhoprime, 0);
     404:	fffe99b7          	lui	s3,0xfffe9
     408:	80098513          	addi	a0,s3,-2048 # fffe8800 <_end_of_memory+0xfffb8800>
     40c:	8a0a0793          	addi	a5,s4,-1888
     410:	00a787b3          	add	a5,a5,a0
     414:	01010713          	addi	a4,sp,16
     418:	02040413          	addi	s0,s0,32
     41c:	00e78533          	add	a0,a5,a4
     420:	00000613          	li	a2,0
     424:	00040593          	mv	a1,s0
     428:	640010ef          	jal	ra,1a68 <pqcrystals_dilithium5_ref_polyvecl_uniform_eta>
#ifndef NTT_TESTING
  polyveck_uniform_eta(&s2, rhoprime, L);
     42c:	fffec537          	lui	a0,0xfffec
     430:	8a0a0793          	addi	a5,s4,-1888
     434:	00a787b3          	add	a5,a5,a0
     438:	01010713          	addi	a4,sp,16
     43c:	00e78533          	add	a0,a5,a4
     440:	00700613          	li	a2,7
     444:	00040593          	mv	a1,s0
     448:	1c5010ef          	jal	ra,1e0c <pqcrystals_dilithium5_ref_polyveck_uniform_eta>
#endif

  /* Matrix-vector multiplication */
  s1hat = s1;
     44c:	8a0a0793          	addi	a5,s4,-1888
     450:	01010713          	addi	a4,sp,16
     454:	013787b3          	add	a5,a5,s3
     458:	00e787b3          	add	a5,a5,a4
     45c:	8a0a0693          	addi	a3,s4,-1888
     460:	fffea737          	lui	a4,0xfffea
     464:	00e686b3          	add	a3,a3,a4
     468:	01010713          	addi	a4,sp,16
     46c:	00e68733          	add	a4,a3,a4
     470:	000026b7          	lui	a3,0x2
     474:	80078793          	addi	a5,a5,-2048
     478:	c0068693          	addi	a3,a3,-1024 # 1c00 <pqcrystals_dilithium5_ref_polyvecl_add+0x68>
     47c:	00e12223          	sw	a4,4(sp)
     480:	00d786b3          	add	a3,a5,a3
     484:	40070713          	addi	a4,a4,1024 # fffea400 <_end_of_memory+0xfffba400>
     488:	0007a803          	lw	a6,0(a5)
     48c:	0047a503          	lw	a0,4(a5)
     490:	0087a583          	lw	a1,8(a5)
     494:	00c7a603          	lw	a2,12(a5)
     498:	01072023          	sw	a6,0(a4)
     49c:	00a72223          	sw	a0,4(a4)
     4a0:	00b72423          	sw	a1,8(a4)
     4a4:	00c72623          	sw	a2,12(a4)
     4a8:	01078793          	addi	a5,a5,16
     4ac:	01070713          	addi	a4,a4,16
     4b0:	fcd79ce3          	bne	a5,a3,488 <pqcrystals_dilithium5_ref_keypair+0x120>
  polyvecl_ntt(&s1hat);
     4b4:	000189b7          	lui	s3,0x18
     4b8:	fffea437          	lui	s0,0xfffea
     4bc:	40040413          	addi	s0,s0,1024 # fffea400 <_end_of_memory+0xfffba400>
     4c0:	8a098793          	addi	a5,s3,-1888 # 178a0 <_gp+0xe28c>
     4c4:	01010713          	addi	a4,sp,16
     4c8:	008787b3          	add	a5,a5,s0
     4cc:	00e78433          	add	s0,a5,a4
     4d0:	00040513          	mv	a0,s0
     4d4:	730010ef          	jal	ra,1c04 <pqcrystals_dilithium5_ref_polyvecl_ntt>
    uart_send_string("\r");
    uart_send_string(str);
  }
  #endif

  polyvec_matrix_pointwise_montgomery(&t1, mat, &s1hat);
     4d8:	fffee7b7          	lui	a5,0xfffee
     4dc:	8a098693          	addi	a3,s3,-1888
     4e0:	00f686b3          	add	a3,a3,a5
     4e4:	01010793          	addi	a5,sp,16
     4e8:	00f687b3          	add	a5,a3,a5
     4ec:	00f12223          	sw	a5,4(sp)
     4f0:	00412503          	lw	a0,4(sp)
     4f4:	ffff25b7          	lui	a1,0xffff2
     4f8:	8a098793          	addi	a5,s3,-1888
     4fc:	01010713          	addi	a4,sp,16
     500:	00b787b3          	add	a5,a5,a1
     504:	00e785b3          	add	a1,a5,a4
     508:	00040613          	mv	a2,s0
     50c:	484010ef          	jal	ra,1990 <pqcrystals_dilithium5_ref_polyvec_matrix_pointwise_montgomery>
#endif

#ifndef FPAU
  polyveck_reduce(&t1);
#endif
  polyveck_invntt_tomont(&t1);
     510:	00412503          	lw	a0,4(sp)
  polyvec_matrix_pointwise_montgomery(&t1, mat, &s1hat);
     514:	00098a13          	mv	s4,s3
  polyveck_add(&t1, &t1, &s2);

  /* Extract t1 and write public key */
  polyveck_caddq(&t1);
  polyveck_power2round(&t1, &t0, &t1);
  pack_pk(pk, rho, &t1);
     518:	fffe8437          	lui	s0,0xfffe8
  polyveck_invntt_tomont(&t1);
     51c:	32d010ef          	jal	ra,2048 <pqcrystals_dilithium5_ref_polyveck_invntt_tomont>
  polyveck_add(&t1, &t1, &s2);
     520:	00412583          	lw	a1,4(sp)
     524:	fffec7b7          	lui	a5,0xfffec
     528:	8a098713          	addi	a4,s3,-1888
     52c:	00f70733          	add	a4,a4,a5
     530:	01010793          	addi	a5,sp,16
     534:	00f707b3          	add	a5,a4,a5
     538:	00078613          	mv	a2,a5
     53c:	00058513          	mv	a0,a1
     540:	00f12423          	sw	a5,8(sp)
     544:	1b5010ef          	jal	ra,1ef8 <pqcrystals_dilithium5_ref_polyveck_add>
  polyveck_caddq(&t1);
     548:	00412503          	lw	a0,4(sp)
     54c:	16d010ef          	jal	ra,1eb8 <pqcrystals_dilithium5_ref_polyveck_caddq>
  polyveck_power2round(&t1, &t0, &t1);
     550:	00412603          	lw	a2,4(sp)
     554:	ffff07b7          	lui	a5,0xffff0
     558:	8a098713          	addi	a4,s3,-1888
     55c:	00f70733          	add	a4,a4,a5
     560:	01010793          	addi	a5,sp,16
     564:	00f707b3          	add	a5,a4,a5
     568:	00078593          	mv	a1,a5
     56c:	00060513          	mv	a0,a2
     570:	00f12623          	sw	a5,12(sp)
     574:	3e9010ef          	jal	ra,215c <pqcrystals_dilithium5_ref_polyveck_power2round>
  pack_pk(pk, rho, &t1);
     578:	78040993          	addi	s3,s0,1920 # fffe8780 <_end_of_memory+0xfffb8780>
     57c:	8a0a0793          	addi	a5,s4,-1888
     580:	01010713          	addi	a4,sp,16
     584:	00412603          	lw	a2,4(sp)
     588:	013787b3          	add	a5,a5,s3
     58c:	00e789b3          	add	s3,a5,a4
     590:	00098593          	mv	a1,s3
     594:	00048513          	mv	a0,s1
     598:	1e5000ef          	jal	ra,f7c <pqcrystals_dilithium5_ref_pack_pk>

  /* Compute H(rho, t1) and write secret key */
  shake256(tr, SEEDBYTES, pk, CRYPTO_PUBLICKEYBYTES);
     59c:	76040413          	addi	s0,s0,1888
     5a0:	8a0a0793          	addi	a5,s4,-1888
     5a4:	01010713          	addi	a4,sp,16
     5a8:	008787b3          	add	a5,a5,s0
     5ac:	00e78433          	add	s0,a5,a4
     5b0:	000016b7          	lui	a3,0x1
     5b4:	00048613          	mv	a2,s1
     5b8:	00040513          	mv	a0,s0
     5bc:	a2068693          	addi	a3,a3,-1504 # a20 <pqcrystals_dilithium5_ref_signature+0x3f4>
     5c0:	02000593          	li	a1,32
     5c4:	47c060ef          	jal	ra,6a40 <pqcrystals_dilithium_fips202_ref_shake256>
  pack_sk(sk, rho, tr, key, &t0, &s1, &s2);
     5c8:	fffe97b7          	lui	a5,0xfffe9
     5cc:	80078793          	addi	a5,a5,-2048 # fffe8800 <_end_of_memory+0xfffb8800>
     5d0:	8a0a0713          	addi	a4,s4,-1888
     5d4:	00f70733          	add	a4,a4,a5
     5d8:	01010793          	addi	a5,sp,16
     5dc:	00812803          	lw	a6,8(sp)
     5e0:	00f707b3          	add	a5,a4,a5
     5e4:	00c12703          	lw	a4,12(sp)
     5e8:	00090513          	mv	a0,s2
     5ec:	06098693          	addi	a3,s3,96
     5f0:	00040613          	mv	a2,s0
     5f4:	00098593          	mv	a1,s3
     5f8:	335000ef          	jal	ra,112c <pqcrystals_dilithium5_ref_pack_sk>

  return 0;
}
     5fc:	000172b7          	lui	t0,0x17
     600:	0e028293          	addi	t0,t0,224 # 170e0 <_gp+0xdacc>
     604:	00510133          	add	sp,sp,t0
     608:	7ec12083          	lw	ra,2028(sp)
     60c:	7e812403          	lw	s0,2024(sp)
     610:	7e412483          	lw	s1,2020(sp)
     614:	7e012903          	lw	s2,2016(sp)
     618:	7dc12983          	lw	s3,2012(sp)
     61c:	7d812a03          	lw	s4,2008(sp)
     620:	00000513          	li	a0,0
     624:	7f010113          	addi	sp,sp,2032
     628:	00008067          	ret

0000062c <pqcrystals_dilithium5_ref_signature>:
int crypto_sign_signature(uint8_t *sig,
                          size_t *siglen,
                          const uint8_t *m,
                          size_t mlen,
                          const uint8_t *sk)
{
     62c:	81010113          	addi	sp,sp,-2032
     630:	fffe32b7          	lui	t0,0xfffe3
     634:	df028293          	addi	t0,t0,-528 # fffe2df0 <_end_of_memory+0xfffb2df0>
     638:	7e912223          	sw	s1,2020(sp)
     63c:	7d912223          	sw	s9,1988(sp)
  rho = seedbuf;
  tr = rho + SEEDBYTES;
  key = tr + SEEDBYTES;
  mu = key + SEEDBYTES;
  rhoprime = mu + CRHBYTES;
  unpack_sk(rho, tr, key, &t0, &s1, &s2, sk);
     640:	fffe24b7          	lui	s1,0xfffe2
     644:	0001ecb7          	lui	s9,0x1e
{
     648:	7e112623          	sw	ra,2028(sp)
     64c:	7e812423          	sw	s0,2024(sp)
     650:	7f212023          	sw	s2,2016(sp)
     654:	7d312e23          	sw	s3,2012(sp)
     658:	7d412c23          	sw	s4,2008(sp)
     65c:	7d512a23          	sw	s5,2004(sp)
     660:	7d612823          	sw	s6,2000(sp)
     664:	7d712623          	sw	s7,1996(sp)
     668:	7d812423          	sw	s8,1992(sp)
     66c:	7da12023          	sw	s10,1984(sp)
     670:	7bb12e23          	sw	s11,1980(sp)
  unpack_sk(rho, tr, key, &t0, &s1, &s2, sk);
     674:	72048b93          	addi	s7,s1,1824 # fffe2720 <_end_of_memory+0xfffb2720>
{
     678:	00510133          	add	sp,sp,t0
  unpack_sk(rho, tr, key, &t0, &s1, &s2, sk);
     67c:	9b0c8793          	addi	a5,s9,-1616 # 1d9b0 <_gp+0x1439c>
     680:	017787b3          	add	a5,a5,s7
     684:	01010813          	addi	a6,sp,16
     688:	01078bb3          	add	s7,a5,a6
     68c:	fffea7b7          	lui	a5,0xfffea
     690:	9b0c8813          	addi	a6,s9,-1616
     694:	00f80833          	add	a6,a6,a5
     698:	01010793          	addi	a5,sp,16
     69c:	00f807b3          	add	a5,a6,a5
     6a0:	fffe39b7          	lui	s3,0xfffe3
     6a4:	c0098c13          	addi	s8,s3,-1024 # fffe2c00 <_end_of_memory+0xfffb2c00>
     6a8:	00f12023          	sw	a5,0(sp)
     6ac:	9b0c8793          	addi	a5,s9,-1616
     6b0:	018787b3          	add	a5,a5,s8
     6b4:	01010813          	addi	a6,sp,16
     6b8:	01078c33          	add	s8,a5,a6
     6bc:	fffe87b7          	lui	a5,0xfffe8
     6c0:	9b0c8813          	addi	a6,s9,-1616
     6c4:	00f80833          	add	a6,a6,a5
     6c8:	01010793          	addi	a5,sp,16
     6cc:	00f807b3          	add	a5,a6,a5
     6d0:	00f12223          	sw	a5,4(sp)
{
     6d4:	00068913          	mv	s2,a3
  unpack_sk(rho, tr, key, &t0, &s1, &s2, sk);
     6d8:	00012783          	lw	a5,0(sp)
     6dc:	00412683          	lw	a3,4(sp)
     6e0:	040b8a93          	addi	s5,s7,64
     6e4:	020b8b13          	addi	s6,s7,32
{
     6e8:	00058893          	mv	a7,a1
  unpack_sk(rho, tr, key, &t0, &s1, &s2, sk);
     6ec:	00070813          	mv	a6,a4
{
     6f0:	00060413          	mv	s0,a2
  unpack_sk(rho, tr, key, &t0, &s1, &s2, sk);
     6f4:	000b0593          	mv	a1,s6
     6f8:	000a8613          	mv	a2,s5
     6fc:	000c0713          	mv	a4,s8
{
     700:	00050a13          	mv	s4,a0
  unpack_sk(rho, tr, key, &t0, &s1, &s2, sk);
     704:	000b8513          	mv	a0,s7
{
     708:	01112623          	sw	a7,12(sp)
  unpack_sk(rho, tr, key, &t0, &s1, &s2, sk);
     70c:	44d000ef          	jal	ra,1358 <pqcrystals_dilithium5_ref_unpack_sk>

  /* Compute CRH(tr, msg) */
  shake256_init(&state);
     710:	65048493          	addi	s1,s1,1616
     714:	9b0c8793          	addi	a5,s9,-1616
     718:	009787b3          	add	a5,a5,s1
     71c:	01010713          	addi	a4,sp,16
     720:	00e784b3          	add	s1,a5,a4
     724:	00048513          	mv	a0,s1
     728:	665050ef          	jal	ra,658c <pqcrystals_dilithium_fips202_ref_shake256_init>
  shake256_absorb(&state, tr, SEEDBYTES);
     72c:	02000613          	li	a2,32
     730:	000b0593          	mv	a1,s6
     734:	00048513          	mv	a0,s1
     738:	685050ef          	jal	ra,65bc <pqcrystals_dilithium_fips202_ref_shake256_absorb>
  shake256_absorb(&state, m, mlen);
     73c:	00090613          	mv	a2,s2
     740:	00040593          	mv	a1,s0
     744:	00048513          	mv	a0,s1
     748:	675050ef          	jal	ra,65bc <pqcrystals_dilithium_fips202_ref_shake256_absorb>
  shake256_finalize(&state);
     74c:	00048513          	mv	a0,s1
     750:	6a5050ef          	jal	ra,65f4 <pqcrystals_dilithium_fips202_ref_shake256_finalize>
  shake256_squeeze(mu, CRHBYTES, &state);
     754:	00048613          	mv	a2,s1
     758:	04000593          	li	a1,64
     75c:	060b8513          	addi	a0,s7,96
     760:	709050ef          	jal	ra,6668 <pqcrystals_dilithium_fips202_ref_shake256_squeeze>

#ifdef DILITHIUM_RANDOMIZED_SIGNING
  randombytes(rhoprime, CRHBYTES);
#else
  shake256(rhoprime, CRHBYTES, key, SEEDBYTES + CRHBYTES);
     764:	0a0b8d93          	addi	s11,s7,160
     768:	000a8613          	mv	a2,s5
     76c:	06000693          	li	a3,96
     770:	04000593          	li	a1,64
     774:	000d8513          	mv	a0,s11
     778:	2c8060ef          	jal	ra,6a40 <pqcrystals_dilithium_fips202_ref_shake256>
#endif

  /* Expand matrix and transform vectors */
  polyvec_matrix_expand(mat, rho);
     77c:	ffff2537          	lui	a0,0xffff2
     780:	9b0c8793          	addi	a5,s9,-1616
     784:	00a787b3          	add	a5,a5,a0
     788:	01010713          	addi	a4,sp,16
     78c:	00e78533          	add	a0,a5,a4
     790:	000b8593          	mv	a1,s7
     794:	150010ef          	jal	ra,18e4 <pqcrystals_dilithium5_ref_polyvec_matrix_expand>
  polyvecl_ntt(&s1);
     798:	000c0513          	mv	a0,s8
     79c:	468010ef          	jal	ra,1c04 <pqcrystals_dilithium5_ref_polyvecl_ntt>
  polyveck_ntt(&s2);
     7a0:	00012503          	lw	a0,0(sp)
  polyvec_matrix_expand(mat, rho);
     7a4:	000c8913          	mv	s2,s9
  polyveck_ntt(&t0);

rej:
  /* Sample intermediate vector y */
  polyvecl_uniform_gamma1(&y, rhoprime, nonce++);
     7a8:	fffe5d37          	lui	s10,0xfffe5
  polyveck_ntt(&s2);
     7ac:	05d010ef          	jal	ra,2008 <pqcrystals_dilithium5_ref_polyveck_ntt>
  polyveck_ntt(&t0);
     7b0:	00412503          	lw	a0,4(sp)
  polyvecl_uniform_gamma1(&y, rhoprime, nonce++);
     7b4:	800d0a93          	addi	s5,s10,-2048 # fffe4800 <_end_of_memory+0xfffb4800>

  /* Matrix-vector multiplication */
  z = y;
     7b8:	fffe6cb7          	lui	s9,0xfffe6
  polyveck_ntt(&t0);
     7bc:	04d010ef          	jal	ra,2008 <pqcrystals_dilithium5_ref_polyveck_ntt>
  polyvecl_uniform_gamma1(&y, rhoprime, nonce++);
     7c0:	9b090793          	addi	a5,s2,-1616
     7c4:	01010713          	addi	a4,sp,16
     7c8:	015787b3          	add	a5,a5,s5
  polyvecl_ntt(&z);
     7cc:	400c8413          	addi	s0,s9,1024 # fffe6400 <_end_of_memory+0xfffb6400>
  polyvecl_uniform_gamma1(&y, rhoprime, nonce++);
     7d0:	00e78ab3          	add	s5,a5,a4
  polyvecl_ntt(&z);
     7d4:	9b090793          	addi	a5,s2,-1616
     7d8:	008787b3          	add	a5,a5,s0
  shake256_init(&state);
  shake256_absorb(&state, mu, CRHBYTES);
  shake256_absorb(&state, sig, K*POLYW1_PACKEDBYTES);
  shake256_finalize(&state);
  shake256_squeeze(sig, SEEDBYTES, &state);
  poly_challenge(&cp, sig);
     7dc:	80098993          	addi	s3,s3,-2048
  polyvecl_ntt(&z);
     7e0:	00e78433          	add	s0,a5,a4
  poly_challenge(&cp, sig);
     7e4:	9b090793          	addi	a5,s2,-1616
     7e8:	013787b3          	add	a5,a5,s3
  uint16_t nonce = 0;
     7ec:	00000613          	li	a2,0
  poly_challenge(&cp, sig);
     7f0:	00e789b3          	add	s3,a5,a4
  polyvecl_uniform_gamma1(&y, rhoprime, nonce++);
     7f4:	00160793          	addi	a5,a2,1 # 4001 <KeccakF1600_StatePermute+0x62d>
     7f8:	000d8593          	mv	a1,s11
     7fc:	000a8513          	mv	a0,s5
     800:	01079913          	slli	s2,a5,0x10
     804:	2d4010ef          	jal	ra,1ad8 <pqcrystals_dilithium5_ref_polyvecl_uniform_gamma1>
  z = y;
     808:	000037b7          	lui	a5,0x3
     80c:	01010713          	addi	a4,sp,16
     810:	9b078793          	addi	a5,a5,-1616 # 29b0 <pqcrystals_dilithium5_ref_poly_uniform_eta+0xa4>
     814:	00e787b3          	add	a5,a5,a4
     818:	00004737          	lui	a4,0x4
     81c:	01010693          	addi	a3,sp,16
     820:	9b070713          	addi	a4,a4,-1616 # 39b0 <uart_send_string+0x18>
     824:	00d70733          	add	a4,a4,a3
     828:	000026b7          	lui	a3,0x2
     82c:	80078793          	addi	a5,a5,-2048
     830:	c0068693          	addi	a3,a3,-1024 # 1c00 <pqcrystals_dilithium5_ref_polyvecl_add+0x68>
  polyvecl_uniform_gamma1(&y, rhoprime, nonce++);
     834:	01095913          	srli	s2,s2,0x10
  z = y;
     838:	40070713          	addi	a4,a4,1024
     83c:	00d786b3          	add	a3,a5,a3
     840:	0007a803          	lw	a6,0(a5)
     844:	0047a503          	lw	a0,4(a5)
     848:	0087a583          	lw	a1,8(a5)
     84c:	00c7a603          	lw	a2,12(a5)
     850:	01072023          	sw	a6,0(a4)
     854:	00a72223          	sw	a0,4(a4)
     858:	00b72423          	sw	a1,8(a4)
     85c:	00c72623          	sw	a2,12(a4)
     860:	01078793          	addi	a5,a5,16
     864:	01070713          	addi	a4,a4,16
     868:	fcd79ce3          	bne	a5,a3,840 <pqcrystals_dilithium5_ref_signature+0x214>
  polyvecl_ntt(&z);
     86c:	00040513          	mv	a0,s0
     870:	394010ef          	jal	ra,1c04 <pqcrystals_dilithium5_ref_polyvecl_ntt>
  polyvec_matrix_pointwise_montgomery(&w1, mat, &z);
     874:	0001eb37          	lui	s6,0x1e
     878:	fffec7b7          	lui	a5,0xfffec
     87c:	9b0b0713          	addi	a4,s6,-1616 # 1d9b0 <_gp+0x1439c>
     880:	00f70733          	add	a4,a4,a5
     884:	01010793          	addi	a5,sp,16
     888:	00f707b3          	add	a5,a4,a5
     88c:	00f12023          	sw	a5,0(sp)
     890:	00012503          	lw	a0,0(sp)
     894:	ffff25b7          	lui	a1,0xffff2
     898:	9b0b0793          	addi	a5,s6,-1616
     89c:	00b787b3          	add	a5,a5,a1
     8a0:	01010713          	addi	a4,sp,16
     8a4:	00e785b3          	add	a1,a5,a4
     8a8:	00040613          	mv	a2,s0
     8ac:	0e4010ef          	jal	ra,1990 <pqcrystals_dilithium5_ref_polyvec_matrix_pointwise_montgomery>
  polyveck_invntt_tomont(&w1);
     8b0:	00012503          	lw	a0,0(sp)
     8b4:	794010ef          	jal	ra,2048 <pqcrystals_dilithium5_ref_polyveck_invntt_tomont>
  polyveck_caddq(&w1);
     8b8:	00012503          	lw	a0,0(sp)
     8bc:	5fc010ef          	jal	ra,1eb8 <pqcrystals_dilithium5_ref_polyveck_caddq>
  polyveck_decompose(&w1, &w0, &w1);
     8c0:	00012603          	lw	a2,0(sp)
     8c4:	fffee7b7          	lui	a5,0xfffee
     8c8:	9b0b0713          	addi	a4,s6,-1616
     8cc:	00f70733          	add	a4,a4,a5
     8d0:	01010793          	addi	a5,sp,16
     8d4:	00f707b3          	add	a5,a4,a5
     8d8:	00078593          	mv	a1,a5
     8dc:	00060513          	mv	a0,a2
     8e0:	00f12223          	sw	a5,4(sp)
     8e4:	0e1010ef          	jal	ra,21c4 <pqcrystals_dilithium5_ref_polyveck_decompose>
  polyveck_pack_w1(sig, &w1);
     8e8:	00012583          	lw	a1,0(sp)
     8ec:	000a0513          	mv	a0,s4
     8f0:	221010ef          	jal	ra,2310 <pqcrystals_dilithium5_ref_polyveck_pack_w1>
  shake256_init(&state);
     8f4:	00048513          	mv	a0,s1
     8f8:	495050ef          	jal	ra,658c <pqcrystals_dilithium_fips202_ref_shake256_init>
  shake256_absorb(&state, mu, CRHBYTES);
     8fc:	04000613          	li	a2,64
     900:	060b8593          	addi	a1,s7,96
     904:	00048513          	mv	a0,s1
     908:	4b5050ef          	jal	ra,65bc <pqcrystals_dilithium_fips202_ref_shake256_absorb>
  shake256_absorb(&state, sig, K*POLYW1_PACKEDBYTES);
     90c:	000a0593          	mv	a1,s4
     910:	40000613          	li	a2,1024
     914:	00048513          	mv	a0,s1
     918:	4a5050ef          	jal	ra,65bc <pqcrystals_dilithium_fips202_ref_shake256_absorb>
  shake256_finalize(&state);
     91c:	00048513          	mv	a0,s1
     920:	4d5050ef          	jal	ra,65f4 <pqcrystals_dilithium_fips202_ref_shake256_finalize>
  shake256_squeeze(sig, SEEDBYTES, &state);
     924:	00048613          	mv	a2,s1
     928:	02000593          	li	a1,32
     92c:	000a0513          	mv	a0,s4
     930:	539050ef          	jal	ra,6668 <pqcrystals_dilithium_fips202_ref_shake256_squeeze>
  poly_challenge(&cp, sig);
     934:	000a0593          	mv	a1,s4
     938:	00098513          	mv	a0,s3
     93c:	188020ef          	jal	ra,2ac4 <pqcrystals_dilithium5_ref_poly_challenge>
  poly_ntt(&cp);
     940:	00098513          	mv	a0,s3
     944:	36d010ef          	jal	ra,24b0 <pqcrystals_dilithium5_ref_poly_ntt>
  /* Compute z, reject if it reveals secret */
#ifdef PROFILING_MAC
  uart_send_string("\n\rPointwise mult l vector");
  asm("csrrs s2, "TICKS_REGISTER", zero");
#endif
  polyvecl_pointwise_poly_montgomery(&z, &cp, &s1);
     948:	000c0613          	mv	a2,s8
     94c:	00098593          	mv	a1,s3
     950:	00040513          	mv	a0,s0
     954:	338010ef          	jal	ra,1c8c <pqcrystals_dilithium5_ref_polyvecl_pointwise_poly_montgomery>
#ifdef PROFILING_MAC
  asm("csrrs s3, "TICKS_REGISTER", zero");
  print_runtime(cycle_start, cycle_end);
#endif

  polyvecl_invntt_tomont(&z);
     958:	00040513          	mv	a0,s0
     95c:	2ec010ef          	jal	ra,1c48 <pqcrystals_dilithium5_ref_polyvecl_invntt_tomont>

#ifdef PROFILING_ADD_SUB
  uart_send_string("\n\rADD polyvecl_add");
  asm("csrrs s2, "TICKS_REGISTER", zero");
#endif
  polyvecl_add(&z, &z, &y);
     960:	00040593          	mv	a1,s0
     964:	00040513          	mv	a0,s0
     968:	000a8613          	mv	a2,s5
     96c:	22c010ef          	jal	ra,1b98 <pqcrystals_dilithium5_ref_polyvecl_add>
#ifdef PROFILING_ADD_SUB
  asm("csrrs s3, "TICKS_REGISTER", zero");
  print_runtime(cycle_start, cycle_end);
#endif

  if(polyvecl_chknorm(&z, GAMMA1 - BETA))
     970:	000805b7          	lui	a1,0x80
     974:	f8858593          	addi	a1,a1,-120 # 7ff88 <_end_of_memory+0x4ff88>
     978:	00040513          	mv	a0,s0
     97c:	41c010ef          	jal	ra,1d98 <pqcrystals_dilithium5_ref_polyvecl_chknorm>
     980:	0c051663          	bnez	a0,a4c <pqcrystals_dilithium5_ref_signature+0x420>

#ifdef PROFILING_MAC
  uart_send_string("\n\rPointwise mult k vector");
  asm("csrrs s2, "TICKS_REGISTER", zero");
#endif
  polyveck_pointwise_poly_montgomery(&h, &cp, &s2);
     984:	ffff07b7          	lui	a5,0xffff0
     988:	9b0b0713          	addi	a4,s6,-1616
     98c:	00f70733          	add	a4,a4,a5
     990:	01010793          	addi	a5,sp,16
     994:	00f707b3          	add	a5,a4,a5
     998:	00f12423          	sw	a5,8(sp)
     99c:	00812503          	lw	a0,8(sp)
     9a0:	fffea637          	lui	a2,0xfffea
     9a4:	9b0b0713          	addi	a4,s6,-1616
     9a8:	00c70733          	add	a4,a4,a2
     9ac:	01010793          	addi	a5,sp,16
     9b0:	00f70633          	add	a2,a4,a5
     9b4:	00098593          	mv	a1,s3
     9b8:	6d0010ef          	jal	ra,2088 <pqcrystals_dilithium5_ref_polyveck_pointwise_poly_montgomery>
#ifdef PROFILING_MAC
  asm("csrrs s3, "TICKS_REGISTER", zero");
  print_runtime(cycle_start, cycle_end);
#endif

  polyveck_invntt_tomont(&h);
     9bc:	00812503          	lw	a0,8(sp)
#ifdef PROFILING_ADD_SUB
  asm("csrrs s3, "TICKS_REGISTER", zero");
  print_runtime(cycle_start, cycle_end);
#endif

  if(polyveck_chknorm(&w0, GAMMA2 - BETA))
     9c0:	00040b37          	lui	s6,0x40
  polyveck_invntt_tomont(&h);
     9c4:	684010ef          	jal	ra,2048 <pqcrystals_dilithium5_ref_polyveck_invntt_tomont>
  polyveck_sub(&w0, &w0, &h);
     9c8:	00412583          	lw	a1,4(sp)
     9cc:	00812603          	lw	a2,8(sp)
     9d0:	00058513          	mv	a0,a1
     9d4:	58c010ef          	jal	ra,1f60 <pqcrystals_dilithium5_ref_polyveck_sub>
  if(polyveck_chknorm(&w0, GAMMA2 - BETA))
     9d8:	00412503          	lw	a0,4(sp)
     9dc:	e88b0593          	addi	a1,s6,-376 # 3fe88 <_end_of_memory+0xfe88>
     9e0:	70c010ef          	jal	ra,20ec <pqcrystals_dilithium5_ref_polyveck_chknorm>
     9e4:	06051463          	bnez	a0,a4c <pqcrystals_dilithium5_ref_signature+0x420>
    goto rej;

  /* Compute hints for w1 */
  polyveck_pointwise_poly_montgomery(&h, &cp, &t0);
     9e8:	0001e7b7          	lui	a5,0x1e
     9ec:	00812503          	lw	a0,8(sp)
     9f0:	fffe8637          	lui	a2,0xfffe8
     9f4:	9b078793          	addi	a5,a5,-1616 # 1d9b0 <_gp+0x1439c>
     9f8:	00c787b3          	add	a5,a5,a2
     9fc:	01010713          	addi	a4,sp,16
     a00:	00098593          	mv	a1,s3
     a04:	00e78633          	add	a2,a5,a4
     a08:	680010ef          	jal	ra,2088 <pqcrystals_dilithium5_ref_polyveck_pointwise_poly_montgomery>
  polyveck_invntt_tomont(&h);
     a0c:	00812503          	lw	a0,8(sp)
     a10:	638010ef          	jal	ra,2048 <pqcrystals_dilithium5_ref_polyveck_invntt_tomont>
    uart_send_string("\r");
    uart_send_string(str);
  }
#endif

  if(polyveck_chknorm(&h, GAMMA2))
     a14:	00812503          	lw	a0,8(sp)
     a18:	f00b0593          	addi	a1,s6,-256
     a1c:	6d0010ef          	jal	ra,20ec <pqcrystals_dilithium5_ref_polyveck_chknorm>
     a20:	02051663          	bnez	a0,a4c <pqcrystals_dilithium5_ref_signature+0x420>
    goto rej;

  polyveck_add(&w0, &w0, &h);
     a24:	00412583          	lw	a1,4(sp)
     a28:	00812603          	lw	a2,8(sp)
     a2c:	00058513          	mv	a0,a1
     a30:	4c8010ef          	jal	ra,1ef8 <pqcrystals_dilithium5_ref_polyveck_add>
  n = polyveck_make_hint(&h, &w0, &w1);
     a34:	00012603          	lw	a2,0(sp)
     a38:	00412583          	lw	a1,4(sp)
     a3c:	00812503          	lw	a0,8(sp)
     a40:	7ec010ef          	jal	ra,222c <pqcrystals_dilithium5_ref_polyveck_make_hint>
  if(n > OMEGA)
     a44:	04b00793          	li	a5,75
     a48:	00a7f663          	bgeu	a5,a0,a54 <pqcrystals_dilithium5_ref_signature+0x428>
{
     a4c:	00090613          	mv	a2,s2
     a50:	da5ff06f          	j	7f4 <pqcrystals_dilithium5_ref_signature+0x1c8>
    goto rej;

  /* Write signature */
  pack_sig(sig, sig, &z, &h);
     a54:	00812683          	lw	a3,8(sp)
     a58:	000a0513          	mv	a0,s4
     a5c:	00040613          	mv	a2,s0
     a60:	000a0593          	mv	a1,s4
     a64:	325000ef          	jal	ra,1588 <pqcrystals_dilithium5_ref_pack_sig>
  *siglen = CRYPTO_BYTES;
     a68:	00c12703          	lw	a4,12(sp)
     a6c:	000017b7          	lui	a5,0x1
     a70:	1f378793          	addi	a5,a5,499 # 11f3 <pqcrystals_dilithium5_ref_pack_sk+0xc7>
  return 0;
}
     a74:	0001d2b7          	lui	t0,0x1d
  *siglen = CRYPTO_BYTES;
     a78:	00f72023          	sw	a5,0(a4)
}
     a7c:	21028293          	addi	t0,t0,528 # 1d210 <_gp+0x13bfc>
     a80:	00510133          	add	sp,sp,t0
     a84:	7ec12083          	lw	ra,2028(sp)
     a88:	7e812403          	lw	s0,2024(sp)
     a8c:	7e412483          	lw	s1,2020(sp)
     a90:	7e012903          	lw	s2,2016(sp)
     a94:	7dc12983          	lw	s3,2012(sp)
     a98:	7d812a03          	lw	s4,2008(sp)
     a9c:	7d412a83          	lw	s5,2004(sp)
     aa0:	7d012b03          	lw	s6,2000(sp)
     aa4:	7cc12b83          	lw	s7,1996(sp)
     aa8:	7c812c03          	lw	s8,1992(sp)
     aac:	7c412c83          	lw	s9,1988(sp)
     ab0:	7c012d03          	lw	s10,1984(sp)
     ab4:	7bc12d83          	lw	s11,1980(sp)
     ab8:	00000513          	li	a0,0
     abc:	7f010113          	addi	sp,sp,2032
     ac0:	00008067          	ret

00000ac4 <pqcrystals_dilithium5_ref>:
int crypto_sign(uint8_t *sm,
                size_t *smlen,
                const uint8_t *m,
                size_t mlen,
                const uint8_t *sk)
{
     ac4:	ff010113          	addi	sp,sp,-16
     ac8:	00812423          	sw	s0,8(sp)
     acc:	00912223          	sw	s1,4(sp)
     ad0:	00112623          	sw	ra,12(sp)
     ad4:	00068413          	mv	s0,a3
     ad8:	00058493          	mv	s1,a1
  size_t i;

  for(i = 0; i < mlen; ++i)
     adc:	02068a63          	beqz	a3,b10 <pqcrystals_dilithium5_ref+0x4c>
     ae0:	00001837          	lui	a6,0x1
     ae4:	1f280813          	addi	a6,a6,498 # 11f2 <pqcrystals_dilithium5_ref_pack_sk+0xc6>
     ae8:	fff68793          	addi	a5,a3,-1
     aec:	01068833          	add	a6,a3,a6
     af0:	00f607b3          	add	a5,a2,a5
     af4:	01050833          	add	a6,a0,a6
    sm[CRYPTO_BYTES + mlen - 1 - i] = m[mlen - 1 - i];
     af8:	0007c303          	lbu	t1,0(a5)
     afc:	00078893          	mv	a7,a5
  for(i = 0; i < mlen; ++i)
     b00:	fff80813          	addi	a6,a6,-1
    sm[CRYPTO_BYTES + mlen - 1 - i] = m[mlen - 1 - i];
     b04:	006800a3          	sb	t1,1(a6)
  for(i = 0; i < mlen; ++i)
     b08:	fff78793          	addi	a5,a5,-1
     b0c:	ff1616e3          	bne	a2,a7,af8 <pqcrystals_dilithium5_ref+0x34>
  crypto_sign_signature(sm, smlen, sm + CRYPTO_BYTES, mlen, sk);
     b10:	00001637          	lui	a2,0x1
     b14:	1f360613          	addi	a2,a2,499 # 11f3 <pqcrystals_dilithium5_ref_pack_sk+0xc7>
     b18:	00040693          	mv	a3,s0
     b1c:	00048593          	mv	a1,s1
     b20:	00c50633          	add	a2,a0,a2
     b24:	b09ff0ef          	jal	ra,62c <pqcrystals_dilithium5_ref_signature>
  *smlen += mlen;
     b28:	0004a783          	lw	a5,0(s1)
  return 0;
}
     b2c:	00c12083          	lw	ra,12(sp)
     b30:	00000513          	li	a0,0
  *smlen += mlen;
     b34:	008787b3          	add	a5,a5,s0
}
     b38:	00812403          	lw	s0,8(sp)
  *smlen += mlen;
     b3c:	00f4a023          	sw	a5,0(s1)
}
     b40:	00412483          	lw	s1,4(sp)
     b44:	01010113          	addi	sp,sp,16
     b48:	00008067          	ret

00000b4c <pqcrystals_dilithium5_ref_verify>:
int crypto_sign_verify(const uint8_t *sig,
                       size_t siglen,
                       const uint8_t *m,
                       size_t mlen,
                       const uint8_t *pk)
{
     b4c:	a5010113          	addi	sp,sp,-1456
     b50:	59912223          	sw	s9,1412(sp)
  poly cp;
  polyvecl mat[K], z;
  polyveck t1, w1, h;
  keccak_state state;

  if(siglen != CRYPTO_BYTES)
     b54:	00001cb7          	lui	s9,0x1
{
     b58:	5a112623          	sw	ra,1452(sp)
     b5c:	5a812423          	sw	s0,1448(sp)
     b60:	5a912223          	sw	s1,1444(sp)
     b64:	5b212023          	sw	s2,1440(sp)
     b68:	59312e23          	sw	s3,1436(sp)
     b6c:	59412c23          	sw	s4,1432(sp)
     b70:	59512a23          	sw	s5,1428(sp)
     b74:	59612823          	sw	s6,1424(sp)
     b78:	59712623          	sw	s7,1420(sp)
     b7c:	59812423          	sw	s8,1416(sp)
     b80:	59a12023          	sw	s10,1408(sp)
     b84:	fffea2b7          	lui	t0,0xfffea
  if(siglen != CRYPTO_BYTES)
     b88:	1f3c8793          	addi	a5,s9,499 # 11f3 <pqcrystals_dilithium5_ref_pack_sk+0xc7>
{
     b8c:	00510133          	add	sp,sp,t0
  if(siglen != CRYPTO_BYTES)
     b90:	28f59e63          	bne	a1,a5,e2c <pqcrystals_dilithium5_ref_verify+0x2e0>
    return -1;

  unpack_pk(rho, &t1, pk);
     b94:	00016d37          	lui	s10,0x16
     b98:	00070913          	mv	s2,a4
     b9c:	fffec7b7          	lui	a5,0xfffec
     ba0:	570d0713          	addi	a4,s10,1392 # 16570 <_gp+0xcf5c>
     ba4:	00f70733          	add	a4,a4,a5
     ba8:	01010793          	addi	a5,sp,16
     bac:	fffea4b7          	lui	s1,0xfffea
     bb0:	00f707b3          	add	a5,a4,a5
     bb4:	00f12223          	sw	a5,4(sp)
     bb8:	a9048b13          	addi	s6,s1,-1392 # fffe9a90 <_end_of_memory+0xfffb9a90>
     bbc:	570d0793          	addi	a5,s10,1392
     bc0:	016787b3          	add	a5,a5,s6
     bc4:	01010713          	addi	a4,sp,16
     bc8:	00412583          	lw	a1,4(sp)
     bcc:	00e78b33          	add	s6,a5,a4
     bd0:	00050a13          	mv	s4,a0
     bd4:	00060b93          	mv	s7,a2
     bd8:	000b0513          	mv	a0,s6
     bdc:	00090613          	mv	a2,s2
     be0:	00068c13          	mv	s8,a3
     be4:	470000ef          	jal	ra,1054 <pqcrystals_dilithium5_ref_unpack_pk>
  if(unpack_sig(c, &z, &h, sig))
     be8:	ffff07b7          	lui	a5,0xffff0
     bec:	570d0713          	addi	a4,s10,1392
     bf0:	00f70733          	add	a4,a4,a5
     bf4:	01010793          	addi	a5,sp,16
     bf8:	00f707b3          	add	a5,a4,a5
     bfc:	40048993          	addi	s3,s1,1024
     c00:	00f12423          	sw	a5,8(sp)
     c04:	570d0793          	addi	a5,s10,1392
     c08:	013787b3          	add	a5,a5,s3
     c0c:	01010713          	addi	a4,sp,16
     c10:	ab048593          	addi	a1,s1,-1360
     c14:	00e789b3          	add	s3,a5,a4
     c18:	570d0793          	addi	a5,s10,1392
     c1c:	00b787b3          	add	a5,a5,a1
     c20:	00812603          	lw	a2,8(sp)
     c24:	00e78433          	add	s0,a5,a4
     c28:	000a0693          	mv	a3,s4
     c2c:	00098593          	mv	a1,s3
     c30:	00040513          	mv	a0,s0
     c34:	2b9000ef          	jal	ra,16ec <pqcrystals_dilithium5_ref_unpack_sig>
     c38:	1e051a63          	bnez	a0,e2c <pqcrystals_dilithium5_ref_verify+0x2e0>
    return -1;
  if(polyvecl_chknorm(&z, GAMMA1 - BETA))
     c3c:	000805b7          	lui	a1,0x80
     c40:	f8858593          	addi	a1,a1,-120 # 7ff88 <_end_of_memory+0x4ff88>
     c44:	00098513          	mv	a0,s3
     c48:	150010ef          	jal	ra,1d98 <pqcrystals_dilithium5_ref_polyvecl_chknorm>
     c4c:	00050a93          	mv	s5,a0
     c50:	1c051e63          	bnez	a0,e2c <pqcrystals_dilithium5_ref_verify+0x2e0>
    return -1;

  /* Compute CRH(H(rho, t1), msg) */
  shake256(mu, SEEDBYTES, pk, CRYPTO_PUBLICKEYBYTES);
     c54:	af048a13          	addi	s4,s1,-1296
     c58:	570d0793          	addi	a5,s10,1392
     c5c:	014787b3          	add	a5,a5,s4
     c60:	01010713          	addi	a4,sp,16
     c64:	00e78a33          	add	s4,a5,a4
     c68:	a20c8693          	addi	a3,s9,-1504
     c6c:	00090613          	mv	a2,s2
     c70:	02000593          	li	a1,32
     c74:	000a0513          	mv	a0,s4
     c78:	5c9050ef          	jal	ra,6a40 <pqcrystals_dilithium_fips202_ref_shake256>
  shake256_init(&state);
     c7c:	b3048913          	addi	s2,s1,-1232
     c80:	570d0793          	addi	a5,s10,1392
     c84:	012787b3          	add	a5,a5,s2
     c88:	01010713          	addi	a4,sp,16
     c8c:	00e78933          	add	s2,a5,a4
     c90:	00090513          	mv	a0,s2
     c94:	0f9050ef          	jal	ra,658c <pqcrystals_dilithium_fips202_ref_shake256_init>
  shake256_absorb(&state, mu, SEEDBYTES);
     c98:	02000613          	li	a2,32
     c9c:	000a0593          	mv	a1,s4
     ca0:	00090513          	mv	a0,s2
     ca4:	119050ef          	jal	ra,65bc <pqcrystals_dilithium_fips202_ref_shake256_absorb>
  shake256_absorb(&state, m, mlen);
     ca8:	000c0613          	mv	a2,s8
     cac:	000b8593          	mv	a1,s7
     cb0:	00090513          	mv	a0,s2
     cb4:	109050ef          	jal	ra,65bc <pqcrystals_dilithium_fips202_ref_shake256_absorb>
  shake256_finalize(&state);
     cb8:	00090513          	mv	a0,s2
     cbc:	139050ef          	jal	ra,65f4 <pqcrystals_dilithium_fips202_ref_shake256_finalize>
  shake256_squeeze(mu, CRHBYTES, &state);
     cc0:	00090613          	mv	a2,s2
     cc4:	04000593          	li	a1,64
     cc8:	000a0513          	mv	a0,s4
     ccc:	19d050ef          	jal	ra,6668 <pqcrystals_dilithium_fips202_ref_shake256_squeeze>

  /* Matrix-vector multiplication; compute Az - c2^dt1 */
  poly_challenge(&cp, c);
     cd0:	00040593          	mv	a1,s0
     cd4:	58010513          	addi	a0,sp,1408
     cd8:	5ed010ef          	jal	ra,2ac4 <pqcrystals_dilithium5_ref_poly_challenge>
  polyvec_matrix_expand(mat, rho);
     cdc:	ffff27b7          	lui	a5,0xffff2
     ce0:	570d0713          	addi	a4,s10,1392
     ce4:	00f70733          	add	a4,a4,a5
     ce8:	01010793          	addi	a5,sp,16
     cec:	00f707b3          	add	a5,a4,a5
     cf0:	00078513          	mv	a0,a5
     cf4:	000b0593          	mv	a1,s6
     cf8:	00f12623          	sw	a5,12(sp)
     cfc:	3e9000ef          	jal	ra,18e4 <pqcrystals_dilithium5_ref_polyvec_matrix_expand>

  polyvecl_ntt(&z);
     d00:	00098513          	mv	a0,s3
     d04:	701000ef          	jal	ra,1c04 <pqcrystals_dilithium5_ref_polyvecl_ntt>
  polyvec_matrix_pointwise_montgomery(&w1, mat, &z);
     d08:	fffee7b7          	lui	a5,0xfffee
     d0c:	570d0713          	addi	a4,s10,1392
     d10:	00f70733          	add	a4,a4,a5
     d14:	00c12583          	lw	a1,12(sp)
     d18:	01010793          	addi	a5,sp,16
     d1c:	00f707b3          	add	a5,a4,a5
     d20:	00078513          	mv	a0,a5
     d24:	00098613          	mv	a2,s3
     d28:	00f12023          	sw	a5,0(sp)
     d2c:	465000ef          	jal	ra,1990 <pqcrystals_dilithium5_ref_polyvec_matrix_pointwise_montgomery>

  poly_ntt(&cp);
     d30:	58010513          	addi	a0,sp,1408
     d34:	77c010ef          	jal	ra,24b0 <pqcrystals_dilithium5_ref_poly_ntt>
  polyveck_shiftl(&t1);
     d38:	00412503          	lw	a0,4(sp)
  polyveck_invntt_tomont(&w1);

  /* Reconstruct w1 */
  polyveck_caddq(&w1);
  polyveck_use_hint(&w1, &w1, &h);
  polyveck_pack_w1(buf, &w1);
     d3c:	c0048993          	addi	s3,s1,-1024
  /* Call random oracle and verify challenge */
  shake256_init(&state);
  shake256_absorb(&state, mu, CRHBYTES);
  shake256_absorb(&state, buf, K*POLYW1_PACKEDBYTES);
  shake256_finalize(&state);
  shake256_squeeze(c2, SEEDBYTES, &state);
     d40:	ad048493          	addi	s1,s1,-1328
  polyveck_shiftl(&t1);
     d44:	284010ef          	jal	ra,1fc8 <pqcrystals_dilithium5_ref_polyveck_shiftl>
  polyveck_ntt(&t1);
     d48:	00412503          	lw	a0,4(sp)
     d4c:	2bc010ef          	jal	ra,2008 <pqcrystals_dilithium5_ref_polyveck_ntt>
  polyveck_pointwise_poly_montgomery(&t1, &cp, &t1);
     d50:	00412603          	lw	a2,4(sp)
     d54:	58010593          	addi	a1,sp,1408
     d58:	00060513          	mv	a0,a2
     d5c:	32c010ef          	jal	ra,2088 <pqcrystals_dilithium5_ref_polyveck_pointwise_poly_montgomery>
  polyveck_sub(&w1, &w1, &t1);
     d60:	00012583          	lw	a1,0(sp)
     d64:	00412603          	lw	a2,4(sp)
     d68:	00058513          	mv	a0,a1
     d6c:	1f4010ef          	jal	ra,1f60 <pqcrystals_dilithium5_ref_polyveck_sub>
  polyveck_reduce(&w1);
     d70:	00012503          	lw	a0,0(sp)
     d74:	104010ef          	jal	ra,1e78 <pqcrystals_dilithium5_ref_polyveck_reduce>
  polyveck_invntt_tomont(&w1);
     d78:	00012503          	lw	a0,0(sp)
     d7c:	2cc010ef          	jal	ra,2048 <pqcrystals_dilithium5_ref_polyveck_invntt_tomont>
  polyveck_caddq(&w1);
     d80:	00012503          	lw	a0,0(sp)
     d84:	134010ef          	jal	ra,1eb8 <pqcrystals_dilithium5_ref_polyveck_caddq>
  polyveck_use_hint(&w1, &w1, &h);
     d88:	00012583          	lw	a1,0(sp)
     d8c:	00812603          	lw	a2,8(sp)
     d90:	00058513          	mv	a0,a1
     d94:	514010ef          	jal	ra,22a8 <pqcrystals_dilithium5_ref_polyveck_use_hint>
  polyveck_pack_w1(buf, &w1);
     d98:	570d0793          	addi	a5,s10,1392
     d9c:	013787b3          	add	a5,a5,s3
     da0:	01010713          	addi	a4,sp,16
     da4:	00012583          	lw	a1,0(sp)
     da8:	00e789b3          	add	s3,a5,a4
     dac:	00098513          	mv	a0,s3
     db0:	560010ef          	jal	ra,2310 <pqcrystals_dilithium5_ref_polyveck_pack_w1>
  shake256_init(&state);
     db4:	00090513          	mv	a0,s2
     db8:	7d4050ef          	jal	ra,658c <pqcrystals_dilithium_fips202_ref_shake256_init>
  shake256_absorb(&state, mu, CRHBYTES);
     dbc:	04000613          	li	a2,64
     dc0:	000a0593          	mv	a1,s4
     dc4:	00090513          	mv	a0,s2
     dc8:	7f4050ef          	jal	ra,65bc <pqcrystals_dilithium_fips202_ref_shake256_absorb>
  shake256_absorb(&state, buf, K*POLYW1_PACKEDBYTES);
     dcc:	40000613          	li	a2,1024
     dd0:	00098593          	mv	a1,s3
     dd4:	00090513          	mv	a0,s2
     dd8:	7e4050ef          	jal	ra,65bc <pqcrystals_dilithium_fips202_ref_shake256_absorb>
  shake256_finalize(&state);
     ddc:	00090513          	mv	a0,s2
     de0:	015050ef          	jal	ra,65f4 <pqcrystals_dilithium_fips202_ref_shake256_finalize>
  shake256_squeeze(c2, SEEDBYTES, &state);
     de4:	570d0793          	addi	a5,s10,1392
     de8:	009787b3          	add	a5,a5,s1
     dec:	01010713          	addi	a4,sp,16
     df0:	00e784b3          	add	s1,a5,a4
     df4:	02000593          	li	a1,32
     df8:	00048513          	mv	a0,s1
     dfc:	00090613          	mv	a2,s2
     e00:	069050ef          	jal	ra,6668 <pqcrystals_dilithium_fips202_ref_shake256_squeeze>
  for(i = 0; i < SEEDBYTES; ++i)
     e04:	00040593          	mv	a1,s0
     e08:	00048513          	mv	a0,s1
     e0c:	02040693          	addi	a3,s0,32
     e10:	0080006f          	j	e18 <pqcrystals_dilithium5_ref_verify+0x2cc>
     e14:	00d58e63          	beq	a1,a3,e30 <pqcrystals_dilithium5_ref_verify+0x2e4>
    if(c[i] != c2[i])
     e18:	0005c703          	lbu	a4,0(a1)
     e1c:	00054783          	lbu	a5,0(a0) # ffff2000 <_end_of_memory+0xfffc2000>
  for(i = 0; i < SEEDBYTES; ++i)
     e20:	00158593          	addi	a1,a1,1
     e24:	00150513          	addi	a0,a0,1
    if(c[i] != c2[i])
     e28:	fef706e3          	beq	a4,a5,e14 <pqcrystals_dilithium5_ref_verify+0x2c8>
    return -1;
     e2c:	fff00a93          	li	s5,-1
      return -1;

  return 0;
}
     e30:	000162b7          	lui	t0,0x16
     e34:	00510133          	add	sp,sp,t0
     e38:	5ac12083          	lw	ra,1452(sp)
     e3c:	000a8513          	mv	a0,s5
     e40:	5a812403          	lw	s0,1448(sp)
     e44:	5a412483          	lw	s1,1444(sp)
     e48:	5a012903          	lw	s2,1440(sp)
     e4c:	59c12983          	lw	s3,1436(sp)
     e50:	59812a03          	lw	s4,1432(sp)
     e54:	59412a83          	lw	s5,1428(sp)
     e58:	59012b03          	lw	s6,1424(sp)
     e5c:	58c12b83          	lw	s7,1420(sp)
     e60:	58812c03          	lw	s8,1416(sp)
     e64:	58412c83          	lw	s9,1412(sp)
     e68:	58012d03          	lw	s10,1408(sp)
     e6c:	5b010113          	addi	sp,sp,1456
     e70:	00008067          	ret

00000e74 <pqcrystals_dilithium5_ref_open>:
int crypto_sign_open(uint8_t *m,
                     size_t *mlen,
                     const uint8_t *sm,
                     size_t smlen,
                     const uint8_t *pk)
{
     e74:	fe010113          	addi	sp,sp,-32
     e78:	01212823          	sw	s2,16(sp)
  size_t i;

  if(smlen < CRYPTO_BYTES)
     e7c:	00001937          	lui	s2,0x1
{
     e80:	00812c23          	sw	s0,24(sp)
     e84:	01312623          	sw	s3,12(sp)
     e88:	01412423          	sw	s4,8(sp)
     e8c:	00112e23          	sw	ra,28(sp)
     e90:	00912a23          	sw	s1,20(sp)
  if(smlen < CRYPTO_BYTES)
     e94:	1f290793          	addi	a5,s2,498 # 11f2 <pqcrystals_dilithium5_ref_pack_sk+0xc6>
{
     e98:	00068993          	mv	s3,a3
     e9c:	00050a13          	mv	s4,a0
     ea0:	00058413          	mv	s0,a1
  if(smlen < CRYPTO_BYTES)
     ea4:	04d7e263          	bltu	a5,a3,ee8 <pqcrystals_dilithium5_ref_open+0x74>
    return 0;
  }

badsig:
  /* Signature verification failed */
  *mlen = -1;
     ea8:	fff00793          	li	a5,-1
     eac:	00f5a023          	sw	a5,0(a1)
  for(i = 0; i < smlen; ++i)
     eb0:	00068a63          	beqz	a3,ec4 <pqcrystals_dilithium5_ref_open+0x50>
    m[i] = 0;
     eb4:	00098613          	mv	a2,s3
     eb8:	00000593          	li	a1,0
     ebc:	000a0513          	mv	a0,s4
     ec0:	1a8070ef          	jal	ra,8068 <memset>

  return -1;
     ec4:	fff00513          	li	a0,-1
}
     ec8:	01c12083          	lw	ra,28(sp)
     ecc:	01812403          	lw	s0,24(sp)
     ed0:	01412483          	lw	s1,20(sp)
     ed4:	01012903          	lw	s2,16(sp)
     ed8:	00c12983          	lw	s3,12(sp)
     edc:	00812a03          	lw	s4,8(sp)
     ee0:	02010113          	addi	sp,sp,32
     ee4:	00008067          	ret
  *mlen = smlen - CRYPTO_BYTES;
     ee8:	fffff6b7          	lui	a3,0xfffff
     eec:	e0d68693          	addi	a3,a3,-499 # ffffee0d <_end_of_memory+0xfffcee0d>
     ef0:	00060493          	mv	s1,a2
  if(crypto_sign_verify(sm, CRYPTO_BYTES, sm + CRYPTO_BYTES, *mlen, pk))
     ef4:	1f390913          	addi	s2,s2,499
  *mlen = smlen - CRYPTO_BYTES;
     ef8:	00d986b3          	add	a3,s3,a3
     efc:	00d5a023          	sw	a3,0(a1)
  if(crypto_sign_verify(sm, CRYPTO_BYTES, sm + CRYPTO_BYTES, *mlen, pk))
     f00:	01260633          	add	a2,a2,s2
     f04:	00090593          	mv	a1,s2
     f08:	00048513          	mv	a0,s1
     f0c:	c41ff0ef          	jal	ra,b4c <pqcrystals_dilithium5_ref_verify>
     f10:	04051863          	bnez	a0,f60 <pqcrystals_dilithium5_ref_open+0xec>
    for(i = 0; i < *mlen; ++i)
     f14:	00042783          	lw	a5,0(s0)
     f18:	fa0788e3          	beqz	a5,ec8 <pqcrystals_dilithium5_ref_open+0x54>
     f1c:	00000793          	li	a5,0
      m[i] = sm[CRYPTO_BYTES + i];
     f20:	01278733          	add	a4,a5,s2
     f24:	00e48733          	add	a4,s1,a4
     f28:	00074683          	lbu	a3,0(a4)
     f2c:	00fa0733          	add	a4,s4,a5
    for(i = 0; i < *mlen; ++i)
     f30:	00178793          	addi	a5,a5,1 # fffee001 <_end_of_memory+0xfffbe001>
      m[i] = sm[CRYPTO_BYTES + i];
     f34:	00d70023          	sb	a3,0(a4)
    for(i = 0; i < *mlen; ++i)
     f38:	00042703          	lw	a4,0(s0)
     f3c:	fee7e2e3          	bltu	a5,a4,f20 <pqcrystals_dilithium5_ref_open+0xac>
}
     f40:	01c12083          	lw	ra,28(sp)
     f44:	01812403          	lw	s0,24(sp)
     f48:	01412483          	lw	s1,20(sp)
     f4c:	01012903          	lw	s2,16(sp)
     f50:	00c12983          	lw	s3,12(sp)
     f54:	00812a03          	lw	s4,8(sp)
     f58:	02010113          	addi	sp,sp,32
     f5c:	00008067          	ret
  *mlen = -1;
     f60:	fff00793          	li	a5,-1
     f64:	00f42023          	sw	a5,0(s0)
    m[i] = 0;
     f68:	00098613          	mv	a2,s3
     f6c:	00000593          	li	a1,0
     f70:	000a0513          	mv	a0,s4
     f74:	0f4070ef          	jal	ra,8068 <memset>
     f78:	f4dff06f          	j	ec4 <pqcrystals_dilithium5_ref_open+0x50>

00000f7c <pqcrystals_dilithium5_ref_pack_pk>:
*              - const polyveck *t1: pointer to vector t1
**************************************************/
void pack_pk(uint8_t pk[CRYPTO_PUBLICKEYBYTES],
             const uint8_t rho[SEEDBYTES],
             const polyveck *t1)
{
     f7c:	ff010113          	addi	sp,sp,-16
     f80:	00b56733          	or	a4,a0,a1
     f84:	00112623          	sw	ra,12(sp)
     f88:	00812423          	sw	s0,8(sp)
     f8c:	00912223          	sw	s1,4(sp)
     f90:	01212023          	sw	s2,0(sp)
     f94:	00377713          	andi	a4,a4,3
     f98:	00058793          	mv	a5,a1
     f9c:	08071c63          	bnez	a4,1034 <pqcrystals_dilithium5_ref_pack_pk+0xb8>
     fa0:	00158713          	addi	a4,a1,1
     fa4:	40e50733          	sub	a4,a0,a4
     fa8:	00373713          	sltiu	a4,a4,3
     fac:	08071463          	bnez	a4,1034 <pqcrystals_dilithium5_ref_pack_pk+0xb8>
  unsigned int i;

  for(i = 0; i < SEEDBYTES; ++i)
    pk[i] = rho[i];
     fb0:	0005a703          	lw	a4,0(a1)
     fb4:	00e52023          	sw	a4,0(a0)
     fb8:	0045a703          	lw	a4,4(a1)
     fbc:	00e52223          	sw	a4,4(a0)
     fc0:	0085a703          	lw	a4,8(a1)
     fc4:	00e52423          	sw	a4,8(a0)
     fc8:	00c5a703          	lw	a4,12(a1)
     fcc:	00e52623          	sw	a4,12(a0)
     fd0:	0105a703          	lw	a4,16(a1)
     fd4:	00e52823          	sw	a4,16(a0)
     fd8:	0145a703          	lw	a4,20(a1)
     fdc:	00e52a23          	sw	a4,20(a0)
     fe0:	0185a703          	lw	a4,24(a1)
     fe4:	00e52c23          	sw	a4,24(a0)
     fe8:	01c5a783          	lw	a5,28(a1)
     fec:	00f52e23          	sw	a5,28(a0)
  for(i = 0; i < SEEDBYTES; ++i)
     ff0:	000017b7          	lui	a5,0x1
     ff4:	a2078793          	addi	a5,a5,-1504 # a20 <pqcrystals_dilithium5_ref_signature+0x3f4>
     ff8:	02050413          	addi	s0,a0,32
     ffc:	00060493          	mv	s1,a2
    1000:	00f50933          	add	s2,a0,a5
  pk += SEEDBYTES;

  for(i = 0; i < K; ++i)
    polyt1_pack(pk + i*POLYT1_PACKEDBYTES, &t1->vec[i]);
    1004:	00048593          	mv	a1,s1
    1008:	00040513          	mv	a0,s0
  for(i = 0; i < K; ++i)
    100c:	14040413          	addi	s0,s0,320
    polyt1_pack(pk + i*POLYT1_PACKEDBYTES, &t1->vec[i]);
    1010:	5c9010ef          	jal	ra,2dd8 <pqcrystals_dilithium5_ref_polyt1_pack>
  for(i = 0; i < K; ++i)
    1014:	40048493          	addi	s1,s1,1024
    1018:	ff2416e3          	bne	s0,s2,1004 <pqcrystals_dilithium5_ref_pack_pk+0x88>
}
    101c:	00c12083          	lw	ra,12(sp)
    1020:	00812403          	lw	s0,8(sp)
    1024:	00412483          	lw	s1,4(sp)
    1028:	00012903          	lw	s2,0(sp)
    102c:	01010113          	addi	sp,sp,16
    1030:	00008067          	ret
    1034:	00050713          	mv	a4,a0
    1038:	02078593          	addi	a1,a5,32
    pk[i] = rho[i];
    103c:	0007c683          	lbu	a3,0(a5)
  for(i = 0; i < SEEDBYTES; ++i)
    1040:	00178793          	addi	a5,a5,1
    1044:	00170713          	addi	a4,a4,1
    pk[i] = rho[i];
    1048:	fed70fa3          	sb	a3,-1(a4)
  for(i = 0; i < SEEDBYTES; ++i)
    104c:	feb798e3          	bne	a5,a1,103c <pqcrystals_dilithium5_ref_pack_pk+0xc0>
    1050:	fa1ff06f          	j	ff0 <pqcrystals_dilithium5_ref_pack_pk+0x74>

00001054 <pqcrystals_dilithium5_ref_unpack_pk>:
*              - uint8_t pk[]: byte array containing bit-packed pk
**************************************************/
void unpack_pk(uint8_t rho[SEEDBYTES],
               polyveck *t1,
               const uint8_t pk[CRYPTO_PUBLICKEYBYTES])
{
    1054:	ff010113          	addi	sp,sp,-16
    1058:	00a66733          	or	a4,a2,a0
    105c:	00112623          	sw	ra,12(sp)
    1060:	00812423          	sw	s0,8(sp)
    1064:	00912223          	sw	s1,4(sp)
    1068:	01212023          	sw	s2,0(sp)
    106c:	00377713          	andi	a4,a4,3
    1070:	00050793          	mv	a5,a0
    1074:	08071c63          	bnez	a4,110c <pqcrystals_dilithium5_ref_unpack_pk+0xb8>
    1078:	00160713          	addi	a4,a2,1
    107c:	40e50733          	sub	a4,a0,a4
    1080:	00373713          	sltiu	a4,a4,3
    1084:	08071463          	bnez	a4,110c <pqcrystals_dilithium5_ref_unpack_pk+0xb8>
  unsigned int i;

  for(i = 0; i < SEEDBYTES; ++i)
    rho[i] = pk[i];
    1088:	00062703          	lw	a4,0(a2)
    108c:	02060413          	addi	s0,a2,32
    1090:	00e52023          	sw	a4,0(a0)
    1094:	00462703          	lw	a4,4(a2)
    1098:	00e52223          	sw	a4,4(a0)
    109c:	00862703          	lw	a4,8(a2)
    10a0:	00e52423          	sw	a4,8(a0)
    10a4:	00c62703          	lw	a4,12(a2)
    10a8:	00e52623          	sw	a4,12(a0)
    10ac:	01062703          	lw	a4,16(a2)
    10b0:	00e52823          	sw	a4,16(a0)
    10b4:	01462703          	lw	a4,20(a2)
    10b8:	00e52a23          	sw	a4,20(a0)
    10bc:	01862703          	lw	a4,24(a2)
    10c0:	00e52c23          	sw	a4,24(a0)
    10c4:	01c62703          	lw	a4,28(a2)
    10c8:	00e52e23          	sw	a4,28(a0)
  for(i = 0; i < SEEDBYTES; ++i)
    10cc:	000017b7          	lui	a5,0x1
    10d0:	a2078793          	addi	a5,a5,-1504 # a20 <pqcrystals_dilithium5_ref_signature+0x3f4>
    10d4:	00058493          	mv	s1,a1
    10d8:	00f60933          	add	s2,a2,a5
  pk += SEEDBYTES;

  for(i = 0; i < K; ++i)
    polyt1_unpack(&t1->vec[i], pk + i*POLYT1_PACKEDBYTES);
    10dc:	00040593          	mv	a1,s0
    10e0:	00048513          	mv	a0,s1
  for(i = 0; i < K; ++i)
    10e4:	14040413          	addi	s0,s0,320
    polyt1_unpack(&t1->vec[i], pk + i*POLYT1_PACKEDBYTES);
    10e8:	561010ef          	jal	ra,2e48 <pqcrystals_dilithium5_ref_polyt1_unpack>
  for(i = 0; i < K; ++i)
    10ec:	40048493          	addi	s1,s1,1024
    10f0:	ff2416e3          	bne	s0,s2,10dc <pqcrystals_dilithium5_ref_unpack_pk+0x88>
}
    10f4:	00c12083          	lw	ra,12(sp)
    10f8:	00812403          	lw	s0,8(sp)
    10fc:	00412483          	lw	s1,4(sp)
    1100:	00012903          	lw	s2,0(sp)
    1104:	01010113          	addi	sp,sp,16
    1108:	00008067          	ret
    110c:	00060713          	mv	a4,a2
    1110:	02060413          	addi	s0,a2,32
    rho[i] = pk[i];
    1114:	00074683          	lbu	a3,0(a4)
  for(i = 0; i < SEEDBYTES; ++i)
    1118:	00170713          	addi	a4,a4,1
    111c:	00178793          	addi	a5,a5,1
    rho[i] = pk[i];
    1120:	fed78fa3          	sb	a3,-1(a5)
  for(i = 0; i < SEEDBYTES; ++i)
    1124:	fe8718e3          	bne	a4,s0,1114 <pqcrystals_dilithium5_ref_unpack_pk+0xc0>
    1128:	fa5ff06f          	j	10cc <pqcrystals_dilithium5_ref_unpack_pk+0x78>

0000112c <pqcrystals_dilithium5_ref_pack_sk>:
             const uint8_t tr[SEEDBYTES],
             const uint8_t key[SEEDBYTES],
             const polyveck *t0,
             const polyvecl *s1,
             const polyveck *s2)
{
    112c:	fe010113          	addi	sp,sp,-32
    1130:	01212823          	sw	s2,16(sp)
    1134:	00050913          	mv	s2,a0
    1138:	00b968b3          	or	a7,s2,a1
    113c:	01312623          	sw	s3,12(sp)
    1140:	01412423          	sw	s4,8(sp)
    1144:	01512223          	sw	s5,4(sp)
    1148:	00112e23          	sw	ra,28(sp)
    114c:	00812c23          	sw	s0,24(sp)
    1150:	00912a23          	sw	s1,20(sp)
    1154:	0038f893          	andi	a7,a7,3
    1158:	00058513          	mv	a0,a1
    115c:	00070993          	mv	s3,a4
    1160:	00078a93          	mv	s5,a5
    1164:	00080a13          	mv	s4,a6
    1168:	18089c63          	bnez	a7,1300 <pqcrystals_dilithium5_ref_pack_sk+0x1d4>
    116c:	00158793          	addi	a5,a1,1
    1170:	40f907b3          	sub	a5,s2,a5
    1174:	0037b793          	sltiu	a5,a5,3
    1178:	18079463          	bnez	a5,1300 <pqcrystals_dilithium5_ref_pack_sk+0x1d4>
  unsigned int i;

  for(i = 0; i < SEEDBYTES; ++i)
    sk[i] = rho[i];
    117c:	0005a783          	lw	a5,0(a1)
    1180:	00f92023          	sw	a5,0(s2)
    1184:	0045a783          	lw	a5,4(a1)
    1188:	00f92223          	sw	a5,4(s2)
    118c:	0085a783          	lw	a5,8(a1)
    1190:	00f92423          	sw	a5,8(s2)
    1194:	00c5a783          	lw	a5,12(a1)
    1198:	00f92623          	sw	a5,12(s2)
    119c:	0105a783          	lw	a5,16(a1)
    11a0:	00f92823          	sw	a5,16(s2)
    11a4:	0145a783          	lw	a5,20(a1)
    11a8:	00f92a23          	sw	a5,20(s2)
    11ac:	0185a783          	lw	a5,24(a1)
    11b0:	00f92c23          	sw	a5,24(s2)
    11b4:	01c5a783          	lw	a5,28(a1)
    11b8:	00f92e23          	sw	a5,28(s2)
  for(i = 0; i < SEEDBYTES; ++i)
    11bc:	02090793          	addi	a5,s2,32
    11c0:	00f6e733          	or	a4,a3,a5
    11c4:	00377713          	andi	a4,a4,3
    11c8:	16071a63          	bnez	a4,133c <pqcrystals_dilithium5_ref_pack_sk+0x210>
    11cc:	00168713          	addi	a4,a3,1
    11d0:	40e78733          	sub	a4,a5,a4
    11d4:	00373713          	sltiu	a4,a4,3
    11d8:	16071263          	bnez	a4,133c <pqcrystals_dilithium5_ref_pack_sk+0x210>
  sk += SEEDBYTES;

  for(i = 0; i < SEEDBYTES; ++i)
    sk[i] = key[i];
    11dc:	0006a783          	lw	a5,0(a3)
    11e0:	02f92023          	sw	a5,32(s2)
    11e4:	0046a783          	lw	a5,4(a3)
    11e8:	02f92223          	sw	a5,36(s2)
    11ec:	0086a783          	lw	a5,8(a3)
    11f0:	02f92423          	sw	a5,40(s2)
    11f4:	00c6a783          	lw	a5,12(a3)
    11f8:	02f92623          	sw	a5,44(s2)
    11fc:	0106a783          	lw	a5,16(a3)
    1200:	02f92823          	sw	a5,48(s2)
    1204:	0146a783          	lw	a5,20(a3)
    1208:	02f92a23          	sw	a5,52(s2)
    120c:	0186a783          	lw	a5,24(a3)
    1210:	02f92c23          	sw	a5,56(s2)
    1214:	01c6a783          	lw	a5,28(a3)
    1218:	02f92e23          	sw	a5,60(s2)
  for(i = 0; i < SEEDBYTES; ++i)
    121c:	04090793          	addi	a5,s2,64
    1220:	00160713          	addi	a4,a2,1
    1224:	40e78733          	sub	a4,a5,a4
    1228:	00373713          	sltiu	a4,a4,3
    122c:	0e071a63          	bnez	a4,1320 <pqcrystals_dilithium5_ref_pack_sk+0x1f4>
    1230:	00f66733          	or	a4,a2,a5
    1234:	00377713          	andi	a4,a4,3
    1238:	0e071463          	bnez	a4,1320 <pqcrystals_dilithium5_ref_pack_sk+0x1f4>
  sk += SEEDBYTES;

  for(i = 0; i < SEEDBYTES; ++i)
    sk[i] = tr[i];
    123c:	00062783          	lw	a5,0(a2)
    1240:	04f92023          	sw	a5,64(s2)
    1244:	00462783          	lw	a5,4(a2)
    1248:	04f92223          	sw	a5,68(s2)
    124c:	00862783          	lw	a5,8(a2)
    1250:	04f92423          	sw	a5,72(s2)
    1254:	00c62783          	lw	a5,12(a2)
    1258:	04f92623          	sw	a5,76(s2)
    125c:	01062783          	lw	a5,16(a2)
    1260:	04f92823          	sw	a5,80(s2)
    1264:	01462783          	lw	a5,20(a2)
    1268:	04f92a23          	sw	a5,84(s2)
    126c:	01862783          	lw	a5,24(a2)
    1270:	04f92c23          	sw	a5,88(s2)
    1274:	01c62783          	lw	a5,28(a2)
    1278:	04f92e23          	sw	a5,92(s2)
  for(i = 0; i < SEEDBYTES; ++i)
    127c:	06090413          	addi	s0,s2,96
    1280:	30090493          	addi	s1,s2,768
  sk += SEEDBYTES;

  for(i = 0; i < L; ++i)
    polyeta_pack(sk + i*POLYETA_PACKEDBYTES, &s1->vec[i]);
    1284:	000a8593          	mv	a1,s5
    1288:	00040513          	mv	a0,s0
  for(i = 0; i < L; ++i)
    128c:	06040413          	addi	s0,s0,96
    polyeta_pack(sk + i*POLYETA_PACKEDBYTES, &s1->vec[i]);
    1290:	1a5010ef          	jal	ra,2c34 <pqcrystals_dilithium5_ref_polyeta_pack>
  for(i = 0; i < L; ++i)
    1294:	400a8a93          	addi	s5,s5,1024
    1298:	fe8496e3          	bne	s1,s0,1284 <pqcrystals_dilithium5_ref_pack_sk+0x158>
    129c:	60090413          	addi	s0,s2,1536
  sk += L*POLYETA_PACKEDBYTES;

  for(i = 0; i < K; ++i)
    polyeta_pack(sk + i*POLYETA_PACKEDBYTES, &s2->vec[i]);
    12a0:	000a0593          	mv	a1,s4
    12a4:	00048513          	mv	a0,s1
  for(i = 0; i < K; ++i)
    12a8:	06048493          	addi	s1,s1,96
    polyeta_pack(sk + i*POLYETA_PACKEDBYTES, &s2->vec[i]);
    12ac:	189010ef          	jal	ra,2c34 <pqcrystals_dilithium5_ref_polyeta_pack>
  for(i = 0; i < K; ++i)
    12b0:	400a0a13          	addi	s4,s4,1024
    12b4:	fe9416e3          	bne	s0,s1,12a0 <pqcrystals_dilithium5_ref_pack_sk+0x174>
    12b8:	000017b7          	lui	a5,0x1
    12bc:	30078793          	addi	a5,a5,768 # 1300 <pqcrystals_dilithium5_ref_pack_sk+0x1d4>
    12c0:	00f90933          	add	s2,s2,a5
  sk += K*POLYETA_PACKEDBYTES;

  for(i = 0; i < K; ++i)
    polyt0_pack(sk + i*POLYT0_PACKEDBYTES, &t0->vec[i]);
    12c4:	00098593          	mv	a1,s3
    12c8:	00040513          	mv	a0,s0
  for(i = 0; i < K; ++i)
    12cc:	1a040413          	addi	s0,s0,416
    polyt0_pack(sk + i*POLYT0_PACKEDBYTES, &t0->vec[i]);
    12d0:	3f5010ef          	jal	ra,2ec4 <pqcrystals_dilithium5_ref_polyt0_pack>
  for(i = 0; i < K; ++i)
    12d4:	40098993          	addi	s3,s3,1024
    12d8:	ff2416e3          	bne	s0,s2,12c4 <pqcrystals_dilithium5_ref_pack_sk+0x198>
}
    12dc:	01c12083          	lw	ra,28(sp)
    12e0:	01812403          	lw	s0,24(sp)
    12e4:	01412483          	lw	s1,20(sp)
    12e8:	01012903          	lw	s2,16(sp)
    12ec:	00c12983          	lw	s3,12(sp)
    12f0:	00812a03          	lw	s4,8(sp)
    12f4:	00412a83          	lw	s5,4(sp)
    12f8:	02010113          	addi	sp,sp,32
    12fc:	00008067          	ret
    1300:	00090793          	mv	a5,s2
    1304:	02050593          	addi	a1,a0,32
    sk[i] = rho[i];
    1308:	00054703          	lbu	a4,0(a0)
  for(i = 0; i < SEEDBYTES; ++i)
    130c:	00150513          	addi	a0,a0,1
    1310:	00178793          	addi	a5,a5,1
    sk[i] = rho[i];
    1314:	fee78fa3          	sb	a4,-1(a5)
  for(i = 0; i < SEEDBYTES; ++i)
    1318:	fea598e3          	bne	a1,a0,1308 <pqcrystals_dilithium5_ref_pack_sk+0x1dc>
    131c:	ea1ff06f          	j	11bc <pqcrystals_dilithium5_ref_pack_sk+0x90>
    1320:	02060693          	addi	a3,a2,32
    sk[i] = tr[i];
    1324:	00064703          	lbu	a4,0(a2)
  for(i = 0; i < SEEDBYTES; ++i)
    1328:	00160613          	addi	a2,a2,1
    132c:	00178793          	addi	a5,a5,1
    sk[i] = tr[i];
    1330:	fee78fa3          	sb	a4,-1(a5)
  for(i = 0; i < SEEDBYTES; ++i)
    1334:	fed618e3          	bne	a2,a3,1324 <pqcrystals_dilithium5_ref_pack_sk+0x1f8>
    1338:	f45ff06f          	j	127c <pqcrystals_dilithium5_ref_pack_sk+0x150>
    133c:	02068593          	addi	a1,a3,32
    sk[i] = key[i];
    1340:	0006c703          	lbu	a4,0(a3)
  for(i = 0; i < SEEDBYTES; ++i)
    1344:	00168693          	addi	a3,a3,1
    1348:	00178793          	addi	a5,a5,1
    sk[i] = key[i];
    134c:	fee78fa3          	sb	a4,-1(a5)
  for(i = 0; i < SEEDBYTES; ++i)
    1350:	feb698e3          	bne	a3,a1,1340 <pqcrystals_dilithium5_ref_pack_sk+0x214>
    1354:	ec9ff06f          	j	121c <pqcrystals_dilithium5_ref_pack_sk+0xf0>

00001358 <pqcrystals_dilithium5_ref_unpack_sk>:
               uint8_t key[SEEDBYTES],
               polyveck *t0,
               polyvecl *s1,
               polyveck *s2,
               const uint8_t sk[CRYPTO_SECRETKEYBYTES])
{
    1358:	fe010113          	addi	sp,sp,-32
    135c:	01212823          	sw	s2,16(sp)
    1360:	00080913          	mv	s2,a6
    1364:	00a86833          	or	a6,a6,a0
    1368:	01312623          	sw	s3,12(sp)
    136c:	01412423          	sw	s4,8(sp)
    1370:	01512223          	sw	s5,4(sp)
    1374:	00112e23          	sw	ra,28(sp)
    1378:	00812c23          	sw	s0,24(sp)
    137c:	00912a23          	sw	s1,20(sp)
    1380:	00387813          	andi	a6,a6,3
    1384:	00050893          	mv	a7,a0
    1388:	00068993          	mv	s3,a3
    138c:	00070a93          	mv	s5,a4
    1390:	00078a13          	mv	s4,a5
    1394:	18081c63          	bnez	a6,152c <pqcrystals_dilithium5_ref_unpack_sk+0x1d4>
    1398:	00190793          	addi	a5,s2,1
    139c:	40f507b3          	sub	a5,a0,a5
    13a0:	0037b793          	sltiu	a5,a5,3
    13a4:	18079463          	bnez	a5,152c <pqcrystals_dilithium5_ref_unpack_sk+0x1d4>
  unsigned int i;

  for(i = 0; i < SEEDBYTES; ++i)
    rho[i] = sk[i];
    13a8:	00092783          	lw	a5,0(s2)
    13ac:	02090813          	addi	a6,s2,32
    13b0:	00f52023          	sw	a5,0(a0)
    13b4:	00492783          	lw	a5,4(s2)
    13b8:	00f52223          	sw	a5,4(a0)
    13bc:	00892783          	lw	a5,8(s2)
    13c0:	00f52423          	sw	a5,8(a0)
    13c4:	00c92783          	lw	a5,12(s2)
    13c8:	00f52623          	sw	a5,12(a0)
    13cc:	01092783          	lw	a5,16(s2)
    13d0:	00f52823          	sw	a5,16(a0)
    13d4:	01492783          	lw	a5,20(s2)
    13d8:	00f52a23          	sw	a5,20(a0)
    13dc:	01892783          	lw	a5,24(s2)
    13e0:	00f52c23          	sw	a5,24(a0)
    13e4:	01c92783          	lw	a5,28(s2)
    13e8:	00f52e23          	sw	a5,28(a0)
  for(i = 0; i < SEEDBYTES; ++i)
    13ec:	010667b3          	or	a5,a2,a6
    13f0:	0037f793          	andi	a5,a5,3
    13f4:	16079c63          	bnez	a5,156c <pqcrystals_dilithium5_ref_unpack_sk+0x214>
    13f8:	02190793          	addi	a5,s2,33
    13fc:	40f607b3          	sub	a5,a2,a5
    1400:	0037b793          	sltiu	a5,a5,3
    1404:	16079463          	bnez	a5,156c <pqcrystals_dilithium5_ref_unpack_sk+0x214>
  sk += SEEDBYTES;

  for(i = 0; i < SEEDBYTES; ++i)
    key[i] = sk[i];
    1408:	02092783          	lw	a5,32(s2)
    140c:	04090893          	addi	a7,s2,64
    1410:	00f62023          	sw	a5,0(a2)
    1414:	02492783          	lw	a5,36(s2)
    1418:	00f62223          	sw	a5,4(a2)
    141c:	02892783          	lw	a5,40(s2)
    1420:	00f62423          	sw	a5,8(a2)
    1424:	02c92783          	lw	a5,44(s2)
    1428:	00f62623          	sw	a5,12(a2)
    142c:	03092783          	lw	a5,48(s2)
    1430:	00f62823          	sw	a5,16(a2)
    1434:	03492783          	lw	a5,52(s2)
    1438:	00f62a23          	sw	a5,20(a2)
    143c:	03892783          	lw	a5,56(s2)
    1440:	00f62c23          	sw	a5,24(a2)
    1444:	03c92783          	lw	a5,60(s2)
    1448:	00f62e23          	sw	a5,28(a2)
  for(i = 0; i < SEEDBYTES; ++i)
    144c:	04190793          	addi	a5,s2,65
    1450:	40f587b3          	sub	a5,a1,a5
    1454:	0037b793          	sltiu	a5,a5,3
    1458:	0e079a63          	bnez	a5,154c <pqcrystals_dilithium5_ref_unpack_sk+0x1f4>
    145c:	0115e7b3          	or	a5,a1,a7
    1460:	0037f793          	andi	a5,a5,3
    1464:	0e079463          	bnez	a5,154c <pqcrystals_dilithium5_ref_unpack_sk+0x1f4>
  sk += SEEDBYTES;

  for(i = 0; i < SEEDBYTES; ++i)
    tr[i] = sk[i];
    1468:	04092783          	lw	a5,64(s2)
    146c:	06090413          	addi	s0,s2,96
    1470:	00f5a023          	sw	a5,0(a1)
    1474:	04492783          	lw	a5,68(s2)
    1478:	00f5a223          	sw	a5,4(a1)
    147c:	04892783          	lw	a5,72(s2)
    1480:	00f5a423          	sw	a5,8(a1)
    1484:	04c92783          	lw	a5,76(s2)
    1488:	00f5a623          	sw	a5,12(a1)
    148c:	05092783          	lw	a5,80(s2)
    1490:	00f5a823          	sw	a5,16(a1)
    1494:	05492783          	lw	a5,84(s2)
    1498:	00f5aa23          	sw	a5,20(a1)
    149c:	05892783          	lw	a5,88(s2)
    14a0:	00f5ac23          	sw	a5,24(a1)
    14a4:	05c92783          	lw	a5,92(s2)
    14a8:	00f5ae23          	sw	a5,28(a1)
  for(i = 0; i < SEEDBYTES; ++i)
    14ac:	30090493          	addi	s1,s2,768
  sk += SEEDBYTES;

  for(i=0; i < L; ++i)
    polyeta_unpack(&s1->vec[i], sk + i*POLYETA_PACKEDBYTES);
    14b0:	00040593          	mv	a1,s0
    14b4:	000a8513          	mv	a0,s5
  for(i=0; i < L; ++i)
    14b8:	06040413          	addi	s0,s0,96
    polyeta_unpack(&s1->vec[i], sk + i*POLYETA_PACKEDBYTES);
    14bc:	039010ef          	jal	ra,2cf4 <pqcrystals_dilithium5_ref_polyeta_unpack>
  for(i=0; i < L; ++i)
    14c0:	400a8a93          	addi	s5,s5,1024
    14c4:	fe8496e3          	bne	s1,s0,14b0 <pqcrystals_dilithium5_ref_unpack_sk+0x158>
    14c8:	60090413          	addi	s0,s2,1536
  sk += L*POLYETA_PACKEDBYTES;

  for(i=0; i < K; ++i)
    polyeta_unpack(&s2->vec[i], sk + i*POLYETA_PACKEDBYTES);
    14cc:	00048593          	mv	a1,s1
    14d0:	000a0513          	mv	a0,s4
  for(i=0; i < K; ++i)
    14d4:	06048493          	addi	s1,s1,96
    polyeta_unpack(&s2->vec[i], sk + i*POLYETA_PACKEDBYTES);
    14d8:	01d010ef          	jal	ra,2cf4 <pqcrystals_dilithium5_ref_polyeta_unpack>
  for(i=0; i < K; ++i)
    14dc:	400a0a13          	addi	s4,s4,1024
    14e0:	fe9416e3          	bne	s0,s1,14cc <pqcrystals_dilithium5_ref_unpack_sk+0x174>
    14e4:	000017b7          	lui	a5,0x1
    14e8:	30078793          	addi	a5,a5,768 # 1300 <pqcrystals_dilithium5_ref_pack_sk+0x1d4>
    14ec:	00f90933          	add	s2,s2,a5
  sk += K*POLYETA_PACKEDBYTES;

  for(i=0; i < K; ++i)
    polyt0_unpack(&t0->vec[i], sk + i*POLYT0_PACKEDBYTES);
    14f0:	00040593          	mv	a1,s0
    14f4:	00098513          	mv	a0,s3
  for(i=0; i < K; ++i)
    14f8:	1a040413          	addi	s0,s0,416
    polyt0_unpack(&t0->vec[i], sk + i*POLYT0_PACKEDBYTES);
    14fc:	30d010ef          	jal	ra,3008 <pqcrystals_dilithium5_ref_polyt0_unpack>
  for(i=0; i < K; ++i)
    1500:	40098993          	addi	s3,s3,1024
    1504:	ff2416e3          	bne	s0,s2,14f0 <pqcrystals_dilithium5_ref_unpack_sk+0x198>
}
    1508:	01c12083          	lw	ra,28(sp)
    150c:	01812403          	lw	s0,24(sp)
    1510:	01412483          	lw	s1,20(sp)
    1514:	01012903          	lw	s2,16(sp)
    1518:	00c12983          	lw	s3,12(sp)
    151c:	00812a03          	lw	s4,8(sp)
    1520:	00412a83          	lw	s5,4(sp)
    1524:	02010113          	addi	sp,sp,32
    1528:	00008067          	ret
    152c:	00090793          	mv	a5,s2
    1530:	02090813          	addi	a6,s2,32
    rho[i] = sk[i];
    1534:	0007c703          	lbu	a4,0(a5)
  for(i = 0; i < SEEDBYTES; ++i)
    1538:	00178793          	addi	a5,a5,1
    153c:	00188893          	addi	a7,a7,1 # ff0001 <_end_of_memory+0xfc0001>
    rho[i] = sk[i];
    1540:	fee88fa3          	sb	a4,-1(a7)
  for(i = 0; i < SEEDBYTES; ++i)
    1544:	fef818e3          	bne	a6,a5,1534 <pqcrystals_dilithium5_ref_unpack_sk+0x1dc>
    1548:	ea5ff06f          	j	13ec <pqcrystals_dilithium5_ref_unpack_sk+0x94>
    154c:	00088613          	mv	a2,a7
    1550:	06090413          	addi	s0,s2,96
    tr[i] = sk[i];
    1554:	00064783          	lbu	a5,0(a2)
  for(i = 0; i < SEEDBYTES; ++i)
    1558:	00160613          	addi	a2,a2,1
    155c:	00158593          	addi	a1,a1,1
    tr[i] = sk[i];
    1560:	fef58fa3          	sb	a5,-1(a1)
  for(i = 0; i < SEEDBYTES; ++i)
    1564:	fe8618e3          	bne	a2,s0,1554 <pqcrystals_dilithium5_ref_unpack_sk+0x1fc>
    1568:	f45ff06f          	j	14ac <pqcrystals_dilithium5_ref_unpack_sk+0x154>
    156c:	04090893          	addi	a7,s2,64
    key[i] = sk[i];
    1570:	00084783          	lbu	a5,0(a6)
  for(i = 0; i < SEEDBYTES; ++i)
    1574:	00180813          	addi	a6,a6,1
    1578:	00160613          	addi	a2,a2,1
    key[i] = sk[i];
    157c:	fef60fa3          	sb	a5,-1(a2)
  for(i = 0; i < SEEDBYTES; ++i)
    1580:	ff0898e3          	bne	a7,a6,1570 <pqcrystals_dilithium5_ref_unpack_sk+0x218>
    1584:	ec9ff06f          	j	144c <pqcrystals_dilithium5_ref_unpack_sk+0xf4>

00001588 <pqcrystals_dilithium5_ref_pack_sig>:
**************************************************/
void pack_sig(uint8_t sig[CRYPTO_BYTES],
              const uint8_t c[SEEDBYTES],
              const polyvecl *z,
              const polyveck *h)
{
    1588:	00158713          	addi	a4,a1,1
    158c:	fe010113          	addi	sp,sp,-32
    1590:	40e50733          	sub	a4,a0,a4
    1594:	00812c23          	sw	s0,24(sp)
    1598:	00912a23          	sw	s1,20(sp)
    159c:	00112e23          	sw	ra,28(sp)
    15a0:	01212823          	sw	s2,16(sp)
    15a4:	01312623          	sw	s3,12(sp)
    15a8:	01412423          	sw	s4,8(sp)
    15ac:	00373713          	sltiu	a4,a4,3
    15b0:	00058793          	mv	a5,a1
    15b4:	00050413          	mv	s0,a0
    15b8:	00068493          	mv	s1,a3
    15bc:	10071863          	bnez	a4,16cc <pqcrystals_dilithium5_ref_pack_sig+0x144>
    15c0:	00b56733          	or	a4,a0,a1
    15c4:	00377713          	andi	a4,a4,3
    15c8:	10071263          	bnez	a4,16cc <pqcrystals_dilithium5_ref_pack_sig+0x144>
  unsigned int i, j, k;

  for(i=0; i < SEEDBYTES; ++i)
    sig[i] = c[i];
    15cc:	0005a703          	lw	a4,0(a1)
    15d0:	00e52023          	sw	a4,0(a0)
    15d4:	0045a703          	lw	a4,4(a1)
    15d8:	00e52223          	sw	a4,4(a0)
    15dc:	0085a703          	lw	a4,8(a1)
    15e0:	00e52423          	sw	a4,8(a0)
    15e4:	00c5a703          	lw	a4,12(a1)
    15e8:	00e52623          	sw	a4,12(a0)
    15ec:	0105a703          	lw	a4,16(a1)
    15f0:	00e52823          	sw	a4,16(a0)
    15f4:	0145a703          	lw	a4,20(a1)
    15f8:	00e52a23          	sw	a4,20(a0)
    15fc:	0185a703          	lw	a4,24(a1)
    1600:	00e52c23          	sw	a4,24(a0)
    1604:	01c5a783          	lw	a5,28(a1)
    1608:	00f52e23          	sw	a5,28(a0)
  for(i=0; i < SEEDBYTES; ++i)
    160c:	00001a37          	lui	s4,0x1
    1610:	1a0a0a13          	addi	s4,s4,416 # 11a0 <pqcrystals_dilithium5_ref_pack_sk+0x74>
    1614:	02040913          	addi	s2,s0,32
    1618:	00060993          	mv	s3,a2
    161c:	01440a33          	add	s4,s0,s4
  sig += SEEDBYTES;

  for(i = 0; i < L; ++i)
    polyz_pack(sig + i*POLYZ_PACKEDBYTES, &z->vec[i]);
    1620:	00098593          	mv	a1,s3
    1624:	00090513          	mv	a0,s2
  for(i = 0; i < L; ++i)
    1628:	28090913          	addi	s2,s2,640
    polyz_pack(sig + i*POLYZ_PACKEDBYTES, &z->vec[i]);
    162c:	371010ef          	jal	ra,319c <pqcrystals_dilithium5_ref_polyz_pack>
  for(i = 0; i < L; ++i)
    1630:	40098993          	addi	s3,s3,1024
    1634:	ff2a16e3          	bne	s4,s2,1620 <pqcrystals_dilithium5_ref_pack_sig+0x98>
  sig += L*POLYZ_PACKEDBYTES;
    1638:	00001937          	lui	s2,0x1
    163c:	1a090813          	addi	a6,s2,416 # 11a0 <pqcrystals_dilithium5_ref_pack_sk+0x74>
    1640:	01040833          	add	a6,s0,a6

  /* Encode h */
  for(i = 0; i < OMEGA + K; ++i)
    sig[i] = 0;
    1644:	00080513          	mv	a0,a6
    1648:	05300613          	li	a2,83
    164c:	00000593          	li	a1,0
    1650:	219060ef          	jal	ra,8068 <memset>
    1654:	1eb90913          	addi	s2,s2,491
    1658:	00002e37          	lui	t3,0x2
    165c:	00050813          	mv	a6,a0
    1660:	00048313          	mv	t1,s1
    1664:	012408b3          	add	a7,s0,s2
    1668:	01c48e33          	add	t3,s1,t3

  k = 0;
    166c:	00000693          	li	a3,0
  for(i = 0; i < K; ++i) {
    for(j = 0; j < N; ++j)
    1670:	10000513          	li	a0,256
{
    1674:	00030713          	mv	a4,t1
    for(j = 0; j < N; ++j)
    1678:	00000793          	li	a5,0
      if(h->vec[i].coeffs[j] != 0)
    167c:	00072603          	lw	a2,0(a4)
        sig[k++] = j;
    1680:	00d805b3          	add	a1,a6,a3
    for(j = 0; j < N; ++j)
    1684:	00470713          	addi	a4,a4,4
      if(h->vec[i].coeffs[j] != 0)
    1688:	00060663          	beqz	a2,1694 <pqcrystals_dilithium5_ref_pack_sig+0x10c>
        sig[k++] = j;
    168c:	00f58023          	sb	a5,0(a1)
    1690:	00168693          	addi	a3,a3,1
    for(j = 0; j < N; ++j)
    1694:	00178793          	addi	a5,a5,1
    1698:	fea792e3          	bne	a5,a0,167c <pqcrystals_dilithium5_ref_pack_sig+0xf4>

    sig[OMEGA + i] = k;
    169c:	00d88023          	sb	a3,0(a7)
  for(i = 0; i < K; ++i) {
    16a0:	40030313          	addi	t1,t1,1024
    16a4:	00188893          	addi	a7,a7,1
    16a8:	fc6e16e3          	bne	t3,t1,1674 <pqcrystals_dilithium5_ref_pack_sig+0xec>
  }
}
    16ac:	01c12083          	lw	ra,28(sp)
    16b0:	01812403          	lw	s0,24(sp)
    16b4:	01412483          	lw	s1,20(sp)
    16b8:	01012903          	lw	s2,16(sp)
    16bc:	00c12983          	lw	s3,12(sp)
    16c0:	00812a03          	lw	s4,8(sp)
    16c4:	02010113          	addi	sp,sp,32
    16c8:	00008067          	ret
    16cc:	00040713          	mv	a4,s0
    16d0:	02078593          	addi	a1,a5,32
    sig[i] = c[i];
    16d4:	0007c683          	lbu	a3,0(a5)
  for(i=0; i < SEEDBYTES; ++i)
    16d8:	00178793          	addi	a5,a5,1
    16dc:	00170713          	addi	a4,a4,1
    sig[i] = c[i];
    16e0:	fed70fa3          	sb	a3,-1(a4)
  for(i=0; i < SEEDBYTES; ++i)
    16e4:	fef598e3          	bne	a1,a5,16d4 <pqcrystals_dilithium5_ref_pack_sig+0x14c>
    16e8:	f25ff06f          	j	160c <pqcrystals_dilithium5_ref_pack_sig+0x84>

000016ec <pqcrystals_dilithium5_ref_unpack_sig>:
**************************************************/
int unpack_sig(uint8_t c[SEEDBYTES],
               polyvecl *z,
               polyveck *h,
               const uint8_t sig[CRYPTO_BYTES])
{
    16ec:	00168713          	addi	a4,a3,1
    16f0:	fd010113          	addi	sp,sp,-48
    16f4:	40e50733          	sub	a4,a0,a4
    16f8:	02912223          	sw	s1,36(sp)
    16fc:	01612823          	sw	s6,16(sp)
    1700:	02112623          	sw	ra,44(sp)
    1704:	02812423          	sw	s0,40(sp)
    1708:	03212023          	sw	s2,32(sp)
    170c:	01312e23          	sw	s3,28(sp)
    1710:	01412c23          	sw	s4,24(sp)
    1714:	01512a23          	sw	s5,20(sp)
    1718:	01712623          	sw	s7,12(sp)
    171c:	01812423          	sw	s8,8(sp)
    1720:	00373713          	sltiu	a4,a4,3
    1724:	00068493          	mv	s1,a3
    1728:	00050793          	mv	a5,a0
    172c:	00060b13          	mv	s6,a2
  unsigned int i, j, k;

  for(i = 0; i < SEEDBYTES; ++i)
    1730:	18071663          	bnez	a4,18bc <pqcrystals_dilithium5_ref_unpack_sig+0x1d0>
    1734:	00a6e733          	or	a4,a3,a0
    1738:	00377713          	andi	a4,a4,3
    173c:	18071063          	bnez	a4,18bc <pqcrystals_dilithium5_ref_unpack_sig+0x1d0>
    c[i] = sig[i];
    1740:	0006a703          	lw	a4,0(a3)
    1744:	02068413          	addi	s0,a3,32
    1748:	00e52023          	sw	a4,0(a0)
    174c:	0046a703          	lw	a4,4(a3)
    1750:	00e52223          	sw	a4,4(a0)
    1754:	0086a703          	lw	a4,8(a3)
    1758:	00e52423          	sw	a4,8(a0)
    175c:	00c6a703          	lw	a4,12(a3)
    1760:	00e52623          	sw	a4,12(a0)
    1764:	0106a703          	lw	a4,16(a3)
    1768:	00e52823          	sw	a4,16(a0)
    176c:	0146a703          	lw	a4,20(a3)
    1770:	00e52a23          	sw	a4,20(a0)
    1774:	0186a703          	lw	a4,24(a3)
    1778:	00e52c23          	sw	a4,24(a0)
    177c:	01c6a703          	lw	a4,28(a3)
    1780:	00e52e23          	sw	a4,28(a0)
  for(i = 0; i < SEEDBYTES; ++i)
    1784:	000019b7          	lui	s3,0x1
    1788:	1a098993          	addi	s3,s3,416 # 11a0 <pqcrystals_dilithium5_ref_pack_sk+0x74>
    178c:	00058913          	mv	s2,a1
    1790:	013489b3          	add	s3,s1,s3
  sig += SEEDBYTES;

  for(i = 0; i < L; ++i)
    polyz_unpack(&z->vec[i], sig + i*POLYZ_PACKEDBYTES);
    1794:	00040593          	mv	a1,s0
    1798:	00090513          	mv	a0,s2
  for(i = 0; i < L; ++i)
    179c:	28040413          	addi	s0,s0,640
    polyz_unpack(&z->vec[i], sig + i*POLYZ_PACKEDBYTES);
    17a0:	251010ef          	jal	ra,31f0 <pqcrystals_dilithium5_ref_polyz_unpack>
  for(i = 0; i < L; ++i)
    17a4:	40090913          	addi	s2,s2,1024
    17a8:	fe8996e3          	bne	s3,s0,1794 <pqcrystals_dilithium5_ref_unpack_sig+0xa8>
  sig += L*POLYZ_PACKEDBYTES;

  /* Decode h */
  k = 0;
  for(i = 0; i < K; ++i) {
    17ac:	00001437          	lui	s0,0x1
    17b0:	1eb40a93          	addi	s5,s0,491 # 11eb <pqcrystals_dilithium5_ref_pack_sk+0xbf>
    17b4:	000b0813          	mv	a6,s6
    17b8:	01548ab3          	add	s5,s1,s5
  k = 0;
    17bc:	00000a13          	li	s4,0
  for(i = 0; i < K; ++i) {
    17c0:	00000c13          	li	s8,0
    for(j = 0; j < N; ++j)
      h->vec[i].coeffs[j] = 0;

    if(sig[OMEGA + i] < k || sig[OMEGA + i] > OMEGA)
    17c4:	04b00913          	li	s2,75
    17c8:	19f40413          	addi	s0,s0,415
      return 1;

    for(j = k; j < sig[OMEGA + i]; ++j) {
      /* Coefficients are ordered for strong unforgeability */
      if(j > k && sig[j] <= sig[j-1]) return 1;
      h->vec[i].coeffs[sig[j]] = 1;
    17cc:	00100b93          	li	s7,1
  for(i = 0; i < K; ++i) {
    17d0:	00800993          	li	s3,8
      h->vec[i].coeffs[j] = 0;
    17d4:	00080513          	mv	a0,a6
    17d8:	40000613          	li	a2,1024
    17dc:	00000593          	li	a1,0
    17e0:	089060ef          	jal	ra,8068 <memset>
    if(sig[OMEGA + i] < k || sig[OMEGA + i] > OMEGA)
    17e4:	000ac703          	lbu	a4,0(s5)
      h->vec[i].coeffs[j] = 0;
    17e8:	00050813          	mv	a6,a0
    if(sig[OMEGA + i] < k || sig[OMEGA + i] > OMEGA)
    17ec:	00070793          	mv	a5,a4
    17f0:	09476c63          	bltu	a4,s4,1888 <pqcrystals_dilithium5_ref_unpack_sig+0x19c>
    17f4:	08e96a63          	bltu	s2,a4,1888 <pqcrystals_dilithium5_ref_unpack_sig+0x19c>
    for(j = k; j < sig[OMEGA + i]; ++j) {
    17f8:	04ea7263          	bgeu	s4,a4,183c <pqcrystals_dilithium5_ref_unpack_sig+0x150>
    17fc:	008a05b3          	add	a1,s4,s0
    1800:	00b485b3          	add	a1,s1,a1
    1804:	000a0713          	mv	a4,s4
      h->vec[i].coeffs[sig[j]] = 1;
    1808:	008c1693          	slli	a3,s8,0x8
      if(j > k && sig[j] <= sig[j-1]) return 1;
    180c:	0015c783          	lbu	a5,1(a1)
    1810:	00ea7663          	bgeu	s4,a4,181c <pqcrystals_dilithium5_ref_unpack_sig+0x130>
    1814:	0005c603          	lbu	a2,0(a1)
    1818:	06f67863          	bgeu	a2,a5,1888 <pqcrystals_dilithium5_ref_unpack_sig+0x19c>
      h->vec[i].coeffs[sig[j]] = 1;
    181c:	00f687b3          	add	a5,a3,a5
    1820:	00279793          	slli	a5,a5,0x2
    1824:	00fb07b3          	add	a5,s6,a5
    1828:	0177a023          	sw	s7,0(a5)
    for(j = k; j < sig[OMEGA + i]; ++j) {
    182c:	000ac783          	lbu	a5,0(s5)
    1830:	00170713          	addi	a4,a4,1
    1834:	00158593          	addi	a1,a1,1
    1838:	fcf76ae3          	bltu	a4,a5,180c <pqcrystals_dilithium5_ref_unpack_sig+0x120>
  for(i = 0; i < K; ++i) {
    183c:	001c0c13          	addi	s8,s8,1
    1840:	40080813          	addi	a6,a6,1024
    1844:	001a8a93          	addi	s5,s5,1
    1848:	013c0663          	beq	s8,s3,1854 <pqcrystals_dilithium5_ref_unpack_sig+0x168>
    184c:	00078a13          	mv	s4,a5
    1850:	f85ff06f          	j	17d4 <pqcrystals_dilithium5_ref_unpack_sig+0xe8>

    k = sig[OMEGA + i];
  }

  /* Extra indices are zero for strong unforgeability */
  for(j = k; j < OMEGA; ++j)
    1854:	04a00713          	li	a4,74
    1858:	08f76263          	bltu	a4,a5,18dc <pqcrystals_dilithium5_ref_unpack_sig+0x1f0>
    185c:	00001737          	lui	a4,0x1
    1860:	1a070693          	addi	a3,a4,416 # 11a0 <pqcrystals_dilithium5_ref_pack_sk+0x74>
    1864:	00d787b3          	add	a5,a5,a3
    1868:	1eb70713          	addi	a4,a4,491
    186c:	00f487b3          	add	a5,s1,a5
    1870:	00e484b3          	add	s1,s1,a4
    1874:	0080006f          	j	187c <pqcrystals_dilithium5_ref_unpack_sig+0x190>
    1878:	06978263          	beq	a5,s1,18dc <pqcrystals_dilithium5_ref_unpack_sig+0x1f0>
    if(sig[j])
    187c:	0007c703          	lbu	a4,0(a5)
  for(j = k; j < OMEGA; ++j)
    1880:	00178793          	addi	a5,a5,1
    if(sig[j])
    1884:	fe070ae3          	beqz	a4,1878 <pqcrystals_dilithium5_ref_unpack_sig+0x18c>
      return 1;
    1888:	00100513          	li	a0,1
      return 1;

  return 0;
}
    188c:	02c12083          	lw	ra,44(sp)
    1890:	02812403          	lw	s0,40(sp)
    1894:	02412483          	lw	s1,36(sp)
    1898:	02012903          	lw	s2,32(sp)
    189c:	01c12983          	lw	s3,28(sp)
    18a0:	01812a03          	lw	s4,24(sp)
    18a4:	01412a83          	lw	s5,20(sp)
    18a8:	01012b03          	lw	s6,16(sp)
    18ac:	00c12b83          	lw	s7,12(sp)
    18b0:	00812c03          	lw	s8,8(sp)
    18b4:	03010113          	addi	sp,sp,48
    18b8:	00008067          	ret
    18bc:	00048713          	mv	a4,s1
    18c0:	02048413          	addi	s0,s1,32
    c[i] = sig[i];
    18c4:	00074683          	lbu	a3,0(a4)
  for(i = 0; i < SEEDBYTES; ++i)
    18c8:	00170713          	addi	a4,a4,1
    18cc:	00178793          	addi	a5,a5,1
    c[i] = sig[i];
    18d0:	fed78fa3          	sb	a3,-1(a5)
  for(i = 0; i < SEEDBYTES; ++i)
    18d4:	fe8718e3          	bne	a4,s0,18c4 <pqcrystals_dilithium5_ref_unpack_sig+0x1d8>
    18d8:	eadff06f          	j	1784 <pqcrystals_dilithium5_ref_unpack_sig+0x98>
  return 0;
    18dc:	00000513          	li	a0,0
    18e0:	fadff06f          	j	188c <pqcrystals_dilithium5_ref_unpack_sig+0x1a0>

000018e4 <pqcrystals_dilithium5_ref_polyvec_matrix_expand>:
*              or AES256CTR(rho,j|i).
*
* Arguments:   - polyvecl mat[K]: output matrix
*              - const uint8_t rho[]: byte array containing seed rho
**************************************************/
void polyvec_matrix_expand(polyvecl mat[K], const uint8_t rho[SEEDBYTES]) {
    18e4:	fe010113          	addi	sp,sp,-32
    18e8:	01512223          	sw	s5,4(sp)
    18ec:	00002ab7          	lui	s5,0x2
    18f0:	01612023          	sw	s6,0(sp)
    18f4:	c00a8a93          	addi	s5,s5,-1024 # 1c00 <pqcrystals_dilithium5_ref_polyvecl_add+0x68>
    18f8:	ffffeb37          	lui	s6,0xffffe
    18fc:	01212823          	sw	s2,16(sp)
    1900:	01312623          	sw	s3,12(sp)
    1904:	01412423          	sw	s4,8(sp)
    1908:	00112e23          	sw	ra,28(sp)
    190c:	00812c23          	sw	s0,24(sp)
    1910:	00912a23          	sw	s1,20(sp)
    1914:	00058993          	mv	s3,a1
    1918:	01550933          	add	s2,a0,s5
    191c:	00000a13          	li	s4,0
    1920:	400b0b13          	addi	s6,s6,1024 # ffffe400 <_end_of_memory+0xfffce400>
  unsigned int i, j;

  for(i = 0; i < K; ++i)
    for(j = 0; j < L; ++j)
    1924:	016904b3          	add	s1,s2,s6
void polyvec_matrix_expand(polyvecl mat[K], const uint8_t rho[SEEDBYTES]) {
    1928:	000a0413          	mv	s0,s4
      poly_uniform(&mat[i].vec[j], rho, (i << 8) + j);
    192c:	00040613          	mv	a2,s0
    for(j = 0; j < L; ++j)
    1930:	00140413          	addi	s0,s0,1
      poly_uniform(&mat[i].vec[j], rho, (i << 8) + j);
    1934:	00048513          	mv	a0,s1
    1938:	00098593          	mv	a1,s3
    for(j = 0; j < L; ++j)
    193c:	01041413          	slli	s0,s0,0x10
    1940:	40048493          	addi	s1,s1,1024
      poly_uniform(&mat[i].vec[j], rho, (i << 8) + j);
    1944:	611000ef          	jal	ra,2754 <pqcrystals_dilithium5_ref_poly_uniform>
    for(j = 0; j < L; ++j)
    1948:	01045413          	srli	s0,s0,0x10
    194c:	ff2490e3          	bne	s1,s2,192c <pqcrystals_dilithium5_ref_polyvec_matrix_expand+0x48>
  for(i = 0; i < K; ++i)
    1950:	100a0a13          	addi	s4,s4,256
    1954:	010a1a13          	slli	s4,s4,0x10
    1958:	010a5a13          	srli	s4,s4,0x10
    195c:	800a0793          	addi	a5,s4,-2048
    1960:	01548933          	add	s2,s1,s5
    1964:	fc0790e3          	bnez	a5,1924 <pqcrystals_dilithium5_ref_polyvec_matrix_expand+0x40>
}
    1968:	01c12083          	lw	ra,28(sp)
    196c:	01812403          	lw	s0,24(sp)
    1970:	01412483          	lw	s1,20(sp)
    1974:	01012903          	lw	s2,16(sp)
    1978:	00c12983          	lw	s3,12(sp)
    197c:	00812a03          	lw	s4,8(sp)
    1980:	00412a83          	lw	s5,4(sp)
    1984:	00012b03          	lw	s6,0(sp)
    1988:	02010113          	addi	sp,sp,32
    198c:	00008067          	ret

00001990 <pqcrystals_dilithium5_ref_polyvec_matrix_pointwise_montgomery>:

void polyvec_matrix_pointwise_montgomery(polyveck *t, const polyvecl mat[K], const polyvecl *v) {
    1990:	fe010113          	addi	sp,sp,-32
    1994:	000027b7          	lui	a5,0x2
    1998:	01212823          	sw	s2,16(sp)
    199c:	40078913          	addi	s2,a5,1024 # 2400 <pqcrystals_dilithium5_ref_poly_add+0x20>
    19a0:	00812c23          	sw	s0,24(sp)
    19a4:	00912a23          	sw	s1,20(sp)
    19a8:	01312623          	sw	s3,12(sp)
    19ac:	01412423          	sw	s4,8(sp)
    19b0:	00112e23          	sw	ra,28(sp)
    19b4:	00050313          	mv	t1,a0
    19b8:	00060993          	mv	s3,a2
    19bc:	00058a13          	mv	s4,a1
    19c0:	40050413          	addi	s0,a0,1024
    19c4:	01250933          	add	s2,a0,s2
    19c8:	c0078493          	addi	s1,a5,-1024
#ifdef FPAU
  unsigned int i, j;
  int32_t d, u_coeff, v_coeff;

  for(i = 0; i < N; i++){
    w->coeffs[i] = 0;
    19cc:	00030513          	mv	a0,t1
    19d0:	40000613          	li	a2,1024
    19d4:	00000593          	li	a1,0
    19d8:	690060ef          	jal	ra,8068 <memset>
    19dc:	00050313          	mv	t1,a0
    19e0:	000a0813          	mv	a6,s4
    19e4:	00098893          	mv	a7,s3
    19e8:	009a0e33          	add	t3,s4,s1
  }

  for(i = 0; i < L; ++i) {
    for(j = 0; j < N; j++){
    19ec:	00088693          	mv	a3,a7
    19f0:	00080713          	mv	a4,a6
    19f4:	00030793          	mv	a5,t1
      d = w->coeffs[j];
    19f8:	0007a503          	lw	a0,0(a5)
      u_coeff = u->vec[i].coeffs[j];
    19fc:	00072603          	lw	a2,0(a4)
      v_coeff = v->vec[i].coeffs[j];
    1a00:	0006a583          	lw	a1,0(a3)

      // Compute MAC operation
#ifndef STEEL
      asm volatile("nop"); //ORCA
    1a04:	00000013          	nop
      asm volatile("nop"); //ORCA
    1a08:	00000013          	nop
      asm volatile("nop"); //ORCA
    1a0c:	00000013          	nop
#endif
      asm volatile("fpau.dil.mac %0, %1, %2\n": : "r"(u_coeff), "r"(v_coeff),"r"(d): );
    1a10:	50a5a633          	fpau.dil.mac	a2,a1,a0

      // Store the result
      w->coeffs[j] = u_coeff;
    1a14:	00c7a023          	sw	a2,0(a5)
    for(j = 0; j < N; j++){
    1a18:	00478793          	addi	a5,a5,4
    1a1c:	00470713          	addi	a4,a4,4
    1a20:	00468693          	addi	a3,a3,4
    1a24:	fc879ae3          	bne	a5,s0,19f8 <pqcrystals_dilithium5_ref_polyvec_matrix_pointwise_montgomery+0x68>
  for(i = 0; i < L; ++i) {
    1a28:	40080813          	addi	a6,a6,1024
    1a2c:	40088893          	addi	a7,a7,1024
    1a30:	fbc81ee3          	bne	a6,t3,19ec <pqcrystals_dilithium5_ref_polyvec_matrix_pointwise_montgomery+0x5c>
  for(i = 0; i < K; ++i){
    1a34:	40078413          	addi	s0,a5,1024
    1a38:	40030313          	addi	t1,t1,1024
    1a3c:	01240663          	beq	s0,s2,1a48 <pqcrystals_dilithium5_ref_polyvec_matrix_pointwise_montgomery+0xb8>
    1a40:	00080a13          	mv	s4,a6
    1a44:	f89ff06f          	j	19cc <pqcrystals_dilithium5_ref_polyvec_matrix_pointwise_montgomery+0x3c>
}
    1a48:	01c12083          	lw	ra,28(sp)
    1a4c:	01812403          	lw	s0,24(sp)
    1a50:	01412483          	lw	s1,20(sp)
    1a54:	01012903          	lw	s2,16(sp)
    1a58:	00c12983          	lw	s3,12(sp)
    1a5c:	00812a03          	lw	s4,8(sp)
    1a60:	02010113          	addi	sp,sp,32
    1a64:	00008067          	ret

00001a68 <pqcrystals_dilithium5_ref_polyvecl_uniform_eta>:
void polyvecl_uniform_eta(polyvecl *v, const uint8_t seed[CRHBYTES], uint16_t nonce) {
    1a68:	fe010113          	addi	sp,sp,-32
    1a6c:	01212823          	sw	s2,16(sp)
    1a70:	00002937          	lui	s2,0x2
    1a74:	c0090913          	addi	s2,s2,-1024 # 1c00 <pqcrystals_dilithium5_ref_polyvecl_add+0x68>
    1a78:	00812c23          	sw	s0,24(sp)
    1a7c:	00912a23          	sw	s1,20(sp)
    1a80:	01312623          	sw	s3,12(sp)
    1a84:	00112e23          	sw	ra,28(sp)
    1a88:	00050493          	mv	s1,a0
    1a8c:	00058993          	mv	s3,a1
    1a90:	00060413          	mv	s0,a2
  for(i = 0; i < L; ++i)
    1a94:	01250933          	add	s2,a0,s2
    poly_uniform_eta(&v->vec[i], seed, nonce++);
    1a98:	00140793          	addi	a5,s0,1
    1a9c:	00040613          	mv	a2,s0
    1aa0:	00048513          	mv	a0,s1
    1aa4:	01079413          	slli	s0,a5,0x10
  for(i = 0; i < L; ++i)
    1aa8:	40048493          	addi	s1,s1,1024
    poly_uniform_eta(&v->vec[i], seed, nonce++);
    1aac:	00098593          	mv	a1,s3
    1ab0:	01045413          	srli	s0,s0,0x10
    1ab4:	659000ef          	jal	ra,290c <pqcrystals_dilithium5_ref_poly_uniform_eta>
  for(i = 0; i < L; ++i)
    1ab8:	ff2490e3          	bne	s1,s2,1a98 <pqcrystals_dilithium5_ref_polyvecl_uniform_eta+0x30>
}
    1abc:	01c12083          	lw	ra,28(sp)
    1ac0:	01812403          	lw	s0,24(sp)
    1ac4:	01412483          	lw	s1,20(sp)
    1ac8:	01012903          	lw	s2,16(sp)
    1acc:	00c12983          	lw	s3,12(sp)
    1ad0:	02010113          	addi	sp,sp,32
    1ad4:	00008067          	ret

00001ad8 <pqcrystals_dilithium5_ref_polyvecl_uniform_gamma1>:
void polyvecl_uniform_gamma1(polyvecl *v, const uint8_t seed[CRHBYTES], uint16_t nonce) {
    1ad8:	fe010113          	addi	sp,sp,-32
    1adc:	00812c23          	sw	s0,24(sp)
    poly_uniform_gamma1(&v->vec[i], seed, L*nonce + i);
    1ae0:	00361413          	slli	s0,a2,0x3
void polyvecl_uniform_gamma1(polyvecl *v, const uint8_t seed[CRHBYTES], uint16_t nonce) {
    1ae4:	01212823          	sw	s2,16(sp)
    poly_uniform_gamma1(&v->vec[i], seed, L*nonce + i);
    1ae8:	40c40433          	sub	s0,s0,a2
    1aec:	00002937          	lui	s2,0x2
    1af0:	01041413          	slli	s0,s0,0x10
    1af4:	c0090913          	addi	s2,s2,-1024 # 1c00 <pqcrystals_dilithium5_ref_polyvecl_add+0x68>
void polyvecl_uniform_gamma1(polyvecl *v, const uint8_t seed[CRHBYTES], uint16_t nonce) {
    1af8:	00912a23          	sw	s1,20(sp)
    1afc:	01312623          	sw	s3,12(sp)
    1b00:	00112e23          	sw	ra,28(sp)
    1b04:	00050493          	mv	s1,a0
    1b08:	00058993          	mv	s3,a1
    poly_uniform_gamma1(&v->vec[i], seed, L*nonce + i);
    1b0c:	01045413          	srli	s0,s0,0x10
    1b10:	01250933          	add	s2,a0,s2
    1b14:	00040613          	mv	a2,s0
  for(i = 0; i < L; ++i)
    1b18:	00140413          	addi	s0,s0,1
    poly_uniform_gamma1(&v->vec[i], seed, L*nonce + i);
    1b1c:	00048513          	mv	a0,s1
    1b20:	00098593          	mv	a1,s3
  for(i = 0; i < L; ++i)
    1b24:	01041413          	slli	s0,s0,0x10
    1b28:	40048493          	addi	s1,s1,1024
    poly_uniform_gamma1(&v->vec[i], seed, L*nonce + i);
    1b2c:	748010ef          	jal	ra,3274 <pqcrystals_dilithium5_ref_poly_uniform_gamma1>
  for(i = 0; i < L; ++i)
    1b30:	01045413          	srli	s0,s0,0x10
    1b34:	ff2490e3          	bne	s1,s2,1b14 <pqcrystals_dilithium5_ref_polyvecl_uniform_gamma1+0x3c>
}
    1b38:	01c12083          	lw	ra,28(sp)
    1b3c:	01812403          	lw	s0,24(sp)
    1b40:	01412483          	lw	s1,20(sp)
    1b44:	01012903          	lw	s2,16(sp)
    1b48:	00c12983          	lw	s3,12(sp)
    1b4c:	02010113          	addi	sp,sp,32
    1b50:	00008067          	ret

00001b54 <pqcrystals_dilithium5_ref_polyvecl_reduce>:
void polyvecl_reduce(polyvecl *v) {
    1b54:	ff010113          	addi	sp,sp,-16
    1b58:	00912223          	sw	s1,4(sp)
    1b5c:	000024b7          	lui	s1,0x2
    1b60:	c0048493          	addi	s1,s1,-1024 # 1c00 <pqcrystals_dilithium5_ref_polyvecl_add+0x68>
    1b64:	00812423          	sw	s0,8(sp)
    1b68:	00112623          	sw	ra,12(sp)
    1b6c:	00050413          	mv	s0,a0
    1b70:	009504b3          	add	s1,a0,s1
    poly_reduce(&v->vec[i]);
    1b74:	00040513          	mv	a0,s0
  for(i = 0; i < L; ++i)
    1b78:	40040413          	addi	s0,s0,1024
    poly_reduce(&v->vec[i]);
    1b7c:	7e4000ef          	jal	ra,2360 <pqcrystals_dilithium5_ref_poly_reduce>
  for(i = 0; i < L; ++i)
    1b80:	fe941ae3          	bne	s0,s1,1b74 <pqcrystals_dilithium5_ref_polyvecl_reduce+0x20>
}
    1b84:	00c12083          	lw	ra,12(sp)
    1b88:	00812403          	lw	s0,8(sp)
    1b8c:	00412483          	lw	s1,4(sp)
    1b90:	01010113          	addi	sp,sp,16
    1b94:	00008067          	ret

00001b98 <pqcrystals_dilithium5_ref_polyvecl_add>:
void polyvecl_add(polyvecl *w, const polyvecl *u, const polyvecl *v) {
    1b98:	fe010113          	addi	sp,sp,-32
    1b9c:	00912a23          	sw	s1,20(sp)
  for(i = 0; i < L; ++i)
    1ba0:	000024b7          	lui	s1,0x2
void polyvecl_add(polyvecl *w, const polyvecl *u, const polyvecl *v) {
    1ba4:	00812c23          	sw	s0,24(sp)
    1ba8:	01212823          	sw	s2,16(sp)
    1bac:	01312623          	sw	s3,12(sp)
    1bb0:	01412423          	sw	s4,8(sp)
    1bb4:	00112e23          	sw	ra,28(sp)
    1bb8:	00050a13          	mv	s4,a0
    1bbc:	00058993          	mv	s3,a1
    1bc0:	00060913          	mv	s2,a2
    1bc4:	00000413          	li	s0,0
  for(i = 0; i < L; ++i)
    1bc8:	c0048493          	addi	s1,s1,-1024 # 1c00 <pqcrystals_dilithium5_ref_polyvecl_add+0x68>
    poly_add(&w->vec[i], &u->vec[i], &v->vec[i]);
    1bcc:	00890633          	add	a2,s2,s0
    1bd0:	008985b3          	add	a1,s3,s0
    1bd4:	008a0533          	add	a0,s4,s0
  for(i = 0; i < L; ++i)
    1bd8:	40040413          	addi	s0,s0,1024
    poly_add(&w->vec[i], &u->vec[i], &v->vec[i]);
    1bdc:	005000ef          	jal	ra,23e0 <pqcrystals_dilithium5_ref_poly_add>
  for(i = 0; i < L; ++i)
    1be0:	fe9416e3          	bne	s0,s1,1bcc <pqcrystals_dilithium5_ref_polyvecl_add+0x34>
}
    1be4:	01c12083          	lw	ra,28(sp)
    1be8:	01812403          	lw	s0,24(sp)
    1bec:	01412483          	lw	s1,20(sp)
    1bf0:	01012903          	lw	s2,16(sp)
    1bf4:	00c12983          	lw	s3,12(sp)
    1bf8:	00812a03          	lw	s4,8(sp)
    1bfc:	02010113          	addi	sp,sp,32
    1c00:	00008067          	ret

00001c04 <pqcrystals_dilithium5_ref_polyvecl_ntt>:
void polyvecl_ntt(polyvecl *v) {
    1c04:	ff010113          	addi	sp,sp,-16
    1c08:	00912223          	sw	s1,4(sp)
    1c0c:	000024b7          	lui	s1,0x2
    1c10:	c0048493          	addi	s1,s1,-1024 # 1c00 <pqcrystals_dilithium5_ref_polyvecl_add+0x68>
    1c14:	00812423          	sw	s0,8(sp)
    1c18:	00112623          	sw	ra,12(sp)
    1c1c:	00050413          	mv	s0,a0
    1c20:	009504b3          	add	s1,a0,s1
    poly_ntt(&v->vec[i]);
    1c24:	00040513          	mv	a0,s0
  for(i = 0; i < L; ++i)
    1c28:	40040413          	addi	s0,s0,1024
    poly_ntt(&v->vec[i]);
    1c2c:	085000ef          	jal	ra,24b0 <pqcrystals_dilithium5_ref_poly_ntt>
  for(i = 0; i < L; ++i)
    1c30:	fe941ae3          	bne	s0,s1,1c24 <pqcrystals_dilithium5_ref_polyvecl_ntt+0x20>
}
    1c34:	00c12083          	lw	ra,12(sp)
    1c38:	00812403          	lw	s0,8(sp)
    1c3c:	00412483          	lw	s1,4(sp)
    1c40:	01010113          	addi	sp,sp,16
    1c44:	00008067          	ret

00001c48 <pqcrystals_dilithium5_ref_polyvecl_invntt_tomont>:
void polyvecl_invntt_tomont(polyvecl *v) {
    1c48:	ff010113          	addi	sp,sp,-16
    1c4c:	00912223          	sw	s1,4(sp)
    1c50:	000024b7          	lui	s1,0x2
    1c54:	c0048493          	addi	s1,s1,-1024 # 1c00 <pqcrystals_dilithium5_ref_polyvecl_add+0x68>
    1c58:	00812423          	sw	s0,8(sp)
    1c5c:	00112623          	sw	ra,12(sp)
    1c60:	00050413          	mv	s0,a0
    1c64:	009504b3          	add	s1,a0,s1
    poly_invntt_tomont(&v->vec[i]);
    1c68:	00040513          	mv	a0,s0
  for(i = 0; i < L; ++i)
    1c6c:	40040413          	addi	s0,s0,1024
    poly_invntt_tomont(&v->vec[i]);
    1c70:	045000ef          	jal	ra,24b4 <pqcrystals_dilithium5_ref_poly_invntt_tomont>
  for(i = 0; i < L; ++i)
    1c74:	fe941ae3          	bne	s0,s1,1c68 <pqcrystals_dilithium5_ref_polyvecl_invntt_tomont+0x20>
}
    1c78:	00c12083          	lw	ra,12(sp)
    1c7c:	00812403          	lw	s0,8(sp)
    1c80:	00412483          	lw	s1,4(sp)
    1c84:	01010113          	addi	sp,sp,16
    1c88:	00008067          	ret

00001c8c <pqcrystals_dilithium5_ref_polyvecl_pointwise_poly_montgomery>:
  for(i = 0; i < L; ++i)
    1c8c:	00002e37          	lui	t3,0x2
    1c90:	c00e0e13          	addi	t3,t3,-1024 # 1c00 <pqcrystals_dilithium5_ref_polyvecl_add+0x68>
    1c94:	00050313          	mv	t1,a0
void polyvecl_pointwise_poly_montgomery(polyvecl *r, const poly *a, const polyvecl *v) {
    1c98:	00058e93          	mv	t4,a1
    1c9c:	00060893          	mv	a7,a2
    1ca0:	01c60e33          	add	t3,a2,t3
    1ca4:	40058813          	addi	a6,a1,1024
      asm volatile("fpau.dil.mac %0, %1, %2\n": : "r"(u_coeff), "r"(v_coeff),"r"(0): );
    1ca8:	00000513          	li	a0,0
    for( unsigned int j = 0; j < N; ++j)
    1cac:	000e8793          	mv	a5,t4
void polyvecl_pointwise_poly_montgomery(polyvecl *r, const poly *a, const polyvecl *v) {
    1cb0:	00030693          	mv	a3,t1
    1cb4:	00088713          	mv	a4,a7
      u_coeff = a->coeffs[j];
    1cb8:	0007a603          	lw	a2,0(a5)
      v_coeff = v->vec[i].coeffs[j];
    1cbc:	00072583          	lw	a1,0(a4)
      asm volatile ("nop"); //ORCA
    1cc0:	00000013          	nop
      asm volatile ("nop"); //ORCA
    1cc4:	00000013          	nop
      asm volatile ("nop"); //ORCA
    1cc8:	00000013          	nop
      asm volatile("fpau.dil.mac %0, %1, %2\n": : "r"(u_coeff), "r"(v_coeff),"r"(0): );
    1ccc:	50a5a633          	fpau.dil.mac	a2,a1,a0
      r->vec[i].coeffs[j] = u_coeff;
    1cd0:	00c6a023          	sw	a2,0(a3)
    for( unsigned int j = 0; j < N; ++j)
    1cd4:	00478793          	addi	a5,a5,4
    1cd8:	00470713          	addi	a4,a4,4
    1cdc:	00468693          	addi	a3,a3,4
    1ce0:	fd079ce3          	bne	a5,a6,1cb8 <pqcrystals_dilithium5_ref_polyvecl_pointwise_poly_montgomery+0x2c>
  for(i = 0; i < L; ++i)
    1ce4:	40088893          	addi	a7,a7,1024
    1ce8:	40030313          	addi	t1,t1,1024
    1cec:	fdc890e3          	bne	a7,t3,1cac <pqcrystals_dilithium5_ref_polyvecl_pointwise_poly_montgomery+0x20>
}
    1cf0:	00008067          	ret

00001cf4 <pqcrystals_dilithium5_ref_polyvecl_pointwise_acc_montgomery>:
{
    1cf4:	ff010113          	addi	sp,sp,-16
    1cf8:	00912223          	sw	s1,4(sp)
    1cfc:	01212023          	sw	s2,0(sp)
    1d00:	00060493          	mv	s1,a2
    1d04:	00058913          	mv	s2,a1
    w->coeffs[i] = 0;
    1d08:	40000613          	li	a2,1024
    1d0c:	00000593          	li	a1,0
{
    1d10:	00812423          	sw	s0,8(sp)
    1d14:	00112623          	sw	ra,12(sp)
    1d18:	00050413          	mv	s0,a0
    w->coeffs[i] = 0;
    1d1c:	34c060ef          	jal	ra,8068 <memset>
    1d20:	00002e37          	lui	t3,0x2
    1d24:	c00e0e13          	addi	t3,t3,-1024 # 1c00 <pqcrystals_dilithium5_ref_polyvecl_add+0x68>
    1d28:	00090893          	mv	a7,s2
    1d2c:	00048313          	mv	t1,s1
    1d30:	01c90e33          	add	t3,s2,t3
    1d34:	40040813          	addi	a6,s0,1024
    for(j = 0; j < N; j++){
    1d38:	00040793          	mv	a5,s0
{
    1d3c:	00030693          	mv	a3,t1
    1d40:	00088713          	mv	a4,a7
      d = w->coeffs[j];
    1d44:	0007a503          	lw	a0,0(a5)
      u_coeff = u->vec[i].coeffs[j];
    1d48:	00072603          	lw	a2,0(a4)
      v_coeff = v->vec[i].coeffs[j];
    1d4c:	0006a583          	lw	a1,0(a3)
      asm volatile("nop"); //ORCA
    1d50:	00000013          	nop
      asm volatile("nop"); //ORCA
    1d54:	00000013          	nop
      asm volatile("nop"); //ORCA
    1d58:	00000013          	nop
      asm volatile("fpau.dil.mac %0, %1, %2\n": : "r"(u_coeff), "r"(v_coeff),"r"(d): );
    1d5c:	50a5a633          	fpau.dil.mac	a2,a1,a0
      w->coeffs[j] = u_coeff;
    1d60:	00c7a023          	sw	a2,0(a5)
    for(j = 0; j < N; j++){
    1d64:	00478793          	addi	a5,a5,4
    1d68:	00470713          	addi	a4,a4,4
    1d6c:	00468693          	addi	a3,a3,4
    1d70:	fd079ae3          	bne	a5,a6,1d44 <pqcrystals_dilithium5_ref_polyvecl_pointwise_acc_montgomery+0x50>
  for(i = 0; i < L; ++i) {
    1d74:	40088893          	addi	a7,a7,1024
    1d78:	40030313          	addi	t1,t1,1024
    1d7c:	fbc89ee3          	bne	a7,t3,1d38 <pqcrystals_dilithium5_ref_polyvecl_pointwise_acc_montgomery+0x44>
  for(i = 1; i < L; ++i) {
    poly_pointwise_montgomery(&t, &u->vec[i], &v->vec[i]);
    poly_add(w, w, &t);
  }
#endif
}
    1d80:	00c12083          	lw	ra,12(sp)
    1d84:	00812403          	lw	s0,8(sp)
    1d88:	00412483          	lw	s1,4(sp)
    1d8c:	00012903          	lw	s2,0(sp)
    1d90:	01010113          	addi	sp,sp,16
    1d94:	00008067          	ret

00001d98 <pqcrystals_dilithium5_ref_polyvecl_chknorm>:
*              - int32_t B: norm bound
*
* Returns 0 if norm of all polynomials is strictly smaller than B <= (Q-1)/8
* and 1 otherwise.
**************************************************/
int polyvecl_chknorm(const polyvecl *v, int32_t bound)  {
    1d98:	ff010113          	addi	sp,sp,-16
    1d9c:	00912223          	sw	s1,4(sp)
    1da0:	000024b7          	lui	s1,0x2
    1da4:	c0048493          	addi	s1,s1,-1024 # 1c00 <pqcrystals_dilithium5_ref_polyvecl_add+0x68>
    1da8:	00812423          	sw	s0,8(sp)
    1dac:	01212023          	sw	s2,0(sp)
    1db0:	00112623          	sw	ra,12(sp)
    1db4:	00050413          	mv	s0,a0
    1db8:	00058913          	mv	s2,a1
    1dbc:	009504b3          	add	s1,a0,s1
  unsigned int i;

  for(i = 0; i < L; ++i)
    if(poly_chknorm(&v->vec[i], bound))
    1dc0:	00040513          	mv	a0,s0
    1dc4:	00090593          	mv	a1,s2
    1dc8:	149000ef          	jal	ra,2710 <pqcrystals_dilithium5_ref_poly_chknorm>
  for(i = 0; i < L; ++i)
    1dcc:	40040413          	addi	s0,s0,1024
    if(poly_chknorm(&v->vec[i], bound))
    1dd0:	02051063          	bnez	a0,1df0 <pqcrystals_dilithium5_ref_polyvecl_chknorm+0x58>
  for(i = 0; i < L; ++i)
    1dd4:	fe9416e3          	bne	s0,s1,1dc0 <pqcrystals_dilithium5_ref_polyvecl_chknorm+0x28>
      return 1;

  return 0;
}
    1dd8:	00c12083          	lw	ra,12(sp)
    1ddc:	00812403          	lw	s0,8(sp)
    1de0:	00412483          	lw	s1,4(sp)
    1de4:	00012903          	lw	s2,0(sp)
    1de8:	01010113          	addi	sp,sp,16
    1dec:	00008067          	ret
    1df0:	00c12083          	lw	ra,12(sp)
    1df4:	00812403          	lw	s0,8(sp)
    1df8:	00412483          	lw	s1,4(sp)
    1dfc:	00012903          	lw	s2,0(sp)
      return 1;
    1e00:	00100513          	li	a0,1
}
    1e04:	01010113          	addi	sp,sp,16
    1e08:	00008067          	ret

00001e0c <pqcrystals_dilithium5_ref_polyveck_uniform_eta>:

/**************************************************************/
/************ Vectors of polynomials of length K **************/
/**************************************************************/

void polyveck_uniform_eta(polyveck *v, const uint8_t seed[CRHBYTES], uint16_t nonce) {
    1e0c:	fe010113          	addi	sp,sp,-32
    1e10:	01212823          	sw	s2,16(sp)
    1e14:	00002937          	lui	s2,0x2
    1e18:	00812c23          	sw	s0,24(sp)
    1e1c:	00912a23          	sw	s1,20(sp)
    1e20:	01312623          	sw	s3,12(sp)
    1e24:	00112e23          	sw	ra,28(sp)
    1e28:	00050493          	mv	s1,a0
    1e2c:	00058993          	mv	s3,a1
    1e30:	00060413          	mv	s0,a2
  unsigned int i;

  for(i = 0; i < K; ++i)
    1e34:	01250933          	add	s2,a0,s2
    poly_uniform_eta(&v->vec[i], seed, nonce++);
    1e38:	00140793          	addi	a5,s0,1
    1e3c:	00040613          	mv	a2,s0
    1e40:	00048513          	mv	a0,s1
    1e44:	01079413          	slli	s0,a5,0x10
  for(i = 0; i < K; ++i)
    1e48:	40048493          	addi	s1,s1,1024
    poly_uniform_eta(&v->vec[i], seed, nonce++);
    1e4c:	00098593          	mv	a1,s3
    1e50:	01045413          	srli	s0,s0,0x10
    1e54:	2b9000ef          	jal	ra,290c <pqcrystals_dilithium5_ref_poly_uniform_eta>
  for(i = 0; i < K; ++i)
    1e58:	ff2490e3          	bne	s1,s2,1e38 <pqcrystals_dilithium5_ref_polyveck_uniform_eta+0x2c>
}
    1e5c:	01c12083          	lw	ra,28(sp)
    1e60:	01812403          	lw	s0,24(sp)
    1e64:	01412483          	lw	s1,20(sp)
    1e68:	01012903          	lw	s2,16(sp)
    1e6c:	00c12983          	lw	s3,12(sp)
    1e70:	02010113          	addi	sp,sp,32
    1e74:	00008067          	ret

00001e78 <pqcrystals_dilithium5_ref_polyveck_reduce>:
* Description: Reduce coefficients of polynomials in vector of length K
*              to representatives in [-6283009,6283007].
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_reduce(polyveck *v) {
    1e78:	ff010113          	addi	sp,sp,-16
    1e7c:	00912223          	sw	s1,4(sp)
    1e80:	000024b7          	lui	s1,0x2
    1e84:	00812423          	sw	s0,8(sp)
    1e88:	00112623          	sw	ra,12(sp)
    1e8c:	00050413          	mv	s0,a0
    1e90:	009504b3          	add	s1,a0,s1
  unsigned int i;

  for(i = 0; i < K; ++i)
    poly_reduce(&v->vec[i]);
    1e94:	00040513          	mv	a0,s0
  for(i = 0; i < K; ++i)
    1e98:	40040413          	addi	s0,s0,1024
    poly_reduce(&v->vec[i]);
    1e9c:	4c4000ef          	jal	ra,2360 <pqcrystals_dilithium5_ref_poly_reduce>
  for(i = 0; i < K; ++i)
    1ea0:	fe941ae3          	bne	s0,s1,1e94 <pqcrystals_dilithium5_ref_polyveck_reduce+0x1c>
}
    1ea4:	00c12083          	lw	ra,12(sp)
    1ea8:	00812403          	lw	s0,8(sp)
    1eac:	00412483          	lw	s1,4(sp)
    1eb0:	01010113          	addi	sp,sp,16
    1eb4:	00008067          	ret

00001eb8 <pqcrystals_dilithium5_ref_polyveck_caddq>:
* Description: For all coefficients of polynomials in vector of length K
*              add Q if coefficient is negative.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_caddq(polyveck *v) {
    1eb8:	ff010113          	addi	sp,sp,-16
    1ebc:	00912223          	sw	s1,4(sp)
    1ec0:	000024b7          	lui	s1,0x2
    1ec4:	00812423          	sw	s0,8(sp)
    1ec8:	00112623          	sw	ra,12(sp)
    1ecc:	00050413          	mv	s0,a0
    1ed0:	009504b3          	add	s1,a0,s1
  unsigned int i;

  for(i = 0; i < K; ++i)
    poly_caddq(&v->vec[i]);
    1ed4:	00040513          	mv	a0,s0
  for(i = 0; i < K; ++i)
    1ed8:	40040413          	addi	s0,s0,1024
    poly_caddq(&v->vec[i]);
    1edc:	4c4000ef          	jal	ra,23a0 <pqcrystals_dilithium5_ref_poly_caddq>
  for(i = 0; i < K; ++i)
    1ee0:	fe941ae3          	bne	s0,s1,1ed4 <pqcrystals_dilithium5_ref_polyveck_caddq+0x1c>
}
    1ee4:	00c12083          	lw	ra,12(sp)
    1ee8:	00812403          	lw	s0,8(sp)
    1eec:	00412483          	lw	s1,4(sp)
    1ef0:	01010113          	addi	sp,sp,16
    1ef4:	00008067          	ret

00001ef8 <pqcrystals_dilithium5_ref_polyveck_add>:
*
* Arguments:   - polyveck *w: pointer to output vector
*              - const polyveck *u: pointer to first summand
*              - const polyveck *v: pointer to second summand
**************************************************/
void polyveck_add(polyveck *w, const polyveck *u, const polyveck *v) {
    1ef8:	fe010113          	addi	sp,sp,-32
    1efc:	00812c23          	sw	s0,24(sp)
    1f00:	00912a23          	sw	s1,20(sp)
    1f04:	01212823          	sw	s2,16(sp)
    1f08:	01312623          	sw	s3,12(sp)
    1f0c:	01412423          	sw	s4,8(sp)
    1f10:	00112e23          	sw	ra,28(sp)
    1f14:	00050993          	mv	s3,a0
    1f18:	00058913          	mv	s2,a1
    1f1c:	00060493          	mv	s1,a2
    1f20:	00000413          	li	s0,0
  unsigned int i;

  for(i = 0; i < K; ++i)
    1f24:	00002a37          	lui	s4,0x2
    poly_add(&w->vec[i], &u->vec[i], &v->vec[i]);
    1f28:	00848633          	add	a2,s1,s0
    1f2c:	008905b3          	add	a1,s2,s0
    1f30:	00898533          	add	a0,s3,s0
  for(i = 0; i < K; ++i)
    1f34:	40040413          	addi	s0,s0,1024
    poly_add(&w->vec[i], &u->vec[i], &v->vec[i]);
    1f38:	4a8000ef          	jal	ra,23e0 <pqcrystals_dilithium5_ref_poly_add>
  for(i = 0; i < K; ++i)
    1f3c:	ff4416e3          	bne	s0,s4,1f28 <pqcrystals_dilithium5_ref_polyveck_add+0x30>
}
    1f40:	01c12083          	lw	ra,28(sp)
    1f44:	01812403          	lw	s0,24(sp)
    1f48:	01412483          	lw	s1,20(sp)
    1f4c:	01012903          	lw	s2,16(sp)
    1f50:	00c12983          	lw	s3,12(sp)
    1f54:	00812a03          	lw	s4,8(sp)
    1f58:	02010113          	addi	sp,sp,32
    1f5c:	00008067          	ret

00001f60 <pqcrystals_dilithium5_ref_polyveck_sub>:
* Arguments:   - polyveck *w: pointer to output vector
*              - const polyveck *u: pointer to first input vector
*              - const polyveck *v: pointer to second input vector to be
*                                   subtracted from first input vector
**************************************************/
void polyveck_sub(polyveck *w, const polyveck *u, const polyveck *v) {
    1f60:	fe010113          	addi	sp,sp,-32
    1f64:	00812c23          	sw	s0,24(sp)
    1f68:	00912a23          	sw	s1,20(sp)
    1f6c:	01212823          	sw	s2,16(sp)
    1f70:	01312623          	sw	s3,12(sp)
    1f74:	01412423          	sw	s4,8(sp)
    1f78:	00112e23          	sw	ra,28(sp)
    1f7c:	00050993          	mv	s3,a0
    1f80:	00058913          	mv	s2,a1
    1f84:	00060493          	mv	s1,a2
    1f88:	00000413          	li	s0,0
  unsigned int i;

  for(i = 0; i < K; ++i)
    1f8c:	00002a37          	lui	s4,0x2
    poly_sub(&w->vec[i], &u->vec[i], &v->vec[i]);
    1f90:	00848633          	add	a2,s1,s0
    1f94:	008905b3          	add	a1,s2,s0
    1f98:	00898533          	add	a0,s3,s0
  for(i = 0; i < K; ++i)
    1f9c:	40040413          	addi	s0,s0,1024
    poly_sub(&w->vec[i], &u->vec[i], &v->vec[i]);
    1fa0:	498000ef          	jal	ra,2438 <pqcrystals_dilithium5_ref_poly_sub>
  for(i = 0; i < K; ++i)
    1fa4:	ff4416e3          	bne	s0,s4,1f90 <pqcrystals_dilithium5_ref_polyveck_sub+0x30>
}
    1fa8:	01c12083          	lw	ra,28(sp)
    1fac:	01812403          	lw	s0,24(sp)
    1fb0:	01412483          	lw	s1,20(sp)
    1fb4:	01012903          	lw	s2,16(sp)
    1fb8:	00c12983          	lw	s3,12(sp)
    1fbc:	00812a03          	lw	s4,8(sp)
    1fc0:	02010113          	addi	sp,sp,32
    1fc4:	00008067          	ret

00001fc8 <pqcrystals_dilithium5_ref_polyveck_shiftl>:
* Description: Multiply vector of polynomials of Length K by 2^D without modular
*              reduction. Assumes input coefficients to be less than 2^{31-D}.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_shiftl(polyveck *v) {
    1fc8:	ff010113          	addi	sp,sp,-16
    1fcc:	00912223          	sw	s1,4(sp)
    1fd0:	000024b7          	lui	s1,0x2
    1fd4:	00812423          	sw	s0,8(sp)
    1fd8:	00112623          	sw	ra,12(sp)
    1fdc:	00050413          	mv	s0,a0
    1fe0:	009504b3          	add	s1,a0,s1
  unsigned int i;

  for(i = 0; i < K; ++i)
    poly_shiftl(&v->vec[i]);
    1fe4:	00040513          	mv	a0,s0
  for(i = 0; i < K; ++i)
    1fe8:	40040413          	addi	s0,s0,1024
    poly_shiftl(&v->vec[i]);
    1fec:	4a8000ef          	jal	ra,2494 <pqcrystals_dilithium5_ref_poly_shiftl>
  for(i = 0; i < K; ++i)
    1ff0:	fe941ae3          	bne	s0,s1,1fe4 <pqcrystals_dilithium5_ref_polyveck_shiftl+0x1c>
}
    1ff4:	00c12083          	lw	ra,12(sp)
    1ff8:	00812403          	lw	s0,8(sp)
    1ffc:	00412483          	lw	s1,4(sp)
    2000:	01010113          	addi	sp,sp,16
    2004:	00008067          	ret

00002008 <pqcrystals_dilithium5_ref_polyveck_ntt>:
* Description: Forward NTT of all polynomials in vector of length K. Output
*              coefficients can be up to 16*Q larger than input coefficients.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_ntt(polyveck *v) {
    2008:	ff010113          	addi	sp,sp,-16
    200c:	00912223          	sw	s1,4(sp)
    2010:	000024b7          	lui	s1,0x2
    2014:	00812423          	sw	s0,8(sp)
    2018:	00112623          	sw	ra,12(sp)
    201c:	00050413          	mv	s0,a0
    2020:	009504b3          	add	s1,a0,s1
  unsigned int i;

  for(i = 0; i < K; ++i)
    poly_ntt(&v->vec[i]);
    2024:	00040513          	mv	a0,s0
  for(i = 0; i < K; ++i)
    2028:	40040413          	addi	s0,s0,1024
    poly_ntt(&v->vec[i]);
    202c:	484000ef          	jal	ra,24b0 <pqcrystals_dilithium5_ref_poly_ntt>
  for(i = 0; i < K; ++i)
    2030:	fe941ae3          	bne	s0,s1,2024 <pqcrystals_dilithium5_ref_polyveck_ntt+0x1c>
}
    2034:	00c12083          	lw	ra,12(sp)
    2038:	00812403          	lw	s0,8(sp)
    203c:	00412483          	lw	s1,4(sp)
    2040:	01010113          	addi	sp,sp,16
    2044:	00008067          	ret

00002048 <pqcrystals_dilithium5_ref_polyveck_invntt_tomont>:
*              in vector of length K. Input coefficients need to be less
*              than 2*Q.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_invntt_tomont(polyveck *v) {
    2048:	ff010113          	addi	sp,sp,-16
    204c:	00912223          	sw	s1,4(sp)
    2050:	000024b7          	lui	s1,0x2
    2054:	00812423          	sw	s0,8(sp)
    2058:	00112623          	sw	ra,12(sp)
    205c:	00050413          	mv	s0,a0
    2060:	009504b3          	add	s1,a0,s1
  unsigned int i;

  for(i = 0; i < K; ++i)
    poly_invntt_tomont(&v->vec[i]);
    2064:	00040513          	mv	a0,s0
  for(i = 0; i < K; ++i)
    2068:	40040413          	addi	s0,s0,1024
    poly_invntt_tomont(&v->vec[i]);
    206c:	448000ef          	jal	ra,24b4 <pqcrystals_dilithium5_ref_poly_invntt_tomont>
  for(i = 0; i < K; ++i)
    2070:	fe941ae3          	bne	s0,s1,2064 <pqcrystals_dilithium5_ref_polyveck_invntt_tomont+0x1c>
}
    2074:	00c12083          	lw	ra,12(sp)
    2078:	00812403          	lw	s0,8(sp)
    207c:	00412483          	lw	s1,4(sp)
    2080:	01010113          	addi	sp,sp,16
    2084:	00008067          	ret

00002088 <pqcrystals_dilithium5_ref_polyveck_pointwise_poly_montgomery>:
void polyveck_pointwise_poly_montgomery(polyveck *r, const poly *a, const polyveck *v) {
#ifdef FPAU
  unsigned int i, j;
  int32_t u_coeff, v_coeff;

  for(i = 0; i < K; ++i)
    2088:	00002eb7          	lui	t4,0x2
    208c:	00050313          	mv	t1,a0
void polyveck_pointwise_poly_montgomery(polyveck *r, const poly *a, const polyveck *v) {
    2090:	00058e13          	mv	t3,a1
    2094:	00060893          	mv	a7,a2
    2098:	01d60eb3          	add	t4,a2,t4
    209c:	40058813          	addi	a6,a1,1024
#ifndef STEEL
      asm volatile("nop");  //ORCA
      asm volatile("nop");  //ORCA
      asm volatile ("nop"); //ORCA
#endif
      asm volatile("fpau.dil.mac %0, %1, %2\n": : "r"(u_coeff), "r"(v_coeff),"r"(0): ); // syntax with no outputs to avoid compiler optimization (no loading u_coeff)
    20a0:	00000513          	li	a0,0
    for(j = 0; j < N; ++j)
    20a4:	000e0793          	mv	a5,t3
void polyveck_pointwise_poly_montgomery(polyveck *r, const poly *a, const polyveck *v) {
    20a8:	00030693          	mv	a3,t1
    20ac:	00088713          	mv	a4,a7
      u_coeff = a->coeffs[j];
    20b0:	0007a603          	lw	a2,0(a5)
      v_coeff = v->vec[i].coeffs[j];
    20b4:	00072583          	lw	a1,0(a4)
      asm volatile("nop");  //ORCA
    20b8:	00000013          	nop
      asm volatile("nop");  //ORCA
    20bc:	00000013          	nop
      asm volatile ("nop"); //ORCA
    20c0:	00000013          	nop
      asm volatile("fpau.dil.mac %0, %1, %2\n": : "r"(u_coeff), "r"(v_coeff),"r"(0): ); // syntax with no outputs to avoid compiler optimization (no loading u_coeff)
    20c4:	50a5a633          	fpau.dil.mac	a2,a1,a0

      // store result
      r->vec[i].coeffs[j] = u_coeff;
    20c8:	00c6a023          	sw	a2,0(a3)
    for(j = 0; j < N; ++j)
    20cc:	00478793          	addi	a5,a5,4
    20d0:	00470713          	addi	a4,a4,4
    20d4:	00468693          	addi	a3,a3,4
    20d8:	fd079ce3          	bne	a5,a6,20b0 <pqcrystals_dilithium5_ref_polyveck_pointwise_poly_montgomery+0x28>
  for(i = 0; i < K; ++i)
    20dc:	40088893          	addi	a7,a7,1024
    20e0:	40030313          	addi	t1,t1,1024
    20e4:	fdd890e3          	bne	a7,t4,20a4 <pqcrystals_dilithium5_ref_polyveck_pointwise_poly_montgomery+0x1c>
  unsigned int i;

  for(i = 0; i < K; ++i)
    poly_pointwise_montgomery(&r->vec[i], a, &v->vec[i]);
#endif
}
    20e8:	00008067          	ret

000020ec <pqcrystals_dilithium5_ref_polyveck_chknorm>:
*              - int32_t B: norm bound
*
* Returns 0 if norm of all polynomials are strictly smaller than B <= (Q-1)/8
* and 1 otherwise.
**************************************************/
int polyveck_chknorm(const polyveck *v, int32_t bound) {
    20ec:	ff010113          	addi	sp,sp,-16
    20f0:	01212023          	sw	s2,0(sp)
    20f4:	00002937          	lui	s2,0x2
    20f8:	00812423          	sw	s0,8(sp)
    20fc:	00912223          	sw	s1,4(sp)
    2100:	00112623          	sw	ra,12(sp)
    2104:	00050413          	mv	s0,a0
    2108:	00058493          	mv	s1,a1
    210c:	01250933          	add	s2,a0,s2
  unsigned int i;

  for(i = 0; i < K; ++i)
    if(poly_chknorm(&v->vec[i], bound))
    2110:	00040513          	mv	a0,s0
    2114:	00048593          	mv	a1,s1
    2118:	5f8000ef          	jal	ra,2710 <pqcrystals_dilithium5_ref_poly_chknorm>
  for(i = 0; i < K; ++i)
    211c:	40040413          	addi	s0,s0,1024
    if(poly_chknorm(&v->vec[i], bound))
    2120:	02051063          	bnez	a0,2140 <pqcrystals_dilithium5_ref_polyveck_chknorm+0x54>
  for(i = 0; i < K; ++i)
    2124:	ff2416e3          	bne	s0,s2,2110 <pqcrystals_dilithium5_ref_polyveck_chknorm+0x24>
      return 1;

  return 0;
}
    2128:	00c12083          	lw	ra,12(sp)
    212c:	00812403          	lw	s0,8(sp)
    2130:	00412483          	lw	s1,4(sp)
    2134:	00012903          	lw	s2,0(sp)
    2138:	01010113          	addi	sp,sp,16
    213c:	00008067          	ret
    2140:	00c12083          	lw	ra,12(sp)
    2144:	00812403          	lw	s0,8(sp)
    2148:	00412483          	lw	s1,4(sp)
    214c:	00012903          	lw	s2,0(sp)
      return 1;
    2150:	00100513          	li	a0,1
}
    2154:	01010113          	addi	sp,sp,16
    2158:	00008067          	ret

0000215c <pqcrystals_dilithium5_ref_polyveck_power2round>:
*                              coefficients a1
*              - polyveck *v0: pointer to output vector of polynomials with
*                              coefficients a0
*              - const polyveck *v: pointer to input vector
**************************************************/
void polyveck_power2round(polyveck *v1, polyveck *v0, const polyveck *v) {
    215c:	fe010113          	addi	sp,sp,-32
    2160:	00812c23          	sw	s0,24(sp)
    2164:	00912a23          	sw	s1,20(sp)
    2168:	01212823          	sw	s2,16(sp)
    216c:	01312623          	sw	s3,12(sp)
    2170:	01412423          	sw	s4,8(sp)
    2174:	00112e23          	sw	ra,28(sp)
    2178:	00050993          	mv	s3,a0
    217c:	00058913          	mv	s2,a1
    2180:	00060493          	mv	s1,a2
    2184:	00000413          	li	s0,0
  unsigned int i;

  for(i = 0; i < K; ++i)
    2188:	00002a37          	lui	s4,0x2
    poly_power2round(&v1->vec[i], &v0->vec[i], &v->vec[i]);
    218c:	00848633          	add	a2,s1,s0
    2190:	008905b3          	add	a1,s2,s0
    2194:	00898533          	add	a0,s3,s0
  for(i = 0; i < K; ++i)
    2198:	40040413          	addi	s0,s0,1024
    poly_power2round(&v1->vec[i], &v0->vec[i], &v->vec[i]);
    219c:	398000ef          	jal	ra,2534 <pqcrystals_dilithium5_ref_poly_power2round>
  for(i = 0; i < K; ++i)
    21a0:	ff4416e3          	bne	s0,s4,218c <pqcrystals_dilithium5_ref_polyveck_power2round+0x30>
}
    21a4:	01c12083          	lw	ra,28(sp)
    21a8:	01812403          	lw	s0,24(sp)
    21ac:	01412483          	lw	s1,20(sp)
    21b0:	01012903          	lw	s2,16(sp)
    21b4:	00c12983          	lw	s3,12(sp)
    21b8:	00812a03          	lw	s4,8(sp)
    21bc:	02010113          	addi	sp,sp,32
    21c0:	00008067          	ret

000021c4 <pqcrystals_dilithium5_ref_polyveck_decompose>:
*                              coefficients a1
*              - polyveck *v0: pointer to output vector of polynomials with
*                              coefficients a0
*              - const polyveck *v: pointer to input vector
**************************************************/
void polyveck_decompose(polyveck *v1, polyveck *v0, const polyveck *v) {
    21c4:	fe010113          	addi	sp,sp,-32
    21c8:	00812c23          	sw	s0,24(sp)
    21cc:	00912a23          	sw	s1,20(sp)
    21d0:	01212823          	sw	s2,16(sp)
    21d4:	01312623          	sw	s3,12(sp)
    21d8:	01412423          	sw	s4,8(sp)
    21dc:	00112e23          	sw	ra,28(sp)
    21e0:	00050993          	mv	s3,a0
    21e4:	00058913          	mv	s2,a1
    21e8:	00060493          	mv	s1,a2
    21ec:	00000413          	li	s0,0
  unsigned int i;

  for(i = 0; i < K; ++i)
    21f0:	00002a37          	lui	s4,0x2
    poly_decompose(&v1->vec[i], &v0->vec[i], &v->vec[i]);
    21f4:	00848633          	add	a2,s1,s0
    21f8:	008905b3          	add	a1,s2,s0
    21fc:	00898533          	add	a0,s3,s0
  for(i = 0; i < K; ++i)
    2200:	40040413          	addi	s0,s0,1024
    poly_decompose(&v1->vec[i], &v0->vec[i], &v->vec[i]);
    2204:	3a0000ef          	jal	ra,25a4 <pqcrystals_dilithium5_ref_poly_decompose>
  for(i = 0; i < K; ++i)
    2208:	ff4416e3          	bne	s0,s4,21f4 <pqcrystals_dilithium5_ref_polyveck_decompose+0x30>
}
    220c:	01c12083          	lw	ra,28(sp)
    2210:	01812403          	lw	s0,24(sp)
    2214:	01412483          	lw	s1,20(sp)
    2218:	01012903          	lw	s2,16(sp)
    221c:	00c12983          	lw	s3,12(sp)
    2220:	00812a03          	lw	s4,8(sp)
    2224:	02010113          	addi	sp,sp,32
    2228:	00008067          	ret

0000222c <pqcrystals_dilithium5_ref_polyveck_make_hint>:
* Returns number of 1 bits.
**************************************************/
unsigned int polyveck_make_hint(polyveck *h,
                                const polyveck *v0,
                                const polyveck *v1)
{
    222c:	fe010113          	addi	sp,sp,-32
    2230:	00812c23          	sw	s0,24(sp)
    2234:	00912a23          	sw	s1,20(sp)
    2238:	01212823          	sw	s2,16(sp)
    223c:	01312623          	sw	s3,12(sp)
    2240:	01412423          	sw	s4,8(sp)
    2244:	01512223          	sw	s5,4(sp)
    2248:	00112e23          	sw	ra,28(sp)
    224c:	00050a13          	mv	s4,a0
    2250:	00058993          	mv	s3,a1
    2254:	00060913          	mv	s2,a2
    2258:	00000413          	li	s0,0
  unsigned int i, s = 0;
    225c:	00000493          	li	s1,0

  for(i = 0; i < K; ++i)
    2260:	00002ab7          	lui	s5,0x2
    s += poly_make_hint(&h->vec[i], &v0->vec[i], &v1->vec[i]);
    2264:	00890633          	add	a2,s2,s0
    2268:	008985b3          	add	a1,s3,s0
    226c:	008a0533          	add	a0,s4,s0
    2270:	3a4000ef          	jal	ra,2614 <pqcrystals_dilithium5_ref_poly_make_hint>
  for(i = 0; i < K; ++i)
    2274:	40040413          	addi	s0,s0,1024
    s += poly_make_hint(&h->vec[i], &v0->vec[i], &v1->vec[i]);
    2278:	00a484b3          	add	s1,s1,a0
  for(i = 0; i < K; ++i)
    227c:	ff5414e3          	bne	s0,s5,2264 <pqcrystals_dilithium5_ref_polyveck_make_hint+0x38>

  return s;
}
    2280:	01c12083          	lw	ra,28(sp)
    2284:	01812403          	lw	s0,24(sp)
    2288:	01012903          	lw	s2,16(sp)
    228c:	00c12983          	lw	s3,12(sp)
    2290:	00812a03          	lw	s4,8(sp)
    2294:	00412a83          	lw	s5,4(sp)
    2298:	00048513          	mv	a0,s1
    229c:	01412483          	lw	s1,20(sp)
    22a0:	02010113          	addi	sp,sp,32
    22a4:	00008067          	ret

000022a8 <pqcrystals_dilithium5_ref_polyveck_use_hint>:
* Arguments:   - polyveck *w: pointer to output vector of polynomials with
*                             corrected high bits
*              - const polyveck *u: pointer to input vector
*              - const polyveck *h: pointer to input hint vector
**************************************************/
void polyveck_use_hint(polyveck *w, const polyveck *u, const polyveck *h) {
    22a8:	fe010113          	addi	sp,sp,-32
    22ac:	00812c23          	sw	s0,24(sp)
    22b0:	00912a23          	sw	s1,20(sp)
    22b4:	01212823          	sw	s2,16(sp)
    22b8:	01312623          	sw	s3,12(sp)
    22bc:	01412423          	sw	s4,8(sp)
    22c0:	00112e23          	sw	ra,28(sp)
    22c4:	00050993          	mv	s3,a0
    22c8:	00058913          	mv	s2,a1
    22cc:	00060493          	mv	s1,a2
    22d0:	00000413          	li	s0,0
  unsigned int i;

  for(i = 0; i < K; ++i)
    22d4:	00002a37          	lui	s4,0x2
    poly_use_hint(&w->vec[i], &u->vec[i], &h->vec[i]);
    22d8:	00848633          	add	a2,s1,s0
    22dc:	008905b3          	add	a1,s2,s0
    22e0:	00898533          	add	a0,s3,s0
  for(i = 0; i < K; ++i)
    22e4:	40040413          	addi	s0,s0,1024
    poly_use_hint(&w->vec[i], &u->vec[i], &h->vec[i]);
    22e8:	3b4000ef          	jal	ra,269c <pqcrystals_dilithium5_ref_poly_use_hint>
  for(i = 0; i < K; ++i)
    22ec:	ff4416e3          	bne	s0,s4,22d8 <pqcrystals_dilithium5_ref_polyveck_use_hint+0x30>
}
    22f0:	01c12083          	lw	ra,28(sp)
    22f4:	01812403          	lw	s0,24(sp)
    22f8:	01412483          	lw	s1,20(sp)
    22fc:	01012903          	lw	s2,16(sp)
    2300:	00c12983          	lw	s3,12(sp)
    2304:	00812a03          	lw	s4,8(sp)
    2308:	02010113          	addi	sp,sp,32
    230c:	00008067          	ret

00002310 <pqcrystals_dilithium5_ref_polyveck_pack_w1>:

void polyveck_pack_w1(uint8_t r[K*POLYW1_PACKEDBYTES], const polyveck *w1) {
    2310:	ff010113          	addi	sp,sp,-16
    2314:	00812423          	sw	s0,8(sp)
    2318:	00912223          	sw	s1,4(sp)
    231c:	01212023          	sw	s2,0(sp)
    2320:	00112623          	sw	ra,12(sp)
    2324:	00050413          	mv	s0,a0
    2328:	00058493          	mv	s1,a1
    232c:	40050913          	addi	s2,a0,1024
  unsigned int i;

  for(i = 0; i < K; ++i)
    polyw1_pack(&r[i*POLYW1_PACKEDBYTES], &w1->vec[i]);
    2330:	00048593          	mv	a1,s1
    2334:	00040513          	mv	a0,s0
  for(i = 0; i < K; ++i)
    2338:	08040413          	addi	s0,s0,128
    polyw1_pack(&r[i*POLYW1_PACKEDBYTES], &w1->vec[i]);
    233c:	77d000ef          	jal	ra,32b8 <pqcrystals_dilithium5_ref_polyw1_pack>
  for(i = 0; i < K; ++i)
    2340:	40048493          	addi	s1,s1,1024 # 2400 <pqcrystals_dilithium5_ref_poly_add+0x20>
    2344:	ff2416e3          	bne	s0,s2,2330 <pqcrystals_dilithium5_ref_polyveck_pack_w1+0x20>
}
    2348:	00c12083          	lw	ra,12(sp)
    234c:	00812403          	lw	s0,8(sp)
    2350:	00412483          	lw	s1,4(sp)
    2354:	00012903          	lw	s2,0(sp)
    2358:	01010113          	addi	sp,sp,16
    235c:	00008067          	ret

00002360 <pqcrystals_dilithium5_ref_poly_reduce>:
* Description: Inplace reduction of all coefficients of polynomial to
*              representative in [-6283009,6283007].
*
* Arguments:   - poly *a: pointer to input/output polynomial
**************************************************/
void poly_reduce(poly *a) {
    2360:	ff010113          	addi	sp,sp,-16
    2364:	00812423          	sw	s0,8(sp)
    2368:	00912223          	sw	s1,4(sp)
    236c:	00112623          	sw	ra,12(sp)
    2370:	00050413          	mv	s0,a0
    2374:	40050493          	addi	s1,a0,1024
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N; ++i)
    a->coeffs[i] = reduce32(a->coeffs[i]);
    2378:	00042503          	lw	a0,0(s0)
  for(i = 0; i < N; ++i)
    237c:	00440413          	addi	s0,s0,4
    a->coeffs[i] = reduce32(a->coeffs[i]);
    2380:	1b0010ef          	jal	ra,3530 <pqcrystals_dilithium5_ref_reduce32>
    2384:	fea42e23          	sw	a0,-4(s0)
  for(i = 0; i < N; ++i)
    2388:	fe9418e3          	bne	s0,s1,2378 <pqcrystals_dilithium5_ref_poly_reduce+0x18>

  DBENCH_STOP(*tred);
}
    238c:	00c12083          	lw	ra,12(sp)
    2390:	00812403          	lw	s0,8(sp)
    2394:	00412483          	lw	s1,4(sp)
    2398:	01010113          	addi	sp,sp,16
    239c:	00008067          	ret

000023a0 <pqcrystals_dilithium5_ref_poly_caddq>:
* Description: For all coefficients of in/out polynomial add Q if
*              coefficient is negative.
*
* Arguments:   - poly *a: pointer to input/output polynomial
**************************************************/
void poly_caddq(poly *a) {
    23a0:	ff010113          	addi	sp,sp,-16
    23a4:	00812423          	sw	s0,8(sp)
    23a8:	00912223          	sw	s1,4(sp)
    23ac:	00112623          	sw	ra,12(sp)
    23b0:	00050413          	mv	s0,a0
    23b4:	40050493          	addi	s1,a0,1024
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N; ++i)
    a->coeffs[i] = caddq(a->coeffs[i]);
    23b8:	00042503          	lw	a0,0(s0)
  for(i = 0; i < N; ++i)
    23bc:	00440413          	addi	s0,s0,4
    a->coeffs[i] = caddq(a->coeffs[i]);
    23c0:	190010ef          	jal	ra,3550 <pqcrystals_dilithium5_ref_caddq>
    23c4:	fea42e23          	sw	a0,-4(s0)
  for(i = 0; i < N; ++i)
    23c8:	fe9418e3          	bne	s0,s1,23b8 <pqcrystals_dilithium5_ref_poly_caddq+0x18>

  DBENCH_STOP(*tred);
}
    23cc:	00c12083          	lw	ra,12(sp)
    23d0:	00812403          	lw	s0,8(sp)
    23d4:	00412483          	lw	s1,4(sp)
    23d8:	01010113          	addi	sp,sp,16
    23dc:	00008067          	ret

000023e0 <pqcrystals_dilithium5_ref_poly_add>:
*
* Arguments:   - poly *c: pointer to output polynomial
*              - const poly *a: pointer to first summand
*              - const poly *b: pointer to second summand
**************************************************/
void poly_add(poly *c, const poly *a, const poly *b)  {
    23e0:	ff010113          	addi	sp,sp,-16
    23e4:	01612623          	sw	s6,12(sp)
    23e8:	01712423          	sw	s7,8(sp)
    23ec:	00000793          	li	a5,0
#ifndef STEEL
    asm volatile("nop"); // ORCA
    asm volatile("nop"); // ORCA
    asm volatile("nop"); // ORCA
#endif
    asm volatile("fpau.dil.bf %0, %1, %2\n": : "r"(coeff0), "r"(coeff1),"r"(1): );  // use of bf to not overwrite "1" constant (output1 = coeff0 + coeff1*1)
    23f0:	00100893          	li	a7,1
  for(i = 0; i < N; ++i){
    23f4:	40000813          	li	a6,1024
    coeff0 = a->coeffs[i];
    23f8:	00f586b3          	add	a3,a1,a5
    coeff1 = b->coeffs[i];
    23fc:	00f60733          	add	a4,a2,a5
    coeff0 = a->coeffs[i];
    2400:	0006ab03          	lw	s6,0(a3)
    coeff1 = b->coeffs[i];
    2404:	00072b83          	lw	s7,0(a4)
    asm volatile("nop"); // ORCA
    2408:	00000013          	nop
    asm volatile("nop"); // ORCA
    240c:	00000013          	nop
    asm volatile("nop"); // ORCA
    2410:	00000013          	nop
    asm volatile("fpau.dil.bf %0, %1, %2\n": : "r"(coeff0), "r"(coeff1),"r"(1): );  // use of bf to not overwrite "1" constant (output1 = coeff0 + coeff1*1)
    2414:	611bab33          	fpau.dil.bf	s6,s7,a7
    
    c->coeffs[i] = coeff0;
    2418:	00f50733          	add	a4,a0,a5
    241c:	01672023          	sw	s6,0(a4)
  for(i = 0; i < N; ++i){
    2420:	00478793          	addi	a5,a5,4
    2424:	fd079ae3          	bne	a5,a6,23f8 <pqcrystals_dilithium5_ref_poly_add+0x18>
    c->coeffs[i] = a->coeffs[i] + b->coeffs[i];
#endif
  }

  DBENCH_STOP(*tadd);
}
    2428:	00c12b03          	lw	s6,12(sp)
    242c:	00812b83          	lw	s7,8(sp)
    2430:	01010113          	addi	sp,sp,16
    2434:	00008067          	ret

00002438 <pqcrystals_dilithium5_ref_poly_sub>:
* Arguments:   - poly *c: pointer to output polynomial
*              - const poly *a: pointer to first input polynomial
*              - const poly *b: pointer to second input polynomial to be
*                               subtraced from first input polynomial
**************************************************/
void poly_sub(poly *c, const poly *a, const poly *b) {
    2438:	ff010113          	addi	sp,sp,-16
    243c:	01612623          	sw	s6,12(sp)
    2440:	01712423          	sw	s7,8(sp)
    2444:	00000793          	li	a5,0
#ifndef STEEL
    asm volatile("nop"); // ORCA
    asm volatile("nop"); // ORCA
    asm volatile("nop"); // ORCA
#endif
    asm volatile("fpau.dil.bf %0, %1, %2\n": : "r"(coeff0), "r"(coeff1),"r"(1): );  // use of bf to not overwrite "1" constant (output2 = coeff0 - coeff1*1)
    2448:	00100893          	li	a7,1
  for(i = 0; i < N; ++i){
    244c:	40000813          	li	a6,1024
    coeff0 = a->coeffs[i];
    2450:	00f586b3          	add	a3,a1,a5
    coeff1 = b->coeffs[i];
    2454:	00f60733          	add	a4,a2,a5
    coeff0 = a->coeffs[i];
    2458:	0006ab03          	lw	s6,0(a3)
    coeff1 = b->coeffs[i];
    245c:	00072b83          	lw	s7,0(a4)
    asm volatile("nop"); // ORCA
    2460:	00000013          	nop
    asm volatile("nop"); // ORCA
    2464:	00000013          	nop
    asm volatile("nop"); // ORCA
    2468:	00000013          	nop
    asm volatile("fpau.dil.bf %0, %1, %2\n": : "r"(coeff0), "r"(coeff1),"r"(1): );  // use of bf to not overwrite "1" constant (output2 = coeff0 - coeff1*1)
    246c:	611bab33          	fpau.dil.bf	s6,s7,a7

    asm volatile("nop"); // ORCA and STEEL (2nd output written in next cycle)
    2470:	00000013          	nop

    c->coeffs[i] = coeff1;
    2474:	00f50733          	add	a4,a0,a5
    2478:	01772023          	sw	s7,0(a4)
  for(i = 0; i < N; ++i){
    247c:	00478793          	addi	a5,a5,4
    2480:	fd0798e3          	bne	a5,a6,2450 <pqcrystals_dilithium5_ref_poly_sub+0x18>
    c->coeffs[i] = a->coeffs[i] - b->coeffs[i];
#endif
  }

  DBENCH_STOP(*tadd);
}
    2484:	00c12b03          	lw	s6,12(sp)
    2488:	00812b83          	lw	s7,8(sp)
    248c:	01010113          	addi	sp,sp,16
    2490:	00008067          	ret

00002494 <pqcrystals_dilithium5_ref_poly_shiftl>:
**************************************************/
void poly_shiftl(poly *a) {
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N; ++i)
    2494:	40050713          	addi	a4,a0,1024
    a->coeffs[i] <<= D;
    2498:	00052783          	lw	a5,0(a0)
  for(i = 0; i < N; ++i)
    249c:	00450513          	addi	a0,a0,4
    a->coeffs[i] <<= D;
    24a0:	00d79793          	slli	a5,a5,0xd
    24a4:	fef52e23          	sw	a5,-4(a0)
  for(i = 0; i < N; ++i)
    24a8:	fee518e3          	bne	a0,a4,2498 <pqcrystals_dilithium5_ref_poly_shiftl+0x4>

  DBENCH_STOP(*tmul);
}
    24ac:	00008067          	ret

000024b0 <pqcrystals_dilithium5_ref_poly_ntt>:
  uart_send_string("\n\rNTT:");

  asm("csrrs s2, "TICKS_REGISTER", zero");
  #endif

  ntt(a->coeffs);
    24b0:	6310006f          	j	32e0 <pqcrystals_dilithium5_ref_ntt>

000024b4 <pqcrystals_dilithium5_ref_poly_invntt_tomont>:
  uart_send_string("\n\rInverse NTT:");

  asm("csrrs s2, "TICKS_REGISTER", zero");
  #endif

  invntt_tomont(a->coeffs);
    24b4:	6fd0006f          	j	33b0 <pqcrystals_dilithium5_ref_invntt_tomont>

000024b8 <pqcrystals_dilithium5_ref_poly_pointwise_montgomery>:
*
* Arguments:   - poly *c: pointer to output polynomial
*              - const poly *a: pointer to first input polynomial
*              - const poly *b: pointer to second input polynomial
**************************************************/
void poly_pointwise_montgomery(poly *c, const poly *a, const poly *b) {
    24b8:	fe010113          	addi	sp,sp,-32
    24bc:	00812c23          	sw	s0,24(sp)
    24c0:	00912a23          	sw	s1,20(sp)
    24c4:	01212823          	sw	s2,16(sp)
    24c8:	01312623          	sw	s3,12(sp)
    24cc:	01412423          	sw	s4,8(sp)
    24d0:	00112e23          	sw	ra,28(sp)
    24d4:	00050993          	mv	s3,a0
    24d8:	00058913          	mv	s2,a1
    24dc:	00060493          	mv	s1,a2
    24e0:	00000413          	li	s0,0
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N; ++i)
    24e4:	40000a13          	li	s4,1024
    c->coeffs[i] = montgomery_reduce((int64_t)a->coeffs[i] * b->coeffs[i]);
    24e8:	00890733          	add	a4,s2,s0
    24ec:	008487b3          	add	a5,s1,s0
    24f0:	0007a783          	lw	a5,0(a5)
    24f4:	00072503          	lw	a0,0(a4)
    24f8:	02f515b3          	mulh	a1,a0,a5
    24fc:	02f50533          	mul	a0,a0,a5
    2500:	7cd000ef          	jal	ra,34cc <pqcrystals_dilithium5_ref_montgomery_reduce>
    2504:	008987b3          	add	a5,s3,s0
    2508:	00a7a023          	sw	a0,0(a5)
  for(i = 0; i < N; ++i)
    250c:	00440413          	addi	s0,s0,4
    2510:	fd441ce3          	bne	s0,s4,24e8 <pqcrystals_dilithium5_ref_poly_pointwise_montgomery+0x30>

  DBENCH_STOP(*tmul);
}
    2514:	01c12083          	lw	ra,28(sp)
    2518:	01812403          	lw	s0,24(sp)
    251c:	01412483          	lw	s1,20(sp)
    2520:	01012903          	lw	s2,16(sp)
    2524:	00c12983          	lw	s3,12(sp)
    2528:	00812a03          	lw	s4,8(sp)
    252c:	02010113          	addi	sp,sp,32
    2530:	00008067          	ret

00002534 <pqcrystals_dilithium5_ref_poly_power2round>:
*
* Arguments:   - poly *a1: pointer to output polynomial with coefficients c1
*              - poly *a0: pointer to output polynomial with coefficients c0
*              - const poly *a: pointer to input polynomial
**************************************************/
void poly_power2round(poly *a1, poly *a0, const poly *a) {
    2534:	fe010113          	addi	sp,sp,-32
    2538:	00812c23          	sw	s0,24(sp)
    253c:	00912a23          	sw	s1,20(sp)
    2540:	01212823          	sw	s2,16(sp)
    2544:	01312623          	sw	s3,12(sp)
    2548:	01412423          	sw	s4,8(sp)
    254c:	00112e23          	sw	ra,28(sp)
    2550:	00050993          	mv	s3,a0
    2554:	00058913          	mv	s2,a1
    2558:	00060493          	mv	s1,a2
    255c:	00000413          	li	s0,0
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N; ++i)
    2560:	40000a13          	li	s4,1024
    a1->coeffs[i] = power2round(&a0->coeffs[i], a->coeffs[i]);
    2564:	008487b3          	add	a5,s1,s0
    2568:	0007a583          	lw	a1,0(a5)
    256c:	00890533          	add	a0,s2,s0
    2570:	02c010ef          	jal	ra,359c <pqcrystals_dilithium5_ref_power2round>
    2574:	008987b3          	add	a5,s3,s0
    2578:	00a7a023          	sw	a0,0(a5)
  for(i = 0; i < N; ++i)
    257c:	00440413          	addi	s0,s0,4
    2580:	ff4412e3          	bne	s0,s4,2564 <pqcrystals_dilithium5_ref_poly_power2round+0x30>

  DBENCH_STOP(*tround);
}
    2584:	01c12083          	lw	ra,28(sp)
    2588:	01812403          	lw	s0,24(sp)
    258c:	01412483          	lw	s1,20(sp)
    2590:	01012903          	lw	s2,16(sp)
    2594:	00c12983          	lw	s3,12(sp)
    2598:	00812a03          	lw	s4,8(sp)
    259c:	02010113          	addi	sp,sp,32
    25a0:	00008067          	ret

000025a4 <pqcrystals_dilithium5_ref_poly_decompose>:
*
* Arguments:   - poly *a1: pointer to output polynomial with coefficients c1
*              - poly *a0: pointer to output polynomial with coefficients c0
*              - const poly *a: pointer to input polynomial
**************************************************/
void poly_decompose(poly *a1, poly *a0, const poly *a) {
    25a4:	fe010113          	addi	sp,sp,-32
    25a8:	00812c23          	sw	s0,24(sp)
    25ac:	00912a23          	sw	s1,20(sp)
    25b0:	01212823          	sw	s2,16(sp)
    25b4:	01312623          	sw	s3,12(sp)
    25b8:	01412423          	sw	s4,8(sp)
    25bc:	00112e23          	sw	ra,28(sp)
    25c0:	00050993          	mv	s3,a0
    25c4:	00058913          	mv	s2,a1
    25c8:	00060493          	mv	s1,a2
    25cc:	00000413          	li	s0,0
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N; ++i)
    25d0:	40000a13          	li	s4,1024
    a1->coeffs[i] = decompose(&a0->coeffs[i], a->coeffs[i]);
    25d4:	008487b3          	add	a5,s1,s0
    25d8:	0007a583          	lw	a1,0(a5)
    25dc:	00890533          	add	a0,s2,s0
    25e0:	7e1000ef          	jal	ra,35c0 <pqcrystals_dilithium5_ref_decompose>
    25e4:	008987b3          	add	a5,s3,s0
    25e8:	00a7a023          	sw	a0,0(a5)
  for(i = 0; i < N; ++i)
    25ec:	00440413          	addi	s0,s0,4
    25f0:	ff4412e3          	bne	s0,s4,25d4 <pqcrystals_dilithium5_ref_poly_decompose+0x30>

  DBENCH_STOP(*tround);
}
    25f4:	01c12083          	lw	ra,28(sp)
    25f8:	01812403          	lw	s0,24(sp)
    25fc:	01412483          	lw	s1,20(sp)
    2600:	01012903          	lw	s2,16(sp)
    2604:	00c12983          	lw	s3,12(sp)
    2608:	00812a03          	lw	s4,8(sp)
    260c:	02010113          	addi	sp,sp,32
    2610:	00008067          	ret

00002614 <pqcrystals_dilithium5_ref_poly_make_hint>:
*              - const poly *a0: pointer to low part of input polynomial
*              - const poly *a1: pointer to high part of input polynomial
*
* Returns number of 1 bits.
**************************************************/
unsigned int poly_make_hint(poly *h, const poly *a0, const poly *a1) {
    2614:	fe010113          	addi	sp,sp,-32
    2618:	00812c23          	sw	s0,24(sp)
    261c:	00912a23          	sw	s1,20(sp)
    2620:	01212823          	sw	s2,16(sp)
    2624:	01312623          	sw	s3,12(sp)
    2628:	01412423          	sw	s4,8(sp)
    262c:	01512223          	sw	s5,4(sp)
    2630:	00112e23          	sw	ra,28(sp)
    2634:	00050a13          	mv	s4,a0
    2638:	00058993          	mv	s3,a1
    263c:	00060913          	mv	s2,a2
    2640:	00000413          	li	s0,0
  unsigned int i, s = 0;
    2644:	00000493          	li	s1,0
  DBENCH_START();

  for(i = 0; i < N; ++i) {
    2648:	40000a93          	li	s5,1024
    h->coeffs[i] = make_hint(a0->coeffs[i], a1->coeffs[i]);
    264c:	008987b3          	add	a5,s3,s0
    2650:	00890733          	add	a4,s2,s0
    2654:	0007a503          	lw	a0,0(a5)
    2658:	00072583          	lw	a1,0(a4)
    265c:	7bd000ef          	jal	ra,3618 <pqcrystals_dilithium5_ref_make_hint>
    2660:	008a07b3          	add	a5,s4,s0
    2664:	00a7a023          	sw	a0,0(a5)
  for(i = 0; i < N; ++i) {
    2668:	00440413          	addi	s0,s0,4
    s += h->coeffs[i];
    266c:	00a484b3          	add	s1,s1,a0
  for(i = 0; i < N; ++i) {
    2670:	fd541ee3          	bne	s0,s5,264c <pqcrystals_dilithium5_ref_poly_make_hint+0x38>
  }

  DBENCH_STOP(*tround);
  return s;
}
    2674:	01c12083          	lw	ra,28(sp)
    2678:	01812403          	lw	s0,24(sp)
    267c:	01012903          	lw	s2,16(sp)
    2680:	00c12983          	lw	s3,12(sp)
    2684:	00812a03          	lw	s4,8(sp)
    2688:	00412a83          	lw	s5,4(sp)
    268c:	00048513          	mv	a0,s1
    2690:	01412483          	lw	s1,20(sp)
    2694:	02010113          	addi	sp,sp,32
    2698:	00008067          	ret

0000269c <pqcrystals_dilithium5_ref_poly_use_hint>:
*
* Arguments:   - poly *b: pointer to output polynomial with corrected high bits
*              - const poly *a: pointer to input polynomial
*              - const poly *h: pointer to input hint polynomial
**************************************************/
void poly_use_hint(poly *b, const poly *a, const poly *h) {
    269c:	fe010113          	addi	sp,sp,-32
    26a0:	00812c23          	sw	s0,24(sp)
    26a4:	00912a23          	sw	s1,20(sp)
    26a8:	01212823          	sw	s2,16(sp)
    26ac:	01312623          	sw	s3,12(sp)
    26b0:	01412423          	sw	s4,8(sp)
    26b4:	00112e23          	sw	ra,28(sp)
    26b8:	00050993          	mv	s3,a0
    26bc:	00058913          	mv	s2,a1
    26c0:	00060493          	mv	s1,a2
    26c4:	00000413          	li	s0,0
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N; ++i)
    26c8:	40000a13          	li	s4,1024
    b->coeffs[i] = use_hint(a->coeffs[i], h->coeffs[i]);
    26cc:	008907b3          	add	a5,s2,s0
    26d0:	00848733          	add	a4,s1,s0
    26d4:	0007a503          	lw	a0,0(a5)
    26d8:	00072583          	lw	a1,0(a4)
    26dc:	77d000ef          	jal	ra,3658 <pqcrystals_dilithium5_ref_use_hint>
    26e0:	008987b3          	add	a5,s3,s0
    26e4:	00a7a023          	sw	a0,0(a5)
  for(i = 0; i < N; ++i)
    26e8:	00440413          	addi	s0,s0,4
    26ec:	ff4410e3          	bne	s0,s4,26cc <pqcrystals_dilithium5_ref_poly_use_hint+0x30>

  DBENCH_STOP(*tround);
}
    26f0:	01c12083          	lw	ra,28(sp)
    26f4:	01812403          	lw	s0,24(sp)
    26f8:	01412483          	lw	s1,20(sp)
    26fc:	01012903          	lw	s2,16(sp)
    2700:	00c12983          	lw	s3,12(sp)
    2704:	00812a03          	lw	s4,8(sp)
    2708:	02010113          	addi	sp,sp,32
    270c:	00008067          	ret

00002710 <pqcrystals_dilithium5_ref_poly_chknorm>:
int poly_chknorm(const poly *a, int32_t B) {
  unsigned int i;
  int32_t t;
  DBENCH_START();

  if(B > (Q-1)/8)
    2710:	001007b7          	lui	a5,0x100
    2714:	c0078793          	addi	a5,a5,-1024 # ffc00 <_end_of_memory+0xcfc00>
    2718:	02b7c663          	blt	a5,a1,2744 <pqcrystals_dilithium5_ref_poly_chknorm+0x34>
    271c:	40050613          	addi	a2,a0,1024
    2720:	0080006f          	j	2728 <pqcrystals_dilithium5_ref_poly_chknorm+0x18>
    return 1;

  /* It is ok to leak which coefficient violates the bound since
     the probability for each coefficient is independent of secret
     data but we must not leak the sign of the centralized representative. */
  for(i = 0; i < N; ++i) {
    2724:	02a60463          	beq	a2,a0,274c <pqcrystals_dilithium5_ref_poly_chknorm+0x3c>
    /* Absolute value */
    t = a->coeffs[i] >> 31;
    2728:	00052783          	lw	a5,0(a0)
  for(i = 0; i < N; ++i) {
    272c:	00450513          	addi	a0,a0,4
    t = a->coeffs[i] - (t & 2*a->coeffs[i]);
    2730:	00179713          	slli	a4,a5,0x1
    t = a->coeffs[i] >> 31;
    2734:	41f7d693          	srai	a3,a5,0x1f
    t = a->coeffs[i] - (t & 2*a->coeffs[i]);
    2738:	00d77733          	and	a4,a4,a3
    273c:	40e787b3          	sub	a5,a5,a4

    if(t >= B) {
    2740:	feb7c2e3          	blt	a5,a1,2724 <pqcrystals_dilithium5_ref_poly_chknorm+0x14>
    return 1;
    2744:	00100513          	li	a0,1
    }
  }

  DBENCH_STOP(*tsample);
  return 0;
}
    2748:	00008067          	ret
  return 0;
    274c:	00000513          	li	a0,0
    2750:	00008067          	ret

00002754 <pqcrystals_dilithium5_ref_poly_uniform>:
**************************************************/
#define POLY_UNIFORM_NBLOCKS ((768 + STREAM128_BLOCKBYTES - 1)/STREAM128_BLOCKBYTES)
void poly_uniform(poly *a,
                  const uint8_t seed[SEEDBYTES],
                  uint16_t nonce)
{
    2754:	bb010113          	addi	sp,sp,-1104
    2758:	43512a23          	sw	s5,1076(sp)
    275c:	00050a93          	mv	s5,a0
  unsigned int i, ctr, off;
  unsigned int buflen = POLY_UNIFORM_NBLOCKS*STREAM128_BLOCKBYTES;
  uint8_t buf[POLY_UNIFORM_NBLOCKS*STREAM128_BLOCKBYTES + 2];
  stream128_state state;

  stream128_init(&state, seed, nonce);
    2760:	00010513          	mv	a0,sp
{
    2764:	44112623          	sw	ra,1100(sp)
    2768:	44812423          	sw	s0,1096(sp)
    276c:	43412c23          	sw	s4,1080(sp)
  stream128_squeezeblocks(buf, POLY_UNIFORM_NBLOCKS, &state);
    2770:	0d410413          	addi	s0,sp,212
{
    2774:	44912223          	sw	s1,1092(sp)
    2778:	45212023          	sw	s2,1088(sp)
    277c:	43312e23          	sw	s3,1084(sp)
    2780:	43612823          	sw	s6,1072(sp)
    2784:	43712623          	sw	s7,1068(sp)
    2788:	43812423          	sw	s8,1064(sp)
    278c:	43912223          	sw	s9,1060(sp)
  stream128_init(&state, seed, nonce);
    2790:	259040ef          	jal	ra,71e8 <pqcrystals_dilithium5_ref_dilithium_shake128_stream_init>
  stream128_squeezeblocks(buf, POLY_UNIFORM_NBLOCKS, &state);
    2794:	00500593          	li	a1,5
    2798:	00040513          	mv	a0,s0
    279c:	00010613          	mv	a2,sp
    27a0:	521030ef          	jal	ra,64c0 <pqcrystals_dilithium_fips202_ref_shake128_squeezeblocks>
    t &= 0x7FFFFF;
    27a4:	008005b7          	lui	a1,0x800
    27a8:	41c10813          	addi	a6,sp,1052

  ctr = rej_uniform(a->coeffs, N, buf, buflen);
    27ac:	00040713          	mv	a4,s0
  ctr = pos = 0;
    27b0:	00000a13          	li	s4,0
    t &= 0x7FFFFF;
    27b4:	fff58593          	addi	a1,a1,-1 # 7fffff <_end_of_memory+0x7cffff>
    if(t < Q)
    27b8:	007fe537          	lui	a0,0x7fe
  while(ctr < len && pos + 3 <= buflen) {
    27bc:	10000893          	li	a7,256
    t |= (uint32_t)buf[pos++] << 8;
    27c0:	00174783          	lbu	a5,1(a4)
    t |= (uint32_t)buf[pos++] << 16;
    27c4:	00274683          	lbu	a3,2(a4)
    t  = buf[pos++];
    27c8:	00074603          	lbu	a2,0(a4)
    t |= (uint32_t)buf[pos++] << 8;
    27cc:	00879793          	slli	a5,a5,0x8
    t |= (uint32_t)buf[pos++] << 16;
    27d0:	01069693          	slli	a3,a3,0x10
    27d4:	00d7e7b3          	or	a5,a5,a3
    27d8:	00c7e7b3          	or	a5,a5,a2
      a[ctr++] = t;
    27dc:	002a1693          	slli	a3,s4,0x2
    t &= 0x7FFFFF;
    27e0:	00b7f7b3          	and	a5,a5,a1
      a[ctr++] = t;
    27e4:	00da86b3          	add	a3,s5,a3
  while(ctr < len && pos + 3 <= buflen) {
    27e8:	00370713          	addi	a4,a4,3
      a[ctr++] = t;
    27ec:	001a0613          	addi	a2,s4,1 # 2001 <pqcrystals_dilithium5_ref_polyveck_shiftl+0x39>
    if(t < Q)
    27f0:	00f56863          	bltu	a0,a5,2800 <pqcrystals_dilithium5_ref_poly_uniform+0xac>
      a[ctr++] = t;
    27f4:	00f6a023          	sw	a5,0(a3)
  while(ctr < len && pos + 3 <= buflen) {
    27f8:	0d160463          	beq	a2,a7,28c0 <pqcrystals_dilithium5_ref_poly_uniform+0x16c>
      a[ctr++] = t;
    27fc:	00060a13          	mv	s4,a2
  while(ctr < len && pos + 3 <= buflen) {
    2800:	fce810e3          	bne	a6,a4,27c0 <pqcrystals_dilithium5_ref_poly_uniform+0x6c>

  while(ctr < N) {
    off = buflen % 3;
    2804:	00300493          	li	s1,3
    t &= 0x7FFFFF;
    2808:	00800bb7          	lui	s7,0x800
    280c:	34800513          	li	a0,840
    for(i = 0; i < off; ++i)
      buf[i] = buf[buflen - off + i];

    stream128_squeezeblocks(buf + off, 1, &state);
    buflen = STREAM128_BLOCKBYTES + off;
    ctr += rej_uniform(a->coeffs + ctr, N - ctr, buf, buflen);
    2810:	10000913          	li	s2,256
    for(i = 0; i < off; ++i)
    2814:	00200993          	li	s3,2
    t &= 0x7FFFFF;
    2818:	fffb8b93          	addi	s7,s7,-1 # 7fffff <_end_of_memory+0x7cffff>
  while(ctr < len && pos + 3 <= buflen) {
    281c:	40848c33          	sub	s8,s1,s0
    off = buflen % 3;
    2820:	02957cb3          	remu	s9,a0,s1
    ctr += rej_uniform(a->coeffs + ctr, N - ctr, buf, buflen);
    2824:	41490b33          	sub	s6,s2,s4
    for(i = 0; i < off; ++i)
    2828:	0c0c8663          	beqz	s9,28f4 <pqcrystals_dilithium5_ref_poly_uniform+0x1a0>
      buf[i] = buf[buflen - off + i];
    282c:	41950533          	sub	a0,a0,s9
    2830:	42050793          	addi	a5,a0,1056 # 7fe420 <_end_of_memory+0x7ce420>
    2834:	00278533          	add	a0,a5,sp
    2838:	cb454783          	lbu	a5,-844(a0)
    283c:	0cf10a23          	sb	a5,212(sp)
    for(i = 0; i < off; ++i)
    2840:	013c9663          	bne	s9,s3,284c <pqcrystals_dilithium5_ref_poly_uniform+0xf8>
      buf[i] = buf[buflen - off + i];
    2844:	cb554783          	lbu	a5,-843(a0)
    2848:	0cf10aa3          	sb	a5,213(sp)
    stream128_squeezeblocks(buf + off, 1, &state);
    284c:	01940533          	add	a0,s0,s9
    2850:	00010613          	mv	a2,sp
    2854:	00100593          	li	a1,1
    2858:	469030ef          	jal	ra,64c0 <pqcrystals_dilithium_fips202_ref_shake128_squeezeblocks>
    buflen = STREAM128_BLOCKBYTES + off;
    285c:	0a8c8513          	addi	a0,s9,168
    2860:	00040693          	mv	a3,s0
  ctr = pos = 0;
    2864:	00000613          	li	a2,0
    if(t < Q)
    2868:	007fe837          	lui	a6,0x7fe
    t |= (uint32_t)buf[pos++] << 8;
    286c:	0016c783          	lbu	a5,1(a3)
    t |= (uint32_t)buf[pos++] << 16;
    2870:	0026c703          	lbu	a4,2(a3)
    t  = buf[pos++];
    2874:	0006c583          	lbu	a1,0(a3)
    t |= (uint32_t)buf[pos++] << 8;
    2878:	00879793          	slli	a5,a5,0x8
    t |= (uint32_t)buf[pos++] << 16;
    287c:	01071713          	slli	a4,a4,0x10
    2880:	00e7e7b3          	or	a5,a5,a4
    2884:	00b7e7b3          	or	a5,a5,a1
      a[ctr++] = t;
    2888:	00ca0733          	add	a4,s4,a2
  while(ctr < len && pos + 3 <= buflen) {
    288c:	00368693          	addi	a3,a3,3
      a[ctr++] = t;
    2890:	00271713          	slli	a4,a4,0x2
    t &= 0x7FFFFF;
    2894:	0177f7b3          	and	a5,a5,s7
  while(ctr < len && pos + 3 <= buflen) {
    2898:	00dc05b3          	add	a1,s8,a3
      a[ctr++] = t;
    289c:	00ea8733          	add	a4,s5,a4
    if(t < Q)
    28a0:	00f86663          	bltu	a6,a5,28ac <pqcrystals_dilithium5_ref_poly_uniform+0x158>
      a[ctr++] = t;
    28a4:	00f72023          	sw	a5,0(a4)
    28a8:	00160613          	addi	a2,a2,1
  while(ctr < len && pos + 3 <= buflen) {
    28ac:	01667463          	bgeu	a2,s6,28b4 <pqcrystals_dilithium5_ref_poly_uniform+0x160>
    28b0:	fab57ee3          	bgeu	a0,a1,286c <pqcrystals_dilithium5_ref_poly_uniform+0x118>
    ctr += rej_uniform(a->coeffs + ctr, N - ctr, buf, buflen);
    28b4:	00ca0a33          	add	s4,s4,a2
  while(ctr < N) {
    28b8:	0ff00793          	li	a5,255
    28bc:	f747f2e3          	bgeu	a5,s4,2820 <pqcrystals_dilithium5_ref_poly_uniform+0xcc>
  }
}
    28c0:	44c12083          	lw	ra,1100(sp)
    28c4:	44812403          	lw	s0,1096(sp)
    28c8:	44412483          	lw	s1,1092(sp)
    28cc:	44012903          	lw	s2,1088(sp)
    28d0:	43c12983          	lw	s3,1084(sp)
    28d4:	43812a03          	lw	s4,1080(sp)
    28d8:	43412a83          	lw	s5,1076(sp)
    28dc:	43012b03          	lw	s6,1072(sp)
    28e0:	42c12b83          	lw	s7,1068(sp)
    28e4:	42812c03          	lw	s8,1064(sp)
    28e8:	42412c83          	lw	s9,1060(sp)
    28ec:	45010113          	addi	sp,sp,1104
    28f0:	00008067          	ret
    stream128_squeezeblocks(buf + off, 1, &state);
    28f4:	00040513          	mv	a0,s0
    28f8:	00010613          	mv	a2,sp
    28fc:	00100593          	li	a1,1
    2900:	3c1030ef          	jal	ra,64c0 <pqcrystals_dilithium_fips202_ref_shake128_squeezeblocks>
    buflen = STREAM128_BLOCKBYTES + off;
    2904:	0a800513          	li	a0,168
    2908:	f59ff06f          	j	2860 <pqcrystals_dilithium5_ref_poly_uniform+0x10c>

0000290c <pqcrystals_dilithium5_ref_poly_uniform_eta>:
#define POLY_UNIFORM_ETA_NBLOCKS ((227 + STREAM256_BLOCKBYTES - 1)/STREAM256_BLOCKBYTES)
#endif
void poly_uniform_eta(poly *a,
                      const uint8_t seed[CRHBYTES],
                      uint16_t nonce)
{
    290c:	e8010113          	addi	sp,sp,-384
    2910:	17312623          	sw	s3,364(sp)
  unsigned int ctr;
  unsigned int buflen = POLY_UNIFORM_ETA_NBLOCKS*STREAM256_BLOCKBYTES;
  uint8_t buf[POLY_UNIFORM_ETA_NBLOCKS*STREAM256_BLOCKBYTES];
  stream256_state state;

  stream256_init(&state, seed, nonce);
    2914:	09010993          	addi	s3,sp,144
{
    2918:	17612023          	sw	s6,352(sp)
    291c:	00050b13          	mv	s6,a0
  stream256_init(&state, seed, nonce);
    2920:	00098513          	mv	a0,s3
{
    2924:	16112e23          	sw	ra,380(sp)
    2928:	17412423          	sw	s4,360(sp)
    292c:	16812c23          	sw	s0,376(sp)
    2930:	16912a23          	sw	s1,372(sp)
    2934:	17212823          	sw	s2,368(sp)
    2938:	17512223          	sw	s5,356(sp)
  stream256_init(&state, seed, nonce);
    293c:	109040ef          	jal	ra,7244 <pqcrystals_dilithium5_ref_dilithium_shake256_stream_init>
  stream256_squeezeblocks(buf, POLY_UNIFORM_ETA_NBLOCKS, &state);
    2940:	00810513          	addi	a0,sp,8
    2944:	00098613          	mv	a2,s3
    2948:	00100593          	li	a1,1
    294c:	669030ef          	jal	ra,67b4 <pqcrystals_dilithium_fips202_ref_shake256_squeezeblocks>
  ctr = pos = 0;
    2950:	00000a13          	li	s4,0

  ctr = rej_eta(a->coeffs, N, buf, buflen);
    2954:	00810693          	addi	a3,sp,8
    if(t0 < 15) {
    2958:	00f00513          	li	a0,15
  while(ctr < len && pos < buflen) {
    295c:	10000313          	li	t1,256
      t1 = t1 - (205*t1 >> 10)*5;
    2960:	0cd00e13          	li	t3,205
      a[ctr++] = 2 - t1;
    2964:	00200893          	li	a7,2
    t0 = buf[pos] & 0x0F;
    2968:	0006c703          	lbu	a4,0(a3)
      a[ctr++] = 2 - t0;
    296c:	002a1793          	slli	a5,s4,0x2
    2970:	00fb05b3          	add	a1,s6,a5
    2974:	00f77793          	andi	a5,a4,15
    2978:	40f88833          	sub	a6,a7,a5
    t1 = buf[pos++] >> 4;
    297c:	00475713          	srli	a4,a4,0x4
    if(t0 < 15) {
    2980:	04a78863          	beq	a5,a0,29d0 <pqcrystals_dilithium5_ref_poly_uniform_eta+0xc4>
      t0 = t0 - (205*t0 >> 10)*5;
    2984:	03c787b3          	mul	a5,a5,t3
      a[ctr++] = 2 - t0;
    2988:	001a0a13          	addi	s4,s4,1
      t0 = t0 - (205*t0 >> 10)*5;
    298c:	00a7d793          	srli	a5,a5,0xa
    2990:	00279613          	slli	a2,a5,0x2
    2994:	00f607b3          	add	a5,a2,a5
      a[ctr++] = 2 - t0;
    2998:	010787b3          	add	a5,a5,a6
    299c:	00f5a023          	sw	a5,0(a1)
    if(t1 < 15 && ctr < len) {
    29a0:	04a70e63          	beq	a4,a0,29fc <pqcrystals_dilithium5_ref_poly_uniform_eta+0xf0>
    29a4:	026a1863          	bne	s4,t1,29d4 <pqcrystals_dilithium5_ref_poly_uniform_eta+0xc8>

  while(ctr < N) {
    stream256_squeezeblocks(buf, 1, &state);
    ctr += rej_eta(a->coeffs + ctr, N - ctr, buf, STREAM256_BLOCKBYTES);
  }
}
    29a8:	17c12083          	lw	ra,380(sp)
    29ac:	17812403          	lw	s0,376(sp)
    29b0:	17412483          	lw	s1,372(sp)
    29b4:	17012903          	lw	s2,368(sp)
    29b8:	16c12983          	lw	s3,364(sp)
    29bc:	16812a03          	lw	s4,360(sp)
    29c0:	16412a83          	lw	s5,356(sp)
    29c4:	16012b03          	lw	s6,352(sp)
    29c8:	18010113          	addi	sp,sp,384
    29cc:	00008067          	ret
    if(t1 < 15 && ctr < len) {
    29d0:	02a70863          	beq	a4,a0,2a00 <pqcrystals_dilithium5_ref_poly_uniform_eta+0xf4>
      t1 = t1 - (205*t1 >> 10)*5;
    29d4:	03c70633          	mul	a2,a4,t3
      a[ctr++] = 2 - t1;
    29d8:	002a1593          	slli	a1,s4,0x2
    29dc:	40e88733          	sub	a4,a7,a4
    29e0:	00bb05b3          	add	a1,s6,a1
    29e4:	001a0a13          	addi	s4,s4,1
      t1 = t1 - (205*t1 >> 10)*5;
    29e8:	00a65613          	srli	a2,a2,0xa
    29ec:	00261793          	slli	a5,a2,0x2
    29f0:	00c787b3          	add	a5,a5,a2
      a[ctr++] = 2 - t1;
    29f4:	00e787b3          	add	a5,a5,a4
    29f8:	00f5a023          	sw	a5,0(a1)
  while(ctr < len && pos < buflen) {
    29fc:	fa6a06e3          	beq	s4,t1,29a8 <pqcrystals_dilithium5_ref_poly_uniform_eta+0x9c>
    2a00:	00168693          	addi	a3,a3,1
    2a04:	f6d992e3          	bne	s3,a3,2968 <pqcrystals_dilithium5_ref_poly_uniform_eta+0x5c>
    ctr += rej_eta(a->coeffs + ctr, N - ctr, buf, STREAM256_BLOCKBYTES);
    2a08:	10000413          	li	s0,256
    if(t0 < 15) {
    2a0c:	00f00493          	li	s1,15
      t0 = t0 - (205*t0 >> 10)*5;
    2a10:	0cd00a93          	li	s5,205
      a[ctr++] = 2 - t0;
    2a14:	00200913          	li	s2,2
    stream256_squeezeblocks(buf, 1, &state);
    2a18:	00098613          	mv	a2,s3
    2a1c:	00100593          	li	a1,1
    2a20:	00810513          	addi	a0,sp,8
    2a24:	591030ef          	jal	ra,67b4 <pqcrystals_dilithium_fips202_ref_shake256_squeezeblocks>
    ctr += rej_eta(a->coeffs + ctr, N - ctr, buf, STREAM256_BLOCKBYTES);
    2a28:	002a1513          	slli	a0,s4,0x2
    2a2c:	00ab0533          	add	a0,s6,a0
    2a30:	414408b3          	sub	a7,s0,s4
    2a34:	00810593          	addi	a1,sp,8
  ctr = pos = 0;
    2a38:	00000613          	li	a2,0
    t0 = buf[pos] & 0x0F;
    2a3c:	0005c783          	lbu	a5,0(a1)
      a[ctr++] = 2 - t0;
    2a40:	00261693          	slli	a3,a2,0x2
  while(ctr < len && pos < buflen) {
    2a44:	00158593          	addi	a1,a1,1
    2a48:	00f7f713          	andi	a4,a5,15
      a[ctr++] = 2 - t0;
    2a4c:	40e90333          	sub	t1,s2,a4
    2a50:	00d506b3          	add	a3,a0,a3
    t1 = buf[pos++] >> 4;
    2a54:	0047d793          	srli	a5,a5,0x4
    if(t0 < 15) {
    2a58:	02970063          	beq	a4,s1,2a78 <pqcrystals_dilithium5_ref_poly_uniform_eta+0x16c>
      t0 = t0 - (205*t0 >> 10)*5;
    2a5c:	03570733          	mul	a4,a4,s5
      a[ctr++] = 2 - t0;
    2a60:	00160613          	addi	a2,a2,1
      t0 = t0 - (205*t0 >> 10)*5;
    2a64:	00a75713          	srli	a4,a4,0xa
    2a68:	00271813          	slli	a6,a4,0x2
    2a6c:	00e80733          	add	a4,a6,a4
      a[ctr++] = 2 - t0;
    2a70:	00670733          	add	a4,a4,t1
    2a74:	00e6a023          	sw	a4,0(a3)
    if(t1 < 15 && ctr < len) {
    2a78:	04978063          	beq	a5,s1,2ab8 <pqcrystals_dilithium5_ref_poly_uniform_eta+0x1ac>
      a[ctr++] = 2 - t1;
    2a7c:	00261713          	slli	a4,a2,0x2
    2a80:	40f90833          	sub	a6,s2,a5
    2a84:	00e50733          	add	a4,a0,a4
    if(t1 < 15 && ctr < len) {
    2a88:	01166a63          	bltu	a2,a7,2a9c <pqcrystals_dilithium5_ref_poly_uniform_eta+0x190>
    ctr += rej_eta(a->coeffs + ctr, N - ctr, buf, STREAM256_BLOCKBYTES);
    2a8c:	00ca0a33          	add	s4,s4,a2
  while(ctr < N) {
    2a90:	0ff00793          	li	a5,255
    2a94:	f947f2e3          	bgeu	a5,s4,2a18 <pqcrystals_dilithium5_ref_poly_uniform_eta+0x10c>
    2a98:	f11ff06f          	j	29a8 <pqcrystals_dilithium5_ref_poly_uniform_eta+0x9c>
      t1 = t1 - (205*t1 >> 10)*5;
    2a9c:	035787b3          	mul	a5,a5,s5
      a[ctr++] = 2 - t1;
    2aa0:	00160613          	addi	a2,a2,1
      t1 = t1 - (205*t1 >> 10)*5;
    2aa4:	00a7d793          	srli	a5,a5,0xa
    2aa8:	00279693          	slli	a3,a5,0x2
    2aac:	00f687b3          	add	a5,a3,a5
      a[ctr++] = 2 - t1;
    2ab0:	010787b3          	add	a5,a5,a6
    2ab4:	00f72023          	sw	a5,0(a4)
  while(ctr < len && pos < buflen) {
    2ab8:	fd167ae3          	bgeu	a2,a7,2a8c <pqcrystals_dilithium5_ref_poly_uniform_eta+0x180>
    2abc:	f8b990e3          	bne	s3,a1,2a3c <pqcrystals_dilithium5_ref_poly_uniform_eta+0x130>
    2ac0:	fcdff06f          	j	2a8c <pqcrystals_dilithium5_ref_poly_uniform_eta+0x180>

00002ac4 <pqcrystals_dilithium5_ref_poly_challenge>:
*              SHAKE256(seed).
*
* Arguments:   - poly *c: pointer to output polynomial
*              - const uint8_t mu[]: byte array containing seed of length SEEDBYTES
**************************************************/
void poly_challenge(poly *c, const uint8_t seed[SEEDBYTES]) {
    2ac4:	e8010113          	addi	sp,sp,-384
    2ac8:	17412423          	sw	s4,360(sp)
    2acc:	00050a13          	mv	s4,a0
  unsigned int i, b, pos;
  uint64_t signs;
  uint8_t buf[SHAKE256_RATE];
  keccak_state state;

  shake256_init(&state);
    2ad0:	09010513          	addi	a0,sp,144
void poly_challenge(poly *c, const uint8_t seed[SEEDBYTES]) {
    2ad4:	16112e23          	sw	ra,380(sp)
    2ad8:	16812c23          	sw	s0,376(sp)
    2adc:	16912a23          	sw	s1,372(sp)
    2ae0:	00058413          	mv	s0,a1
    2ae4:	17212823          	sw	s2,368(sp)
    2ae8:	17312623          	sw	s3,364(sp)
    2aec:	17512223          	sw	s5,356(sp)
    2af0:	17612023          	sw	s6,352(sp)
  shake256_init(&state);
    2af4:	299030ef          	jal	ra,658c <pqcrystals_dilithium_fips202_ref_shake256_init>
  shake256_absorb(&state, seed, SEEDBYTES);
    2af8:	00040593          	mv	a1,s0
    2afc:	02000613          	li	a2,32
    2b00:	09010513          	addi	a0,sp,144
    2b04:	2b9030ef          	jal	ra,65bc <pqcrystals_dilithium_fips202_ref_shake256_absorb>
  shake256_finalize(&state);
    2b08:	09010513          	addi	a0,sp,144
    2b0c:	2e9030ef          	jal	ra,65f4 <pqcrystals_dilithium_fips202_ref_shake256_finalize>
  shake256_squeezeblocks(buf, 1, &state);
    2b10:	09010613          	addi	a2,sp,144
    2b14:	00100593          	li	a1,1
    2b18:	00810513          	addi	a0,sp,8
    2b1c:	499030ef          	jal	ra,67b4 <pqcrystals_dilithium_fips202_ref_shake256_squeezeblocks>

  signs = 0;
  for(i = 0; i < 8; ++i)
    signs |= (uint64_t)buf[i] << 8*i;
    2b20:	00a14783          	lbu	a5,10(sp)
    2b24:	00914603          	lbu	a2,9(sp)
    2b28:	00d14683          	lbu	a3,13(sp)
    2b2c:	00c14503          	lbu	a0,12(sp)
    2b30:	00e14703          	lbu	a4,14(sp)
    2b34:	00814583          	lbu	a1,8(sp)
    2b38:	00b14483          	lbu	s1,11(sp)
    2b3c:	00f14903          	lbu	s2,15(sp)
    2b40:	00861613          	slli	a2,a2,0x8
    2b44:	01079793          	slli	a5,a5,0x10
    2b48:	00869693          	slli	a3,a3,0x8
    2b4c:	00a6e6b3          	or	a3,a3,a0
    2b50:	00c7e7b3          	or	a5,a5,a2
    2b54:	01071713          	slli	a4,a4,0x10
    2b58:	00b7e7b3          	or	a5,a5,a1
    2b5c:	00d76733          	or	a4,a4,a3
    2b60:	01849493          	slli	s1,s1,0x18
    2b64:	01891913          	slli	s2,s2,0x18
  pos = 8;

  for(i = 0; i < N; ++i)
    c->coeffs[i] = 0;
    2b68:	40000613          	li	a2,1024
    2b6c:	00000593          	li	a1,0
    2b70:	000a0513          	mv	a0,s4
    signs |= (uint64_t)buf[i] << 8*i;
    2b74:	00f4e4b3          	or	s1,s1,a5
    2b78:	00e96933          	or	s2,s2,a4
    c->coeffs[i] = 0;
    2b7c:	4ec050ef          	jal	ra,8068 <memset>
    2b80:	310a0993          	addi	s3,s4,784
  for(i = N-TAU; i < N; ++i) {
    2b84:	0c400413          	li	s0,196
  pos = 8;
    2b88:	00800793          	li	a5,8
    do {
      if(pos >= SHAKE256_RATE) {
    2b8c:	08800b13          	li	s6,136
  for(i = N-TAU; i < N; ++i) {
    2b90:	10000a93          	li	s5,256
      if(pos >= SHAKE256_RATE) {
    2b94:	09678063          	beq	a5,s6,2c14 <pqcrystals_dilithium5_ref_poly_challenge+0x150>
        shake256_squeezeblocks(buf, 1, &state);
        pos = 0;
      }

      b = buf[pos++];
    2b98:	16078713          	addi	a4,a5,352
    2b9c:	00270733          	add	a4,a4,sp
    2ba0:	ea874703          	lbu	a4,-344(a4)
    2ba4:	00178793          	addi	a5,a5,1
    } while(b > i);
    2ba8:	fee466e3          	bltu	s0,a4,2b94 <pqcrystals_dilithium5_ref_poly_challenge+0xd0>

    c->coeffs[i] = c->coeffs[b];
    2bac:	00271713          	slli	a4,a4,0x2
    2bb0:	00ea0733          	add	a4,s4,a4
    2bb4:	00072683          	lw	a3,0(a4)
    c->coeffs[b] = 1 - 2*(signs & 1);
    2bb8:	0014f613          	andi	a2,s1,1
    2bbc:	00161613          	slli	a2,a2,0x1
    c->coeffs[i] = c->coeffs[b];
    2bc0:	00d9a023          	sw	a3,0(s3)
    c->coeffs[b] = 1 - 2*(signs & 1);
    2bc4:	00100693          	li	a3,1
    2bc8:	40c686b3          	sub	a3,a3,a2
    signs >>= 1;
    2bcc:	0014d493          	srli	s1,s1,0x1
    2bd0:	01f91613          	slli	a2,s2,0x1f
    c->coeffs[b] = 1 - 2*(signs & 1);
    2bd4:	00d72023          	sw	a3,0(a4)
  for(i = N-TAU; i < N; ++i) {
    2bd8:	00140413          	addi	s0,s0,1
    signs >>= 1;
    2bdc:	009664b3          	or	s1,a2,s1
    2be0:	00195913          	srli	s2,s2,0x1
  for(i = N-TAU; i < N; ++i) {
    2be4:	00498993          	addi	s3,s3,4
    2be8:	fb5416e3          	bne	s0,s5,2b94 <pqcrystals_dilithium5_ref_poly_challenge+0xd0>
  }
}
    2bec:	17c12083          	lw	ra,380(sp)
    2bf0:	17812403          	lw	s0,376(sp)
    2bf4:	17412483          	lw	s1,372(sp)
    2bf8:	17012903          	lw	s2,368(sp)
    2bfc:	16c12983          	lw	s3,364(sp)
    2c00:	16812a03          	lw	s4,360(sp)
    2c04:	16412a83          	lw	s5,356(sp)
    2c08:	16012b03          	lw	s6,352(sp)
    2c0c:	18010113          	addi	sp,sp,384
    2c10:	00008067          	ret
        shake256_squeezeblocks(buf, 1, &state);
    2c14:	09010613          	addi	a2,sp,144
    2c18:	00100593          	li	a1,1
    2c1c:	00810513          	addi	a0,sp,8
    2c20:	395030ef          	jal	ra,67b4 <pqcrystals_dilithium_fips202_ref_shake256_squeezeblocks>
      b = buf[pos++];
    2c24:	00814703          	lbu	a4,8(sp)
    } while(b > i);
    2c28:	00100793          	li	a5,1
    2c2c:	f6e466e3          	bltu	s0,a4,2b98 <pqcrystals_dilithium5_ref_poly_challenge+0xd4>
    2c30:	f7dff06f          	j	2bac <pqcrystals_dilithium5_ref_poly_challenge+0xe8>

00002c34 <pqcrystals_dilithium5_ref_polyeta_pack>:
  unsigned int i;
  uint8_t t[8];
  DBENCH_START();

#if ETA == 2
  for(i = 0; i < N/8; ++i) {
    2c34:	40058893          	addi	a7,a1,1024
    t[0] = ETA - a->coeffs[8*i+0];
    t[1] = ETA - a->coeffs[8*i+1];
    t[2] = ETA - a->coeffs[8*i+2];
    2c38:	00200813          	li	a6,2
    t[3] = ETA - a->coeffs[8*i+3];
    2c3c:	00c5a783          	lw	a5,12(a1)
    t[4] = ETA - a->coeffs[8*i+4];
    2c40:	0105af03          	lw	t5,16(a1)
    t[2] = ETA - a->coeffs[8*i+2];
    2c44:	0085a303          	lw	t1,8(a1)
    t[5] = ETA - a->coeffs[8*i+5];
    t[6] = ETA - a->coeffs[8*i+6];
    2c48:	0185a703          	lw	a4,24(a1)
    t[7] = ETA - a->coeffs[8*i+7];
    2c4c:	01c5ae03          	lw	t3,28(a1)
    t[1] = ETA - a->coeffs[8*i+1];
    2c50:	0045a683          	lw	a3,4(a1)
    t[5] = ETA - a->coeffs[8*i+5];
    2c54:	0145a603          	lw	a2,20(a1)
    t[3] = ETA - a->coeffs[8*i+3];
    2c58:	40f807b3          	sub	a5,a6,a5
    t[4] = ETA - a->coeffs[8*i+4];
    2c5c:	41e80f33          	sub	t5,a6,t5
    t[0] = ETA - a->coeffs[8*i+0];
    2c60:	0005ae83          	lw	t4,0(a1)
    t[2] = ETA - a->coeffs[8*i+2];
    2c64:	40680333          	sub	t1,a6,t1
    t[3] = ETA - a->coeffs[8*i+3];
    2c68:	0ff7f793          	zext.b	a5,a5
    t[4] = ETA - a->coeffs[8*i+4];
    2c6c:	0fff7f13          	zext.b	t5,t5
    t[6] = ETA - a->coeffs[8*i+6];
    2c70:	40e80733          	sub	a4,a6,a4
    t[7] = ETA - a->coeffs[8*i+7];
    2c74:	41c80e33          	sub	t3,a6,t3
    t[1] = ETA - a->coeffs[8*i+1];
    2c78:	40d806b3          	sub	a3,a6,a3
    t[2] = ETA - a->coeffs[8*i+2];
    2c7c:	0ff37313          	zext.b	t1,t1
    t[5] = ETA - a->coeffs[8*i+5];
    2c80:	40c80633          	sub	a2,a6,a2
    t[6] = ETA - a->coeffs[8*i+6];
    2c84:	0ff77713          	zext.b	a4,a4
    t[7] = ETA - a->coeffs[8*i+7];
    2c88:	0ffe7e13          	zext.b	t3,t3

    r[3*i+0]  = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
    2c8c:	0ff6f693          	zext.b	a3,a3
    r[3*i+1]  = (t[2] >> 2) | (t[3] << 1) | (t[4] << 4) | (t[5] << 7);
    2c90:	00179793          	slli	a5,a5,0x1
    2c94:	004f1f13          	slli	t5,t5,0x4
    t[5] = ETA - a->coeffs[8*i+5];
    2c98:	0ff67613          	zext.b	a2,a2
    r[3*i+0]  = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
    2c9c:	00631f93          	slli	t6,t1,0x6
    2ca0:	00369693          	slli	a3,a3,0x3
    r[3*i+1]  = (t[2] >> 2) | (t[3] << 1) | (t[4] << 4) | (t[5] << 7);
    2ca4:	00235313          	srli	t1,t1,0x2
    2ca8:	01e7e7b3          	or	a5,a5,t5
    r[3*i+2]  = (t[5] >> 1) | (t[6] << 2) | (t[7] << 5);
    2cac:	00271713          	slli	a4,a4,0x2
    2cb0:	005e1e13          	slli	t3,t3,0x5
    r[3*i+1]  = (t[2] >> 2) | (t[3] << 1) | (t[4] << 4) | (t[5] << 7);
    2cb4:	0067e7b3          	or	a5,a5,t1
    r[3*i+0]  = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
    2cb8:	01f6e6b3          	or	a3,a3,t6
    r[3*i+1]  = (t[2] >> 2) | (t[3] << 1) | (t[4] << 4) | (t[5] << 7);
    2cbc:	00761313          	slli	t1,a2,0x7
    t[0] = ETA - a->coeffs[8*i+0];
    2cc0:	41d80eb3          	sub	t4,a6,t4
    r[3*i+2]  = (t[5] >> 1) | (t[6] << 2) | (t[7] << 5);
    2cc4:	01c76733          	or	a4,a4,t3
    2cc8:	00165613          	srli	a2,a2,0x1
    r[3*i+0]  = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
    2ccc:	01d6e6b3          	or	a3,a3,t4
    r[3*i+1]  = (t[2] >> 2) | (t[3] << 1) | (t[4] << 4) | (t[5] << 7);
    2cd0:	0067e7b3          	or	a5,a5,t1
    r[3*i+2]  = (t[5] >> 1) | (t[6] << 2) | (t[7] << 5);
    2cd4:	00c76733          	or	a4,a4,a2
    r[3*i+0]  = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
    2cd8:	00d50023          	sb	a3,0(a0)
    r[3*i+1]  = (t[2] >> 2) | (t[3] << 1) | (t[4] << 4) | (t[5] << 7);
    2cdc:	00f500a3          	sb	a5,1(a0)
    r[3*i+2]  = (t[5] >> 1) | (t[6] << 2) | (t[7] << 5);
    2ce0:	00e50123          	sb	a4,2(a0)
  for(i = 0; i < N/8; ++i) {
    2ce4:	02058593          	addi	a1,a1,32
    2ce8:	00350513          	addi	a0,a0,3
    2cec:	f51598e3          	bne	a1,a7,2c3c <pqcrystals_dilithium5_ref_polyeta_pack+0x8>
    r[i] = t[0] | (t[1] << 4);
  }
#endif

  DBENCH_STOP(*tpack);
}
    2cf0:	00008067          	ret

00002cf4 <pqcrystals_dilithium5_ref_polyeta_unpack>:
void polyeta_unpack(poly *r, const uint8_t *a) {
  unsigned int i;
  DBENCH_START();

#if ETA == 2
  for(i = 0; i < N/8; ++i) {
    2cf4:	40050e93          	addi	t4,a0,1024
    r->coeffs[8*i+4] =  (a[3*i+1] >> 4) & 7;
    r->coeffs[8*i+5] = ((a[3*i+1] >> 7) | (a[3*i+2] << 1)) & 7;
    r->coeffs[8*i+6] =  (a[3*i+2] >> 2) & 7;
    r->coeffs[8*i+7] =  (a[3*i+2] >> 5) & 7;

    r->coeffs[8*i+0] = ETA - r->coeffs[8*i+0];
    2cf8:	00200313          	li	t1,2
    r->coeffs[8*i+0] =  (a[3*i+0] >> 0) & 7;
    2cfc:	0005ce03          	lbu	t3,0(a1)
  for(i = 0; i < N/8; ++i) {
    2d00:	02050513          	addi	a0,a0,32
    2d04:	00358593          	addi	a1,a1,3
    r->coeffs[8*i+0] =  (a[3*i+0] >> 0) & 7;
    2d08:	007e7e13          	andi	t3,t3,7
    2d0c:	ffc52023          	sw	t3,-32(a0)
    r->coeffs[8*i+1] =  (a[3*i+0] >> 3) & 7;
    2d10:	ffd5c883          	lbu	a7,-3(a1)
    r->coeffs[8*i+0] = ETA - r->coeffs[8*i+0];
    2d14:	41c30e33          	sub	t3,t1,t3
    r->coeffs[8*i+1] =  (a[3*i+0] >> 3) & 7;
    2d18:	0038d893          	srli	a7,a7,0x3
    2d1c:	0078f893          	andi	a7,a7,7
    2d20:	ff152223          	sw	a7,-28(a0)
    r->coeffs[8*i+2] = ((a[3*i+0] >> 6) | (a[3*i+1] << 2)) & 7;
    2d24:	ffd5c703          	lbu	a4,-3(a1)
    2d28:	ffe5c783          	lbu	a5,-2(a1)
    r->coeffs[8*i+1] = ETA - r->coeffs[8*i+1];
    2d2c:	411308b3          	sub	a7,t1,a7
    r->coeffs[8*i+2] = ((a[3*i+0] >> 6) | (a[3*i+1] << 2)) & 7;
    2d30:	00675713          	srli	a4,a4,0x6
    2d34:	00279793          	slli	a5,a5,0x2
    2d38:	00f76733          	or	a4,a4,a5
    2d3c:	00777713          	andi	a4,a4,7
    2d40:	fee52423          	sw	a4,-24(a0)
    r->coeffs[8*i+3] =  (a[3*i+1] >> 1) & 7;
    2d44:	ffe5c783          	lbu	a5,-2(a1)
    r->coeffs[8*i+2] = ETA - r->coeffs[8*i+2];
    2d48:	40e30833          	sub	a6,t1,a4
    r->coeffs[8*i+3] =  (a[3*i+1] >> 1) & 7;
    2d4c:	0017d793          	srli	a5,a5,0x1
    2d50:	0077f793          	andi	a5,a5,7
    2d54:	fef52623          	sw	a5,-20(a0)
    r->coeffs[8*i+4] =  (a[3*i+1] >> 4) & 7;
    2d58:	ffe5c703          	lbu	a4,-2(a1)
    r->coeffs[8*i+3] = ETA - r->coeffs[8*i+3];
    2d5c:	40f30633          	sub	a2,t1,a5
    r->coeffs[8*i+4] =  (a[3*i+1] >> 4) & 7;
    2d60:	00475713          	srli	a4,a4,0x4
    2d64:	00777713          	andi	a4,a4,7
    2d68:	fee52823          	sw	a4,-16(a0)
    r->coeffs[8*i+5] = ((a[3*i+1] >> 7) | (a[3*i+2] << 1)) & 7;
    2d6c:	fff5cf03          	lbu	t5,-1(a1)
    2d70:	ffe5c783          	lbu	a5,-2(a1)
    r->coeffs[8*i+4] = ETA - r->coeffs[8*i+4];
    2d74:	40e306b3          	sub	a3,t1,a4
    r->coeffs[8*i+5] = ((a[3*i+1] >> 7) | (a[3*i+2] << 1)) & 7;
    2d78:	001f1713          	slli	a4,t5,0x1
    2d7c:	0077d793          	srli	a5,a5,0x7
    2d80:	00e7e7b3          	or	a5,a5,a4
    2d84:	0077f793          	andi	a5,a5,7
    2d88:	fef52a23          	sw	a5,-12(a0)
    r->coeffs[8*i+6] =  (a[3*i+2] >> 2) & 7;
    2d8c:	fff5c703          	lbu	a4,-1(a1)
    r->coeffs[8*i+5] = ETA - r->coeffs[8*i+5];
    2d90:	40f307b3          	sub	a5,t1,a5
    r->coeffs[8*i+6] =  (a[3*i+2] >> 2) & 7;
    2d94:	00275713          	srli	a4,a4,0x2
    2d98:	00777713          	andi	a4,a4,7
    2d9c:	fee52c23          	sw	a4,-8(a0)
    r->coeffs[8*i+7] =  (a[3*i+2] >> 5) & 7;
    2da0:	fff5cf03          	lbu	t5,-1(a1)
    r->coeffs[8*i+0] = ETA - r->coeffs[8*i+0];
    2da4:	ffc52023          	sw	t3,-32(a0)
    r->coeffs[8*i+6] = ETA - r->coeffs[8*i+6];
    2da8:	40e30733          	sub	a4,t1,a4
    r->coeffs[8*i+7] =  (a[3*i+2] >> 5) & 7;
    2dac:	005f5e13          	srli	t3,t5,0x5
    r->coeffs[8*i+7] = ETA - r->coeffs[8*i+7];
    2db0:	41c30e33          	sub	t3,t1,t3
    r->coeffs[8*i+1] = ETA - r->coeffs[8*i+1];
    2db4:	ff152223          	sw	a7,-28(a0)
    r->coeffs[8*i+2] = ETA - r->coeffs[8*i+2];
    2db8:	ff052423          	sw	a6,-24(a0)
    r->coeffs[8*i+3] = ETA - r->coeffs[8*i+3];
    2dbc:	fec52623          	sw	a2,-20(a0)
    r->coeffs[8*i+4] = ETA - r->coeffs[8*i+4];
    2dc0:	fed52823          	sw	a3,-16(a0)
    r->coeffs[8*i+5] = ETA - r->coeffs[8*i+5];
    2dc4:	fef52a23          	sw	a5,-12(a0)
    r->coeffs[8*i+6] = ETA - r->coeffs[8*i+6];
    2dc8:	fee52c23          	sw	a4,-8(a0)
    r->coeffs[8*i+7] = ETA - r->coeffs[8*i+7];
    2dcc:	ffc52e23          	sw	t3,-4(a0)
  for(i = 0; i < N/8; ++i) {
    2dd0:	f3d516e3          	bne	a0,t4,2cfc <pqcrystals_dilithium5_ref_polyeta_unpack+0x8>
    r->coeffs[2*i+1] = ETA - r->coeffs[2*i+1];
  }
#endif

  DBENCH_STOP(*tpack);
}
    2dd4:	00008067          	ret

00002dd8 <pqcrystals_dilithium5_ref_polyt1_pack>:
**************************************************/
void polyt1_pack(uint8_t *r, const poly *a) {
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N/4; ++i) {
    2dd8:	40058693          	addi	a3,a1,1024
    r[5*i+0] = (a->coeffs[4*i+0] >> 0);
    2ddc:	0005a783          	lw	a5,0(a1)
  for(i = 0; i < N/4; ++i) {
    2de0:	01058593          	addi	a1,a1,16
    2de4:	00550513          	addi	a0,a0,5
    r[5*i+0] = (a->coeffs[4*i+0] >> 0);
    2de8:	fef50da3          	sb	a5,-5(a0)
    r[5*i+1] = (a->coeffs[4*i+0] >> 8) | (a->coeffs[4*i+1] << 2);
    2dec:	ff05a783          	lw	a5,-16(a1)
    2df0:	ff45a703          	lw	a4,-12(a1)
    2df4:	4087d793          	srai	a5,a5,0x8
    2df8:	00271713          	slli	a4,a4,0x2
    2dfc:	00e7e7b3          	or	a5,a5,a4
    2e00:	fef50e23          	sb	a5,-4(a0)
    r[5*i+2] = (a->coeffs[4*i+1] >> 6) | (a->coeffs[4*i+2] << 4);
    2e04:	ff45a783          	lw	a5,-12(a1)
    2e08:	ff85a703          	lw	a4,-8(a1)
    2e0c:	4067d793          	srai	a5,a5,0x6
    2e10:	00471713          	slli	a4,a4,0x4
    2e14:	00e7e7b3          	or	a5,a5,a4
    2e18:	fef50ea3          	sb	a5,-3(a0)
    r[5*i+3] = (a->coeffs[4*i+2] >> 4) | (a->coeffs[4*i+3] << 6);
    2e1c:	ff85a783          	lw	a5,-8(a1)
    2e20:	ffc5a703          	lw	a4,-4(a1)
    2e24:	4047d793          	srai	a5,a5,0x4
    2e28:	00671713          	slli	a4,a4,0x6
    2e2c:	00e7e7b3          	or	a5,a5,a4
    2e30:	fef50f23          	sb	a5,-2(a0)
    r[5*i+4] = (a->coeffs[4*i+3] >> 2);
    2e34:	ffc5a783          	lw	a5,-4(a1)
    2e38:	4027d793          	srai	a5,a5,0x2
    2e3c:	fef50fa3          	sb	a5,-1(a0)
  for(i = 0; i < N/4; ++i) {
    2e40:	f8d59ee3          	bne	a1,a3,2ddc <pqcrystals_dilithium5_ref_polyt1_pack+0x4>
  }

  DBENCH_STOP(*tpack);
}
    2e44:	00008067          	ret

00002e48 <pqcrystals_dilithium5_ref_polyt1_unpack>:
**************************************************/
void polyt1_unpack(poly *r, const uint8_t *a) {
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N/4; ++i) {
    2e48:	14058693          	addi	a3,a1,320
    r->coeffs[4*i+0] = ((a[5*i+0] >> 0) | ((uint32_t)a[5*i+1] << 8)) & 0x3FF;
    2e4c:	0015c783          	lbu	a5,1(a1)
    2e50:	0005c703          	lbu	a4,0(a1)
  for(i = 0; i < N/4; ++i) {
    2e54:	00558593          	addi	a1,a1,5
    r->coeffs[4*i+0] = ((a[5*i+0] >> 0) | ((uint32_t)a[5*i+1] << 8)) & 0x3FF;
    2e58:	00879793          	slli	a5,a5,0x8
    2e5c:	00e7e7b3          	or	a5,a5,a4
    2e60:	3ff7f793          	andi	a5,a5,1023
    2e64:	00f52023          	sw	a5,0(a0)
    r->coeffs[4*i+1] = ((a[5*i+1] >> 2) | ((uint32_t)a[5*i+2] << 6)) & 0x3FF;
    2e68:	ffc5c783          	lbu	a5,-4(a1)
    2e6c:	ffd5c703          	lbu	a4,-3(a1)
  for(i = 0; i < N/4; ++i) {
    2e70:	01050513          	addi	a0,a0,16
    r->coeffs[4*i+1] = ((a[5*i+1] >> 2) | ((uint32_t)a[5*i+2] << 6)) & 0x3FF;
    2e74:	0027d793          	srli	a5,a5,0x2
    2e78:	00671713          	slli	a4,a4,0x6
    2e7c:	00e7e7b3          	or	a5,a5,a4
    2e80:	3ff7f793          	andi	a5,a5,1023
    2e84:	fef52a23          	sw	a5,-12(a0)
    r->coeffs[4*i+2] = ((a[5*i+2] >> 4) | ((uint32_t)a[5*i+3] << 4)) & 0x3FF;
    2e88:	ffd5c783          	lbu	a5,-3(a1)
    2e8c:	ffe5c703          	lbu	a4,-2(a1)
    2e90:	0047d793          	srli	a5,a5,0x4
    2e94:	00471713          	slli	a4,a4,0x4
    2e98:	00e7e7b3          	or	a5,a5,a4
    2e9c:	3ff7f793          	andi	a5,a5,1023
    2ea0:	fef52c23          	sw	a5,-8(a0)
    r->coeffs[4*i+3] = ((a[5*i+3] >> 6) | ((uint32_t)a[5*i+4] << 2)) & 0x3FF;
    2ea4:	ffe5c783          	lbu	a5,-2(a1)
    2ea8:	fff5c703          	lbu	a4,-1(a1)
    2eac:	0067d793          	srli	a5,a5,0x6
    2eb0:	00271713          	slli	a4,a4,0x2
    2eb4:	00e7e7b3          	or	a5,a5,a4
    2eb8:	fef52e23          	sw	a5,-4(a0)
  for(i = 0; i < N/4; ++i) {
    2ebc:	f8b698e3          	bne	a3,a1,2e4c <pqcrystals_dilithium5_ref_polyt1_unpack+0x4>
  }

  DBENCH_STOP(*tpack);
}
    2ec0:	00008067          	ret

00002ec4 <pqcrystals_dilithium5_ref_polyt0_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYT0_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void polyt0_pack(uint8_t *r, const poly *a) {
    2ec4:	fd010113          	addi	sp,sp,-48
    2ec8:	02812623          	sw	s0,44(sp)
    2ecc:	02912423          	sw	s1,40(sp)
    2ed0:	03212223          	sw	s2,36(sp)
    2ed4:	03312023          	sw	s3,32(sp)
    2ed8:	01412e23          	sw	s4,28(sp)
    2edc:	01512c23          	sw	s5,24(sp)
    2ee0:	01612a23          	sw	s6,20(sp)
    2ee4:	01712823          	sw	s7,16(sp)
    2ee8:	01812623          	sw	s8,12(sp)
    2eec:	1a050293          	addi	t0,a0,416
  unsigned int i;
  uint32_t t[8];
  DBENCH_START();

  for(i = 0; i < N/8; ++i) {
    t[0] = (1 << (D-1)) - a->coeffs[8*i+0];
    2ef0:	00001e37          	lui	t3,0x1
    2ef4:	0005af03          	lw	t5,0(a1)
    t[1] = (1 << (D-1)) - a->coeffs[8*i+1];
    2ef8:	0045a883          	lw	a7,4(a1)
    t[2] = (1 << (D-1)) - a->coeffs[8*i+2];
    2efc:	0085a803          	lw	a6,8(a1)
    t[3] = (1 << (D-1)) - a->coeffs[8*i+3];
    2f00:	00c5ae83          	lw	t4,12(a1)
    t[4] = (1 << (D-1)) - a->coeffs[8*i+4];
    2f04:	0105a703          	lw	a4,16(a1)
    t[5] = (1 << (D-1)) - a->coeffs[8*i+5];
    2f08:	0145a603          	lw	a2,20(a1)
    t[6] = (1 << (D-1)) - a->coeffs[8*i+6];
    2f0c:	0185a783          	lw	a5,24(a1)
    t[7] = (1 << (D-1)) - a->coeffs[8*i+7];
    2f10:	01c5a683          	lw	a3,28(a1)
    t[1] = (1 << (D-1)) - a->coeffs[8*i+1];
    2f14:	411e08b3          	sub	a7,t3,a7
    t[3] = (1 << (D-1)) - a->coeffs[8*i+3];
    2f18:	41de0eb3          	sub	t4,t3,t4
    t[4] = (1 << (D-1)) - a->coeffs[8*i+4];
    2f1c:	40ee0733          	sub	a4,t3,a4
    t[6] = (1 << (D-1)) - a->coeffs[8*i+6];
    2f20:	40fe07b3          	sub	a5,t3,a5
    t[0] = (1 << (D-1)) - a->coeffs[8*i+0];
    2f24:	41ee0f33          	sub	t5,t3,t5
    t[2] = (1 << (D-1)) - a->coeffs[8*i+2];
    2f28:	410e0833          	sub	a6,t3,a6
    t[5] = (1 << (D-1)) - a->coeffs[8*i+5];
    2f2c:	40ce0633          	sub	a2,t3,a2
    t[7] = (1 << (D-1)) - a->coeffs[8*i+7];
    2f30:	40de06b3          	sub	a3,t3,a3

    r[13*i+ 0]  =  t[0];
    r[13*i+ 1]  =  t[0] >>  8;
    r[13*i+ 1] |=  t[1] <<  5;
    2f34:	00589c13          	slli	s8,a7,0x5
    r[13*i+ 2]  =  t[1] >>  3;
    r[13*i+ 3]  =  t[1] >> 11;
    2f38:	00b8d413          	srli	s0,a7,0xb
    r[13*i+ 3] |=  t[2] <<  2;
    2f3c:	00281b93          	slli	s7,a6,0x2
    r[13*i+ 4]  =  t[2] >>  6;
    r[13*i+ 4] |=  t[3] <<  7;
    2f40:	007e9b13          	slli	s6,t4,0x7
    r[13*i+ 5]  =  t[3] >>  1;
    r[13*i+ 6]  =  t[3] >>  9;
    2f44:	009ed393          	srli	t2,t4,0x9
    r[13*i+ 6] |=  t[4] <<  4;
    2f48:	00471a93          	slli	s5,a4,0x4
    r[13*i+ 7]  =  t[4] >>  4;
    r[13*i+ 8]  =  t[4] >> 12;
    2f4c:	00c75f93          	srli	t6,a4,0xc
    r[13*i+ 8] |=  t[5] <<  1;
    2f50:	00161a13          	slli	s4,a2,0x1
    r[13*i+ 9]  =  t[5] >>  7;
    r[13*i+ 9] |=  t[6] <<  6;
    2f54:	00679993          	slli	s3,a5,0x6
    r[13*i+10]  =  t[6] >>  2;
    r[13*i+11]  =  t[6] >> 10;
    2f58:	00a7d313          	srli	t1,a5,0xa
    r[13*i+11] |=  t[7] <<  3;
    2f5c:	00369913          	slli	s2,a3,0x3
    r[13*i+ 1]  =  t[0] >>  8;
    2f60:	008f5493          	srli	s1,t5,0x8
    r[13*i+ 4]  =  t[2] >>  6;
    2f64:	00685813          	srli	a6,a6,0x6
    r[13*i+ 9]  =  t[5] >>  7;
    2f68:	00765613          	srli	a2,a2,0x7
    r[13*i+ 1] |=  t[1] <<  5;
    2f6c:	0184e4b3          	or	s1,s1,s8
    r[13*i+ 2]  =  t[1] >>  3;
    2f70:	0038d893          	srli	a7,a7,0x3
    r[13*i+ 3] |=  t[2] <<  2;
    2f74:	01746433          	or	s0,s0,s7
    r[13*i+ 4] |=  t[3] <<  7;
    2f78:	01686833          	or	a6,a6,s6
    r[13*i+ 5]  =  t[3] >>  1;
    2f7c:	001ede93          	srli	t4,t4,0x1
    r[13*i+ 6] |=  t[4] <<  4;
    2f80:	0153e3b3          	or	t2,t2,s5
    r[13*i+ 7]  =  t[4] >>  4;
    2f84:	00475713          	srli	a4,a4,0x4
    r[13*i+ 8] |=  t[5] <<  1;
    2f88:	014fefb3          	or	t6,t6,s4
    r[13*i+ 9] |=  t[6] <<  6;
    2f8c:	01366633          	or	a2,a2,s3
    r[13*i+10]  =  t[6] >>  2;
    2f90:	0027d793          	srli	a5,a5,0x2
    r[13*i+11] |=  t[7] <<  3;
    2f94:	01236333          	or	t1,t1,s2
    r[13*i+12]  =  t[7] >>  5;
    2f98:	0056d693          	srli	a3,a3,0x5
    r[13*i+ 0]  =  t[0];
    2f9c:	01e50023          	sb	t5,0(a0)
    r[13*i+ 1] |=  t[1] <<  5;
    2fa0:	009500a3          	sb	s1,1(a0)
    r[13*i+ 2]  =  t[1] >>  3;
    2fa4:	01150123          	sb	a7,2(a0)
    r[13*i+ 3] |=  t[2] <<  2;
    2fa8:	008501a3          	sb	s0,3(a0)
    r[13*i+ 4] |=  t[3] <<  7;
    2fac:	01050223          	sb	a6,4(a0)
    r[13*i+ 5]  =  t[3] >>  1;
    2fb0:	01d502a3          	sb	t4,5(a0)
    r[13*i+ 6] |=  t[4] <<  4;
    2fb4:	00750323          	sb	t2,6(a0)
    r[13*i+ 7]  =  t[4] >>  4;
    2fb8:	00e503a3          	sb	a4,7(a0)
    r[13*i+ 8] |=  t[5] <<  1;
    2fbc:	01f50423          	sb	t6,8(a0)
    r[13*i+ 9] |=  t[6] <<  6;
    2fc0:	00c504a3          	sb	a2,9(a0)
    r[13*i+10]  =  t[6] >>  2;
    2fc4:	00f50523          	sb	a5,10(a0)
    r[13*i+11] |=  t[7] <<  3;
    2fc8:	006505a3          	sb	t1,11(a0)
    r[13*i+12]  =  t[7] >>  5;
    2fcc:	00d50623          	sb	a3,12(a0)
  for(i = 0; i < N/8; ++i) {
    2fd0:	00d50513          	addi	a0,a0,13
    2fd4:	02058593          	addi	a1,a1,32
    2fd8:	f0a29ee3          	bne	t0,a0,2ef4 <pqcrystals_dilithium5_ref_polyt0_pack+0x30>
  }

  DBENCH_STOP(*tpack);
}
    2fdc:	02c12403          	lw	s0,44(sp)
    2fe0:	02812483          	lw	s1,40(sp)
    2fe4:	02412903          	lw	s2,36(sp)
    2fe8:	02012983          	lw	s3,32(sp)
    2fec:	01c12a03          	lw	s4,28(sp)
    2ff0:	01812a83          	lw	s5,24(sp)
    2ff4:	01412b03          	lw	s6,20(sp)
    2ff8:	01012b83          	lw	s7,16(sp)
    2ffc:	00c12c03          	lw	s8,12(sp)
    3000:	03010113          	addi	sp,sp,48
    3004:	00008067          	ret

00003008 <pqcrystals_dilithium5_ref_polyt0_unpack>:
  DBENCH_START();

  for(i = 0; i < N/8; ++i) {
    r->coeffs[8*i+0]  = a[13*i+0];
    r->coeffs[8*i+0] |= (uint32_t)a[13*i+1] << 8;
    r->coeffs[8*i+0] &= 0x1FFF;
    3008:	00002eb7          	lui	t4,0x2
    300c:	1a058f13          	addi	t5,a1,416
    3010:	fffe8e93          	addi	t4,t4,-1 # 1fff <pqcrystals_dilithium5_ref_polyveck_shiftl+0x37>

    r->coeffs[8*i+7]  = a[13*i+11] >> 3;
    r->coeffs[8*i+7] |= (uint32_t)a[13*i+12] << 5;
    r->coeffs[8*i+7] &= 0x1FFF;

    r->coeffs[8*i+0] = (1 << (D-1)) - r->coeffs[8*i+0];
    3014:	00001e37          	lui	t3,0x1
    r->coeffs[8*i+0]  = a[13*i+0];
    3018:	0005c783          	lbu	a5,0(a1)
  for(i = 0; i < N/8; ++i) {
    301c:	00d58593          	addi	a1,a1,13
    3020:	02050513          	addi	a0,a0,32
    r->coeffs[8*i+0]  = a[13*i+0];
    3024:	fef52023          	sw	a5,-32(a0)
    r->coeffs[8*i+0] |= (uint32_t)a[13*i+1] << 8;
    3028:	ff45c303          	lbu	t1,-12(a1)
    302c:	00831313          	slli	t1,t1,0x8
    3030:	00f36333          	or	t1,t1,a5
    r->coeffs[8*i+0] &= 0x1FFF;
    3034:	01d37333          	and	t1,t1,t4
    3038:	fe652023          	sw	t1,-32(a0)
    r->coeffs[8*i+1]  = a[13*i+1] >> 5;
    303c:	ff45c703          	lbu	a4,-12(a1)
    r->coeffs[8*i+0] = (1 << (D-1)) - r->coeffs[8*i+0];
    3040:	406e0333          	sub	t1,t3,t1
    r->coeffs[8*i+1]  = a[13*i+1] >> 5;
    3044:	00575713          	srli	a4,a4,0x5
    3048:	fee52223          	sw	a4,-28(a0)
    r->coeffs[8*i+1] |= (uint32_t)a[13*i+2] << 3;
    304c:	ff55c783          	lbu	a5,-11(a1)
    3050:	00379793          	slli	a5,a5,0x3
    3054:	00e7e7b3          	or	a5,a5,a4
    3058:	fef52223          	sw	a5,-28(a0)
    r->coeffs[8*i+1] |= (uint32_t)a[13*i+3] << 11;
    305c:	ff65c883          	lbu	a7,-10(a1)
    3060:	00b89893          	slli	a7,a7,0xb
    3064:	00f8e8b3          	or	a7,a7,a5
    r->coeffs[8*i+1] &= 0x1FFF;
    3068:	01d8f8b3          	and	a7,a7,t4
    306c:	ff152223          	sw	a7,-28(a0)
    r->coeffs[8*i+2]  = a[13*i+3] >> 2;
    3070:	ff65c783          	lbu	a5,-10(a1)
    r->coeffs[8*i+1] = (1 << (D-1)) - r->coeffs[8*i+1];
    3074:	411e08b3          	sub	a7,t3,a7
    r->coeffs[8*i+2]  = a[13*i+3] >> 2;
    3078:	0027d793          	srli	a5,a5,0x2
    307c:	fef52423          	sw	a5,-24(a0)
    r->coeffs[8*i+2] |= (uint32_t)a[13*i+4] << 6;
    3080:	ff75c803          	lbu	a6,-9(a1)
    3084:	00681813          	slli	a6,a6,0x6
    3088:	00f86833          	or	a6,a6,a5
    r->coeffs[8*i+2] &= 0x1FFF;
    308c:	01d87833          	and	a6,a6,t4
    3090:	ff052423          	sw	a6,-24(a0)
    r->coeffs[8*i+3]  = a[13*i+4] >> 7;
    3094:	ff75c783          	lbu	a5,-9(a1)
    r->coeffs[8*i+2] = (1 << (D-1)) - r->coeffs[8*i+2];
    3098:	410e0833          	sub	a6,t3,a6
    r->coeffs[8*i+3]  = a[13*i+4] >> 7;
    309c:	0077d793          	srli	a5,a5,0x7
    30a0:	fef52623          	sw	a5,-20(a0)
    r->coeffs[8*i+3] |= (uint32_t)a[13*i+5] << 1;
    30a4:	ff85c703          	lbu	a4,-8(a1)
    30a8:	00171713          	slli	a4,a4,0x1
    30ac:	00f76733          	or	a4,a4,a5
    30b0:	fee52623          	sw	a4,-20(a0)
    r->coeffs[8*i+3] |= (uint32_t)a[13*i+6] << 9;
    30b4:	ff95c783          	lbu	a5,-7(a1)
    30b8:	00979793          	slli	a5,a5,0x9
    30bc:	00e7e7b3          	or	a5,a5,a4
    r->coeffs[8*i+3] &= 0x1FFF;
    30c0:	01d7f7b3          	and	a5,a5,t4
    30c4:	fef52623          	sw	a5,-20(a0)
    r->coeffs[8*i+4]  = a[13*i+6] >> 4;
    30c8:	ff95c703          	lbu	a4,-7(a1)
    r->coeffs[8*i+3] = (1 << (D-1)) - r->coeffs[8*i+3];
    30cc:	40fe0633          	sub	a2,t3,a5
    r->coeffs[8*i+4]  = a[13*i+6] >> 4;
    30d0:	00475793          	srli	a5,a4,0x4
    30d4:	fef52823          	sw	a5,-16(a0)
    r->coeffs[8*i+4] |= (uint32_t)a[13*i+7] << 4;
    30d8:	ffa5c703          	lbu	a4,-6(a1)
    30dc:	00471713          	slli	a4,a4,0x4
    30e0:	00f76733          	or	a4,a4,a5
    30e4:	fee52823          	sw	a4,-16(a0)
    r->coeffs[8*i+4] |= (uint32_t)a[13*i+8] << 12;
    30e8:	ffb5c783          	lbu	a5,-5(a1)
    30ec:	00c79793          	slli	a5,a5,0xc
    30f0:	00e7e7b3          	or	a5,a5,a4
    r->coeffs[8*i+4] &= 0x1FFF;
    30f4:	01d7f7b3          	and	a5,a5,t4
    30f8:	fef52823          	sw	a5,-16(a0)
    r->coeffs[8*i+5]  = a[13*i+8] >> 1;
    30fc:	ffb5c703          	lbu	a4,-5(a1)
    r->coeffs[8*i+4] = (1 << (D-1)) - r->coeffs[8*i+4];
    3100:	40fe06b3          	sub	a3,t3,a5
    r->coeffs[8*i+5]  = a[13*i+8] >> 1;
    3104:	00175713          	srli	a4,a4,0x1
    3108:	fee52a23          	sw	a4,-12(a0)
    r->coeffs[8*i+5] |= (uint32_t)a[13*i+9] << 7;
    310c:	ffc5c783          	lbu	a5,-4(a1)
    3110:	00779793          	slli	a5,a5,0x7
    3114:	00e7e7b3          	or	a5,a5,a4
    r->coeffs[8*i+5] &= 0x1FFF;
    3118:	01d7f7b3          	and	a5,a5,t4
    311c:	fef52a23          	sw	a5,-12(a0)
    r->coeffs[8*i+6]  = a[13*i+9] >> 6;
    3120:	ffc5cf83          	lbu	t6,-4(a1)
    r->coeffs[8*i+5] = (1 << (D-1)) - r->coeffs[8*i+5];
    3124:	40fe0733          	sub	a4,t3,a5
    r->coeffs[8*i+6]  = a[13*i+9] >> 6;
    3128:	006fd793          	srli	a5,t6,0x6
    312c:	fef52c23          	sw	a5,-8(a0)
    r->coeffs[8*i+6] |= (uint32_t)a[13*i+10] << 2;
    3130:	ffd5cf83          	lbu	t6,-3(a1)
    3134:	002f9f93          	slli	t6,t6,0x2
    3138:	00ffefb3          	or	t6,t6,a5
    313c:	fff52c23          	sw	t6,-8(a0)
    r->coeffs[8*i+6] |= (uint32_t)a[13*i+11] << 10;
    3140:	ffe5c783          	lbu	a5,-2(a1)
    3144:	00a79793          	slli	a5,a5,0xa
    3148:	01f7e7b3          	or	a5,a5,t6
    r->coeffs[8*i+6] &= 0x1FFF;
    314c:	01d7f7b3          	and	a5,a5,t4
    3150:	fef52c23          	sw	a5,-8(a0)
    r->coeffs[8*i+7]  = a[13*i+11] >> 3;
    3154:	ffe5c283          	lbu	t0,-2(a1)
    r->coeffs[8*i+6] = (1 << (D-1)) - r->coeffs[8*i+6];
    3158:	40fe07b3          	sub	a5,t3,a5
    r->coeffs[8*i+7]  = a[13*i+11] >> 3;
    315c:	0032d293          	srli	t0,t0,0x3
    3160:	fe552e23          	sw	t0,-4(a0)
    r->coeffs[8*i+7] |= (uint32_t)a[13*i+12] << 5;
    3164:	fff5cf83          	lbu	t6,-1(a1)
    r->coeffs[8*i+1] = (1 << (D-1)) - r->coeffs[8*i+1];
    3168:	ff152223          	sw	a7,-28(a0)
    r->coeffs[8*i+0] = (1 << (D-1)) - r->coeffs[8*i+0];
    316c:	fe652023          	sw	t1,-32(a0)
    r->coeffs[8*i+7] |= (uint32_t)a[13*i+12] << 5;
    3170:	005f9893          	slli	a7,t6,0x5
    3174:	0058e8b3          	or	a7,a7,t0
    r->coeffs[8*i+7] = (1 << (D-1)) - r->coeffs[8*i+7];
    3178:	411e08b3          	sub	a7,t3,a7
    r->coeffs[8*i+2] = (1 << (D-1)) - r->coeffs[8*i+2];
    317c:	ff052423          	sw	a6,-24(a0)
    r->coeffs[8*i+3] = (1 << (D-1)) - r->coeffs[8*i+3];
    3180:	fec52623          	sw	a2,-20(a0)
    r->coeffs[8*i+4] = (1 << (D-1)) - r->coeffs[8*i+4];
    3184:	fed52823          	sw	a3,-16(a0)
    r->coeffs[8*i+5] = (1 << (D-1)) - r->coeffs[8*i+5];
    3188:	fee52a23          	sw	a4,-12(a0)
    r->coeffs[8*i+6] = (1 << (D-1)) - r->coeffs[8*i+6];
    318c:	fef52c23          	sw	a5,-8(a0)
    r->coeffs[8*i+7] = (1 << (D-1)) - r->coeffs[8*i+7];
    3190:	ff152e23          	sw	a7,-4(a0)
  for(i = 0; i < N/8; ++i) {
    3194:	e8bf12e3          	bne	t5,a1,3018 <pqcrystals_dilithium5_ref_polyt0_unpack+0x10>
  }

  DBENCH_STOP(*tpack);
}
    3198:	00008067          	ret

0000319c <pqcrystals_dilithium5_ref_polyz_pack>:
    r[9*i+6] |= t[3] << 6;
    r[9*i+7]  = t[3] >> 2;
    r[9*i+8]  = t[3] >> 10;
  }
#elif GAMMA1 == (1 << 19)
  for(i = 0; i < N/2; ++i) {
    319c:	28050313          	addi	t1,a0,640
    t[0] = GAMMA1 - a->coeffs[2*i+0];
    31a0:	00080637          	lui	a2,0x80
    31a4:	0005a703          	lw	a4,0(a1)
    t[1] = GAMMA1 - a->coeffs[2*i+1];
    31a8:	0045a783          	lw	a5,4(a1)
  for(i = 0; i < N/2; ++i) {
    31ac:	00550513          	addi	a0,a0,5
    t[0] = GAMMA1 - a->coeffs[2*i+0];
    31b0:	40e60733          	sub	a4,a2,a4
    t[1] = GAMMA1 - a->coeffs[2*i+1];
    31b4:	40f607b3          	sub	a5,a2,a5

    r[5*i+0]  = t[0];
    r[5*i+1]  = t[0] >> 8;
    r[5*i+2]  = t[0] >> 16;
    r[5*i+2] |= t[1] << 4;
    31b8:	00479813          	slli	a6,a5,0x4
    r[5*i+2]  = t[0] >> 16;
    31bc:	01075693          	srli	a3,a4,0x10
    r[5*i+2] |= t[1] << 4;
    31c0:	0106e6b3          	or	a3,a3,a6
    r[5*i+1]  = t[0] >> 8;
    31c4:	00875893          	srli	a7,a4,0x8
    r[5*i+3]  = t[1] >> 4;
    31c8:	0047d813          	srli	a6,a5,0x4
    r[5*i+4]  = t[1] >> 12;
    31cc:	00c7d793          	srli	a5,a5,0xc
    r[5*i+0]  = t[0];
    31d0:	fee50da3          	sb	a4,-5(a0)
    r[5*i+1]  = t[0] >> 8;
    31d4:	ff150e23          	sb	a7,-4(a0)
    r[5*i+2] |= t[1] << 4;
    31d8:	fed50ea3          	sb	a3,-3(a0)
    r[5*i+3]  = t[1] >> 4;
    31dc:	ff050f23          	sb	a6,-2(a0)
    r[5*i+4]  = t[1] >> 12;
    31e0:	fef50fa3          	sb	a5,-1(a0)
  for(i = 0; i < N/2; ++i) {
    31e4:	00858593          	addi	a1,a1,8
    31e8:	faa31ee3          	bne	t1,a0,31a4 <pqcrystals_dilithium5_ref_polyz_pack+0x8>
  }
#endif

  DBENCH_STOP(*tpack);
}
    31ec:	00008067          	ret

000031f0 <pqcrystals_dilithium5_ref_polyz_unpack>:
#elif GAMMA1 == (1 << 19)
  for(i = 0; i < N/2; ++i) {
    r->coeffs[2*i+0]  = a[5*i+0];
    r->coeffs[2*i+0] |= (uint32_t)a[5*i+1] << 8;
    r->coeffs[2*i+0] |= (uint32_t)a[5*i+2] << 16;
    r->coeffs[2*i+0] &= 0xFFFFF;
    31f0:	00100837          	lui	a6,0x100
    31f4:	28058893          	addi	a7,a1,640
    31f8:	fff80813          	addi	a6,a6,-1 # fffff <_end_of_memory+0xcffff>
    r->coeffs[2*i+1]  = a[5*i+2] >> 4;
    r->coeffs[2*i+1] |= (uint32_t)a[5*i+3] << 4;
    r->coeffs[2*i+1] |= (uint32_t)a[5*i+4] << 12;
    r->coeffs[2*i+0] &= 0xFFFFF;

    r->coeffs[2*i+0] = GAMMA1 - r->coeffs[2*i+0];
    31fc:	00080637          	lui	a2,0x80
    r->coeffs[2*i+0]  = a[5*i+0];
    3200:	0005c783          	lbu	a5,0(a1)
  for(i = 0; i < N/2; ++i) {
    3204:	00558593          	addi	a1,a1,5
    3208:	00850513          	addi	a0,a0,8
    r->coeffs[2*i+0]  = a[5*i+0];
    320c:	fef52c23          	sw	a5,-8(a0)
    r->coeffs[2*i+0] |= (uint32_t)a[5*i+1] << 8;
    3210:	ffc5c703          	lbu	a4,-4(a1)
    3214:	00871713          	slli	a4,a4,0x8
    3218:	00f76733          	or	a4,a4,a5
    321c:	fee52c23          	sw	a4,-8(a0)
    r->coeffs[2*i+0] |= (uint32_t)a[5*i+2] << 16;
    3220:	ffd5c783          	lbu	a5,-3(a1)
    3224:	01079793          	slli	a5,a5,0x10
    3228:	00e7e7b3          	or	a5,a5,a4
    r->coeffs[2*i+0] &= 0xFFFFF;
    322c:	0107f7b3          	and	a5,a5,a6
    3230:	fef52c23          	sw	a5,-8(a0)
    r->coeffs[2*i+1]  = a[5*i+2] >> 4;
    3234:	ffd5c703          	lbu	a4,-3(a1)
    r->coeffs[2*i+0] = GAMMA1 - r->coeffs[2*i+0];
    3238:	40f607b3          	sub	a5,a2,a5
    r->coeffs[2*i+1]  = a[5*i+2] >> 4;
    323c:	00475713          	srli	a4,a4,0x4
    3240:	fee52e23          	sw	a4,-4(a0)
    r->coeffs[2*i+1] |= (uint32_t)a[5*i+3] << 4;
    3244:	ffe5c683          	lbu	a3,-2(a1)
    3248:	00469693          	slli	a3,a3,0x4
    324c:	00e6e6b3          	or	a3,a3,a4
    3250:	fed52e23          	sw	a3,-4(a0)
    r->coeffs[2*i+1] |= (uint32_t)a[5*i+4] << 12;
    3254:	fff5c703          	lbu	a4,-1(a1)
    r->coeffs[2*i+0] = GAMMA1 - r->coeffs[2*i+0];
    3258:	fef52c23          	sw	a5,-8(a0)
    r->coeffs[2*i+1] |= (uint32_t)a[5*i+4] << 12;
    325c:	00c71793          	slli	a5,a4,0xc
    3260:	00d7e7b3          	or	a5,a5,a3
    r->coeffs[2*i+1] = GAMMA1 - r->coeffs[2*i+1];
    3264:	40f607b3          	sub	a5,a2,a5
    3268:	fef52e23          	sw	a5,-4(a0)
  for(i = 0; i < N/2; ++i) {
    326c:	f9159ae3          	bne	a1,a7,3200 <pqcrystals_dilithium5_ref_polyz_unpack+0x10>
  }
#endif

  DBENCH_STOP(*tpack);
}
    3270:	00008067          	ret

00003274 <pqcrystals_dilithium5_ref_poly_uniform_gamma1>:
{
    3274:	c7010113          	addi	sp,sp,-912
    3278:	38812423          	sw	s0,904(sp)
    327c:	00050413          	mv	s0,a0
  stream256_init(&state, seed, nonce);
    3280:	00810513          	addi	a0,sp,8
{
    3284:	38112623          	sw	ra,908(sp)
  stream256_init(&state, seed, nonce);
    3288:	7bd030ef          	jal	ra,7244 <pqcrystals_dilithium5_ref_dilithium_shake256_stream_init>
  stream256_squeezeblocks(buf, POLY_UNIFORM_GAMMA1_NBLOCKS, &state);
    328c:	00810613          	addi	a2,sp,8
    3290:	0d810513          	addi	a0,sp,216
    3294:	00500593          	li	a1,5
    3298:	51c030ef          	jal	ra,67b4 <pqcrystals_dilithium_fips202_ref_shake256_squeezeblocks>
  polyz_unpack(a, buf);
    329c:	0d810593          	addi	a1,sp,216
    32a0:	00040513          	mv	a0,s0
    32a4:	f4dff0ef          	jal	ra,31f0 <pqcrystals_dilithium5_ref_polyz_unpack>
}
    32a8:	38c12083          	lw	ra,908(sp)
    32ac:	38812403          	lw	s0,904(sp)
    32b0:	39010113          	addi	sp,sp,912
    32b4:	00008067          	ret

000032b8 <pqcrystals_dilithium5_ref_polyw1_pack>:
    r[3*i+1] |= a->coeffs[4*i+2] << 4;
    r[3*i+2]  = a->coeffs[4*i+2] >> 4;
    r[3*i+2] |= a->coeffs[4*i+3] << 2;
  }
#elif GAMMA2 == (Q-1)/32
  for(i = 0; i < N/2; ++i)
    32b8:	40058693          	addi	a3,a1,1024
    r[i] = a->coeffs[2*i+0] | (a->coeffs[2*i+1] << 4);
    32bc:	0045a783          	lw	a5,4(a1)
    32c0:	0005a703          	lw	a4,0(a1)
  for(i = 0; i < N/2; ++i)
    32c4:	00858593          	addi	a1,a1,8
    r[i] = a->coeffs[2*i+0] | (a->coeffs[2*i+1] << 4);
    32c8:	00479793          	slli	a5,a5,0x4
    32cc:	00e7e7b3          	or	a5,a5,a4
    32d0:	00f50023          	sb	a5,0(a0)
  for(i = 0; i < N/2; ++i)
    32d4:	00150513          	addi	a0,a0,1
    32d8:	feb692e3          	bne	a3,a1,32bc <pqcrystals_dilithium5_ref_polyw1_pack+0x4>
#endif

  DBENCH_STOP(*tpack);
}
    32dc:	00008067          	ret

000032e0 <pqcrystals_dilithium5_ref_ntt>:
* Description: Forward NTT, in-place. No modular reduction is performed after
*              additions or subtractions. Output vector is in bitreversed order.
*
* Arguments:   - uint32_t p[N]: input/output coefficient array
**************************************************/
void ntt(int32_t a[N]) {
    32e0:	fe010113          	addi	sp,sp,-32
    32e4:	01312a23          	sw	s3,20(sp)
    32e8:	01912223          	sw	s9,4(sp)
    32ec:	00912e23          	sw	s1,28(sp)
    32f0:	01212c23          	sw	s2,24(sp)
    32f4:	01412823          	sw	s4,16(sp)
    32f8:	01612623          	sw	s6,12(sp)
    32fc:	01712423          	sw	s7,8(sp)
  #else
  unsigned int len, start, j, k;
  int32_t zeta, t;
  #endif

  k = 0;
    3300:	00000993          	li	s3,0
  for(len = 128; len > 0; len >>= 1) {
    3304:	08000c93          	li	s9,128
    3308:	00005617          	auipc	a2,0x5
    330c:	3d860613          	addi	a2,a2,984 # 86e0 <zetas>
    for(start = 0; start < N; start = j + len) {
    3310:	0ff00693          	li	a3,255
      zeta = zetas[++k];
      for(j = start; j < start + len; ++j) {
    3314:	000c8713          	mv	a4,s9
    for(start = 0; start < N; start = j + len) {
    3318:	00000493          	li	s1,0
      zeta = zetas[++k];
    331c:	00198993          	addi	s3,s3,1
    3320:	00299793          	slli	a5,s3,0x2
      for(j = start; j < start + len; ++j) {
    3324:	00048913          	mv	s2,s1
      zeta = zetas[++k];
    3328:	00f607b3          	add	a5,a2,a5
      for(j = start; j < start + len; ++j) {
    332c:	00e484b3          	add	s1,s1,a4
      zeta = zetas[++k];
    3330:	0007aa03          	lw	s4,0(a5)
      for(j = start; j < start + len; ++j) {
    3334:	04997663          	bgeu	s2,s1,3380 <pqcrystals_dilithium5_ref_ntt+0xa0>
        #ifdef FPAU
        //coeff0 = a[j];
        //coeff1 = a[j + len];

        // load coeff0
        asm volatile("mv t0, s2");
    3338:	00090293          	mv	t0,s2
        asm volatile("slli t0, t0, 0x2");
    333c:	00229293          	slli	t0,t0,0x2
        asm volatile("add t0, a0, t0");
    3340:	005502b3          	add	t0,a0,t0
        asm volatile("lw s6, 0(t0)");
    3344:	0002ab03          	lw	s6,0(t0) # 16000 <_gp+0xc9ec>

        // load coeff1
        asm volatile("add t1, s2, s9");
    3348:	01990333          	add	t1,s2,s9
        asm volatile("slli t1, t1, 0x2");
    334c:	00231313          	slli	t1,t1,0x2
        asm volatile("add t1, a0, t1");
    3350:	00650333          	add	t1,a0,t1
        asm volatile("lw s7, 0(t1)");
    3354:	00032b83          	lw	s7,0(t1)

        // Compute butterfly operation
#ifndef STEEL
        asm volatile ("nop"); //ORCA
    3358:	00000013          	nop
        asm volatile ("nop"); //ORCA
    335c:	00000013          	nop
        asm volatile ("nop"); //ORCA
    3360:	00000013          	nop
#endif
        asm volatile("fpau.dil.bf %0, %1,%2\n":"=r"(coeff0):"r"(coeff1),"r"(zeta): );
    3364:	614bab33          	fpau.dil.bf	s6,s7,s4
        
        // Store results in same position
        asm volatile("sw s6, 0(t0)");
    3368:	0162a023          	sw	s6,0(t0)
        asm volatile("nop"); //ORCA and STEEL (2nd output written in next cycle)
    336c:	00000013          	nop
        asm volatile("sw s7, 0(t1)");
    3370:	01732023          	sw	s7,0(t1)
      for(j = start; j < start + len; ++j) {
    3374:	00190913          	addi	s2,s2,1 # 2001 <pqcrystals_dilithium5_ref_polyveck_shiftl+0x39>
    3378:	fc9960e3          	bltu	s2,s1,3338 <pqcrystals_dilithium5_ref_ntt+0x58>
    for(start = 0; start < N; start = j + len) {
    337c:	00e904b3          	add	s1,s2,a4
    3380:	f896fee3          	bgeu	a3,s1,331c <pqcrystals_dilithium5_ref_ntt+0x3c>
  for(len = 128; len > 0; len >>= 1) {
    3384:	001cdc93          	srli	s9,s9,0x1
    3388:	f80c96e3          	bnez	s9,3314 <pqcrystals_dilithium5_ref_ntt+0x34>
        a[j] = a[j] + t;
        #endif
      }
    }
  }
}
    338c:	01c12483          	lw	s1,28(sp)
    3390:	01812903          	lw	s2,24(sp)
    3394:	01412983          	lw	s3,20(sp)
    3398:	01012a03          	lw	s4,16(sp)
    339c:	00c12b03          	lw	s6,12(sp)
    33a0:	00812b83          	lw	s7,8(sp)
    33a4:	00412c83          	lw	s9,4(sp)
    33a8:	02010113          	addi	sp,sp,32
    33ac:	00008067          	ret

000033b0 <pqcrystals_dilithium5_ref_invntt_tomont>:
*              Q in absolute value. Output coefficient are smaller than Q in
*              absolute value.
*
* Arguments:   - uint32_t p[N]: input/output coefficient array
**************************************************/
void invntt_tomont(int32_t a[N]) {
    33b0:	fe010113          	addi	sp,sp,-32
    33b4:	01312a23          	sw	s3,20(sp)
    33b8:	01912223          	sw	s9,4(sp)
    33bc:	00912e23          	sw	s1,28(sp)
    33c0:	01212c23          	sw	s2,24(sp)
    33c4:	01412823          	sw	s4,16(sp)
    33c8:	01612623          	sw	s6,12(sp)
    33cc:	01712423          	sw	s7,8(sp)
  unsigned int start, len, j, k;
  int32_t t, zeta;
  const int32_t f = 41978; // mont^2/256
#endif

  k = 256;
    33d0:	10000993          	li	s3,256
  for(len = 1; len < N; len <<= 1) {
    33d4:	00100c93          	li	s9,1
    33d8:	00005617          	auipc	a2,0x5
    33dc:	30860613          	addi	a2,a2,776 # 86e0 <zetas>
    for(start = 0; start < N; start = j + len) {
    33e0:	0ff00693          	li	a3,255
      zeta = -zetas[--k];
      for(j = start; j < start + len; ++j) {
    33e4:	000c8713          	mv	a4,s9
    for(start = 0; start < N; start = j + len) {
    33e8:	00000493          	li	s1,0
      zeta = -zetas[--k];
    33ec:	fff98993          	addi	s3,s3,-1
    33f0:	00299793          	slli	a5,s3,0x2
    33f4:	00f607b3          	add	a5,a2,a5
    33f8:	0007aa03          	lw	s4,0(a5)
      for(j = start; j < start + len; ++j) {
    33fc:	00048913          	mv	s2,s1
    3400:	00e484b3          	add	s1,s1,a4
      zeta = -zetas[--k];
    3404:	41400a33          	neg	s4,s4
      for(j = start; j < start + len; ++j) {
    3408:	04997663          	bgeu	s2,s1,3454 <pqcrystals_dilithium5_ref_invntt_tomont+0xa4>
#ifdef FPAU
        //coeff0 = a[j];
        //coeff1 = a[j + len];

        // load coeff0
        asm volatile("mv t0, s2");
    340c:	00090293          	mv	t0,s2
        asm volatile("slli t0, t0, 0x2");
    3410:	00229293          	slli	t0,t0,0x2
        asm volatile("add t0, a0, t0");
    3414:	005502b3          	add	t0,a0,t0
        asm volatile("lw s6, 0(t0)");
    3418:	0002ab03          	lw	s6,0(t0)

        // load coeff1
        asm volatile("add t1, s2, s9");
    341c:	01990333          	add	t1,s2,s9
        asm volatile("slli t1, t1, 0x2");
    3420:	00231313          	slli	t1,t1,0x2
        asm volatile("add t1, a0, t1");
    3424:	00650333          	add	t1,a0,t1
        asm volatile("lw s7, 0(t1)");
    3428:	00032b83          	lw	s7,0(t1)

        // Compute butterfly operation
#ifndef STEEL
        asm volatile ("nop"); //ORCA
    342c:	00000013          	nop
        asm volatile ("nop"); //ORCA
    3430:	00000013          	nop
        asm volatile ("nop"); //ORCA cached
    3434:	00000013          	nop
#endif
        asm volatile("fpau.dil.bfinv %0, %1,%2\n":"=r"(coeff0):"r"(coeff1),"r"(zeta): );
    3438:	714bab33          	fpau.dil.bfinv	s6,s7,s4

        // Store results in same position
        asm volatile("sw s6, 0(t0)");
    343c:	0162a023          	sw	s6,0(t0)
        asm volatile("nop"); //ORCA and STEEL (2nd output written in next cycle)
    3440:	00000013          	nop
        asm volatile("sw s7, 0(t1)");
    3444:	01732023          	sw	s7,0(t1)
      for(j = start; j < start + len; ++j) {
    3448:	00190913          	addi	s2,s2,1
    344c:	fc9960e3          	bltu	s2,s1,340c <pqcrystals_dilithium5_ref_invntt_tomont+0x5c>
    for(start = 0; start < N; start = j + len) {
    3450:	00e904b3          	add	s1,s2,a4
    3454:	f896fce3          	bgeu	a3,s1,33ec <pqcrystals_dilithium5_ref_invntt_tomont+0x3c>
  for(len = 1; len < N; len <<= 1) {
    3458:	001c9c93          	slli	s9,s9,0x1
    345c:	f996f4e3          	bgeu	a3,s9,33e4 <pqcrystals_dilithium5_ref_invntt_tomont+0x34>
#ifndef STEEL
        asm volatile("nop"); //ORCA
        asm volatile("nop"); //ORCA
        asm volatile("nop"); //ORCA
#endif
        asm volatile("fpau.dil.bfinv %0, %1,%2\n":"=r"(coeff0):"r"(coeff1),"r"(ninv): );  //bfinv instead of mac to not overwrite ninv constant
    3460:	007f67b7          	lui	a5,0x7f6
  for(j = 0; j < N; ++j) {
    3464:	00000913          	li	s2,0
        asm volatile("fpau.dil.bfinv %0, %1,%2\n":"=r"(coeff0):"r"(coeff1),"r"(ninv): );  //bfinv instead of mac to not overwrite ninv constant
    3468:	02178793          	addi	a5,a5,33 # 7f6021 <_end_of_memory+0x7c6021>
  for(j = 0; j < N; ++j) {
    346c:	0ff00713          	li	a4,255
        asm volatile("mv t0, s2");
    3470:	00090293          	mv	t0,s2
        asm volatile("slli t0, t0, 0x2");
    3474:	00229293          	slli	t0,t0,0x2
        asm volatile("add t0, a0, t0");
    3478:	005502b3          	add	t0,a0,t0
        asm volatile("lw s6, 0(t0)");
    347c:	0002ab03          	lw	s6,0(t0)
        asm volatile("li s7, 0"); // coeff1
    3480:	00000b93          	li	s7,0
        asm volatile("nop"); //ORCA
    3484:	00000013          	nop
        asm volatile("nop"); //ORCA
    3488:	00000013          	nop
        asm volatile("nop"); //ORCA
    348c:	00000013          	nop
        asm volatile("fpau.dil.bfinv %0, %1,%2\n":"=r"(coeff0):"r"(coeff1),"r"(ninv): );  //bfinv instead of mac to not overwrite ninv constant
    3490:	70fbab33          	fpau.dil.bfinv	s6,s7,a5
        asm volatile("nop");
    3494:	00000013          	nop
        asm volatile("nop"); //ORCA and STEEL (2nd output written in next cycle)
    3498:	00000013          	nop

        // store result
        asm volatile("sw s7, 0(t0)");
    349c:	0172a023          	sw	s7,0(t0)
  for(j = 0; j < N; ++j) {
    34a0:	00190913          	addi	s2,s2,1
    34a4:	fd2776e3          	bgeu	a4,s2,3470 <pqcrystals_dilithium5_ref_invntt_tomont+0xc0>
#else
  for(j = 0; j < N; ++j) {
    a[j] = montgomery_reduce((int64_t)f * a[j]);
  }
#endif
}
    34a8:	01c12483          	lw	s1,28(sp)
    34ac:	01812903          	lw	s2,24(sp)
    34b0:	01412983          	lw	s3,20(sp)
    34b4:	01012a03          	lw	s4,16(sp)
    34b8:	00c12b03          	lw	s6,12(sp)
    34bc:	00812b83          	lw	s7,8(sp)
    34c0:	00412c83          	lw	s9,4(sp)
    34c4:	02010113          	addi	sp,sp,32
    34c8:	00008067          	ret

000034cc <pqcrystals_dilithium5_ref_montgomery_reduce>:
* Returns r.
**************************************************/
int32_t montgomery_reduce(int64_t a) {
  int32_t t;

  t = (int64_t)(int32_t)a*QINV;
    34cc:	03802737          	lui	a4,0x3802
    34d0:	00170713          	addi	a4,a4,1 # 3802001 <_end_of_memory+0x37d2001>
    34d4:	02e50733          	mul	a4,a0,a4
  t = (a - (int64_t)t*Q) >> 32;
    34d8:	41f75813          	srai	a6,a4,0x1f
    34dc:	01675613          	srli	a2,a4,0x16
    34e0:	00a81793          	slli	a5,a6,0xa
    34e4:	00a71693          	slli	a3,a4,0xa
    34e8:	40d706b3          	sub	a3,a4,a3
    34ec:	00f667b3          	or	a5,a2,a5
    34f0:	40f807b3          	sub	a5,a6,a5
    34f4:	00d73633          	sltu	a2,a4,a3
    34f8:	40c787b3          	sub	a5,a5,a2
    34fc:	00d79793          	slli	a5,a5,0xd
    3500:	00d69613          	slli	a2,a3,0xd
    3504:	0136d693          	srli	a3,a3,0x13
    3508:	40e60733          	sub	a4,a2,a4
    350c:	00f6e7b3          	or	a5,a3,a5
    3510:	00e63633          	sltu	a2,a2,a4
    3514:	410787b3          	sub	a5,a5,a6
    3518:	40c787b3          	sub	a5,a5,a2
    351c:	00a70533          	add	a0,a4,a0
    3520:	00e53533          	sltu	a0,a0,a4
    3524:	00b787b3          	add	a5,a5,a1
  return t;
}
    3528:	00f50533          	add	a0,a0,a5
    352c:	00008067          	ret

00003530 <pqcrystals_dilithium5_ref_reduce32>:
* Returns r.
**************************************************/
int32_t reduce32(int32_t a) {
  int32_t t;

  t = (a + (1 << 22)) >> 23;
    3530:	004007b7          	lui	a5,0x400
    3534:	00f507b3          	add	a5,a0,a5
  t = a - t*Q;
    3538:	ff802737          	lui	a4,0xff802
    353c:	fff70713          	addi	a4,a4,-1 # ff801fff <_end_of_memory+0xff7d1fff>
  t = (a + (1 << 22)) >> 23;
    3540:	4177d793          	srai	a5,a5,0x17
  t = a - t*Q;
    3544:	02e787b3          	mul	a5,a5,a4
  return t;
}
    3548:	00a78533          	add	a0,a5,a0
    354c:	00008067          	ret

00003550 <pqcrystals_dilithium5_ref_caddq>:
* Arguments:   - int32_t: finite field element a
*
* Returns r.
**************************************************/
int32_t caddq(int32_t a) {
  a += (a >> 31) & Q;
    3550:	007fe737          	lui	a4,0x7fe
    3554:	41f55793          	srai	a5,a0,0x1f
    3558:	00170713          	addi	a4,a4,1 # 7fe001 <_end_of_memory+0x7ce001>
    355c:	00e7f7b3          	and	a5,a5,a4
  return a;
}
    3560:	00a78533          	add	a0,a5,a0
    3564:	00008067          	ret

00003568 <pqcrystals_dilithium5_ref_freeze>:
  t = (a + (1 << 22)) >> 23;
    3568:	004007b7          	lui	a5,0x400
    356c:	00f507b3          	add	a5,a0,a5
  t = a - t*Q;
    3570:	ff802737          	lui	a4,0xff802
    3574:	fff70713          	addi	a4,a4,-1 # ff801fff <_end_of_memory+0xff7d1fff>
  t = (a + (1 << 22)) >> 23;
    3578:	4177d793          	srai	a5,a5,0x17
  t = a - t*Q;
    357c:	02e787b3          	mul	a5,a5,a4
  a += (a >> 31) & Q;
    3580:	007fe737          	lui	a4,0x7fe
    3584:	00170713          	addi	a4,a4,1 # 7fe001 <_end_of_memory+0x7ce001>
  t = a - t*Q;
    3588:	00f50533          	add	a0,a0,a5
  a += (a >> 31) & Q;
    358c:	41f55793          	srai	a5,a0,0x1f
    3590:	00e7f7b3          	and	a5,a5,a4
**************************************************/
int32_t freeze(int32_t a) {
  a = reduce32(a);
  a = caddq(a);
  return a;
}
    3594:	00a78533          	add	a0,a5,a0
    3598:	00008067          	ret

0000359c <pqcrystals_dilithium5_ref_power2round>:
* Returns a1.
**************************************************/
int32_t power2round(int32_t *a0, int32_t a)  {
  int32_t a1;

  a1 = (a + (1 << (D-1)) - 1) >> D;
    359c:	000017b7          	lui	a5,0x1
    35a0:	fff78793          	addi	a5,a5,-1 # fff <pqcrystals_dilithium5_ref_pack_pk+0x83>
    35a4:	00f587b3          	add	a5,a1,a5
  *a0 = a - (a1 << D);
    35a8:	ffffe737          	lui	a4,0xffffe
    35ac:	00e7f733          	and	a4,a5,a4
    35b0:	40e585b3          	sub	a1,a1,a4
    35b4:	00b52023          	sw	a1,0(a0)
  return a1;
}
    35b8:	40d7d513          	srai	a0,a5,0xd
    35bc:	00008067          	ret

000035c0 <pqcrystals_dilithium5_ref_decompose>:
* Returns a1.
**************************************************/
int32_t decompose(int32_t *a0, int32_t a) {
  int32_t a1;

  a1  = (a + 127) >> 7;
    35c0:	07f58713          	addi	a4,a1,127
    35c4:	40775713          	srai	a4,a4,0x7
#if GAMMA2 == (Q-1)/32
  a1  = (a1*1025 + (1 << 21)) >> 22;
    35c8:	00a71793          	slli	a5,a4,0xa
    35cc:	00e787b3          	add	a5,a5,a4
    35d0:	00200737          	lui	a4,0x200
    35d4:	00e787b3          	add	a5,a5,a4
    35d8:	4167d793          	srai	a5,a5,0x16
  a1 &= 15;
    35dc:	00f7f793          	andi	a5,a5,15
#elif GAMMA2 == (Q-1)/88
  a1  = (a1*11275 + (1 << 23)) >> 24;
  a1 ^= ((43 - a1) >> 31) & a1;
#endif

  *a0  = a - a1*2*GAMMA2;
    35e0:	00a79713          	slli	a4,a5,0xa
    35e4:	40e78733          	sub	a4,a5,a4
    35e8:	00971713          	slli	a4,a4,0x9
    35ec:	00b705b3          	add	a1,a4,a1
  *a0 -= (((Q-1)/2 - *a0) >> 31) & Q;
    35f0:	003ff737          	lui	a4,0x3ff
    35f4:	40b70733          	sub	a4,a4,a1
    35f8:	007fe6b7          	lui	a3,0x7fe
    35fc:	00168693          	addi	a3,a3,1 # 7fe001 <_end_of_memory+0x7ce001>
    3600:	41f75713          	srai	a4,a4,0x1f
    3604:	00d77733          	and	a4,a4,a3
    3608:	40e585b3          	sub	a1,a1,a4
    360c:	00b52023          	sw	a1,0(a0)
  return a1;
}
    3610:	00078513          	mv	a0,a5
    3614:	00008067          	ret

00003618 <pqcrystals_dilithium5_ref_make_hint>:
*              - int32_t a1: high bits of input element
*
* Returns 1 if overflow.
**************************************************/
unsigned int make_hint(int32_t a0, int32_t a1) {
  if(a0 > GAMMA2 || a0 < -GAMMA2 || (a0 == -GAMMA2 && a1 != 0))
    3618:	000407b7          	lui	a5,0x40
    361c:	f0078793          	addi	a5,a5,-256 # 3ff00 <_end_of_memory+0xff00>
    3620:	000806b7          	lui	a3,0x80
    3624:	00f507b3          	add	a5,a0,a5
    3628:	e0068693          	addi	a3,a3,-512 # 7fe00 <_end_of_memory+0x4fe00>
unsigned int make_hint(int32_t a0, int32_t a1) {
    362c:	00050713          	mv	a4,a0
  if(a0 > GAMMA2 || a0 < -GAMMA2 || (a0 == -GAMMA2 && a1 != 0))
    3630:	02f6e063          	bltu	a3,a5,3650 <pqcrystals_dilithium5_ref_make_hint+0x38>
    3634:	fffc07b7          	lui	a5,0xfffc0
    3638:	10078793          	addi	a5,a5,256 # fffc0100 <_end_of_memory+0xfff90100>
    return 1;

  return 0;
    363c:	00000513          	li	a0,0
  if(a0 > GAMMA2 || a0 < -GAMMA2 || (a0 == -GAMMA2 && a1 != 0))
    3640:	00f70463          	beq	a4,a5,3648 <pqcrystals_dilithium5_ref_make_hint+0x30>
}
    3644:	00008067          	ret
  if(a0 > GAMMA2 || a0 < -GAMMA2 || (a0 == -GAMMA2 && a1 != 0))
    3648:	00b03533          	snez	a0,a1
    364c:	00008067          	ret
    return 1;
    3650:	00100513          	li	a0,1
}
    3654:	00008067          	ret

00003658 <pqcrystals_dilithium5_ref_use_hint>:
  a1  = (a + 127) >> 7;
    3658:	07f50713          	addi	a4,a0,127
    365c:	40775713          	srai	a4,a4,0x7
  a1  = (a1*1025 + (1 << 21)) >> 22;
    3660:	00a71793          	slli	a5,a4,0xa
    3664:	00e787b3          	add	a5,a5,a4
    3668:	00200737          	lui	a4,0x200
    366c:	00e787b3          	add	a5,a5,a4
    3670:	4167d793          	srai	a5,a5,0x16
* Arguments:   - int32_t a: input element
*              - unsigned int hint: hint bit
*
* Returns corrected high bits.
**************************************************/
int32_t use_hint(int32_t a, unsigned int hint) {
    3674:	00050693          	mv	a3,a0
  a1 &= 15;
    3678:	00f7f513          	andi	a0,a5,15
  int32_t a0, a1;

  a1 = decompose(&a0, a);
  if(hint == 0)
    367c:	04058263          	beqz	a1,36c0 <pqcrystals_dilithium5_ref_use_hint+0x68>
  *a0  = a - a1*2*GAMMA2;
    3680:	00a51793          	slli	a5,a0,0xa
    3684:	40f507b3          	sub	a5,a0,a5
    3688:	00979793          	slli	a5,a5,0x9
    368c:	00d787b3          	add	a5,a5,a3
  *a0 -= (((Q-1)/2 - *a0) >> 31) & Q;
    3690:	003ff737          	lui	a4,0x3ff
    3694:	40f70733          	sub	a4,a4,a5
    3698:	007fe6b7          	lui	a3,0x7fe
    369c:	41f75713          	srai	a4,a4,0x1f
    36a0:	00168693          	addi	a3,a3,1 # 7fe001 <_end_of_memory+0x7ce001>
    36a4:	00d77733          	and	a4,a4,a3
    return a1;

#if GAMMA2 == (Q-1)/32
  if(a0 > 0)
    36a8:	00f75863          	bge	a4,a5,36b8 <pqcrystals_dilithium5_ref_use_hint+0x60>
    return (a1 + 1) & 15;
    36ac:	00150513          	addi	a0,a0,1
    36b0:	00f57513          	andi	a0,a0,15
    36b4:	00008067          	ret
  else
    return (a1 - 1) & 15;
    36b8:	fff50513          	addi	a0,a0,-1
    36bc:	00f57513          	andi	a0,a0,15
  if(a0 > 0)
    return (a1 == 43) ?  0 : a1 + 1;
  else
    return (a1 ==  0) ? 43 : a1 - 1;
#endif
}
    36c0:	00008067          	ret

000036c4 <itoa>:
char str[21] = {0};
char* pbuf = &str[0];

void itoa(char *buf, unsigned int d, int base)
{
	int div = 1;
    36c4:	00100793          	li	a5,1
	while (d/div >= base)
    36c8:	04c5ea63          	bltu	a1,a2,371c <itoa+0x58>
		div *= base;
    36cc:	02c787b3          	mul	a5,a5,a2
	while (d/div >= base)
    36d0:	02f5d6b3          	divu	a3,a1,a5
    36d4:	fec6fce3          	bgeu	a3,a2,36cc <itoa+0x8>

	while (div != 0)
    36d8:	02078e63          	beqz	a5,3714 <itoa+0x50>
	{
		int num = d/div;
		d = d%div;
		div /= base;
		if (num > 9)
    36dc:	00900893          	li	a7,9
    36e0:	0080006f          	j	36e8 <itoa+0x24>
    36e4:	02f5d6b3          	divu	a3,a1,a5
			*(buf++) = (num-10) + 'A';
    36e8:	0ff6f713          	zext.b	a4,a3
    36ec:	03770813          	addi	a6,a4,55 # 3ff037 <_end_of_memory+0x3cf037>
		else
			*(buf++) = num + '0';
    36f0:	03070713          	addi	a4,a4,48
			*(buf++) = (num-10) + 'A';
    36f4:	00150513          	addi	a0,a0,1
			*(buf++) = num + '0';
    36f8:	0ff77713          	zext.b	a4,a4
		d = d%div;
    36fc:	02f5f5b3          	remu	a1,a1,a5
		div /= base;
    3700:	02c7c7b3          	div	a5,a5,a2
		if (num > 9)
    3704:	00d8d463          	bge	a7,a3,370c <itoa+0x48>
			*(buf++) = (num-10) + 'A';
    3708:	0ff87713          	zext.b	a4,a6
    370c:	fee50fa3          	sb	a4,-1(a0)
	while (div != 0)
    3710:	fc079ae3          	bnez	a5,36e4 <itoa+0x20>
	}
  *(buf++) = '\0';
    3714:	00050023          	sb	zero,0(a0)
}
    3718:	00008067          	ret
    371c:	00058693          	mv	a3,a1
    3720:	fbdff06f          	j	36dc <itoa+0x18>

00003724 <print_runtime>:

void print_runtime(unsigned int cycle_start, unsigned int cycle_end)
{
  unsigned int clock_cycles = cycle_end - cycle_start;

  itoa(pbuf, cycle_start, 10);
    3724:	00005817          	auipc	a6,0x5
    3728:	6f080813          	addi	a6,a6,1776 # 8e14 <pbuf>
	while (d/div >= base)
    372c:	00900793          	li	a5,9
  itoa(pbuf, cycle_start, 10);
    3730:	00082883          	lw	a7,0(a6)
  unsigned int clock_cycles = cycle_end - cycle_start;
    3734:	40a58633          	sub	a2,a1,a0
	while (d/div >= base)
    3738:	24a7f063          	bgeu	a5,a0,3978 <print_runtime+0x254>
	int div = 1;
    373c:	00100793          	li	a5,1
	while (d/div >= base)
    3740:	00900693          	li	a3,9
		div *= base;
    3744:	00279713          	slli	a4,a5,0x2
    3748:	00f707b3          	add	a5,a4,a5
    374c:	00179793          	slli	a5,a5,0x1
	while (d/div >= base)
    3750:	02f55733          	divu	a4,a0,a5
    3754:	fee6e8e3          	bltu	a3,a4,3744 <print_runtime+0x20>
		div /= base;
    3758:	00a00e93          	li	t4,10
		if (num > 9)
    375c:	00900e13          	li	t3,9
		int num = d/div;
    3760:	02f55333          	divu	t1,a0,a5
			*(buf++) = (num-10) + 'A';
    3764:	00188893          	addi	a7,a7,1
    3768:	0ff37693          	zext.b	a3,t1
    376c:	03768713          	addi	a4,a3,55
		d = d%div;
    3770:	02f57533          	remu	a0,a0,a5
			*(buf++) = num + '0';
    3774:	03068693          	addi	a3,a3,48
			*(buf++) = (num-10) + 'A';
    3778:	0ff77713          	zext.b	a4,a4
		div /= base;
    377c:	03d7c7b3          	div	a5,a5,t4
		if (num > 9)
    3780:	006e4463          	blt	t3,t1,3788 <print_runtime+0x64>
			*(buf++) = num + '0';
    3784:	0ff6f713          	zext.b	a4,a3
    3788:	fee88fa3          	sb	a4,-1(a7)
	while (div != 0)
    378c:	fc079ae3          	bnez	a5,3760 <print_runtime+0x3c>
  *(buf++) = '\0';
    3790:	00088023          	sb	zero,0(a7)
  while (XUartChanged_IsTransmitFull(BaseAddress));
  X_mWriteReg(BaseAddress, PS7_UART_DATA_OUT_REGISTER, Data);
}

void uart_send_string(char *ptr) {
  while (*ptr) {
    3794:	02000513          	li	a0,32
  *(buf++) = '\0';
    3798:	00005697          	auipc	a3,0x5
    379c:	64468693          	addi	a3,a3,1604 # 8ddc <__clz_tab+0x200>
    while (XUartChanged_IsTransmitFull(BASE_ADDRESS_U));
    37a0:	e0001737          	lui	a4,0xe0001
    37a4:	02c72783          	lw	a5,44(a4) # e000102c <_end_of_memory+0xdffd102c>
    37a8:	0107f793          	andi	a5,a5,16
    37ac:	fe079ce3          	bnez	a5,37a4 <print_runtime+0x80>
    X_mWriteReg(BASE_ADDRESS_U, PS7_UART_DATA_OUT_REGISTER, *ptr++);
    37b0:	00168693          	addi	a3,a3,1
    37b4:	02a72823          	sw	a0,48(a4)
  while (*ptr) {
    37b8:	0006c503          	lbu	a0,0(a3)
    37bc:	fe0514e3          	bnez	a0,37a4 <print_runtime+0x80>
    37c0:	00005517          	auipc	a0,0x5
    37c4:	68850513          	addi	a0,a0,1672 # 8e48 <str>
    37c8:	00054683          	lbu	a3,0(a0)
    37cc:	00050893          	mv	a7,a0
    while (XUartChanged_IsTransmitFull(BASE_ADDRESS_U));
    37d0:	e0001737          	lui	a4,0xe0001
  while (*ptr) {
    37d4:	02068063          	beqz	a3,37f4 <print_runtime+0xd0>
    while (XUartChanged_IsTransmitFull(BASE_ADDRESS_U));
    37d8:	02c72783          	lw	a5,44(a4) # e000102c <_end_of_memory+0xdffd102c>
    37dc:	0107f793          	andi	a5,a5,16
    37e0:	fe079ce3          	bnez	a5,37d8 <print_runtime+0xb4>
    X_mWriteReg(BASE_ADDRESS_U, PS7_UART_DATA_OUT_REGISTER, *ptr++);
    37e4:	00188893          	addi	a7,a7,1
    37e8:	02d72823          	sw	a3,48(a4)
  while (*ptr) {
    37ec:	0008c683          	lbu	a3,0(a7)
    37f0:	fe0694e3          	bnez	a3,37d8 <print_runtime+0xb4>
	while (d/div >= base)
    37f4:	00900713          	li	a4,9
  itoa(pbuf, cycle_end, 10);
    37f8:	00082883          	lw	a7,0(a6)
	int div = 1;
    37fc:	00100793          	li	a5,1
	while (d/div >= base)
    3800:	00900693          	li	a3,9
    3804:	00b77c63          	bgeu	a4,a1,381c <print_runtime+0xf8>
		div *= base;
    3808:	00279713          	slli	a4,a5,0x2
    380c:	00f707b3          	add	a5,a4,a5
    3810:	00179793          	slli	a5,a5,0x1
	while (d/div >= base)
    3814:	02f5d733          	divu	a4,a1,a5
    3818:	fee6e8e3          	bltu	a3,a4,3808 <print_runtime+0xe4>
		div /= base;
    381c:	00a00e93          	li	t4,10
		if (num > 9)
    3820:	00900e13          	li	t3,9
		int num = d/div;
    3824:	02f5d333          	divu	t1,a1,a5
			*(buf++) = (num-10) + 'A';
    3828:	00188893          	addi	a7,a7,1
    382c:	0ff37693          	zext.b	a3,t1
    3830:	03768713          	addi	a4,a3,55
		d = d%div;
    3834:	02f5f5b3          	remu	a1,a1,a5
			*(buf++) = num + '0';
    3838:	03068693          	addi	a3,a3,48
			*(buf++) = (num-10) + 'A';
    383c:	0ff77713          	zext.b	a4,a4
		div /= base;
    3840:	03d7c7b3          	div	a5,a5,t4
		if (num > 9)
    3844:	006e4463          	blt	t3,t1,384c <print_runtime+0x128>
			*(buf++) = num + '0';
    3848:	0ff6f713          	zext.b	a4,a3
    384c:	fee88fa3          	sb	a4,-1(a7)
	while (div != 0)
    3850:	fc079ae3          	bnez	a5,3824 <print_runtime+0x100>
  *(buf++) = '\0';
    3854:	00088023          	sb	zero,0(a7)
  while (*ptr) {
    3858:	02000593          	li	a1,32
  *(buf++) = '\0';
    385c:	00005697          	auipc	a3,0x5
    3860:	59068693          	addi	a3,a3,1424 # 8dec <__clz_tab+0x210>
    while (XUartChanged_IsTransmitFull(BASE_ADDRESS_U));
    3864:	e0001737          	lui	a4,0xe0001
    3868:	02c72783          	lw	a5,44(a4) # e000102c <_end_of_memory+0xdffd102c>
    386c:	0107f793          	andi	a5,a5,16
    3870:	fe079ce3          	bnez	a5,3868 <print_runtime+0x144>
    X_mWriteReg(BASE_ADDRESS_U, PS7_UART_DATA_OUT_REGISTER, *ptr++);
    3874:	00168693          	addi	a3,a3,1
    3878:	02b72823          	sw	a1,48(a4)
  while (*ptr) {
    387c:	0006c583          	lbu	a1,0(a3)
    3880:	fe0594e3          	bnez	a1,3868 <print_runtime+0x144>
    3884:	00054683          	lbu	a3,0(a0)
    3888:	00005597          	auipc	a1,0x5
    388c:	5c058593          	addi	a1,a1,1472 # 8e48 <str>
    while (XUartChanged_IsTransmitFull(BASE_ADDRESS_U));
    3890:	e0001737          	lui	a4,0xe0001
  while (*ptr) {
    3894:	02068063          	beqz	a3,38b4 <print_runtime+0x190>
    while (XUartChanged_IsTransmitFull(BASE_ADDRESS_U));
    3898:	02c72783          	lw	a5,44(a4) # e000102c <_end_of_memory+0xdffd102c>
    389c:	0107f793          	andi	a5,a5,16
    38a0:	fe079ce3          	bnez	a5,3898 <print_runtime+0x174>
    X_mWriteReg(BASE_ADDRESS_U, PS7_UART_DATA_OUT_REGISTER, *ptr++);
    38a4:	00158593          	addi	a1,a1,1
    38a8:	02d72823          	sw	a3,48(a4)
  while (*ptr) {
    38ac:	0005c683          	lbu	a3,0(a1)
    38b0:	fe0694e3          	bnez	a3,3898 <print_runtime+0x174>
	while (d/div >= base)
    38b4:	00900713          	li	a4,9
  itoa(pbuf, clock_cycles, 10);
    38b8:	00082583          	lw	a1,0(a6)
	int div = 1;
    38bc:	00100793          	li	a5,1
	while (d/div >= base)
    38c0:	00900693          	li	a3,9
    38c4:	00c77c63          	bgeu	a4,a2,38dc <print_runtime+0x1b8>
		div *= base;
    38c8:	00279713          	slli	a4,a5,0x2
    38cc:	00f707b3          	add	a5,a4,a5
    38d0:	00179793          	slli	a5,a5,0x1
	while (d/div >= base)
    38d4:	02f65733          	divu	a4,a2,a5
    38d8:	fee6e8e3          	bltu	a3,a4,38c8 <print_runtime+0x1a4>
		div /= base;
    38dc:	00a00313          	li	t1,10
		if (num > 9)
    38e0:	00900893          	li	a7,9
		int num = d/div;
    38e4:	02f65833          	divu	a6,a2,a5
			*(buf++) = (num-10) + 'A';
    38e8:	00158593          	addi	a1,a1,1
    38ec:	0ff87693          	zext.b	a3,a6
    38f0:	03768713          	addi	a4,a3,55
		d = d%div;
    38f4:	02f67633          	remu	a2,a2,a5
			*(buf++) = num + '0';
    38f8:	03068693          	addi	a3,a3,48
			*(buf++) = (num-10) + 'A';
    38fc:	0ff77713          	zext.b	a4,a4
		div /= base;
    3900:	0267c7b3          	div	a5,a5,t1
		if (num > 9)
    3904:	0108c463          	blt	a7,a6,390c <print_runtime+0x1e8>
			*(buf++) = num + '0';
    3908:	0ff6f713          	zext.b	a4,a3
    390c:	fee58fa3          	sb	a4,-1(a1)
	while (div != 0)
    3910:	fc079ae3          	bnez	a5,38e4 <print_runtime+0x1c0>
  *(buf++) = '\0';
    3914:	00058023          	sb	zero,0(a1)
  while (*ptr) {
    3918:	02000613          	li	a2,32
  *(buf++) = '\0';
    391c:	00005697          	auipc	a3,0x5
    3920:	4e068693          	addi	a3,a3,1248 # 8dfc <__clz_tab+0x220>
    while (XUartChanged_IsTransmitFull(BASE_ADDRESS_U));
    3924:	e0001737          	lui	a4,0xe0001
    3928:	02c72783          	lw	a5,44(a4) # e000102c <_end_of_memory+0xdffd102c>
    392c:	0107f793          	andi	a5,a5,16
    3930:	fe079ce3          	bnez	a5,3928 <print_runtime+0x204>
    X_mWriteReg(BASE_ADDRESS_U, PS7_UART_DATA_OUT_REGISTER, *ptr++);
    3934:	00168693          	addi	a3,a3,1
    3938:	02c72823          	sw	a2,48(a4)
  while (*ptr) {
    393c:	0006c603          	lbu	a2,0(a3)
    3940:	fe0614e3          	bnez	a2,3928 <print_runtime+0x204>
    3944:	00054683          	lbu	a3,0(a0)
    3948:	00005617          	auipc	a2,0x5
    394c:	50060613          	addi	a2,a2,1280 # 8e48 <str>
    while (XUartChanged_IsTransmitFull(BASE_ADDRESS_U));
    3950:	e0001737          	lui	a4,0xe0001
  while (*ptr) {
    3954:	02068063          	beqz	a3,3974 <print_runtime+0x250>
    while (XUartChanged_IsTransmitFull(BASE_ADDRESS_U));
    3958:	02c72783          	lw	a5,44(a4) # e000102c <_end_of_memory+0xdffd102c>
    395c:	0107f793          	andi	a5,a5,16
    3960:	fe079ce3          	bnez	a5,3958 <print_runtime+0x234>
    X_mWriteReg(BASE_ADDRESS_U, PS7_UART_DATA_OUT_REGISTER, *ptr++);
    3964:	00160613          	addi	a2,a2,1
    3968:	02d72823          	sw	a3,48(a4)
  while (*ptr) {
    396c:	00064683          	lbu	a3,0(a2)
    3970:	fe0694e3          	bnez	a3,3958 <print_runtime+0x234>
}
    3974:	00008067          	ret
	int div = 1;
    3978:	00100793          	li	a5,1
    397c:	dddff06f          	j	3758 <print_runtime+0x34>

00003980 <XUARTChanged_SendByte>:
  while (XUartChanged_IsTransmitFull(BaseAddress));
    3980:	02c50713          	addi	a4,a0,44
    3984:	00072783          	lw	a5,0(a4)
    3988:	0107f793          	andi	a5,a5,16
    398c:	fe079ce3          	bnez	a5,3984 <XUARTChanged_SendByte+0x4>
  X_mWriteReg(BaseAddress, PS7_UART_DATA_OUT_REGISTER, Data);
    3990:	02b52823          	sw	a1,48(a0)
}
    3994:	00008067          	ret

00003998 <uart_send_string>:
  while (*ptr) {
    3998:	00054683          	lbu	a3,0(a0)
    399c:	02068263          	beqz	a3,39c0 <uart_send_string+0x28>
    while (XUartChanged_IsTransmitFull(BASE_ADDRESS_U));
    39a0:	e0001737          	lui	a4,0xe0001
    39a4:	02c72783          	lw	a5,44(a4) # e000102c <_end_of_memory+0xdffd102c>
    39a8:	0107f793          	andi	a5,a5,16
    39ac:	fe079ce3          	bnez	a5,39a4 <uart_send_string+0xc>
    X_mWriteReg(BASE_ADDRESS_U, PS7_UART_DATA_OUT_REGISTER, *ptr++);
    39b0:	00150513          	addi	a0,a0,1
    39b4:	02d72823          	sw	a3,48(a4)
  while (*ptr) {
    39b8:	00054683          	lbu	a3,0(a0)
    39bc:	fe0694e3          	bnez	a3,39a4 <uart_send_string+0xc>
  }
}
    39c0:	00008067          	ret

000039c4 <XUART_Reset>:

void XUART_Reset(void)
{
  X_mWriteReg(BASE_ADDRESS_U, PS7_UART_CONTROL_REGISTER, UART_CR_RESET_TX_RX); // Ctrl_reg disable interrupts, reset FIFOs
    39c4:	e00017b7          	lui	a5,0xe0001
    39c8:	00300713          	li	a4,3
    39cc:	00e7a023          	sw	a4,0(a5) # e0001000 <_end_of_memory+0xdffd1000>
}
    39d0:	00008067          	ret

000039d4 <KeccakF1600_StatePermute>:
        uint64_t Eka, Eke, Eki, Eko, Eku;
        uint64_t Ema, Eme, Emi, Emo, Emu;
        uint64_t Esa, Ese, Esi, Eso, Esu;

        //copyFromState(A, state)
        Aba = state[ 0];
    39d4:	00052783          	lw	a5,0(a0)
{
    39d8:	e8010113          	addi	sp,sp,-384
    39dc:	17212a23          	sw	s2,372(sp)
        Aba = state[ 0];
    39e0:	0af12823          	sw	a5,176(sp)
    39e4:	00452783          	lw	a5,4(a0)
{
    39e8:	17312823          	sw	s3,368(sp)
    39ec:	17512423          	sw	s5,360(sp)
        Aba = state[ 0];
    39f0:	0af12a23          	sw	a5,180(sp)
        Abe = state[ 1];
    39f4:	00852783          	lw	a5,8(a0)
{
    39f8:	17612223          	sw	s6,356(sp)
    39fc:	17712023          	sw	s7,352(sp)
        Abe = state[ 1];
    3a00:	00f12823          	sw	a5,16(sp)
    3a04:	00c52783          	lw	a5,12(a0)
{
    3a08:	15812e23          	sw	s8,348(sp)
    3a0c:	15912c23          	sw	s9,344(sp)
        Abe = state[ 1];
    3a10:	0af12c23          	sw	a5,184(sp)
        Abi = state[ 2];
    3a14:	01052783          	lw	a5,16(a0)
{
    3a18:	15a12a23          	sw	s10,340(sp)
    3a1c:	15b12823          	sw	s11,336(sp)
        Abi = state[ 2];
    3a20:	0af12e23          	sw	a5,188(sp)
    3a24:	01452783          	lw	a5,20(a0)
{
    3a28:	16812e23          	sw	s0,380(sp)
    3a2c:	16912c23          	sw	s1,376(sp)
        Abi = state[ 2];
    3a30:	0cf12023          	sw	a5,192(sp)
        Abo = state[ 3];
    3a34:	01852783          	lw	a5,24(a0)
{
    3a38:	17412623          	sw	s4,364(sp)
        Abo = state[ 3];
    3a3c:	0cf12223          	sw	a5,196(sp)
    3a40:	01c52783          	lw	a5,28(a0)
    3a44:	0cf12423          	sw	a5,200(sp)
        Abu = state[ 4];
    3a48:	02052783          	lw	a5,32(a0)
    3a4c:	0cf12623          	sw	a5,204(sp)
    3a50:	02452783          	lw	a5,36(a0)
    3a54:	0cf12823          	sw	a5,208(sp)
        Aga = state[ 5];
    3a58:	02852783          	lw	a5,40(a0)
        Age = state[ 6];
    3a5c:	03052d83          	lw	s11,48(a0)
        Agi = state[ 7];
        Ago = state[ 8];
        Agu = state[ 9];
        Aka = state[10];
        Ake = state[11];
        Aki = state[12];
    3a60:	06052c83          	lw	s9,96(a0)
        Aga = state[ 5];
    3a64:	0cf12a23          	sw	a5,212(sp)
    3a68:	02c52783          	lw	a5,44(a0)
        Aki = state[12];
    3a6c:	06452c03          	lw	s8,100(a0)
        Aga = state[ 5];
    3a70:	0cf12c23          	sw	a5,216(sp)
        Age = state[ 6];
    3a74:	03452783          	lw	a5,52(a0)
    3a78:	00f12a23          	sw	a5,20(sp)
        Agi = state[ 7];
    3a7c:	03852783          	lw	a5,56(a0)
    3a80:	00f12e23          	sw	a5,28(sp)
    3a84:	03c52783          	lw	a5,60(a0)
    3a88:	02f12023          	sw	a5,32(sp)
        Ago = state[ 8];
    3a8c:	04052783          	lw	a5,64(a0)
    3a90:	0cf12e23          	sw	a5,220(sp)
    3a94:	04452783          	lw	a5,68(a0)
    3a98:	0ef12023          	sw	a5,224(sp)
        Agu = state[ 9];
    3a9c:	04852783          	lw	a5,72(a0)
    3aa0:	00f12c23          	sw	a5,24(sp)
    3aa4:	04c52783          	lw	a5,76(a0)
    3aa8:	02f12223          	sw	a5,36(sp)
        Aka = state[10];
    3aac:	05052783          	lw	a5,80(a0)
    3ab0:	02f12423          	sw	a5,40(sp)
    3ab4:	05452783          	lw	a5,84(a0)
    3ab8:	02f12623          	sw	a5,44(sp)
        Ake = state[11];
    3abc:	05852783          	lw	a5,88(a0)
    3ac0:	0ef12223          	sw	a5,228(sp)
    3ac4:	05c52783          	lw	a5,92(a0)
    3ac8:	0ef12423          	sw	a5,232(sp)
        Ako = state[13];
    3acc:	06852783          	lw	a5,104(a0)
    3ad0:	02f12823          	sw	a5,48(sp)
    3ad4:	06c52783          	lw	a5,108(a0)
    3ad8:	02f12a23          	sw	a5,52(sp)
        Aku = state[14];
    3adc:	07052783          	lw	a5,112(a0)
        Ama = state[15];
        Ame = state[16];
        Ami = state[17];
        Amo = state[18];
    3ae0:	09052b03          	lw	s6,144(a0)
    3ae4:	09452983          	lw	s3,148(a0)
        Aku = state[14];
    3ae8:	0ef12623          	sw	a5,236(sp)
    3aec:	07452783          	lw	a5,116(a0)
    3af0:	000b0b93          	mv	s7,s6
    3af4:	00098d13          	mv	s10,s3
    3af8:	0ef12823          	sw	a5,240(sp)
        Ama = state[15];
    3afc:	07852783          	lw	a5,120(a0)
    3b00:	000c0b13          	mv	s6,s8
    3b04:	0ef12a23          	sw	a5,244(sp)
    3b08:	07c52783          	lw	a5,124(a0)
    3b0c:	0ef12c23          	sw	a5,248(sp)
        Ame = state[16];
    3b10:	08052783          	lw	a5,128(a0)
    3b14:	02f12c23          	sw	a5,56(sp)
    3b18:	08452783          	lw	a5,132(a0)
    3b1c:	02f12e23          	sw	a5,60(sp)
        Ami = state[17];
    3b20:	08852783          	lw	a5,136(a0)
    3b24:	04f12e23          	sw	a5,92(sp)
    3b28:	08c52783          	lw	a5,140(a0)
    3b2c:	06f12023          	sw	a5,96(sp)
        Amu = state[19];
    3b30:	09852783          	lw	a5,152(a0)
    3b34:	04f12023          	sw	a5,64(sp)
    3b38:	09c52783          	lw	a5,156(a0)
    3b3c:	04f12223          	sw	a5,68(sp)
        Asa = state[20];
    3b40:	0a052783          	lw	a5,160(a0)
    3b44:	04f12423          	sw	a5,72(sp)
    3b48:	0a452783          	lw	a5,164(a0)
    3b4c:	04f12623          	sw	a5,76(sp)
        Ase = state[21];
    3b50:	0a852783          	lw	a5,168(a0)
    3b54:	06f12623          	sw	a5,108(sp)
    3b58:	0ac52783          	lw	a5,172(a0)
    3b5c:	06f12823          	sw	a5,112(sp)
        Asi = state[22];
    3b60:	0b052783          	lw	a5,176(a0)
    3b64:	04f12823          	sw	a5,80(sp)
    3b68:	0b452783          	lw	a5,180(a0)
        Aso = state[23];
        Asu = state[24];
    3b6c:	0c052903          	lw	s2,192(a0)
    3b70:	0c452a83          	lw	s5,196(a0)
        Asi = state[22];
    3b74:	04f12a23          	sw	a5,84(sp)
        Aso = state[23];
    3b78:	0b852783          	lw	a5,184(a0)
    3b7c:	0fb12e23          	sw	s11,252(sp)
    3b80:	14a12623          	sw	a0,332(sp)
    3b84:	06f12223          	sw	a5,100(sp)
    3b88:	0bc52783          	lw	a5,188(a0)
    3b8c:	00090d93          	mv	s11,s2
    3b90:	000c8913          	mv	s2,s9
    3b94:	06f12423          	sw	a5,104(sp)

        for(round = 0; round < NROUNDS; round += 2) {
    3b98:	00005797          	auipc	a5,0x5
    3b9c:	f4878793          	addi	a5,a5,-184 # 8ae0 <pqcrystals_dilithium_fips202_ref_KeccakF_RoundConstants>
    3ba0:	00f12623          	sw	a5,12(sp)
            //    prepareTheta
            BCa = Aba^Aga^Aka^Ama^Asa;
    3ba4:	0b012783          	lw	a5,176(sp)
    3ba8:	0d412703          	lw	a4,212(sp)
    3bac:	0b412683          	lw	a3,180(sp)
            BCe = Abe^Age^Ake^Ame^Ase;
            BCi = Abi^Agi^Aki^Ami^Asi;
    3bb0:	0bc12303          	lw	t1,188(sp)
    3bb4:	01c12e03          	lw	t3,28(sp)
    3bb8:	0c012e83          	lw	t4,192(sp)
    3bbc:	02012f03          	lw	t5,32(sp)
            BCo = Abo^Ago^Ako^Amo^Aso;
    3bc0:	0c412383          	lw	t2,196(sp)
    3bc4:	0dc12403          	lw	s0,220(sp)
            BCa = Aba^Aga^Aka^Ama^Asa;
    3bc8:	0d812603          	lw	a2,216(sp)
            BCe = Abe^Age^Ake^Ame^Ase;
    3bcc:	01012503          	lw	a0,16(sp)
    3bd0:	0b812803          	lw	a6,184(sp)
    3bd4:	01412883          	lw	a7,20(sp)
            BCu = Abu^Agu^Aku^Amu^Asu;
    3bd8:	0cc12c03          	lw	s8,204(sp)
    3bdc:	01812c83          	lw	s9,24(sp)
            BCa = Aba^Aga^Aka^Ama^Asa;
    3be0:	02c12283          	lw	t0,44(sp)
    3be4:	00e7c5b3          	xor	a1,a5,a4
            BCe = Abe^Age^Ake^Ame^Ase;
    3be8:	0fc12703          	lw	a4,252(sp)
            BCo = Abo^Ago^Ako^Amo^Aso;
    3bec:	0c812483          	lw	s1,200(sp)
    3bf0:	0e012983          	lw	s3,224(sp)
            BCa = Aba^Aga^Aka^Ama^Asa;
    3bf4:	02812f83          	lw	t6,40(sp)
            BCi = Abi^Agi^Aki^Ami^Asi;
    3bf8:	01c347b3          	xor	a5,t1,t3
            BCa = Aba^Aga^Aka^Ama^Asa;
    3bfc:	00c6c633          	xor	a2,a3,a2
            BCi = Abi^Agi^Aki^Ami^Asi;
    3c00:	01eece33          	xor	t3,t4,t5
            BCo = Abo^Ago^Ako^Amo^Aso;
    3c04:	0083c333          	xor	t1,t2,s0
            BCu = Abu^Agu^Aku^Amu^Asu;
    3c08:	0d012e83          	lw	t4,208(sp)
    3c0c:	02412f03          	lw	t5,36(sp)
            BCe = Abe^Age^Ake^Ame^Ase;
    3c10:	0e812403          	lw	s0,232(sp)
    3c14:	0e412383          	lw	t2,228(sp)
    3c18:	00e546b3          	xor	a3,a0,a4
            BCa = Aba^Aga^Aka^Ama^Asa;
    3c1c:	00564633          	xor	a2,a2,t0
            BCe = Abe^Age^Ake^Ame^Ase;
    3c20:	01184733          	xor	a4,a6,a7
    3c24:	03c12283          	lw	t0,60(sp)
            BCu = Abu^Agu^Aku^Amu^Asu;
    3c28:	019c4833          	xor	a6,s8,s9
    3c2c:	0f012c83          	lw	s9,240(sp)
    3c30:	0ec12c03          	lw	s8,236(sp)
            BCo = Abo^Ago^Ako^Amo^Aso;
    3c34:	0134c8b3          	xor	a7,s1,s3
            BCu = Abu^Agu^Aku^Amu^Asu;
    3c38:	01eec533          	xor	a0,t4,t5
            BCo = Abo^Ago^Ako^Amo^Aso;
    3c3c:	03012483          	lw	s1,48(sp)
    3c40:	03412983          	lw	s3,52(sp)
            BCa = Aba^Aga^Aka^Ama^Asa;
    3c44:	0f412e83          	lw	t4,244(sp)
    3c48:	0f812f03          	lw	t5,248(sp)
    3c4c:	01f5c5b3          	xor	a1,a1,t6
            BCe = Abe^Age^Ake^Ame^Ase;
    3c50:	0076c6b3          	xor	a3,a3,t2
    3c54:	03812f83          	lw	t6,56(sp)
    3c58:	00874733          	xor	a4,a4,s0
            BCi = Abi^Agi^Aki^Ami^Asi;
    3c5c:	05c12383          	lw	t2,92(sp)
    3c60:	06012403          	lw	s0,96(sp)
            BCu = Abu^Agu^Aku^Amu^Asu;
    3c64:	01954533          	xor	a0,a0,s9
            BCe = Abe^Age^Ake^Ame^Ase;
    3c68:	00574733          	xor	a4,a4,t0
            BCa = Aba^Aga^Aka^Ama^Asa;
    3c6c:	04c12c83          	lw	s9,76(sp)
            BCi = Abi^Agi^Aki^Ami^Asi;
    3c70:	05412283          	lw	t0,84(sp)
    3c74:	016e4e33          	xor	t3,t3,s6
    3c78:	008e4e33          	xor	t3,t3,s0
            BCa = Aba^Aga^Aka^Ama^Asa;
    3c7c:	01d5c5b3          	xor	a1,a1,t4
    3c80:	01e64633          	xor	a2,a2,t5
            BCe = Abe^Age^Ake^Ame^Ase;
    3c84:	06c12e83          	lw	t4,108(sp)
    3c88:	07012f03          	lw	t5,112(sp)
            BCa = Aba^Aga^Aka^Ama^Asa;
    3c8c:	01964633          	xor	a2,a2,s9
            BCu = Abu^Agu^Aku^Amu^Asu;
    3c90:	01884833          	xor	a6,a6,s8
            BCi = Abi^Agi^Aki^Ami^Asi;
    3c94:	005e4cb3          	xor	s9,t3,t0
            BCa = Aba^Aga^Aka^Ama^Asa;
    3c98:	04812c03          	lw	s8,72(sp)
            BCo = Abo^Ago^Ako^Amo^Aso;
    3c9c:	06412e03          	lw	t3,100(sp)
    3ca0:	00934333          	xor	t1,t1,s1
            BCe = Abe^Age^Ake^Ame^Ase;
    3ca4:	01f6c6b3          	xor	a3,a3,t6
            BCu = Abu^Agu^Aku^Amu^Asu;
    3ca8:	04012483          	lw	s1,64(sp)
            BCi = Abi^Agi^Aki^Ami^Asi;
    3cac:	05012f83          	lw	t6,80(sp)
            BCe = Abe^Age^Ake^Ame^Ase;
    3cb0:	01e74733          	xor	a4,a4,t5
    3cb4:	01d6c6b3          	xor	a3,a3,t4
            BCo = Abo^Ago^Ako^Amo^Aso;
    3cb8:	01734333          	xor	t1,t1,s7
            BCi = Abi^Agi^Aki^Ami^Asi;
    3cbc:	0127c7b3          	xor	a5,a5,s2
            BCa = Aba^Aga^Aka^Ama^Asa;
    3cc0:	0185c5b3          	xor	a1,a1,s8

            //thetaRhoPiChiIotaPrepareTheta(round, A, E)
            Da = BCu^ROL(BCe, 1);
    3cc4:	00171a13          	slli	s4,a4,0x1
            BCo = Abo^Ago^Ako^Amo^Aso;
    3cc8:	01c34c33          	xor	s8,t1,t3
    3ccc:	0138c8b3          	xor	a7,a7,s3
    3cd0:	06812303          	lw	t1,104(sp)
            BCu = Abu^Agu^Aku^Amu^Asu;
    3cd4:	04412983          	lw	s3,68(sp)
            BCi = Abi^Agi^Aki^Ami^Asi;
    3cd8:	0077c7b3          	xor	a5,a5,t2
            Da = BCu^ROL(BCe, 1);
    3cdc:	01f6d413          	srli	s0,a3,0x1f
            BCi = Abi^Agi^Aki^Ami^Asi;
    3ce0:	01f7c7b3          	xor	a5,a5,t6
            Da = BCu^ROL(BCe, 1);
    3ce4:	01446433          	or	s0,s0,s4
            BCu = Abu^Agu^Aku^Amu^Asu;
    3ce8:	00984833          	xor	a6,a6,s1
            Da = BCu^ROL(BCe, 1);
    3cec:	00169a13          	slli	s4,a3,0x1
    3cf0:	01f75493          	srli	s1,a4,0x1f
            BCo = Abo^Ago^Ako^Amo^Aso;
    3cf4:	01a8c8b3          	xor	a7,a7,s10
            Da = BCu^ROL(BCe, 1);
    3cf8:	0144e4b3          	or	s1,s1,s4
            De = BCa^ROL(BCi, 1);
    3cfc:	01f7d293          	srli	t0,a5,0x1f
    3d00:	001c9a13          	slli	s4,s9,0x1
    3d04:	0142e2b3          	or	t0,t0,s4
            BCu = Abu^Agu^Aku^Amu^Asu;
    3d08:	01354533          	xor	a0,a0,s3
            De = BCa^ROL(BCi, 1);
    3d0c:	01fcda13          	srli	s4,s9,0x1f
            BCo = Abo^Ago^Ako^Amo^Aso;
    3d10:	0068c9b3          	xor	s3,a7,t1
            De = BCa^ROL(BCi, 1);
    3d14:	00179393          	slli	t2,a5,0x1
    3d18:	007a63b3          	or	t2,s4,t2
            Di = BCe^ROL(BCo, 1);
    3d1c:	01fc5f13          	srli	t5,s8,0x1f
    3d20:	00199a13          	slli	s4,s3,0x1
            BCu = Abu^Agu^Aku^Amu^Asu;
    3d24:	01b84833          	xor	a6,a6,s11
    3d28:	01554533          	xor	a0,a0,s5
            Di = BCe^ROL(BCo, 1);
    3d2c:	001c1f93          	slli	t6,s8,0x1
    3d30:	014f6f33          	or	t5,t5,s4
    3d34:	01f9da13          	srli	s4,s3,0x1f
    3d38:	01fa6fb3          	or	t6,s4,t6
            Do = BCi^ROL(BCu, 1);
    3d3c:	00151e13          	slli	t3,a0,0x1
    3d40:	01f85a13          	srli	s4,a6,0x1f
    3d44:	01f55e93          	srli	t4,a0,0x1f
    3d48:	01ca6e33          	or	t3,s4,t3
    3d4c:	00181a13          	slli	s4,a6,0x1
            Du = BCo^ROL(BCa, 1);
    3d50:	00161893          	slli	a7,a2,0x1
    3d54:	01f65313          	srli	t1,a2,0x1f
            Do = BCi^ROL(BCu, 1);
    3d58:	014eeeb3          	or	t4,t4,s4
            De = BCa^ROL(BCi, 1);
    3d5c:	00c2c633          	xor	a2,t0,a2
            Du = BCo^ROL(BCa, 1);
    3d60:	01f5da13          	srli	s4,a1,0x1f

            Aba ^= Da;
            BCa = Aba;
            Age ^= De;
    3d64:	01412283          	lw	t0,20(sp)
            Du = BCo^ROL(BCa, 1);
    3d68:	011a68b3          	or	a7,s4,a7
    3d6c:	0138c8b3          	xor	a7,a7,s3
            Age ^= De;
    3d70:	005649b3          	xor	s3,a2,t0
            BCe = ROL(Age, 44);
            Aki ^= Di;
            BCi = ROL(Aki, 43);
            Amo ^= Do;
            BCo = ROL(Amo, 21);
            Asu ^= Du;
    3d74:	0158c2b3          	xor	t0,a7,s5
            Ebe =   BCe ^((~BCi)&  BCo );
            Ebi =   BCi ^((~BCo)&  BCu );
            Ebo =   BCo ^((~BCu)&  BCa );
            Ebu =   BCu ^((~BCa)&  BCe );

            Abo ^= Do;
    3d78:	0c412a83          	lw	s5,196(sp)
            Do = BCi^ROL(BCu, 1);
    3d7c:	00feceb3          	xor	t4,t4,a5
    3d80:	019e4e33          	xor	t3,t3,s9
            Du = BCo^ROL(BCa, 1);
    3d84:	00159a13          	slli	s4,a1,0x1
            Abo ^= Do;
    3d88:	000e8c93          	mv	s9,t4
            De = BCa^ROL(BCi, 1);
    3d8c:	00b3c5b3          	xor	a1,t2,a1
            Amo ^= Do;
    3d90:	017ec3b3          	xor	t2,t4,s7
            Abo ^= Do;
    3d94:	015eceb3          	xor	t4,t4,s5
    3d98:	0c812a83          	lw	s5,200(sp)
            Di = BCe^ROL(BCo, 1);
    3d9c:	00ef4f33          	xor	t5,t5,a4
            Du = BCo^ROL(BCa, 1);
    3da0:	01436333          	or	t1,t1,s4
    3da4:	01834333          	xor	t1,t1,s8
            Da = BCu^ROL(BCe, 1);
    3da8:	0104c833          	xor	a6,s1,a6
            Aki ^= Di;
    3dac:	000f0c13          	mv	s8,t5
    3db0:	016f44b3          	xor	s1,t5,s6
            Abo ^= Do;
    3db4:	015e4f33          	xor	t5,t3,s5
            BCa = ROL(Abo, 28);
            Agu ^= Du;
    3db8:	01812a83          	lw	s5,24(sp)
            Di = BCe^ROL(BCo, 1);
    3dbc:	00dfc6b3          	xor	a3,t6,a3
            BCe = ROL(Agu, 20);
            Aka ^= Da;
    3dc0:	02812b83          	lw	s7,40(sp)
            Asu ^= Du;
    3dc4:	01b34fb3          	xor	t6,t1,s11
            Agu ^= Du;
    3dc8:	00030d93          	mv	s11,t1
    3dcc:	01534333          	xor	t1,t1,s5
    3dd0:	02412a83          	lw	s5,36(sp)
            Da = BCu^ROL(BCe, 1);
    3dd4:	00a44533          	xor	a0,s0,a0
            Amo ^= Do;
    3dd8:	01ae4433          	xor	s0,t3,s10
            Abo ^= Do;
    3ddc:	000e0d13          	mv	s10,t3
            Agu ^= Du;
    3de0:	0158ce33          	xor	t3,a7,s5
            Aka ^= Da;
    3de4:	00080a93          	mv	s5,a6
    3de8:	01784833          	xor	a6,a6,s7
    3dec:	02c12b83          	lw	s7,44(sp)
            Agu ^= Du;
    3df0:	01112c23          	sw	a7,24(sp)
            Aka ^= Da;
    3df4:	00050b13          	mv	s6,a0
    3df8:	017548b3          	xor	a7,a0,s7
            BCi = ROL(Aka,  3);
            Ame ^= De;
    3dfc:	03812b83          	lw	s7,56(sp)
            Age ^= De;
    3e00:	0fc12703          	lw	a4,252(sp)
    3e04:	00058793          	mv	a5,a1
            Ame ^= De;
    3e08:	0175c533          	xor	a0,a1,s7
    3e0c:	04a12c23          	sw	a0,88(sp)
            Ege =   BCe ^((~BCi)&  BCo );
            Egi =   BCi ^((~BCo)&  BCu );
            Ego =   BCo ^((~BCu)&  BCa );
            Egu =   BCu ^((~BCa)&  BCe );

            Abe ^= De;
    3e10:	01012503          	lw	a0,16(sp)
            Ame ^= De;
    3e14:	03c12b83          	lw	s7,60(sp)
            Abe ^= De;
    3e18:	06f12a23          	sw	a5,116(sp)
    3e1c:	00a7c7b3          	xor	a5,a5,a0
    3e20:	0b812503          	lw	a0,184(sp)
            Age ^= De;
    3e24:	00e5ca33          	xor	s4,a1,a4
    3e28:	00060713          	mv	a4,a2
            Ame ^= De;
    3e2c:	017645b3          	xor	a1,a2,s7
            Aki ^= Di;
    3e30:	0126c933          	xor	s2,a3,s2
            Asi ^= Di;
    3e34:	00068b93          	mv	s7,a3
            Abe ^= De;
    3e38:	06e12c23          	sw	a4,120(sp)
            Asi ^= Di;
    3e3c:	05012683          	lw	a3,80(sp)
            Abe ^= De;
    3e40:	00a74733          	xor	a4,a4,a0
            BCa = ROL(Abe,  1);
            Agi ^= Di;
    3e44:	01c12503          	lw	a0,28(sp)
            Asi ^= Di;
    3e48:	00dbc633          	xor	a2,s7,a3
            Agi ^= Di;
    3e4c:	07712e23          	sw	s7,124(sp)
    3e50:	00abcbb3          	xor	s7,s7,a0
            Asi ^= Di;
    3e54:	05412683          	lw	a3,84(sp)
            Agi ^= Di;
    3e58:	0b712623          	sw	s7,172(sp)
    3e5c:	02012503          	lw	a0,32(sp)
            BCe = ROL(Agi,  6);
            Ako ^= Do;
    3e60:	09912223          	sw	s9,132(sp)
    3e64:	09a12423          	sw	s10,136(sp)
            Agi ^= Di;
    3e68:	00ac4bb3          	xor	s7,s8,a0
            Ako ^= Do;
    3e6c:	03012503          	lw	a0,48(sp)
            Agi ^= Di;
    3e70:	0b712c23          	sw	s7,184(sp)
            BCi = ROL(Ako, 25);
            Amu ^= Du;
    3e74:	09b12623          	sw	s11,140(sp)
            Ako ^= Do;
    3e78:	00acccb3          	xor	s9,s9,a0
    3e7c:	03412503          	lw	a0,52(sp)
            Amu ^= Du;
    3e80:	01812b83          	lw	s7,24(sp)
            BCo = ROL(Amu,  8);
            Asa ^= Da;
    3e84:	01512823          	sw	s5,16(sp)
            Ako ^= Do;
    3e88:	00ad4d33          	xor	s10,s10,a0
            Amu ^= Du;
    3e8c:	04012503          	lw	a0,64(sp)
            Ako ^= Do;
    3e90:	0da12423          	sw	s10,200(sp)
    3e94:	0d912223          	sw	s9,196(sp)
            Amu ^= Du;
    3e98:	00adcdb3          	xor	s11,s11,a0
    3e9c:	04412503          	lw	a0,68(sp)
            BCi = ROL(Aki, 43);
    3ea0:	00b49c93          	slli	s9,s1,0xb
            Amu ^= Du;
    3ea4:	0fb12e23          	sw	s11,252(sp)
    3ea8:	00abc533          	xor	a0,s7,a0
    3eac:	10a12023          	sw	a0,256(sp)
            Asa ^= Da;
    3eb0:	04812503          	lw	a0,72(sp)
            BCe = ROL(Age, 44);
    3eb4:	014a5d93          	srli	s11,s4,0x14
            BCi = ROL(Aki, 43);
    3eb8:	0154d493          	srli	s1,s1,0x15
            Asa ^= Da;
    3ebc:	00aacab3          	xor	s5,s5,a0
    3ec0:	04c12503          	lw	a0,76(sp)
    3ec4:	11512223          	sw	s5,260(sp)
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
    3ec8:	00c12a83          	lw	s5,12(sp)
            Asa ^= Da;
    3ecc:	00ab4533          	xor	a0,s6,a0
    3ed0:	10a12423          	sw	a0,264(sp)
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
    3ed4:	000aa503          	lw	a0,0(s5) # 2000 <pqcrystals_dilithium5_ref_polyveck_shiftl+0x38>
    3ed8:	004aad03          	lw	s10,4(s5)
            Agi ^= Di;
    3edc:	09812023          	sw	s8,128(sp)
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
    3ee0:	08a12823          	sw	a0,144(sp)
            BCe = ROL(Age, 44);
    3ee4:	00c99513          	slli	a0,s3,0xc
    3ee8:	00a12e23          	sw	a0,28(sp)
            BCi = ROL(Aki, 43);
    3eec:	01595513          	srli	a0,s2,0x15
    3ef0:	00b91913          	slli	s2,s2,0xb
            Asa ^= Da;
    3ef4:	01612a23          	sw	s6,20(sp)
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
    3ef8:	09a12e23          	sw	s10,156(sp)
            BCe = ROL(Age, 44);
    3efc:	03b12023          	sw	s11,32(sp)
            BCi = ROL(Aki, 43);
    3f00:	03912223          	sw	s9,36(sp)
    3f04:	02a12423          	sw	a0,40(sp)
    3f08:	03212623          	sw	s2,44(sp)
            BCo = ROL(Ame, 45);
    3f0c:	00d59513          	slli	a0,a1,0xd
            BCi = ROL(Aki, 43);
    3f10:	02912823          	sw	s1,48(sp)
            BCo = ROL(Amo, 21);
    3f14:	00b3d493          	srli	s1,t2,0xb
    3f18:	02912a23          	sw	s1,52(sp)
            BCo = ROL(Ame, 45);
    3f1c:	04a12623          	sw	a0,76(sp)
    3f20:	05812503          	lw	a0,88(sp)
            BCo = ROL(Amo, 21);
    3f24:	01541493          	slli	s1,s0,0x15
    3f28:	02912c23          	sw	s1,56(sp)
            Asi ^= Di;
    3f2c:	00dc46b3          	xor	a3,s8,a3
            BCo = ROL(Ame, 45);
    3f30:	01355493          	srli	s1,a0,0x13
    3f34:	04912823          	sw	s1,80(sp)
            BCu = ROL(Asi, 61);
    3f38:	01d69493          	slli	s1,a3,0x1d
    3f3c:	04912a23          	sw	s1,84(sp)
    3f40:	00365493          	srli	s1,a2,0x3
            BCa = ROL(Abe,  1);
    3f44:	01f7d913          	srli	s2,a5,0x1f
            BCu = ROL(Asi, 61);
    3f48:	04912c23          	sw	s1,88(sp)
            BCa = ROL(Abe,  1);
    3f4c:	00171493          	slli	s1,a4,0x1
    3f50:	0b212023          	sw	s2,160(sp)
    3f54:	0a912223          	sw	s1,164(sp)
            BCe = ROL(Age, 44);
    3f58:	01c12903          	lw	s2,28(sp)
    3f5c:	02012483          	lw	s1,32(sp)
    3f60:	00ca1a13          	slli	s4,s4,0xc
    3f64:	0149d993          	srli	s3,s3,0x14
    3f68:	00996933          	or	s2,s2,s1
    3f6c:	013a69b3          	or	s3,s4,s3
            BCi = ROL(Aki, 43);
    3f70:	02412483          	lw	s1,36(sp)
    3f74:	02812a03          	lw	s4,40(sp)
            BCe = ROL(Age, 44);
    3f78:	09212a23          	sw	s2,148(sp)
            BCi = ROL(Aki, 43);
    3f7c:	02c12903          	lw	s2,44(sp)
    3f80:	0144ea33          	or	s4,s1,s4
    3f84:	03012483          	lw	s1,48(sp)
    3f88:	01412e23          	sw	s4,28(sp)
            BCo = ROL(Amo, 21);
    3f8c:	03412a03          	lw	s4,52(sp)
            BCi = ROL(Aki, 43);
    3f90:	009964b3          	or	s1,s2,s1
    3f94:	02912023          	sw	s1,32(sp)
            BCo = ROL(Amo, 21);
    3f98:	03812483          	lw	s1,56(sp)
            BCu = ROL(Asu, 14);
    3f9c:	012fdc13          	srli	s8,t6,0x12
    3fa0:	03812e23          	sw	s8,60(sp)
            BCo = ROL(Amo, 21);
    3fa4:	009a6a33          	or	s4,s4,s1
            BCu = ROL(Asu, 14);
    3fa8:	03c12483          	lw	s1,60(sp)
            BCa = ROL(Abo, 28);
    3fac:	004edd13          	srli	s10,t4,0x4
    3fb0:	01cf1c93          	slli	s9,t5,0x1c
            BCe = ROL(Agu, 20);
    3fb4:	00c35c13          	srli	s8,t1,0xc
    3fb8:	014e1b93          	slli	s7,t3,0x14
            BCa = ROL(Abo, 28);
    3fbc:	004f5f13          	srli	t5,t5,0x4
            BCe = ROL(Agu, 20);
    3fc0:	00ce5e13          	srli	t3,t3,0xc
            BCa = ROL(Abo, 28);
    3fc4:	01ce9e93          	slli	t4,t4,0x1c
            BCe = ROL(Agu, 20);
    3fc8:	01431313          	slli	t1,t1,0x14
            BCu = ROL(Asu, 14);
    3fcc:	00e29d93          	slli	s11,t0,0xe
            BCi = ROL(Aka,  3);
    3fd0:	01d85b13          	srli	s6,a6,0x1d
    3fd4:	00389a93          	slli	s5,a7,0x3
            BCa = ROL(Abo, 28);
    3fd8:	01df6eb3          	or	t4,t5,t4
            BCe = ROL(Agu, 20);
    3fdc:	006e6333          	or	t1,t3,t1
            BCo = ROL(Amo, 21);
    3fe0:	01539393          	slli	t2,t2,0x15
            BCu = ROL(Asu, 14);
    3fe4:	0122d293          	srli	t0,t0,0x12
            BCi = ROL(Aka,  3);
    3fe8:	01d8d893          	srli	a7,a7,0x1d
            BCo = ROL(Amo, 21);
    3fec:	00b45413          	srli	s0,s0,0xb
            BCu = ROL(Asu, 14);
    3ff0:	00ef9f93          	slli	t6,t6,0xe
            BCi = ROL(Aka,  3);
    3ff4:	00381813          	slli	a6,a6,0x3
            BCo = ROL(Amo, 21);
    3ff8:	00746433          	or	s0,s0,t2
            BCu = ROL(Asu, 14);
    3ffc:	01f2efb3          	or	t6,t0,t6
    4000:	01b4e3b3          	or	t2,s1,s11
            BCa = ROL(Abo, 28);
    4004:	019d62b3          	or	t0,s10,s9
            BCi = ROL(Aka,  3);
    4008:	0108e833          	or	a6,a7,a6
            BCa = ROL(Abo, 28);
    400c:	03d12a23          	sw	t4,52(sp)
            BCe = ROL(Agu, 20);
    4010:	02612e23          	sw	t1,60(sp)
    4014:	017c6eb3          	or	t4,s8,s7
            BCi = ROL(Aka,  3);
    4018:	015b6333          	or	t1,s6,s5
            BCe = ROL(Age, 44);
    401c:	09312c23          	sw	s3,152(sp)
            BCo = ROL(Amo, 21);
    4020:	03412423          	sw	s4,40(sp)
    4024:	02812223          	sw	s0,36(sp)
            BCu = ROL(Asu, 14);
    4028:	02712823          	sw	t2,48(sp)
    402c:	03f12623          	sw	t6,44(sp)
            BCa = ROL(Abo, 28);
    4030:	02512c23          	sw	t0,56(sp)
            BCe = ROL(Agu, 20);
    4034:	05d12023          	sw	t4,64(sp)
            BCi = ROL(Aka,  3);
    4038:	04612423          	sw	t1,72(sp)
    403c:	05012223          	sw	a6,68(sp)
            BCo = ROL(Ame, 45);
    4040:	04c12803          	lw	a6,76(sp)
    4044:	05012f83          	lw	t6,80(sp)
            BCu = ROL(Asi, 61);
    4048:	05812483          	lw	s1,88(sp)
    404c:	01d61613          	slli	a2,a2,0x1d
            BCo = ROL(Ame, 45);
    4050:	01f86fb3          	or	t6,a6,t6
            BCu = ROL(Asi, 61);
    4054:	05412803          	lw	a6,84(sp)
    4058:	0036d693          	srli	a3,a3,0x3
    405c:	00d666b3          	or	a3,a2,a3
    4060:	009862b3          	or	t0,a6,s1
            BCa = ROL(Abe,  1);
    4064:	0a412483          	lw	s1,164(sp)
    4068:	0a012803          	lw	a6,160(sp)
            BCo = ROL(Ame, 45);
    406c:	0135d593          	srli	a1,a1,0x13
    4070:	00d51513          	slli	a0,a0,0xd
            BCa = ROL(Abe,  1);
    4074:	00986633          	or	a2,a6,s1
            Eko =   BCo ^((~BCu)&  BCa );
            Eku =   BCu ^((~BCa)&  BCe );

            Abu ^= Du;
            BCa = ROL(Abu, 27);
            Aga ^= Da;
    4078:	01012f03          	lw	t5,16(sp)
    407c:	01412b03          	lw	s6,20(sp)
            Abu ^= Du;
    4080:	08c12d83          	lw	s11,140(sp)
    4084:	0cc12903          	lw	s2,204(sp)
            BCo = ROL(Ame, 45);
    4088:	00b56533          	or	a0,a0,a1
            BCa = ROL(Abe,  1);
    408c:	0ac12423          	sw	a2,168(sp)
            Aga ^= Da;
    4090:	0d412583          	lw	a1,212(sp)
    4094:	0d812603          	lw	a2,216(sp)
            BCa = ROL(Abe,  1);
    4098:	01f75713          	srli	a4,a4,0x1f
    409c:	00179793          	slli	a5,a5,0x1
    40a0:	00f76433          	or	s0,a4,a5
            Aga ^= Da;
    40a4:	00cb4e33          	xor	t3,s6,a2
            Abu ^= Du;
    40a8:	012dc733          	xor	a4,s11,s2
            Aga ^= Da;
    40ac:	00bf47b3          	xor	a5,t5,a1
            Abu ^= Du;
    40b0:	01812303          	lw	t1,24(sp)
    40b4:	0d012903          	lw	s2,208(sp)
            BCe = ROL(Aga, 36);
            Ake ^= De;
    40b8:	07412603          	lw	a2,116(sp)
    40bc:	0e412583          	lw	a1,228(sp)
            BCu = ROL(Asi, 61);
    40c0:	04d12c23          	sw	a3,88(sp)
            Abu ^= Du;
    40c4:	012346b3          	xor	a3,t1,s2
            Ake ^= De;
    40c8:	00b64c33          	xor	s8,a2,a1
    40cc:	0e812903          	lw	s2,232(sp)
    40d0:	07812583          	lw	a1,120(sp)
            BCo = ROL(Ame, 45);
    40d4:	04a12823          	sw	a0,80(sp)
            BCi = ROL(Ake, 10);
            Ami ^= Di;
    40d8:	07c12503          	lw	a0,124(sp)
            Ake ^= De;
    40dc:	0125cbb3          	xor	s7,a1,s2
            Ami ^= Di;
    40e0:	05c12903          	lw	s2,92(sp)
    40e4:	08012803          	lw	a6,128(sp)
            BCo = ROL(Ami, 15);
            Aso ^= Do;
    40e8:	08412883          	lw	a7,132(sp)
            Ami ^= Di;
    40ec:	01254333          	xor	t1,a0,s2
    40f0:	06012903          	lw	s2,96(sp)
            BCo = ROL(Ame, 45);
    40f4:	05f12623          	sw	t6,76(sp)
            BCu = ROL(Asi, 61);
    40f8:	04512a23          	sw	t0,84(sp)
            Ami ^= Di;
    40fc:	01284cb3          	xor	s9,a6,s2
            Aso ^= Do;
    4100:	06412903          	lw	s2,100(sp)
            BCa = ROL(Abe,  1);
    4104:	0a812223          	sw	s0,164(sp)
            Aga ^= Da;
    4108:	11c12623          	sw	t3,268(sp)
            Aso ^= Do;
    410c:	0128cd33          	xor	s10,a7,s2
    4110:	08812e03          	lw	t3,136(sp)
    4114:	06812903          	lw	s2,104(sp)
            BCe = ROL(Agi,  6);
    4118:	0b812603          	lw	a2,184(sp)
            BCi = ROL(Ako, 25);
    411c:	0c812283          	lw	t0,200(sp)
            Aso ^= Do;
    4120:	012e4db3          	xor	s11,t3,s2
            BCe = ROL(Agi,  6);
    4124:	00661a13          	slli	s4,a2,0x6
    4128:	0ac12903          	lw	s2,172(sp)
    412c:	01a65e93          	srli	t4,a2,0x1a
            BCi = ROL(Ako, 25);
    4130:	0c412603          	lw	a2,196(sp)
            Aba ^= Da;
    4134:	0b012f83          	lw	t6,176(sp)
            BCi = ROL(Ako, 25);
    4138:	0072d493          	srli	s1,t0,0x7
    413c:	06912023          	sw	s1,96(sp)
            BCe = ROL(Agi,  6);
    4140:	00691e13          	slli	t3,s2,0x6
            BCi = ROL(Ako, 25);
    4144:	00765993          	srli	s3,a2,0x7
    4148:	01961893          	slli	a7,a2,0x19
            BCe = ROL(Agi,  6);
    414c:	01a95a93          	srli	s5,s2,0x1a
            BCo = ROL(Amu,  8);
    4150:	0fc12603          	lw	a2,252(sp)
            BCi = ROL(Ako, 25);
    4154:	01929913          	slli	s2,t0,0x19
            BCo = ROL(Amu,  8);
    4158:	10012283          	lw	t0,256(sp)
            Aba ^= Da;
    415c:	01ff4fb3          	xor	t6,t5,t6
            BCe = ROL(Agi,  6);
    4160:	014aeab3          	or	s5,s5,s4
            Aba ^= Da;
    4164:	000b0f13          	mv	t5,s6
            BCi = ROL(Ako, 25);
    4168:	06012a03          	lw	s4,96(sp)
            Aba ^= Da;
    416c:	0b412b03          	lw	s6,180(sp)
            BCo = ROL(Amu,  8);
    4170:	0182d813          	srli	a6,t0,0x18
    4174:	00861513          	slli	a0,a2,0x8
            Aba ^= Da;
    4178:	016f4f33          	xor	t5,t5,s6
            BCi = ROL(Ako, 25);
    417c:	0129e933          	or	s2,s3,s2
            Eme =   BCe ^((~BCi)&  BCo );
            Emi =   BCi ^((~BCo)&  BCu );
            Emo =   BCo ^((~BCu)&  BCa );
            Emu =   BCu ^((~BCa)&  BCe );

            Abi ^= Di;
    4180:	0bc12b03          	lw	s6,188(sp)
            BCi = ROL(Ako, 25);
    4184:	011a69b3          	or	s3,s4,a7
            BCo = ROL(Amu,  8);
    4188:	00a86a33          	or	s4,a6,a0
            Abi ^= Di;
    418c:	07c12503          	lw	a0,124(sp)
    4190:	08012803          	lw	a6,128(sp)
            BCo = ROL(Amu,  8);
    4194:	01865493          	srli	s1,a2,0x18
            Abi ^= Di;
    4198:	01654533          	xor	a0,a0,s6
    419c:	0c012b03          	lw	s6,192(sp)
            BCo = ROL(Amu,  8);
    41a0:	00829413          	slli	s0,t0,0x8
    41a4:	0084e8b3          	or	a7,s1,s0
            Abi ^= Di;
    41a8:	01684833          	xor	a6,a6,s6
            BCo = ROL(Amu,  8);
    41ac:	07112423          	sw	a7,104(sp)
            BCa = ROL(Abi, 62);
            Ago ^= Do;
    41b0:	0dc12b03          	lw	s6,220(sp)
    41b4:	08412883          	lw	a7,132(sp)
            BCu = ROL(Asa, 18);
    41b8:	10412603          	lw	a2,260(sp)
    41bc:	10812583          	lw	a1,264(sp)
            BCe = ROL(Agi,  6);
    41c0:	01ceeeb3          	or	t4,t4,t3
            Abi ^= Di;
    41c4:	13012623          	sw	a6,300(sp)
            Ago ^= Do;
    41c8:	08812e03          	lw	t3,136(sp)
    41cc:	0168c833          	xor	a6,a7,s6
    41d0:	0e012b03          	lw	s6,224(sp)
            BCu = ROL(Asa, 18);
    41d4:	00e65393          	srli	t2,a2,0xe
    41d8:	01259293          	slli	t0,a1,0x12
    41dc:	01261613          	slli	a2,a2,0x12
    41e0:	00e5d593          	srli	a1,a1,0xe
            Ago ^= Do;
    41e4:	016e4433          	xor	s0,t3,s6
            BCu = ROL(Asa, 18);
    41e8:	00c5e633          	or	a2,a1,a2
            BCe = ROL(Agi,  6);
    41ec:	05512e23          	sw	s5,92(sp)
            BCi = ROL(Ako, 25);
    41f0:	0b212623          	sw	s2,172(sp)
    41f4:	07312023          	sw	s3,96(sp)
            BCo = ROL(Amu,  8);
    41f8:	07412223          	sw	s4,100(sp)
            BCu = ROL(Asa, 18);
    41fc:	0ac12823          	sw	a2,176(sp)
            Abi ^= Di;
    4200:	12a12423          	sw	a0,296(sp)
            Ago ^= Do;
    4204:	13012823          	sw	a6,304(sp)
            BCe = ROL(Ago, 55);
            Aku ^= Du;
    4208:	08c12503          	lw	a0,140(sp)
            Ago ^= Do;
    420c:	12812a23          	sw	s0,308(sp)
            Aku ^= Du;
    4210:	0ec12b03          	lw	s6,236(sp)
    4214:	01812883          	lw	a7,24(sp)
            BCi = ROL(Aku, 39);
            Ama ^= Da;
    4218:	01012583          	lw	a1,16(sp)
            Aku ^= Du;
    421c:	01654ab3          	xor	s5,a0,s6
    4220:	0f012b03          	lw	s6,240(sp)
            Eba =   BCa ^((~BCe)&  BCi );
    4224:	09812503          	lw	a0,152(sp)
            Ebe =   BCe ^((~BCi)&  BCo );
    4228:	01c12e03          	lw	t3,28(sp)
            Aku ^= Du;
    422c:	0168ca33          	xor	s4,a7,s6
            Ama ^= Da;
    4230:	0f412883          	lw	a7,244(sp)
            Ebe =   BCe ^((~BCi)&  BCo );
    4234:	02012483          	lw	s1,32(sp)
            BCu = ROL(Asa, 18);
    4238:	0053e2b3          	or	t0,t2,t0
            Ama ^= Da;
    423c:	0115c9b3          	xor	s3,a1,a7
    4240:	01412583          	lw	a1,20(sp)
    4244:	0f812883          	lw	a7,248(sp)
            Ebi =   BCi ^((~BCo)&  BCu );
    4248:	02412383          	lw	t2,36(sp)
            Eba =   BCa ^((~BCe)&  BCi );
    424c:	fff54813          	not	a6,a0
            Ama ^= Da;
    4250:	0115c933          	xor	s2,a1,a7
            BCo = ROL(Ama, 41);
            Ase ^= De;
    4254:	07412583          	lw	a1,116(sp)
    4258:	06c12883          	lw	a7,108(sp)
            Ebe =   BCe ^((~BCi)&  BCo );
    425c:	fffe4513          	not	a0,t3
            Ebo =   BCo ^((~BCu)&  BCa );
    4260:	03012e03          	lw	t3,48(sp)
            Ase ^= De;
    4264:	0115c8b3          	xor	a7,a1,a7
    4268:	09112223          	sw	a7,132(sp)
    426c:	07812583          	lw	a1,120(sp)
    4270:	07012883          	lw	a7,112(sp)
            Ebi =   BCi ^((~BCo)&  BCu );
    4274:	fff3cb13          	not	s6,t2
    4278:	02812383          	lw	t2,40(sp)
            Ase ^= De;
    427c:	0115c633          	xor	a2,a1,a7
            Eba =   BCa ^((~BCe)&  BCi );
    4280:	09412583          	lw	a1,148(sp)
            Ebi =   BCi ^((~BCo)&  BCu );
    4284:	09612423          	sw	s6,136(sp)
    4288:	fff3c413          	not	s0,t2
            Eba =   BCa ^((~BCe)&  BCi );
    428c:	fff5c893          	not	a7,a1
            Ebe =   BCe ^((~BCi)&  BCo );
    4290:	fff4c593          	not	a1,s1
            Ebo =   BCo ^((~BCu)&  BCa );
    4294:	02c12483          	lw	s1,44(sp)
            Ega =   BCa ^((~BCe)&  BCi );
    4298:	04012383          	lw	t2,64(sp)
            Ebi =   BCi ^((~BCo)&  BCu );
    429c:	08812623          	sw	s0,140(sp)
            Ebo =   BCo ^((~BCu)&  BCa );
    42a0:	fff4cb13          	not	s6,s1
    42a4:	fffe4493          	not	s1,t3
            Ege =   BCe ^((~BCi)&  BCo );
    42a8:	04812e03          	lw	t3,72(sp)
            Ebo =   BCo ^((~BCu)&  BCa );
    42ac:	0b612023          	sw	s6,160(sp)
            Ega =   BCa ^((~BCe)&  BCi );
    42b0:	fff3c413          	not	s0,t2
            Ege =   BCe ^((~BCi)&  BCo );
    42b4:	fffe4b13          	not	s6,t3
            Egi =   BCi ^((~BCo)&  BCu );
    42b8:	04c12e03          	lw	t3,76(sp)
            Ase ^= De;
    42bc:	12c12c23          	sw	a2,312(sp)
            Ebo =   BCo ^((~BCu)&  BCa );
    42c0:	0a912a23          	sw	s1,180(sp)
            Ega =   BCa ^((~BCe)&  BCi );
    42c4:	0a812c23          	sw	s0,184(sp)
            Ege =   BCe ^((~BCi)&  BCo );
    42c8:	0b612e23          	sw	s6,188(sp)
            Egi =   BCi ^((~BCo)&  BCu );
    42cc:	fffe4413          	not	s0,t3
            Ega =   BCa ^((~BCe)&  BCi );
    42d0:	03c12483          	lw	s1,60(sp)
            Ege =   BCe ^((~BCi)&  BCo );
    42d4:	04412383          	lw	t2,68(sp)
            Egi =   BCi ^((~BCo)&  BCu );
    42d8:	0c812023          	sw	s0,192(sp)
    42dc:	05012e03          	lw	t3,80(sp)
            Ega =   BCa ^((~BCe)&  BCi );
    42e0:	fff4c493          	not	s1,s1
            Ege =   BCe ^((~BCi)&  BCo );
    42e4:	fff3c393          	not	t2,t2
            Egi =   BCi ^((~BCo)&  BCu );
    42e8:	fffe4b13          	not	s6,t3
            Ego =   BCo ^((~BCu)&  BCa );
    42ec:	05412e03          	lw	t3,84(sp)
            Egi =   BCi ^((~BCo)&  BCu );
    42f0:	0d612223          	sw	s6,196(sp)
            Ego =   BCo ^((~BCu)&  BCa );
    42f4:	fffe4413          	not	s0,t3
    42f8:	05812e03          	lw	t3,88(sp)
    42fc:	0c812423          	sw	s0,200(sp)
    4300:	fffe4b13          	not	s6,t3
            Egu =   BCu ^((~BCa)&  BCe );
    4304:	03412e03          	lw	t3,52(sp)
            Ego =   BCo ^((~BCu)&  BCa );
    4308:	0d612623          	sw	s6,204(sp)
            Egu =   BCu ^((~BCa)&  BCe );
    430c:	fffe4413          	not	s0,t3
    4310:	03812e03          	lw	t3,56(sp)
    4314:	0c812823          	sw	s0,208(sp)
    4318:	fffe4b13          	not	s6,t3
            Eku =   BCu ^((~BCa)&  BCe );
    431c:	0a412e03          	lw	t3,164(sp)
            Egu =   BCu ^((~BCa)&  BCe );
    4320:	0d612a23          	sw	s6,212(sp)
            BCa = ROL(Abu, 27);
    4324:	01b69b13          	slli	s6,a3,0x1b
            Eku =   BCu ^((~BCa)&  BCe );
    4328:	fffe4413          	not	s0,t3
    432c:	0a812e03          	lw	t3,168(sp)
    4330:	0c812c23          	sw	s0,216(sp)
            BCa = ROL(Abu, 27);
    4334:	01612823          	sw	s6,16(sp)
            Eku =   BCu ^((~BCa)&  BCe );
    4338:	fffe4413          	not	s0,t3
            BCe = ROL(Aga, 36);
    433c:	10c12e03          	lw	t3,268(sp)
            Eku =   BCu ^((~BCa)&  BCe );
    4340:	12812223          	sw	s0,292(sp)
            BCa = ROL(Abu, 27);
    4344:	0056d693          	srli	a3,a3,0x5
            BCe = ROL(Aga, 36);
    4348:	004e1613          	slli	a2,t3,0x4
    434c:	00c12a23          	sw	a2,20(sp)
    4350:	01c7d613          	srli	a2,a5,0x1c
    4354:	00c12c23          	sw	a2,24(sp)
            BCi = ROL(Ake, 10);
    4358:	016c5613          	srli	a2,s8,0x16
    435c:	06c12623          	sw	a2,108(sp)
    4360:	00ab9613          	slli	a2,s7,0xa
    4364:	06c12823          	sw	a2,112(sp)
            BCa = ROL(Abu, 27);
    4368:	01012603          	lw	a2,16(sp)
    436c:	00575413          	srli	s0,a4,0x5
    4370:	01b71713          	slli	a4,a4,0x1b
    4374:	00c46433          	or	s0,s0,a2
    4378:	00e6e733          	or	a4,a3,a4
            BCe = ROL(Aga, 36);
    437c:	01412603          	lw	a2,20(sp)
            BCa = ROL(Abu, 27);
    4380:	00812823          	sw	s0,16(sp)
    4384:	00070413          	mv	s0,a4
            BCe = ROL(Aga, 36);
    4388:	01812703          	lw	a4,24(sp)
            BCi = ROL(Ake, 10);
    438c:	07012683          	lw	a3,112(sp)
    4390:	016bdb93          	srli	s7,s7,0x16
            BCe = ROL(Aga, 36);
    4394:	00e66733          	or	a4,a2,a4
            BCi = ROL(Ake, 10);
    4398:	06c12603          	lw	a2,108(sp)
            BCe = ROL(Aga, 36);
    439c:	00479793          	slli	a5,a5,0x4
    43a0:	01ce5b13          	srli	s6,t3,0x1c
            BCi = ROL(Ake, 10);
    43a4:	07712a23          	sw	s7,116(sp)
    43a8:	00ac1b93          	slli	s7,s8,0xa
            BCo = ROL(Ami, 15);
    43ac:	01135c13          	srli	s8,t1,0x11
            BCe = ROL(Aga, 36);
    43b0:	0167eb33          	or	s6,a5,s6
            BCi = ROL(Ake, 10);
    43b4:	00d666b3          	or	a3,a2,a3
            BCo = ROL(Ami, 15);
    43b8:	07812c23          	sw	s8,120(sp)
    43bc:	00fc9c13          	slli	s8,s9,0xf
    43c0:	07812e23          	sw	s8,124(sp)
            BCe = ROL(Aga, 36);
    43c4:	00e12a23          	sw	a4,20(sp)
    43c8:	01612c23          	sw	s6,24(sp)
            BCi = ROL(Ake, 10);
    43cc:	06d12823          	sw	a3,112(sp)
    43d0:	07412603          	lw	a2,116(sp)
            BCo = ROL(Ami, 15);
    43d4:	011cdc13          	srli	s8,s9,0x11
            BCu = ROL(Aso, 56);
    43d8:	018d9e13          	slli	t3,s11,0x18
            BCo = ROL(Ami, 15);
    43dc:	00f31c93          	slli	s9,t1,0xf
            BCu = ROL(Aso, 56);
    43e0:	008d5313          	srli	t1,s10,0x8
            BCo = ROL(Ami, 15);
    43e4:	07c12783          	lw	a5,124(sp)
            Eba =   BCa ^((~BCe)&  BCi );
    43e8:	02012703          	lw	a4,32(sp)
            BCi = ROL(Ake, 10);
    43ec:	01766bb3          	or	s7,a2,s7
            BCo = ROL(Ami, 15);
    43f0:	019c6cb3          	or	s9,s8,s9
    43f4:	07812603          	lw	a2,120(sp)
            BCu = ROL(Aso, 56);
    43f8:	006e6c33          	or	s8,t3,t1
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
    43fc:	09012303          	lw	t1,144(sp)
            Eba =   BCa ^((~BCe)&  BCi );
    4400:	00e876b3          	and	a3,a6,a4
            BCo = ROL(Ami, 15);
    4404:	00f667b3          	or	a5,a2,a5
            Ebi =   BCi ^((~BCo)&  BCu );
    4408:	02c12803          	lw	a6,44(sp)
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
    440c:	01f34633          	xor	a2,t1,t6
            Ebi =   BCi ^((~BCo)&  BCu );
    4410:	08812303          	lw	t1,136(sp)
            BCu = ROL(Aso, 56);
    4414:	018d1d13          	slli	s10,s10,0x18
    4418:	008ddd93          	srli	s11,s11,0x8
    441c:	01bd6db3          	or	s11,s10,s11
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
    4420:	09c12d03          	lw	s10,156(sp)
            BCo = ROL(Ami, 15);
    4424:	07912a23          	sw	s9,116(sp)
            Ebi =   BCi ^((~BCo)&  BCu );
    4428:	01037cb3          	and	s9,t1,a6
    442c:	08c12303          	lw	t1,140(sp)
    4430:	03012803          	lw	a6,48(sp)
            Eba =   BCa ^((~BCe)&  BCi );
    4434:	0ed12423          	sw	a3,232(sp)
            Ebe =   BCe ^((~BCi)&  BCo );
    4438:	02412683          	lw	a3,36(sp)
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
    443c:	01ed4d33          	xor	s10,s10,t5
            Eba =   BCa ^((~BCe)&  BCi );
    4440:	01c12e03          	lw	t3,28(sp)
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
    4444:	0fa12023          	sw	s10,224(sp)
            Ebi =   BCi ^((~BCo)&  BCu );
    4448:	01037d33          	and	s10,t1,a6
            Ebo =   BCo ^((~BCu)&  BCa );
    444c:	0a012303          	lw	t1,160(sp)
            BCu = ROL(Aso, 56);
    4450:	07812e23          	sw	s8,124(sp)
            Ebe =   BCe ^((~BCi)&  BCo );
    4454:	00d57c33          	and	s8,a0,a3
    4458:	02812683          	lw	a3,40(sp)
            Eba =   BCa ^((~BCe)&  BCi );
    445c:	01c8f8b3          	and	a7,a7,t3
            Ebo =   BCo ^((~BCu)&  BCa );
    4460:	01f37333          	and	t1,t1,t6
            Eba =   BCa ^((~BCe)&  BCi );
    4464:	0f112223          	sw	a7,228(sp)
            Ebo =   BCo ^((~BCu)&  BCa );
    4468:	0e612e23          	sw	t1,252(sp)
            Ebe =   BCe ^((~BCi)&  BCo );
    446c:	00d5f8b3          	and	a7,a1,a3
            Ebo =   BCo ^((~BCu)&  BCa );
    4470:	0b412303          	lw	t1,180(sp)
            Ebe =   BCe ^((~BCi)&  BCo );
    4474:	0f112823          	sw	a7,240(sp)
            Ega =   BCa ^((~BCe)&  BCi );
    4478:	04412883          	lw	a7,68(sp)
            Ebo =   BCo ^((~BCu)&  BCa );
    447c:	01e37333          	and	t1,t1,t5
            Ega =   BCa ^((~BCe)&  BCi );
    4480:	0b812583          	lw	a1,184(sp)
            BCi = ROL(Ake, 10);
    4484:	07712623          	sw	s7,108(sp)
            BCo = ROL(Ami, 15);
    4488:	06f12c23          	sw	a5,120(sp)
            BCu = ROL(Aso, 56);
    448c:	09b12023          	sw	s11,128(sp)
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
    4490:	0cc12e23          	sw	a2,220(sp)
            Ebe =   BCe ^((~BCi)&  BCo );
    4494:	0f812623          	sw	s8,236(sp)
            Ebi =   BCi ^((~BCo)&  BCu );
    4498:	0f912a23          	sw	s9,244(sp)
    449c:	0fa12c23          	sw	s10,248(sp)
            Ebo =   BCo ^((~BCu)&  BCa );
    44a0:	10612023          	sw	t1,256(sp)
            Ega =   BCa ^((~BCe)&  BCi );
    44a4:	0114f4b3          	and	s1,s1,a7
    44a8:	04812883          	lw	a7,72(sp)
            Ebu =   BCu ^((~BCa)&  BCe );
    44ac:	ffff4313          	not	t1,t5
            Ege =   BCe ^((~BCi)&  BCo );
    44b0:	05012b83          	lw	s7,80(sp)
            Ega =   BCa ^((~BCe)&  BCi );
    44b4:	0115ff33          	and	t5,a1,a7
            Ege =   BCe ^((~BCi)&  BCo );
    44b8:	0bc12583          	lw	a1,188(sp)
            Egi =   BCi ^((~BCo)&  BCu );
    44bc:	05412c03          	lw	s8,84(sp)
    44c0:	05812c83          	lw	s9,88(sp)
            Ege =   BCe ^((~BCi)&  BCo );
    44c4:	0175f533          	and	a0,a1,s7
            Egi =   BCi ^((~BCo)&  BCu );
    44c8:	0c012583          	lw	a1,192(sp)
            Ebu =   BCu ^((~BCa)&  BCe );
    44cc:	ffffce13          	not	t3,t6
            Ego =   BCo ^((~BCu)&  BCa );
    44d0:	03412883          	lw	a7,52(sp)
            Egi =   BCi ^((~BCo)&  BCu );
    44d4:	0185ffb3          	and	t6,a1,s8
    44d8:	0c412583          	lw	a1,196(sp)
            Ega =   BCa ^((~BCe)&  BCi );
    44dc:	11e12223          	sw	t5,260(sp)
            Ege =   BCe ^((~BCi)&  BCo );
    44e0:	04c12f03          	lw	t5,76(sp)
            Egi =   BCi ^((~BCo)&  BCu );
    44e4:	0195f733          	and	a4,a1,s9
            Ego =   BCo ^((~BCu)&  BCa );
    44e8:	0c812583          	lw	a1,200(sp)
            Ege =   BCe ^((~BCi)&  BCo );
    44ec:	01e3f3b3          	and	t2,t2,t5
            Egu =   BCu ^((~BCa)&  BCe );
    44f0:	03c12f03          	lw	t5,60(sp)
            Ego =   BCo ^((~BCu)&  BCa );
    44f4:	0115f7b3          	and	a5,a1,a7
    44f8:	03812883          	lw	a7,56(sp)
    44fc:	0cc12583          	lw	a1,204(sp)
            Eke =   BCe ^((~BCi)&  BCo );
    4500:	06012d83          	lw	s11,96(sp)
            Ege =   BCe ^((~BCi)&  BCo );
    4504:	10a12423          	sw	a0,264(sp)
            Ego =   BCo ^((~BCu)&  BCa );
    4508:	0115f5b3          	and	a1,a1,a7
    450c:	10b12a23          	sw	a1,276(sp)
            Egu =   BCu ^((~BCa)&  BCe );
    4510:	0d012583          	lw	a1,208(sp)
            Eke =   BCe ^((~BCi)&  BCo );
    4514:	fffdc513          	not	a0,s11
    4518:	0ac12d83          	lw	s11,172(sp)
            Egu =   BCu ^((~BCa)&  BCe );
    451c:	01e5f5b3          	and	a1,a1,t5
    4520:	10b12c23          	sw	a1,280(sp)
    4524:	04012f03          	lw	t5,64(sp)
    4528:	0d412583          	lw	a1,212(sp)
            Ego =   BCo ^((~BCu)&  BCa );
    452c:	10f12823          	sw	a5,272(sp)
            Eki =   BCi ^((~BCo)&  BCu );
    4530:	06412783          	lw	a5,100(sp)
            Egu =   BCu ^((~BCa)&  BCe );
    4534:	01e5f5b3          	and	a1,a1,t5
    4538:	10b12e23          	sw	a1,284(sp)
            Eke =   BCe ^((~BCi)&  BCo );
    453c:	fffdc593          	not	a1,s11
            Eku =   BCu ^((~BCa)&  BCe );
    4540:	0d812d83          	lw	s11,216(sp)
            Eka =   BCa ^((~BCe)&  BCi );
    4544:	05c12d03          	lw	s10,92(sp)
            Egi =   BCi ^((~BCo)&  BCu );
    4548:	10e12623          	sw	a4,268(sp)
            Eku =   BCu ^((~BCa)&  BCe );
    454c:	01ddff33          	and	t5,s11,t4
    4550:	12412d83          	lw	s11,292(sp)
            Eki =   BCi ^((~BCo)&  BCu );
    4554:	fff7c713          	not	a4,a5
    4558:	12e12023          	sw	a4,288(sp)
            Eku =   BCu ^((~BCa)&  BCe );
    455c:	01adfdb3          	and	s11,s11,s10
            Eki =   BCi ^((~BCo)&  BCu );
    4560:	06812703          	lw	a4,104(sp)
            Eko =   BCo ^((~BCu)&  BCa );
    4564:	0b012603          	lw	a2,176(sp)
            Eku =   BCu ^((~BCa)&  BCe );
    4568:	13b12223          	sw	s11,292(sp)
            BCa = ROL(Abi, 62);
    456c:	12c12b03          	lw	s6,300(sp)
    4570:	12812c83          	lw	s9,296(sp)
            BCe = ROL(Ago, 55);
    4574:	13412b83          	lw	s7,308(sp)
            BCa = ROL(Abi, 62);
    4578:	01eb1d93          	slli	s11,s6,0x1e
    457c:	002b5c13          	srli	s8,s6,0x2
            BCe = ROL(Ago, 55);
    4580:	13012b03          	lw	s6,304(sp)
            BCa = ROL(Abi, 62);
    4584:	09812623          	sw	s8,140(sp)
            Eka =   BCa ^((~BCe)&  BCi );
    4588:	fffd4813          	not	a6,s10
            BCe = ROL(Ago, 55);
    458c:	009b5c13          	srli	s8,s6,0x9
            BCa = ROL(Abi, 62);
    4590:	002cdd13          	srli	s10,s9,0x2
            BCe = ROL(Ago, 55);
    4594:	017b1b13          	slli	s6,s6,0x17
            BCa = ROL(Abi, 62);
    4598:	01ec9c93          	slli	s9,s9,0x1e
    459c:	09912423          	sw	s9,136(sp)
            BCe = ROL(Ago, 55);
    45a0:	09612823          	sw	s6,144(sp)
            BCa = ROL(Abi, 62);
    45a4:	01aded33          	or	s10,s11,s10
            BCe = ROL(Ago, 55);
    45a8:	009bdb13          	srli	s6,s7,0x9
            BCa = ROL(Abi, 62);
    45ac:	08812d83          	lw	s11,136(sp)
            BCe = ROL(Ago, 55);
    45b0:	09612e23          	sw	s6,156(sp)
            BCa = ROL(Abi, 62);
    45b4:	0da12023          	sw	s10,192(sp)
            BCi = ROL(Aku, 39);
    45b8:	019adb13          	srli	s6,s5,0x19
            BCa = ROL(Abi, 62);
    45bc:	08c12d03          	lw	s10,140(sp)
            BCi = ROL(Aku, 39);
    45c0:	007a9a93          	slli	s5,s5,0x7
    45c4:	0b512023          	sw	s5,160(sp)
    45c8:	019a5a93          	srli	s5,s4,0x19
    45cc:	0b512a23          	sw	s5,180(sp)
            BCo = ROL(Ama, 41);
    45d0:	00991a93          	slli	s5,s2,0x9
    45d4:	01795913          	srli	s2,s2,0x17
    45d8:	0b212e23          	sw	s2,188(sp)
            BCa = ROL(Abi, 62);
    45dc:	01aded33          	or	s10,s11,s10
            BCu = ROL(Ase,  2);
    45e0:	08412903          	lw	s2,132(sp)
            Eki =   BCi ^((~BCo)&  BCu );
    45e4:	fff74693          	not	a3,a4
            BCe = ROL(Ago, 55);
    45e8:	017b9c93          	slli	s9,s7,0x17
            Eko =   BCo ^((~BCu)&  BCa );
    45ec:	fff64713          	not	a4,a2
            BCi = ROL(Aku, 39);
    45f0:	007a1b93          	slli	s7,s4,0x7
            BCu = ROL(Ase,  2);
    45f4:	13812603          	lw	a2,312(sp)
            BCe = ROL(Ago, 55);
    45f8:	018cecb3          	or	s9,s9,s8
            BCa = ROL(Abi, 62);
    45fc:	0da12223          	sw	s10,196(sp)
            BCi = ROL(Aku, 39);
    4600:	0b412c03          	lw	s8,180(sp)
    4604:	016bed33          	or	s10,s7,s6
    4608:	0a012b03          	lw	s6,160(sp)
            BCo = ROL(Ama, 41);
    460c:	0179da13          	srli	s4,s3,0x17
    4610:	00999993          	slli	s3,s3,0x9
    4614:	0b312c23          	sw	s3,184(sp)
    4618:	014aeab3          	or	s5,s5,s4
            BCu = ROL(Ase,  2);
    461c:	01e95993          	srli	s3,s2,0x1e
    4620:	00261913          	slli	s2,a2,0x2
    4624:	01e65613          	srli	a2,a2,0x1e
            BCi = ROL(Aku, 39);
    4628:	018b6b33          	or	s6,s6,s8
            BCe = ROL(Ago, 55);
    462c:	09012d83          	lw	s11,144(sp)
            BCo = ROL(Ama, 41);
    4630:	0bc12c03          	lw	s8,188(sp)
            BCu = ROL(Ase,  2);
    4634:	0cc12c23          	sw	a2,216(sp)
            BCe = ROL(Ago, 55);
    4638:	0d912423          	sw	s9,200(sp)
            BCu = ROL(Ase,  2);
    463c:	08412603          	lw	a2,132(sp)
            BCe = ROL(Ago, 55);
    4640:	09c12c83          	lw	s9,156(sp)
            BCo = ROL(Ama, 41);
    4644:	09512223          	sw	s5,132(sp)
    4648:	0b812a83          	lw	s5,184(sp)
            BCe = ROL(Ago, 55);
    464c:	019dedb3          	or	s11,s11,s9
            BCu = ROL(Ase,  2);
    4650:	0129e933          	or	s2,s3,s2
            BCo = ROL(Ama, 41);
    4654:	018aeab3          	or	s5,s5,s8
            BCe = ROL(Ago, 55);
    4658:	0db12623          	sw	s11,204(sp)
            BCi = ROL(Aku, 39);
    465c:	0da12823          	sw	s10,208(sp)
    4660:	0d612a23          	sw	s6,212(sp)
            BCo = ROL(Ama, 41);
    4664:	09512423          	sw	s5,136(sp)
            BCu = ROL(Ase,  2);
    4668:	09212823          	sw	s2,144(sp)
    466c:	0d812983          	lw	s3,216(sp)
    4670:	00261613          	slli	a2,a2,0x2
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
    4674:	0e412903          	lw	s2,228(sp)
            BCu = ROL(Ase,  2);
    4678:	00c9e9b3          	or	s3,s3,a2
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
    467c:	0dc12603          	lw	a2,220(sp)
            BCu = ROL(Ase,  2);
    4680:	09312623          	sw	s3,140(sp)
            Ebe =   BCe ^((~BCi)&  BCo );
    4684:	09812983          	lw	s3,152(sp)
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
    4688:	01264633          	xor	a2,a2,s2
    468c:	08c12e23          	sw	a2,156(sp)
    4690:	0e812903          	lw	s2,232(sp)
    4694:	0e012603          	lw	a2,224(sp)
            Ebi =   BCi ^((~BCo)&  BCu );
    4698:	01c12a03          	lw	s4,28(sp)
            Ebo =   BCo ^((~BCu)&  BCa );
    469c:	0fc12b83          	lw	s7,252(sp)
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
    46a0:	01264633          	xor	a2,a2,s2
    46a4:	0ac12023          	sw	a2,160(sp)
            Ebe =   BCe ^((~BCi)&  BCo );
    46a8:	09412903          	lw	s2,148(sp)
    46ac:	0ec12603          	lw	a2,236(sp)
            Ebo =   BCo ^((~BCu)&  BCa );
    46b0:	02412b03          	lw	s6,36(sp)
            Ebi =   BCi ^((~BCo)&  BCu );
    46b4:	0f812a83          	lw	s5,248(sp)
            Ebe =   BCe ^((~BCi)&  BCo );
    46b8:	01264633          	xor	a2,a2,s2
    46bc:	08c12a23          	sw	a2,148(sp)
    46c0:	0f012603          	lw	a2,240(sp)
            Ebo =   BCo ^((~BCu)&  BCa );
    46c4:	016bcb33          	xor	s6,s7,s6
    46c8:	03612223          	sw	s6,36(sp)
            Ebe =   BCe ^((~BCi)&  BCo );
    46cc:	01364633          	xor	a2,a2,s3
    46d0:	08c12c23          	sw	a2,152(sp)
            Ebi =   BCi ^((~BCo)&  BCu );
    46d4:	0f412603          	lw	a2,244(sp)
            Ega =   BCa ^((~BCe)&  BCi );
    46d8:	03412b03          	lw	s6,52(sp)
            Ebo =   BCo ^((~BCu)&  BCa );
    46dc:	10012b83          	lw	s7,256(sp)
            Ebi =   BCi ^((~BCo)&  BCu );
    46e0:	01464633          	xor	a2,a2,s4
    46e4:	02012a03          	lw	s4,32(sp)
            Ega =   BCa ^((~BCe)&  BCi );
    46e8:	0164c4b3          	xor	s1,s1,s6
    46ec:	02912a23          	sw	s1,52(sp)
            Ebi =   BCi ^((~BCo)&  BCu );
    46f0:	014acab3          	xor	s5,s5,s4
            Ebo =   BCo ^((~BCu)&  BCa );
    46f4:	02812a03          	lw	s4,40(sp)
            Ega =   BCa ^((~BCe)&  BCi );
    46f8:	10412483          	lw	s1,260(sp)
            Ebi =   BCi ^((~BCo)&  BCu );
    46fc:	00c12e23          	sw	a2,28(sp)
            Ebo =   BCo ^((~BCu)&  BCa );
    4700:	014bca33          	xor	s4,s7,s4
    4704:	03412423          	sw	s4,40(sp)
            Ega =   BCa ^((~BCe)&  BCi );
    4708:	03812a03          	lw	s4,56(sp)
            Ebi =   BCi ^((~BCo)&  BCu );
    470c:	03512023          	sw	s5,32(sp)
            Ebu =   BCu ^((~BCa)&  BCe );
    4710:	01337333          	and	t1,t1,s3
            Ega =   BCa ^((~BCe)&  BCi );
    4714:	0144c4b3          	xor	s1,s1,s4
            Ege =   BCe ^((~BCi)&  BCo );
    4718:	03c12a03          	lw	s4,60(sp)
            Ega =   BCa ^((~BCe)&  BCi );
    471c:	02912c23          	sw	s1,56(sp)
            Eka =   BCa ^((~BCe)&  BCi );
    4720:	fffec893          	not	a7,t4
            Ege =   BCe ^((~BCi)&  BCo );
    4724:	0143ca33          	xor	s4,t2,s4
    4728:	03412e23          	sw	s4,60(sp)
    472c:	04012383          	lw	t2,64(sp)
    4730:	10812b03          	lw	s6,264(sp)
            Ego =   BCo ^((~BCu)&  BCa );
    4734:	05012b83          	lw	s7,80(sp)
            Egu =   BCu ^((~BCa)&  BCe );
    4738:	05412c03          	lw	s8,84(sp)
            Ege =   BCe ^((~BCi)&  BCo );
    473c:	007b43b3          	xor	t2,s6,t2
    4740:	04712023          	sw	t2,64(sp)
            Egi =   BCi ^((~BCo)&  BCu );
    4744:	04412383          	lw	t2,68(sp)
            Egu =   BCu ^((~BCa)&  BCe );
    4748:	05812c83          	lw	s9,88(sp)
            Eku =   BCu ^((~BCa)&  BCe );
    474c:	0b012603          	lw	a2,176(sp)
            Egi =   BCi ^((~BCo)&  BCu );
    4750:	007fc3b3          	xor	t2,t6,t2
    4754:	04712223          	sw	t2,68(sp)
    4758:	04812f83          	lw	t6,72(sp)
    475c:	10c12383          	lw	t2,268(sp)
            Eke =   BCe ^((~BCi)&  BCo );
    4760:	06412a03          	lw	s4,100(sp)
            Eku =   BCu ^((~BCa)&  BCe );
    4764:	00cf4f33          	xor	t5,t5,a2
            Egi =   BCi ^((~BCo)&  BCu );
    4768:	01f3cfb3          	xor	t6,t2,t6
    476c:	05f12423          	sw	t6,72(sp)
            Ego =   BCo ^((~BCu)&  BCa );
    4770:	11012383          	lw	t2,272(sp)
    4774:	04c12f83          	lw	t6,76(sp)
            Eka =   BCa ^((~BCe)&  BCi );
    4778:	06012983          	lw	s3,96(sp)
            Eku =   BCu ^((~BCa)&  BCe );
    477c:	0be12a23          	sw	t5,180(sp)
            Ego =   BCo ^((~BCu)&  BCa );
    4780:	01f3cfb3          	xor	t6,t2,t6
    4784:	11412383          	lw	t2,276(sp)
            Eke =   BCe ^((~BCi)&  BCo );
    4788:	06812f03          	lw	t5,104(sp)
    478c:	01457533          	and	a0,a0,s4
            Ego =   BCo ^((~BCu)&  BCa );
    4790:	0173cbb3          	xor	s7,t2,s7
    4794:	05712823          	sw	s7,80(sp)
            Egu =   BCu ^((~BCa)&  BCe );
    4798:	11812b83          	lw	s7,280(sp)
            Eke =   BCe ^((~BCi)&  BCo );
    479c:	01d54533          	xor	a0,a0,t4
            Eka =   BCa ^((~BCe)&  BCi );
    47a0:	0ac12383          	lw	t2,172(sp)
            Egu =   BCu ^((~BCa)&  BCe );
    47a4:	018bcc33          	xor	s8,s7,s8
    47a8:	11c12b83          	lw	s7,284(sp)
            Ego =   BCo ^((~BCu)&  BCa );
    47ac:	05f12623          	sw	t6,76(sp)
            Egu =   BCu ^((~BCa)&  BCe );
    47b0:	05812a23          	sw	s8,84(sp)
    47b4:	019bccb3          	xor	s9,s7,s9
            Eku =   BCu ^((~BCa)&  BCe );
    47b8:	12412b83          	lw	s7,292(sp)
            Eko =   BCo ^((~BCu)&  BCa );
    47bc:	0a412f83          	lw	t6,164(sp)
            Egu =   BCu ^((~BCa)&  BCe );
    47c0:	05912c23          	sw	s9,88(sp)
            Eku =   BCu ^((~BCa)&  BCe );
    47c4:	005bcbb3          	xor	s7,s7,t0
    47c8:	0b712c23          	sw	s7,184(sp)
            Ebu =   BCu ^((~BCa)&  BCe );
    47cc:	012e7e33          	and	t3,t3,s2
            Eka =   BCa ^((~BCe)&  BCi );
    47d0:	0138f8b3          	and	a7,a7,s3
            Ema =   BCa ^((~BCe)&  BCi );
    47d4:	01412903          	lw	s2,20(sp)
            Eki =   BCi ^((~BCo)&  BCu );
    47d8:	12012983          	lw	s3,288(sp)
            Eke =   BCe ^((~BCi)&  BCo );
    47dc:	01e5f5b3          	and	a1,a1,t5
            Eko =   BCo ^((~BCu)&  BCa );
    47e0:	0a812f03          	lw	t5,168(sp)
            Ema =   BCa ^((~BCe)&  BCi );
    47e4:	01812b03          	lw	s6,24(sp)
            Emo =   BCo ^((~BCu)&  BCa );
    47e8:	07c12a03          	lw	s4,124(sp)
    47ec:	08012483          	lw	s1,128(sp)
            Eke =   BCe ^((~BCi)&  BCo );
    47f0:	0aa12623          	sw	a0,172(sp)
    47f4:	05c12503          	lw	a0,92(sp)
            Eki =   BCi ^((~BCo)&  BCu );
    47f8:	0056f6b3          	and	a3,a3,t0
            Emo =   BCo ^((~BCu)&  BCa );
    47fc:	fffa4a93          	not	s5,s4
            Eke =   BCe ^((~BCi)&  BCo );
    4800:	00a5c5b3          	xor	a1,a1,a0
            Emo =   BCo ^((~BCu)&  BCa );
    4804:	fff4ca13          	not	s4,s1
            Ebu =   BCu ^((~BCa)&  BCe );
    4808:	02c12483          	lw	s1,44(sp)
            Eki =   BCi ^((~BCo)&  BCu );
    480c:	0076c533          	xor	a0,a3,t2
            Eke =   BCe ^((~BCi)&  BCo );
    4810:	04b12e23          	sw	a1,92(sp)
            Eko =   BCo ^((~BCu)&  BCa );
    4814:	06412683          	lw	a3,100(sp)
            Eki =   BCi ^((~BCo)&  BCu );
    4818:	06012583          	lw	a1,96(sp)
    481c:	00c9f633          	and	a2,s3,a2
            Eko =   BCo ^((~BCu)&  BCa );
    4820:	01f77733          	and	a4,a4,t6
            Ebu =   BCu ^((~BCa)&  BCe );
    4824:	009e4e33          	xor	t3,t3,s1
            Eme =   BCe ^((~BCi)&  BCo );
    4828:	06c12c03          	lw	s8,108(sp)
            Eki =   BCi ^((~BCo)&  BCu );
    482c:	00b645b3          	xor	a1,a2,a1
            Eko =   BCo ^((~BCu)&  BCa );
    4830:	00d746b3          	xor	a3,a4,a3
            Ebu =   BCu ^((~BCa)&  BCe );
    4834:	03c12623          	sw	t3,44(sp)
            Eko =   BCo ^((~BCu)&  BCa );
    4838:	06812703          	lw	a4,104(sp)
            Ebu =   BCu ^((~BCa)&  BCe );
    483c:	03012e03          	lw	t3,48(sp)
            Ema =   BCa ^((~BCe)&  BCi );
    4840:	06c12603          	lw	a2,108(sp)
            Eko =   BCo ^((~BCu)&  BCa );
    4844:	fff2c793          	not	a5,t0
            Eka =   BCa ^((~BCe)&  BCi );
    4848:	00787833          	and	a6,a6,t2
            Emi =   BCi ^((~BCo)&  BCu );
    484c:	07812283          	lw	t0,120(sp)
            Eki =   BCi ^((~BCo)&  BCu );
    4850:	06b12023          	sw	a1,96(sp)
            Eme =   BCe ^((~BCi)&  BCo );
    4854:	07412583          	lw	a1,116(sp)
            Eko =   BCo ^((~BCu)&  BCa );
    4858:	01e7f7b3          	and	a5,a5,t5
            Eka =   BCa ^((~BCe)&  BCi );
    485c:	01e84833          	xor	a6,a6,t5
            Eme =   BCe ^((~BCi)&  BCo );
    4860:	07012b83          	lw	s7,112(sp)
            Emi =   BCi ^((~BCo)&  BCu );
    4864:	07412983          	lw	s3,116(sp)
            Ebu =   BCu ^((~BCa)&  BCe );
    4868:	01c34333          	xor	t1,t1,t3
            Eka =   BCa ^((~BCe)&  BCi );
    486c:	01f8c8b3          	xor	a7,a7,t6
            Ema =   BCa ^((~BCe)&  BCi );
    4870:	fff94d93          	not	s11,s2
            Eme =   BCe ^((~BCi)&  BCo );
    4874:	fffc4c93          	not	s9,s8
            Eka =   BCa ^((~BCe)&  BCi );
    4878:	0b012423          	sw	a6,168(sp)
            Eko =   BCo ^((~BCu)&  BCa );
    487c:	00e7c833          	xor	a6,a5,a4
            Emi =   BCi ^((~BCo)&  BCu );
    4880:	08012483          	lw	s1,128(sp)
            Emu =   BCu ^((~BCa)&  BCe );
    4884:	01412703          	lw	a4,20(sp)
            Ema =   BCa ^((~BCe)&  BCi );
    4888:	00cdfdb3          	and	s11,s11,a2
    488c:	fffb4d13          	not	s10,s6
    4890:	07012603          	lw	a2,112(sp)
            Emi =   BCi ^((~BCo)&  BCu );
    4894:	fff2cb13          	not	s6,t0
            Ebu =   BCu ^((~BCa)&  BCe );
    4898:	02612823          	sw	t1,48(sp)
            Emu =   BCu ^((~BCa)&  BCe );
    489c:	01012283          	lw	t0,16(sp)
            Eka =   BCa ^((~BCe)&  BCi );
    48a0:	0b112223          	sw	a7,164(sp)
            Eki =   BCi ^((~BCo)&  BCu );
    48a4:	0aa12823          	sw	a0,176(sp)
            Eko =   BCo ^((~BCu)&  BCa );
    48a8:	07012423          	sw	a6,104(sp)
            Emi =   BCi ^((~BCo)&  BCu );
    48ac:	07c12503          	lw	a0,124(sp)
            Eme =   BCe ^((~BCi)&  BCo );
    48b0:	00bcfcb3          	and	s9,s9,a1
            Emo =   BCo ^((~BCu)&  BCa );
    48b4:	0a812e23          	sw	s0,188(sp)
            Eme =   BCe ^((~BCi)&  BCo );
    48b8:	07812583          	lw	a1,120(sp)
            Eko =   BCo ^((~BCu)&  BCa );
    48bc:	06d12223          	sw	a3,100(sp)
            Emu =   BCu ^((~BCa)&  BCe );
    48c0:	01812683          	lw	a3,24(sp)
            Esa =   BCa ^((~BCe)&  BCi );
    48c4:	0c812803          	lw	a6,200(sp)
            Ese =   BCe ^((~BCi)&  BCo );
            Esi =   BCi ^((~BCo)&  BCu );
    48c8:	08812f03          	lw	t5,136(sp)
            Eso =   BCo ^((~BCu)&  BCa );
    48cc:	08c12f83          	lw	t6,140(sp)
            Eme =   BCe ^((~BCi)&  BCo );
    48d0:	fffbcc13          	not	s8,s7
            Emi =   BCi ^((~BCo)&  BCu );
    48d4:	fff9cb93          	not	s7,s3
            Esa =   BCa ^((~BCe)&  BCi );
    48d8:	0cc12883          	lw	a7,204(sp)
            Ese =   BCe ^((~BCi)&  BCo );
    48dc:	0d412e03          	lw	t3,212(sp)
            Esi =   BCi ^((~BCo)&  BCu );
    48e0:	08412e83          	lw	t4,132(sp)
            Esu =   BCu ^((~BCa)&  BCe );

            //    prepareTheta
            BCa = Eba^Ega^Eka^Ema^Esa;
    48e4:	09c12783          	lw	a5,156(sp)
            Emi =   BCi ^((~BCo)&  BCu );
    48e8:	00abfbb3          	and	s7,s7,a0
    48ec:	009b7b33          	and	s6,s6,s1
            Eso =   BCo ^((~BCu)&  BCa );
    48f0:	ffffc513          	not	a0,t6
            Esa =   BCa ^((~BCe)&  BCi );
    48f4:	fff84493          	not	s1,a6
            Eso =   BCo ^((~BCu)&  BCa );
    48f8:	09012f83          	lw	t6,144(sp)
            Esi =   BCi ^((~BCo)&  BCu );
    48fc:	ffff4813          	not	a6,t5
            BCa = Eba^Ega^Eka^Ema^Esa;
    4900:	03412f03          	lw	t5,52(sp)
            Eme =   BCe ^((~BCi)&  BCo );
    4904:	00bc7c33          	and	s8,s8,a1
            Emo =   BCo ^((~BCu)&  BCa );
    4908:	008afab3          	and	s5,s5,s0
    490c:	005a7a33          	and	s4,s4,t0
            Emu =   BCu ^((~BCa)&  BCe );
    4910:	fff44993          	not	s3,s0
    4914:	fff2c913          	not	s2,t0
            Esa =   BCa ^((~BCe)&  BCi );
    4918:	fff8c413          	not	s0,a7
            Ese =   BCe ^((~BCi)&  BCo );
    491c:	fffe4293          	not	t0,t3
            Esi =   BCi ^((~BCo)&  BCu );
    4920:	fffec893          	not	a7,t4
            Esu =   BCu ^((~BCa)&  BCe );
    4924:	0c412e03          	lw	t3,196(sp)
            BCa = Eba^Ega^Eka^Ema^Esa;
    4928:	0a012e83          	lw	t4,160(sp)
            Eso =   BCo ^((~BCu)&  BCa );
    492c:	ffffc593          	not	a1,t6
            BCa = Eba^Ega^Eka^Ema^Esa;
    4930:	01e7cfb3          	xor	t6,a5,t5
    4934:	03812f03          	lw	t5,56(sp)
            Ese =   BCe ^((~BCi)&  BCo );
    4938:	0d012303          	lw	t1,208(sp)
            BCe = Ebe^Ege^Eke^Eme^Ese;
    493c:	09412783          	lw	a5,148(sp)
            Emu =   BCu ^((~BCa)&  BCe );
    4940:	00e9f9b3          	and	s3,s3,a4
    4944:	00d97933          	and	s2,s2,a3
            BCe = Ebe^Ege^Eke^Eme^Ese;
    4948:	04012703          	lw	a4,64(sp)
            Esu =   BCu ^((~BCa)&  BCe );
    494c:	fffe4693          	not	a3,t3
            BCa = Eba^Ega^Eka^Ema^Esa;
    4950:	01eecf33          	xor	t5,t4,t5
            BCe = Ebe^Ege^Eke^Eme^Ese;
    4954:	09812e03          	lw	t3,152(sp)
    4958:	03c12e83          	lw	t4,60(sp)
            Ese =   BCe ^((~BCi)&  BCo );
    495c:	fff34393          	not	t2,t1
            BCe = Ebe^Ege^Eke^Eme^Ese;
    4960:	00ee4e33          	xor	t3,t3,a4
            Esu =   BCu ^((~BCa)&  BCe );
    4964:	0c012303          	lw	t1,192(sp)
            BCi = Ebi^Egi^Eki^Emi^Esi;
    4968:	04412703          	lw	a4,68(sp)
            BCe = Ebe^Ege^Eke^Eme^Ese;
    496c:	01d7ceb3          	xor	t4,a5,t4
            BCi = Ebi^Egi^Eki^Emi^Esi;
    4970:	01c12783          	lw	a5,28(sp)
            Ema =   BCa ^((~BCe)&  BCi );
    4974:	00cd7d33          	and	s10,s10,a2
            Esu =   BCu ^((~BCa)&  BCe );
    4978:	fff34613          	not	a2,t1
            BCi = Ebi^Egi^Eki^Emi^Esi;
    497c:	00e7c333          	xor	t1,a5,a4
    4980:	04812783          	lw	a5,72(sp)
    4984:	02012703          	lw	a4,32(sp)
            Emu =   BCu ^((~BCa)&  BCe );
    4988:	0d212c23          	sw	s2,216(sp)
            BCo = Ebo^Ego^Eko^Emo^Eso;
    498c:	04c12903          	lw	s2,76(sp)
            BCi = Ebi^Egi^Eki^Emi^Esi;
    4990:	00f74733          	xor	a4,a4,a5
            BCo = Ebo^Ego^Eko^Emo^Eso;
    4994:	02412783          	lw	a5,36(sp)
            Ese =   BCe ^((~BCi)&  BCo );
    4998:	0c712e23          	sw	t2,220(sp)
            BCo = Ebo^Ego^Eko^Emo^Eso;
    499c:	05012383          	lw	t2,80(sp)
    49a0:	0127c7b3          	xor	a5,a5,s2
    49a4:	02812903          	lw	s2,40(sp)
    49a8:	007943b3          	xor	t2,s2,t2
    49ac:	0e712023          	sw	t2,224(sp)
            BCu = Ebu^Egu^Eku^Emu^Esu;
    49b0:	0b412903          	lw	s2,180(sp)
    49b4:	05412383          	lw	t2,84(sp)
    49b8:	0123c3b3          	xor	t2,t2,s2
    49bc:	0e712223          	sw	t2,228(sp)
    49c0:	0b812903          	lw	s2,184(sp)
    49c4:	05812383          	lw	t2,88(sp)
    49c8:	0123c3b3          	xor	t2,t2,s2
            Ema =   BCa ^((~BCe)&  BCi );
    49cc:	0bc12903          	lw	s2,188(sp)
            BCu = Ebu^Egu^Eku^Emu^Esu;
    49d0:	0e712423          	sw	t2,232(sp)
            Ema =   BCa ^((~BCe)&  BCi );
    49d4:	012dc3b3          	xor	t2,s11,s2
            Eme =   BCe ^((~BCi)&  BCo );
    49d8:	01412903          	lw	s2,20(sp)
            Ema =   BCa ^((~BCe)&  BCi );
    49dc:	01012d83          	lw	s11,16(sp)
    49e0:	0a712e23          	sw	t2,188(sp)
            Eme =   BCe ^((~BCi)&  BCo );
    49e4:	012cccb3          	xor	s9,s9,s2
    49e8:	01812903          	lw	s2,24(sp)
            Ema =   BCa ^((~BCe)&  BCi );
    49ec:	01bd4d33          	xor	s10,s10,s11
            Ese =   BCe ^((~BCi)&  BCo );
    49f0:	0dc12383          	lw	t2,220(sp)
            Eme =   BCe ^((~BCi)&  BCo );
    49f4:	012c4db3          	xor	s11,s8,s2
            Emi =   BCi ^((~BCo)&  BCu );
    49f8:	06c12c03          	lw	s8,108(sp)
            Emo =   BCo ^((~BCu)&  BCa );
    49fc:	07812903          	lw	s2,120(sp)
            Eme =   BCe ^((~BCi)&  BCo );
    4a00:	01b12c23          	sw	s11,24(sp)
            Emi =   BCi ^((~BCo)&  BCu );
    4a04:	018bcc33          	xor	s8,s7,s8
    4a08:	07012b83          	lw	s7,112(sp)
            Emu =   BCu ^((~BCa)&  BCe );
    4a0c:	08012d83          	lw	s11,128(sp)
            Ema =   BCa ^((~BCe)&  BCi );
    4a10:	01a12823          	sw	s10,16(sp)
            Emi =   BCi ^((~BCo)&  BCu );
    4a14:	017b4bb3          	xor	s7,s6,s7
            Emo =   BCo ^((~BCu)&  BCa );
    4a18:	07412b03          	lw	s6,116(sp)
            Esa =   BCa ^((~BCe)&  BCi );
    4a1c:	0d012d03          	lw	s10,208(sp)
            Eme =   BCe ^((~BCi)&  BCo );
    4a20:	01912a23          	sw	s9,20(sp)
            Emo =   BCo ^((~BCu)&  BCa );
    4a24:	016acb33          	xor	s6,s5,s6
    4a28:	012a4ab3          	xor	s5,s4,s2
            Emu =   BCu ^((~BCa)&  BCe );
    4a2c:	07c12a03          	lw	s4,124(sp)
    4a30:	0d812903          	lw	s2,216(sp)
            Emo =   BCo ^((~BCu)&  BCa );
    4a34:	07612a23          	sw	s6,116(sp)
            Emu =   BCu ^((~BCa)&  BCe );
    4a38:	0149cb33          	xor	s6,s3,s4
            Esi =   BCi ^((~BCo)&  BCu );
    4a3c:	08c12a03          	lw	s4,140(sp)
            Ese =   BCe ^((~BCi)&  BCo );
    4a40:	08812983          	lw	s3,136(sp)
            Emu =   BCu ^((~BCa)&  BCe );
    4a44:	01b94db3          	xor	s11,s2,s11
            Esi =   BCi ^((~BCo)&  BCu );
    4a48:	0148f8b3          	and	a7,a7,s4
            Ese =   BCe ^((~BCi)&  BCo );
    4a4c:	08412903          	lw	s2,132(sp)
            Esi =   BCi ^((~BCo)&  BCu );
    4a50:	09012a03          	lw	s4,144(sp)
            Emi =   BCi ^((~BCo)&  BCu );
    4a54:	07812623          	sw	s8,108(sp)
            Emu =   BCu ^((~BCa)&  BCe );
    4a58:	07612c23          	sw	s6,120(sp)
    4a5c:	07b12e23          	sw	s11,124(sp)
            Eso =   BCo ^((~BCu)&  BCa );
    4a60:	0c012b03          	lw	s6,192(sp)
            Esa =   BCa ^((~BCe)&  BCi );
    4a64:	0d412d83          	lw	s11,212(sp)
            Ese =   BCe ^((~BCi)&  BCo );
    4a68:	0132f2b3          	and	t0,t0,s3
            Esi =   BCi ^((~BCo)&  BCu );
    4a6c:	0d112823          	sw	a7,208(sp)
            Emi =   BCi ^((~BCo)&  BCu );
    4a70:	07712823          	sw	s7,112(sp)
            Eso =   BCo ^((~BCu)&  BCa );
    4a74:	0c412b83          	lw	s7,196(sp)
            BCa = Eba^Ega^Eka^Ema^Esa;
    4a78:	0a412983          	lw	s3,164(sp)
            Esi =   BCi ^((~BCo)&  BCu );
    4a7c:	01487833          	and	a6,a6,s4
            BCe = Ebe^Ege^Eke^Eme^Ese;
    4a80:	05c12a03          	lw	s4,92(sp)
            BCa = Eba^Ega^Eka^Ema^Esa;
    4a84:	013fcfb3          	xor	t6,t6,s3
    4a88:	0a812983          	lw	s3,168(sp)
            Esu =   BCu ^((~BCa)&  BCe );
    4a8c:	0cc12c83          	lw	s9,204(sp)
            BCe = Ebe^Ege^Eke^Eme^Ese;
    4a90:	014e4e33          	xor	t3,t3,s4
            BCa = Eba^Ega^Eka^Ema^Esa;
    4a94:	013f4f33          	xor	t5,t5,s3
            BCe = Ebe^Ege^Eke^Eme^Ese;
    4a98:	0ac12983          	lw	s3,172(sp)
            BCi = Ebi^Egi^Eki^Emi^Esi;
    4a9c:	0b012a03          	lw	s4,176(sp)
            Ese =   BCe ^((~BCi)&  BCo );
    4aa0:	0192c2b3          	xor	t0,t0,s9
            BCe = Ebe^Ege^Eke^Eme^Ese;
    4aa4:	013eceb3          	xor	t4,t4,s3
            BCi = Ebi^Egi^Eki^Emi^Esi;
    4aa8:	06012983          	lw	s3,96(sp)
            Ese =   BCe ^((~BCi)&  BCo );
    4aac:	0123f3b3          	and	t2,t2,s2
            BCi = Ebi^Egi^Eki^Emi^Esi;
    4ab0:	01474733          	xor	a4,a4,s4
            BCo = Ebo^Ego^Eko^Emo^Eso;
    4ab4:	06412903          	lw	s2,100(sp)
    4ab8:	0e012a03          	lw	s4,224(sp)
            BCi = Ebi^Egi^Eki^Emi^Esi;
    4abc:	01334333          	xor	t1,t1,s3
            Ese =   BCe ^((~BCi)&  BCo );
    4ac0:	0c512023          	sw	t0,192(sp)
            BCo = Ebo^Ego^Eko^Emo^Eso;
    4ac4:	06812983          	lw	s3,104(sp)
            Esi =   BCi ^((~BCo)&  BCu );
    4ac8:	01b842b3          	xor	t0,a6,s11
            Eso =   BCo ^((~BCu)&  BCa );
    4acc:	08412803          	lw	a6,132(sp)
    4ad0:	01657533          	and	a0,a0,s6
            BCo = Ebo^Ego^Eko^Emo^Eso;
    4ad4:	0127c7b3          	xor	a5,a5,s2
            Eso =   BCo ^((~BCu)&  BCa );
    4ad8:	01054833          	xor	a6,a0,a6
            BCo = Ebo^Ego^Eko^Emo^Eso;
    4adc:	013a4933          	xor	s2,s4,s3
            Eso =   BCo ^((~BCu)&  BCa );
    4ae0:	08812503          	lw	a0,136(sp)
            BCu = Ebu^Egu^Eku^Emu^Esu;
    4ae4:	0e412a03          	lw	s4,228(sp)
    4ae8:	02c12983          	lw	s3,44(sp)
            Esu =   BCu ^((~BCa)&  BCe );
    4aec:	0c812c03          	lw	s8,200(sp)
            Eso =   BCo ^((~BCu)&  BCa );
    4af0:	0175f5b3          	and	a1,a1,s7
            BCu = Ebu^Egu^Eku^Emu^Esu;
    4af4:	0e812883          	lw	a7,232(sp)
    4af8:	013a49b3          	xor	s3,s4,s3
            Eso =   BCo ^((~BCu)&  BCa );
    4afc:	00a5c533          	xor	a0,a1,a0
            BCu = Ebu^Egu^Eku^Emu^Esu;
    4b00:	03012a03          	lw	s4,48(sp)
            Esu =   BCu ^((~BCa)&  BCe );
    4b04:	08c12583          	lw	a1,140(sp)
    4b08:	01867633          	and	a2,a2,s8
            BCu = Ebu^Egu^Eku^Emu^Esu;
    4b0c:	0148ca33          	xor	s4,a7,s4
            Esu =   BCu ^((~BCa)&  BCe );
    4b10:	00b64633          	xor	a2,a2,a1
            Esi =   BCi ^((~BCo)&  BCu );
    4b14:	0d012883          	lw	a7,208(sp)
            Esu =   BCu ^((~BCa)&  BCe );
    4b18:	08c12423          	sw	a2,136(sp)
    4b1c:	09012603          	lw	a2,144(sp)
            Esa =   BCa ^((~BCe)&  BCi );
    4b20:	01b47433          	and	s0,s0,s11
    4b24:	01744433          	xor	s0,s0,s7
            Esu =   BCu ^((~BCa)&  BCe );
    4b28:	0196f6b3          	and	a3,a3,s9
            Ese =   BCe ^((~BCi)&  BCo );
    4b2c:	0183cbb3          	xor	s7,t2,s8
            Esi =   BCi ^((~BCo)&  BCu );
    4b30:	01a8c8b3          	xor	a7,a7,s10
            Esu =   BCu ^((~BCa)&  BCe );
    4b34:	00c6cdb3          	xor	s11,a3,a2
            BCe = Ebe^Ege^Eke^Eme^Ese;
    4b38:	01412c83          	lw	s9,20(sp)
            BCa = Eba^Ega^Eka^Ema^Esa;
    4b3c:	0bc12683          	lw	a3,188(sp)
    4b40:	01012603          	lw	a2,16(sp)
            BCe = Ebe^Ege^Eke^Eme^Ese;
    4b44:	01812583          	lw	a1,24(sp)
            BCi = Ebi^Egi^Eki^Emi^Esi;
    4b48:	06c12c03          	lw	s8,108(sp)
            Esi =   BCi ^((~BCo)&  BCu );
    4b4c:	0d112223          	sw	a7,196(sp)
    4b50:	0c512423          	sw	t0,200(sp)
            Eso =   BCo ^((~BCu)&  BCa );
    4b54:	09012223          	sw	a6,132(sp)
            Ese =   BCe ^((~BCi)&  BCo );
    4b58:	09712023          	sw	s7,128(sp)
            BCi = Ebi^Egi^Eki^Emi^Esi;
    4b5c:	07012b83          	lw	s7,112(sp)
            BCu = Ebu^Egu^Eku^Emu^Esu;
    4b60:	07c12803          	lw	a6,124(sp)
            Esa =   BCa ^((~BCe)&  BCi );
    4b64:	01a4f4b3          	and	s1,s1,s10
    4b68:	0164c4b3          	xor	s1,s1,s6
            BCo = Ebo^Ego^Eko^Emo^Eso;
    4b6c:	07412b03          	lw	s6,116(sp)
            Eso =   BCo ^((~BCu)&  BCa );
    4b70:	00050d13          	mv	s10,a0
            BCu = Ebu^Egu^Eku^Emu^Esu;
    4b74:	010a42b3          	xor	t0,s4,a6
    4b78:	07812503          	lw	a0,120(sp)
            BCo = Ebo^Ego^Eko^Emo^Eso;
    4b7c:	08412803          	lw	a6,132(sp)
            BCa = Eba^Ega^Eka^Ema^Esa;
    4b80:	00dfcfb3          	xor	t6,t6,a3
    4b84:	00cf4f33          	xor	t5,t5,a2
            BCe = Ebe^Ege^Eke^Eme^Ese;
    4b88:	08012683          	lw	a3,128(sp)
    4b8c:	0c012603          	lw	a2,192(sp)
            BCo = Ebo^Ego^Eko^Emo^Eso;
    4b90:	0167c7b3          	xor	a5,a5,s6
            BCu = Ebu^Egu^Eku^Emu^Esu;
    4b94:	00a9c3b3          	xor	t2,s3,a0
            BCe = Ebe^Ege^Eke^Eme^Ese;
    4b98:	019eceb3          	xor	t4,t4,s9
            BCo = Ebo^Ego^Eko^Emo^Eso;
    4b9c:	0107c9b3          	xor	s3,a5,a6
            BCe = Ebe^Ege^Eke^Eme^Ese;
    4ba0:	00be4e33          	xor	t3,t3,a1
            BCu = Ebu^Egu^Eku^Emu^Esu;
    4ba4:	08812783          	lw	a5,136(sp)
            BCe = Ebe^Ege^Eke^Eme^Ese;
    4ba8:	00deceb3          	xor	t4,t4,a3
    4bac:	00ce4e33          	xor	t3,t3,a2
            BCi = Ebi^Egi^Eki^Emi^Esi;
    4bb0:	0c812583          	lw	a1,200(sp)
            BCo = Ebo^Ego^Eko^Emo^Eso;
    4bb4:	01594933          	xor	s2,s2,s5
            BCa = Eba^Ega^Eka^Ema^Esa;
    4bb8:	008f4f33          	xor	t5,t5,s0
            BCo = Ebo^Ego^Eko^Emo^Eso;
    4bbc:	01a94933          	xor	s2,s2,s10
            BCi = Ebi^Egi^Eki^Emi^Esi;
    4bc0:	0c412883          	lw	a7,196(sp)
            BCa = Eba^Ega^Eka^Ema^Esa;
    4bc4:	08812823          	sw	s0,144(sp)
            BCo = Ebo^Ego^Eko^Emo^Eso;
    4bc8:	0da12623          	sw	s10,204(sp)

            //thetaRhoPiChiIotaPrepareTheta(round+1, E, A)
            Da = BCu^ROL(BCe, 1);
    4bcc:	01fed413          	srli	s0,t4,0x1f
    4bd0:	001e1d13          	slli	s10,t3,0x1
            BCa = Eba^Ega^Eka^Ema^Esa;
    4bd4:	009fcfb3          	xor	t6,t6,s1
            BCu = Ebu^Egu^Eku^Emu^Esu;
    4bd8:	00f3c3b3          	xor	t2,t2,a5
    4bdc:	01b2c2b3          	xor	t0,t0,s11
            BCi = Ebi^Egi^Eki^Emi^Esi;
    4be0:	01774733          	xor	a4,a4,s7
            Da = BCu^ROL(BCe, 1);
    4be4:	01a46433          	or	s0,s0,s10
            BCa = Eba^Ega^Eka^Ema^Esa;
    4be8:	08912623          	sw	s1,140(sp)
            Da = BCu^ROL(BCe, 1);
    4bec:	001e9d13          	slli	s10,t4,0x1
    4bf0:	01fe5493          	srli	s1,t3,0x1f
            BCi = Ebi^Egi^Eki^Emi^Esi;
    4bf4:	00b74a33          	xor	s4,a4,a1
            Da = BCu^ROL(BCe, 1);
    4bf8:	01a4e4b3          	or	s1,s1,s10
            BCi = Ebi^Egi^Eki^Emi^Esi;
    4bfc:	01834333          	xor	t1,t1,s8
            De = BCa^ROL(BCi, 1);
            Di = BCe^ROL(BCo, 1);
            Do = BCi^ROL(BCu, 1);
    4c00:	01f3dd13          	srli	s10,t2,0x1f
    4c04:	00129593          	slli	a1,t0,0x1
            BCi = Ebi^Egi^Eki^Emi^Esi;
    4c08:	01134333          	xor	t1,t1,a7
            Di = BCe^ROL(BCo, 1);
    4c0c:	01f95b13          	srli	s6,s2,0x1f
    4c10:	00199893          	slli	a7,s3,0x1
            Do = BCi^ROL(BCu, 1);
    4c14:	00bd65b3          	or	a1,s10,a1
    4c18:	01f2dd13          	srli	s10,t0,0x1f
            Da = BCu^ROL(BCe, 1);
    4c1c:	005442b3          	xor	t0,s0,t0

            Eba ^= Da;
            BCa = Eba;
            Ege ^= De;
            BCe = ROL(Ege, 44);
            Eki ^= Di;
    4c20:	06012403          	lw	s0,96(sp)
            De = BCa^ROL(BCi, 1);
    4c24:	00131c13          	slli	s8,t1,0x1
    4c28:	01fa5713          	srli	a4,s4,0x1f
            Di = BCe^ROL(BCo, 1);
    4c2c:	011b68b3          	or	a7,s6,a7
    4c30:	01d8c8b3          	xor	a7,a7,t4
    4c34:	01f9db93          	srli	s7,s3,0x1f
    4c38:	00191813          	slli	a6,s2,0x1
            Do = BCi^ROL(BCu, 1);
    4c3c:	00139513          	slli	a0,t2,0x1
            De = BCa^ROL(BCi, 1);
    4c40:	01876733          	or	a4,a4,s8
    4c44:	01f74733          	xor	a4,a4,t6
    4c48:	001a1c93          	slli	s9,s4,0x1
    4c4c:	01f35793          	srli	a5,t1,0x1f
            Du = BCo^ROL(BCa, 1);
    4c50:	001f9613          	slli	a2,t6,0x1
            Di = BCe^ROL(BCo, 1);
    4c54:	010be833          	or	a6,s7,a6
            Do = BCi^ROL(BCu, 1);
    4c58:	00ad6533          	or	a0,s10,a0
            Eki ^= Di;
    4c5c:	01144bb3          	xor	s7,s0,a7
            Du = BCo^ROL(BCa, 1);
    4c60:	01ffdd13          	srli	s10,t6,0x1f
            Eki ^= Di;
    4c64:	0b012403          	lw	s0,176(sp)
            Ege ^= De;
    4c68:	04012f83          	lw	t6,64(sp)
            De = BCa^ROL(BCi, 1);
    4c6c:	0197e7b3          	or	a5,a5,s9
    4c70:	01e7c7b3          	xor	a5,a5,t5
            Di = BCe^ROL(BCo, 1);
    4c74:	01c84833          	xor	a6,a6,t3
            Du = BCo^ROL(BCa, 1);
    4c78:	001f1693          	slli	a3,t5,0x1
            Do = BCi^ROL(BCu, 1);
    4c7c:	0145c5b3          	xor	a1,a1,s4
            Ege ^= De;
    4c80:	00ffcc33          	xor	s8,t6,a5
            Eki ^= Di;
    4c84:	01044b33          	xor	s6,s0,a6
            Abo =   BCo ^((~BCu)&  BCa );
            Abu =   BCu ^((~BCa)&  BCe );

            Ebo ^= Do;
            BCa = ROL(Ebo, 28);
            Egu ^= Du;
    4c88:	05412f83          	lw	t6,84(sp)
            Ege ^= De;
    4c8c:	03c12a03          	lw	s4,60(sp)
            Emo ^= Do;
    4c90:	07412403          	lw	s0,116(sp)
            Du = BCo^ROL(BCa, 1);
    4c94:	00dd66b3          	or	a3,s10,a3
    4c98:	01ff5d13          	srli	s10,t5,0x1f
    4c9c:	00cd6633          	or	a2,s10,a2
            Do = BCi^ROL(BCu, 1);
    4ca0:	00654533          	xor	a0,a0,t1
            Du = BCo^ROL(BCa, 1);
    4ca4:	01364633          	xor	a2,a2,s3
            Ege ^= De;
    4ca8:	00ea4cb3          	xor	s9,s4,a4
            Emo ^= Do;
    4cac:	00a44a33          	xor	s4,s0,a0
            Egu ^= Du;
    4cb0:	00cfc433          	xor	s0,t6,a2
    4cb4:	05812f83          	lw	t6,88(sp)
            Du = BCo^ROL(BCa, 1);
    4cb8:	0126c6b3          	xor	a3,a3,s2
            Ebo ^= Do;
    4cbc:	02412f03          	lw	t5,36(sp)
            Da = BCu^ROL(BCe, 1);
    4cc0:	0074c3b3          	xor	t2,s1,t2
            Egu ^= Du;
    4cc4:	00dfc4b3          	xor	s1,t6,a3
            BCe = ROL(Egu, 20);
            Eka ^= Da;
    4cc8:	0a412f83          	lw	t6,164(sp)
            Esu ^= Du;
    4ccc:	08812303          	lw	t1,136(sp)
            Ebo ^= Do;
    4cd0:	00af4933          	xor	s2,t5,a0
            BCi = ROL(Eka, 3);
            Eme ^= De;
    4cd4:	01812e03          	lw	t3,24(sp)
            Ebo ^= Do;
    4cd8:	02812f03          	lw	t5,40(sp)
            Eka ^= Da;
    4cdc:	007fceb3          	xor	t4,t6,t2
    4ce0:	0a812f83          	lw	t6,168(sp)
            Esu ^= Du;
    4ce4:	00c34d33          	xor	s10,t1,a2
            Age =   BCe ^((~BCi)&  BCo );
            Agi =   BCi ^((~BCo)&  BCu );
            Ago =   BCo ^((~BCu)&  BCa );
            Agu =   BCu ^((~BCa)&  BCe );

            Ebe ^= De;
    4ce8:	09412303          	lw	t1,148(sp)
            Ebo ^= Do;
    4cec:	00bf49b3          	xor	s3,t5,a1
            Eme ^= De;
    4cf0:	00fe4f33          	xor	t5,t3,a5
            Esi ^= Di;
    4cf4:	0c412e03          	lw	t3,196(sp)
            Eka ^= Da;
    4cf8:	005fcfb3          	xor	t6,t6,t0
            Ebe ^= De;
    4cfc:	00e34333          	xor	t1,t1,a4
            Eka ^= Da;
    4d00:	05d12a23          	sw	t4,84(sp)
    4d04:	05f12c23          	sw	t6,88(sp)
            Esi ^= Di;
    4d08:	011e4eb3          	xor	t4,t3,a7
            Eme ^= De;
    4d0c:	01412f83          	lw	t6,20(sp)
            Esi ^= Di;
    4d10:	0c812e03          	lw	t3,200(sp)
            Ebe ^= De;
    4d14:	06612a23          	sw	t1,116(sp)
    4d18:	09812303          	lw	t1,152(sp)
            Esi ^= Di;
    4d1c:	010e4e33          	xor	t3,t3,a6
            Emo ^= Do;
    4d20:	00bacab3          	xor	s5,s5,a1
            Ebe ^= De;
    4d24:	00f34333          	xor	t1,t1,a5
    4d28:	08612423          	sw	t1,136(sp)
            BCa = ROL(Ebe, 1);
            Egi ^= Di;
    4d2c:	04412303          	lw	t1,68(sp)
            Esu ^= Du;
    4d30:	00ddcdb3          	xor	s11,s11,a3
            Eme ^= De;
    4d34:	00efcfb3          	xor	t6,t6,a4
            Egi ^= Di;
    4d38:	01134333          	xor	t1,t1,a7
    4d3c:	08612a23          	sw	t1,148(sp)
    4d40:	04812303          	lw	t1,72(sp)
    4d44:	01034333          	xor	t1,t1,a6
    4d48:	08612c23          	sw	t1,152(sp)
            BCe = ROL(Egi, 6);
            Eko ^= Do;
    4d4c:	06412303          	lw	t1,100(sp)
    4d50:	00a34333          	xor	t1,t1,a0
    4d54:	0a612223          	sw	t1,164(sp)
    4d58:	06812303          	lw	t1,104(sp)
    4d5c:	00b34333          	xor	t1,t1,a1
    4d60:	0a612423          	sw	t1,168(sp)
            BCi = ROL(Eko, 25);
            Emu ^= Du;
    4d64:	07812303          	lw	t1,120(sp)
    4d68:	00c34333          	xor	t1,t1,a2
    4d6c:	0a612823          	sw	t1,176(sp)
    4d70:	07c12303          	lw	t1,124(sp)
    4d74:	00d34333          	xor	t1,t1,a3
    4d78:	0c612223          	sw	t1,196(sp)
            BCo = ROL(Emu, 8);
            Esa ^= Da;
    4d7c:	08c12303          	lw	t1,140(sp)
    4d80:	00734333          	xor	t1,t1,t2
    4d84:	0c612423          	sw	t1,200(sp)
    4d88:	09012303          	lw	t1,144(sp)
    4d8c:	00534333          	xor	t1,t1,t0
    4d90:	0c612c23          	sw	t1,216(sp)
            Ake =   BCe ^((~BCi)&  BCo );
            Aki =   BCi ^((~BCo)&  BCu );
            Ako =   BCo ^((~BCu)&  BCa );
            Aku =   BCu ^((~BCa)&  BCe );

            Ebu ^= Du;
    4d94:	02c12303          	lw	t1,44(sp)
    4d98:	00c34333          	xor	t1,t1,a2
    4d9c:	0c612e23          	sw	t1,220(sp)
    4da0:	03012303          	lw	t1,48(sp)
    4da4:	00d34333          	xor	t1,t1,a3
    4da8:	0e612023          	sw	t1,224(sp)
            BCa = ROL(Ebu, 27);
            Ega ^= Da;
    4dac:	03412303          	lw	t1,52(sp)
    4db0:	00734333          	xor	t1,t1,t2
    4db4:	0e612223          	sw	t1,228(sp)
    4db8:	03812303          	lw	t1,56(sp)
    4dbc:	00534333          	xor	t1,t1,t0
    4dc0:	0e612423          	sw	t1,232(sp)
            BCe = ROL(Ega, 36);
            Eke ^= De;
    4dc4:	0ac12303          	lw	t1,172(sp)
    4dc8:	00e34333          	xor	t1,t1,a4
    4dcc:	0e612623          	sw	t1,236(sp)
    4dd0:	05c12303          	lw	t1,92(sp)
    4dd4:	00f34333          	xor	t1,t1,a5
    4dd8:	0e612823          	sw	t1,240(sp)
            BCi = ROL(Eke, 10);
            Emi ^= Di;
    4ddc:	06c12303          	lw	t1,108(sp)
    4de0:	01134333          	xor	t1,t1,a7
    4de4:	0e612a23          	sw	t1,244(sp)
    4de8:	07012303          	lw	t1,112(sp)
    4dec:	01034333          	xor	t1,t1,a6
    4df0:	0e612c23          	sw	t1,248(sp)
            BCo = ROL(Emi, 15);
            Eso ^= Do;
    4df4:	08412303          	lw	t1,132(sp)
    4df8:	00a34333          	xor	t1,t1,a0
    4dfc:	10612423          	sw	t1,264(sp)
    4e00:	0cc12303          	lw	t1,204(sp)
    4e04:	00b34333          	xor	t1,t1,a1
    4e08:	10612223          	sw	t1,260(sp)
            Ame =   BCe ^((~BCi)&  BCo );
            Ami =   BCi ^((~BCo)&  BCu );
            Amo =   BCo ^((~BCu)&  BCa );
            Amu =   BCu ^((~BCa)&  BCe );

            Ebi ^= Di;
    4e0c:	01c12303          	lw	t1,28(sp)
    4e10:	011348b3          	xor	a7,t1,a7
    4e14:	02012303          	lw	t1,32(sp)
    4e18:	01034833          	xor	a6,t1,a6
            BCa = ROL(Ebi, 62);
            Ego ^= Do;
    4e1c:	04c12303          	lw	t1,76(sp)
    4e20:	00a34533          	xor	a0,t1,a0
    4e24:	05012303          	lw	t1,80(sp)
    4e28:	00b345b3          	xor	a1,t1,a1
            BCe = ROL(Ego, 55);
            Eku ^= Du;
    4e2c:	0b412303          	lw	t1,180(sp)
    4e30:	00c34633          	xor	a2,t1,a2
    4e34:	0b812303          	lw	t1,184(sp)
    4e38:	00d346b3          	xor	a3,t1,a3
            BCi = ROL(Eku, 39);
            Ema ^= Da;
    4e3c:	0bc12303          	lw	t1,188(sp)
    4e40:	00734333          	xor	t1,t1,t2
    4e44:	14612223          	sw	t1,324(sp)
    4e48:	01012303          	lw	t1,16(sp)
    4e4c:	00534333          	xor	t1,t1,t0
    4e50:	14612023          	sw	t1,320(sp)
            BCo = ROL(Ema, 41);
            Ese ^= De;
    4e54:	08012303          	lw	t1,128(sp)
    4e58:	00e34733          	xor	a4,t1,a4
    4e5c:	0c012303          	lw	t1,192(sp)
    4e60:	14e12423          	sw	a4,328(sp)
    4e64:	00f34733          	xor	a4,t1,a5
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
    4e68:	00c12783          	lw	a5,12(sp)
    4e6c:	0087a303          	lw	t1,8(a5)
    4e70:	00c7a783          	lw	a5,12(a5)
    4e74:	0c612823          	sw	t1,208(sp)
    4e78:	0cf12a23          	sw	a5,212(sp)
            BCe = ROL(Ege, 44);
    4e7c:	00cc1793          	slli	a5,s8,0xc
    4e80:	00f12823          	sw	a5,16(sp)
    4e84:	014cd793          	srli	a5,s9,0x14
    4e88:	00f12a23          	sw	a5,20(sp)
            BCi = ROL(Eki, 43);
    4e8c:	00bb1793          	slli	a5,s6,0xb
    4e90:	00f12c23          	sw	a5,24(sp)
    4e94:	015bd793          	srli	a5,s7,0x15
    4e98:	00f12e23          	sw	a5,28(sp)
            BCo = ROL(Emo, 21);
    4e9c:	00ba5793          	srli	a5,s4,0xb
    4ea0:	02f12023          	sw	a5,32(sp)
    4ea4:	015a9793          	slli	a5,s5,0x15
    4ea8:	02f12223          	sw	a5,36(sp)
            BCu = ROL(Esu, 14);
    4eac:	012d5793          	srli	a5,s10,0x12
    4eb0:	02f12423          	sw	a5,40(sp)
    4eb4:	00ed9793          	slli	a5,s11,0xe
            BCa = ROL(Ebo, 28);
    4eb8:	01c99313          	slli	t1,s3,0x1c
            BCu = ROL(Esu, 14);
    4ebc:	02f12623          	sw	a5,44(sp)
            BCa = ROL(Ebo, 28);
    4ec0:	00495793          	srli	a5,s2,0x4
    4ec4:	02f12823          	sw	a5,48(sp)
    4ec8:	02612a23          	sw	t1,52(sp)
            BCe = ROL(Egu, 20);
    4ecc:	01449313          	slli	t1,s1,0x14
    4ed0:	00c45793          	srli	a5,s0,0xc
    4ed4:	02612e23          	sw	t1,60(sp)
            BCi = ROL(Eka, 3);
    4ed8:	05412303          	lw	t1,84(sp)
            BCe = ROL(Egu, 20);
    4edc:	02f12c23          	sw	a5,56(sp)
            BCi = ROL(Eka, 3);
    4ee0:	05812783          	lw	a5,88(sp)
            BCe = ROL(Egu, 20);
    4ee4:	01441413          	slli	s0,s0,0x14
    4ee8:	04812023          	sw	s0,64(sp)
            BCi = ROL(Eka, 3);
    4eec:	01d35413          	srli	s0,t1,0x1d
    4ef0:	04812223          	sw	s0,68(sp)
    4ef4:	00379413          	slli	s0,a5,0x3
    4ef8:	04812423          	sw	s0,72(sp)
    4efc:	01d7d413          	srli	s0,a5,0x1d
            BCa = ROL(Ebe, 1);
    4f00:	07412783          	lw	a5,116(sp)
            BCi = ROL(Eka, 3);
    4f04:	04812623          	sw	s0,76(sp)
    4f08:	00331413          	slli	s0,t1,0x3
    4f0c:	04812823          	sw	s0,80(sp)
            BCa = ROL(Ebe, 1);
    4f10:	01f7d313          	srli	t1,a5,0x1f
            BCo = ROL(Eme, 45);
    4f14:	00df1413          	slli	s0,t5,0xd
    4f18:	04812a23          	sw	s0,84(sp)
            BCa = ROL(Ebe, 1);
    4f1c:	06612423          	sw	t1,104(sp)
            BCo = ROL(Eme, 45);
    4f20:	013fd413          	srli	s0,t6,0x13
            BCa = ROL(Ebe, 1);
    4f24:	08812303          	lw	t1,136(sp)
    4f28:	00179793          	slli	a5,a5,0x1
            BCo = ROL(Eme, 45);
    4f2c:	04812c23          	sw	s0,88(sp)
            BCa = ROL(Ebe, 1);
    4f30:	06f12823          	sw	a5,112(sp)
            BCu = ROL(Esi, 61);
    4f34:	01de1413          	slli	s0,t3,0x1d
            BCe = ROL(Egi, 6);
    4f38:	09412783          	lw	a5,148(sp)
            BCu = ROL(Esi, 61);
    4f3c:	003e5e13          	srli	t3,t3,0x3
    4f40:	04812e23          	sw	s0,92(sp)
    4f44:	07c12223          	sw	t3,100(sp)
    4f48:	003ed413          	srli	s0,t4,0x3
            BCe = ROL(Egi, 6);
    4f4c:	09812e03          	lw	t3,152(sp)
            BCu = ROL(Esi, 61);
    4f50:	06812023          	sw	s0,96(sp)
            BCa = ROL(Ebe, 1);
    4f54:	00131413          	slli	s0,t1,0x1
    4f58:	06812623          	sw	s0,108(sp)
            BCe = ROL(Egi, 6);
    4f5c:	01a7d413          	srli	s0,a5,0x1a
    4f60:	06812a23          	sw	s0,116(sp)
    4f64:	006e1413          	slli	s0,t3,0x6
    4f68:	06812c23          	sw	s0,120(sp)
    4f6c:	01ae5413          	srli	s0,t3,0x1a
    4f70:	06812e23          	sw	s0,124(sp)
            BCi = ROL(Eko, 25);
    4f74:	0a412403          	lw	s0,164(sp)
            BCe = ROL(Egi, 6);
    4f78:	00679793          	slli	a5,a5,0x6
    4f7c:	08f12023          	sw	a5,128(sp)
            BCi = ROL(Eko, 25);
    4f80:	00745793          	srli	a5,s0,0x7
    4f84:	08f12223          	sw	a5,132(sp)
    4f88:	0a812783          	lw	a5,168(sp)
            BCe = ROL(Ege, 44);
    4f8c:	00cc9c93          	slli	s9,s9,0xc
    4f90:	014c5c13          	srli	s8,s8,0x14
            BCi = ROL(Eko, 25);
    4f94:	01979e13          	slli	t3,a5,0x19
    4f98:	09c12423          	sw	t3,136(sp)
    4f9c:	0077de13          	srli	t3,a5,0x7
    4fa0:	09c12623          	sw	t3,140(sp)
    4fa4:	01941e13          	slli	t3,s0,0x19
    4fa8:	09c12823          	sw	t3,144(sp)
            BCo = ROL(Emu, 8);
    4fac:	0b012403          	lw	s0,176(sp)
    4fb0:	0c412783          	lw	a5,196(sp)
            BCe = ROL(Ege, 44);
    4fb4:	018cec33          	or	s8,s9,s8
            BCo = ROL(Emu, 8);
    4fb8:	01845e13          	srli	t3,s0,0x18
    4fbc:	09c12a23          	sw	t3,148(sp)
    4fc0:	00879e13          	slli	t3,a5,0x8
    4fc4:	09c12c23          	sw	t3,152(sp)
    4fc8:	0187de13          	srli	t3,a5,0x18
    4fcc:	0bc12223          	sw	t3,164(sp)
    4fd0:	00841e13          	slli	t3,s0,0x8
            BCu = ROL(Esa, 18);
    4fd4:	0c812403          	lw	s0,200(sp)
    4fd8:	0d812783          	lw	a5,216(sp)
            BCo = ROL(Emu, 8);
    4fdc:	0bc12423          	sw	t3,168(sp)
            BCu = ROL(Esa, 18);
    4fe0:	00e45e13          	srli	t3,s0,0xe
    4fe4:	0bc12623          	sw	t3,172(sp)
    4fe8:	01279e13          	slli	t3,a5,0x12
    4fec:	0bc12823          	sw	t3,176(sp)
    4ff0:	00e7de13          	srli	t3,a5,0xe
    4ff4:	0bc12a23          	sw	t3,180(sp)
    4ff8:	01241e13          	slli	t3,s0,0x12
            BCa = ROL(Ebu, 27);
    4ffc:	0dc12403          	lw	s0,220(sp)
    5000:	0e012783          	lw	a5,224(sp)
            BCu = ROL(Esa, 18);
    5004:	0bc12c23          	sw	t3,184(sp)
            BCa = ROL(Ebu, 27);
    5008:	00545e13          	srli	t3,s0,0x5
    500c:	0bc12e23          	sw	t3,188(sp)
    5010:	01b79e13          	slli	t3,a5,0x1b
    5014:	0dc12023          	sw	t3,192(sp)
    5018:	0057de13          	srli	t3,a5,0x5
            BCe = ROL(Ega, 36);
    501c:	0e812783          	lw	a5,232(sp)
            BCa = ROL(Ebu, 27);
    5020:	0dc12223          	sw	t3,196(sp)
    5024:	01b41e13          	slli	t3,s0,0x1b
            BCe = ROL(Ega, 36);
    5028:	0e412403          	lw	s0,228(sp)
            BCa = ROL(Ebu, 27);
    502c:	0dc12423          	sw	t3,200(sp)
            BCe = ROL(Ega, 36);
    5030:	00479e13          	slli	t3,a5,0x4
    5034:	0dc12623          	sw	t3,204(sp)
    5038:	01c45e13          	srli	t3,s0,0x1c
    503c:	00441413          	slli	s0,s0,0x4
    5040:	0c812e23          	sw	s0,220(sp)
            BCi = ROL(Eke, 10);
    5044:	0ec12403          	lw	s0,236(sp)
            BCe = ROL(Ega, 36);
    5048:	01c7d793          	srli	a5,a5,0x1c
    504c:	0ef12023          	sw	a5,224(sp)
            BCi = ROL(Eke, 10);
    5050:	01645793          	srli	a5,s0,0x16
    5054:	0ef12223          	sw	a5,228(sp)
    5058:	0f012783          	lw	a5,240(sp)
            BCe = ROL(Ega, 36);
    505c:	0dc12c23          	sw	t3,216(sp)
            BCi = ROL(Eki, 43);
    5060:	015b5b13          	srli	s6,s6,0x15
            BCi = ROL(Eke, 10);
    5064:	00a79e13          	slli	t3,a5,0xa
    5068:	0167d793          	srli	a5,a5,0x16
    506c:	0ef12623          	sw	a5,236(sp)
    5070:	00a41793          	slli	a5,s0,0xa
            BCo = ROL(Emi, 15);
    5074:	0f412403          	lw	s0,244(sp)
            BCi = ROL(Eke, 10);
    5078:	0ef12823          	sw	a5,240(sp)
    507c:	0fc12423          	sw	t3,232(sp)
            BCo = ROL(Emi, 15);
    5080:	01145793          	srli	a5,s0,0x11
    5084:	0ef12a23          	sw	a5,244(sp)
    5088:	0f812783          	lw	a5,248(sp)
    508c:	00f41413          	slli	s0,s0,0xf
    5090:	10812023          	sw	s0,256(sp)
    5094:	00f79e13          	slli	t3,a5,0xf
    5098:	0117d793          	srli	a5,a5,0x11
    509c:	0ef12e23          	sw	a5,252(sp)
            BCu = ROL(Eso, 56);
    50a0:	10412783          	lw	a5,260(sp)
            BCo = ROL(Emi, 15);
    50a4:	0fc12c23          	sw	t3,248(sp)
            BCi = ROL(Eki, 43);
    50a8:	00bb9b93          	slli	s7,s7,0xb
            BCu = ROL(Eso, 56);
    50ac:	01879413          	slli	s0,a5,0x18
    50b0:	10812223          	sw	s0,260(sp)
    50b4:	10812403          	lw	s0,264(sp)
    50b8:	0087d793          	srli	a5,a5,0x8
    50bc:	10f12823          	sw	a5,272(sp)
    50c0:	00845e13          	srli	t3,s0,0x8
            BCa = ROL(Ebi, 62);
    50c4:	0028d793          	srli	a5,a7,0x2
            BCu = ROL(Eso, 56);
    50c8:	01841413          	slli	s0,s0,0x18
            BCa = ROL(Ebi, 62);
    50cc:	01e89893          	slli	a7,a7,0x1e
            BCu = ROL(Eso, 56);
    50d0:	10812623          	sw	s0,268(sp)
            BCa = ROL(Ebi, 62);
    50d4:	11112e23          	sw	a7,284(sp)
    50d8:	01e81413          	slli	s0,a6,0x1e
            BCe = ROL(Ego, 55);
    50dc:	00955893          	srli	a7,a0,0x9
            BCa = ROL(Ebi, 62);
    50e0:	00285813          	srli	a6,a6,0x2
            BCe = ROL(Ego, 55);
    50e4:	01751513          	slli	a0,a0,0x17
            BCa = ROL(Ebi, 62);
    50e8:	13012023          	sw	a6,288(sp)
            BCe = ROL(Ego, 55);
    50ec:	12a12623          	sw	a0,300(sp)
    50f0:	01759813          	slli	a6,a1,0x17
            BCo = ROL(Ema, 41);
    50f4:	14012503          	lw	a0,320(sp)
            BCe = ROL(Ego, 55);
    50f8:	0095d593          	srli	a1,a1,0x9
    50fc:	12b12823          	sw	a1,304(sp)
            BCi = ROL(Eku, 39);
    5100:	00769593          	slli	a1,a3,0x7
    5104:	12b12a23          	sw	a1,308(sp)
    5108:	01965593          	srli	a1,a2,0x19
    510c:	00761613          	slli	a2,a2,0x7
    5110:	12c12e23          	sw	a2,316(sp)
            BCo = ROL(Ema, 41);
    5114:	00951613          	slli	a2,a0,0x9
    5118:	14c12023          	sw	a2,320(sp)
    511c:	14412603          	lw	a2,324(sp)
            BCe = ROL(Ego, 55);
    5120:	13112423          	sw	a7,296(sp)
            BCi = ROL(Eku, 39);
    5124:	12b12c23          	sw	a1,312(sp)
            BCo = ROL(Ema, 41);
    5128:	01765893          	srli	a7,a2,0x17
    512c:	00961593          	slli	a1,a2,0x9
    5130:	01755613          	srli	a2,a0,0x17
            BCu = ROL(Ese, 2);
    5134:	00271513          	slli	a0,a4,0x2
    5138:	01e75713          	srli	a4,a4,0x1e
    513c:	14e12223          	sw	a4,324(sp)
            Eba ^= Da;
    5140:	09c12703          	lw	a4,156(sp)
            BCa = ROL(Ebi, 62);
    5144:	10812a23          	sw	s0,276(sp)
            BCu = ROL(Ese, 2);
    5148:	14812403          	lw	s0,328(sp)
            Eba ^= Da;
    514c:	007743b3          	xor	t2,a4,t2
    5150:	0a012703          	lw	a4,160(sp)
            BCa = ROL(Ebi, 62);
    5154:	10f12c23          	sw	a5,280(sp)
            BCe = ROL(Ego, 55);
    5158:	13012223          	sw	a6,292(sp)
            Eba ^= Da;
    515c:	005742b3          	xor	t0,a4,t0
            BCu = ROL(Ese, 2);
    5160:	01e45813          	srli	a6,s0,0x1e
            BCe = ROL(Ege, 44);
    5164:	01012703          	lw	a4,16(sp)
            BCu = ROL(Ese, 2);
    5168:	00241793          	slli	a5,s0,0x2
            BCe = ROL(Ege, 44);
    516c:	01412403          	lw	s0,20(sp)
            BCu = ROL(Eso, 56);
    5170:	11c12423          	sw	t3,264(sp)
            BCi = ROL(Eki, 43);
    5174:	016bebb3          	or	s7,s7,s6
            BCe = ROL(Ege, 44);
    5178:	00876733          	or	a4,a4,s0
    517c:	00e12823          	sw	a4,16(sp)
            BCi = ROL(Eki, 43);
    5180:	01812403          	lw	s0,24(sp)
    5184:	01c12c83          	lw	s9,28(sp)
            BCo = ROL(Emo, 21);
    5188:	02412b03          	lw	s6,36(sp)
    518c:	00bada93          	srli	s5,s5,0xb
            BCi = ROL(Eki, 43);
    5190:	01946cb3          	or	s9,s0,s9
            BCo = ROL(Emo, 21);
    5194:	02012403          	lw	s0,32(sp)
    5198:	015a1a13          	slli	s4,s4,0x15
    519c:	014aea33          	or	s4,s5,s4
    51a0:	01646b33          	or	s6,s0,s6
            BCu = ROL(Esu, 14);
    51a4:	02c12a83          	lw	s5,44(sp)
    51a8:	02812403          	lw	s0,40(sp)
    51ac:	012ddd93          	srli	s11,s11,0x12
    51b0:	00ed1d13          	slli	s10,s10,0xe
    51b4:	01546ab3          	or	s5,s0,s5
    51b8:	01512a23          	sw	s5,20(sp)
            BCa = ROL(Ebo, 28);
    51bc:	03012403          	lw	s0,48(sp)
            BCu = ROL(Esu, 14);
    51c0:	01adeab3          	or	s5,s11,s10
            BCa = ROL(Ebo, 28);
    51c4:	03412d03          	lw	s10,52(sp)
    51c8:	0049d993          	srli	s3,s3,0x4
    51cc:	01c91913          	slli	s2,s2,0x1c
    51d0:	01a46d33          	or	s10,s0,s10
    51d4:	0129e933          	or	s2,s3,s2
            BCe = ROL(Egu, 20);
    51d8:	03812403          	lw	s0,56(sp)
    51dc:	03c12983          	lw	s3,60(sp)
    51e0:	00c4d493          	srli	s1,s1,0xc
            BCa = ROL(Ebo, 28);
    51e4:	01a12e23          	sw	s10,28(sp)
            BCe = ROL(Egu, 20);
    51e8:	013469b3          	or	s3,s0,s3
    51ec:	04012403          	lw	s0,64(sp)
    51f0:	03312023          	sw	s3,32(sp)
            BCi = ROL(Eka, 3);
    51f4:	04812983          	lw	s3,72(sp)
            BCe = ROL(Egu, 20);
    51f8:	0084e433          	or	s0,s1,s0
            BCi = ROL(Eka, 3);
    51fc:	04412483          	lw	s1,68(sp)
            BCo = ROL(Eme, 45);
    5200:	05812d03          	lw	s10,88(sp)
    5204:	00df9f93          	slli	t6,t6,0xd
            BCi = ROL(Eka, 3);
    5208:	0134e4b3          	or	s1,s1,s3
    520c:	02912423          	sw	s1,40(sp)
    5210:	05012983          	lw	s3,80(sp)
    5214:	04c12483          	lw	s1,76(sp)
            BCo = ROL(Eme, 45);
    5218:	013f5f13          	srli	t5,t5,0x13
    521c:	01efef33          	or	t5,t6,t5
            BCi = ROL(Eka, 3);
    5220:	0134e4b3          	or	s1,s1,s3
            BCo = ROL(Eme, 45);
    5224:	05412983          	lw	s3,84(sp)
            BCu = ROL(Esi, 61);
    5228:	05c12f83          	lw	t6,92(sp)
    522c:	06412e03          	lw	t3,100(sp)
            BCo = ROL(Eme, 45);
    5230:	01a9e9b3          	or	s3,s3,s10
            BCu = ROL(Esi, 61);
    5234:	06012d03          	lw	s10,96(sp)
    5238:	01de9e93          	slli	t4,t4,0x1d
    523c:	01ceee33          	or	t3,t4,t3
    5240:	01afefb3          	or	t6,t6,s10
            BCa = ROL(Ebe, 1);
    5244:	06812e83          	lw	t4,104(sp)
            BCu = ROL(Esi, 61);
    5248:	03f12823          	sw	t6,48(sp)
            BCa = ROL(Ebe, 1);
    524c:	06c12f83          	lw	t6,108(sp)
    5250:	01f35313          	srli	t1,t1,0x1f
            BCa = ROL(Ebo, 28);
    5254:	01212c23          	sw	s2,24(sp)
            BCa = ROL(Ebe, 1);
    5258:	01feeeb3          	or	t4,t4,t6
    525c:	07012f83          	lw	t6,112(sp)
            BCi = ROL(Eka, 3);
    5260:	02912223          	sw	s1,36(sp)
            BCo = ROL(Eme, 45);
    5264:	03312623          	sw	s3,44(sp)
            BCa = ROL(Ebe, 1);
    5268:	01f36333          	or	t1,t1,t6
            BCu = ROL(Esi, 61);
    526c:	03c12a23          	sw	t3,52(sp)
            BCa = ROL(Ebe, 1);
    5270:	03d12e23          	sw	t4,60(sp)
    5274:	02612c23          	sw	t1,56(sp)
            BCe = ROL(Egi, 6);
    5278:	07812d03          	lw	s10,120(sp)
    527c:	07412f83          	lw	t6,116(sp)
    5280:	08012903          	lw	s2,128(sp)
            BCi = ROL(Eko, 25);
    5284:	08812e03          	lw	t3,136(sp)
            BCe = ROL(Egi, 6);
    5288:	01afefb3          	or	t6,t6,s10
    528c:	07c12d03          	lw	s10,124(sp)
            BCi = ROL(Eko, 25);
    5290:	08c12d83          	lw	s11,140(sp)
            BCo = ROL(Emu, 8);
    5294:	09812e83          	lw	t4,152(sp)
            BCe = ROL(Egi, 6);
    5298:	012d6d33          	or	s10,s10,s2
            BCi = ROL(Eko, 25);
    529c:	08412903          	lw	s2,132(sp)
            BCu = ROL(Esa, 18);
    52a0:	0b012703          	lw	a4,176(sp)
            BCe = ROL(Egi, 6);
    52a4:	05f12223          	sw	t6,68(sp)
            BCi = ROL(Eko, 25);
    52a8:	01c96933          	or	s2,s2,t3
    52ac:	09012e03          	lw	t3,144(sp)
            BCa = ROL(Ebu, 27);
    52b0:	0bc12f83          	lw	t6,188(sp)
    52b4:	0c412483          	lw	s1,196(sp)
            BCi = ROL(Eko, 25);
    52b8:	01cdedb3          	or	s11,s11,t3
            BCo = ROL(Emu, 8);
    52bc:	09412e03          	lw	t3,148(sp)
            BCe = ROL(Ega, 36);
    52c0:	0cc12983          	lw	s3,204(sp)
            BCe = ROL(Egi, 6);
    52c4:	05a12023          	sw	s10,64(sp)
            BCo = ROL(Emu, 8);
    52c8:	01de6333          	or	t1,t3,t4
    52cc:	0a812e83          	lw	t4,168(sp)
    52d0:	0a412e03          	lw	t3,164(sp)
            BCi = ROL(Eko, 25);
    52d4:	05212623          	sw	s2,76(sp)
    52d8:	05b12423          	sw	s11,72(sp)
            BCo = ROL(Emu, 8);
    52dc:	01de6e33          	or	t3,t3,t4
            BCu = ROL(Esa, 18);
    52e0:	0ac12e83          	lw	t4,172(sp)
            BCo = ROL(Emu, 8);
    52e4:	05c12823          	sw	t3,80(sp)
            BCu = ROL(Esa, 18);
    52e8:	0b812e03          	lw	t3,184(sp)
    52ec:	00eeeeb3          	or	t4,t4,a4
    52f0:	0b412703          	lw	a4,180(sp)
            BCo = ROL(Emu, 8);
    52f4:	04612a23          	sw	t1,84(sp)
            BCu = ROL(Esa, 18);
    52f8:	05d12e23          	sw	t4,92(sp)
    52fc:	01c76733          	or	a4,a4,t3
            BCa = ROL(Ebu, 27);
    5300:	0c012e03          	lw	t3,192(sp)
            BCu = ROL(Esa, 18);
    5304:	04e12c23          	sw	a4,88(sp)
            BCi = ROL(Eku, 39);
    5308:	0196d693          	srli	a3,a3,0x19
            BCa = ROL(Ebu, 27);
    530c:	01cfefb3          	or	t6,t6,t3
    5310:	0c812e03          	lw	t3,200(sp)
    5314:	07f12223          	sw	t6,100(sp)
            BCo = ROL(Ema, 41);
    5318:	00c5e5b3          	or	a1,a1,a2
            BCa = ROL(Ebu, 27);
    531c:	01c4e4b3          	or	s1,s1,t3
            BCe = ROL(Ega, 36);
    5320:	0d812e03          	lw	t3,216(sp)
            BCa = ROL(Ebu, 27);
    5324:	06912023          	sw	s1,96(sp)
            BCu = ROL(Ese, 2);
    5328:	00a86633          	or	a2,a6,a0
            BCe = ROL(Ega, 36);
    532c:	01c9e9b3          	or	s3,s3,t3
    5330:	07312423          	sw	s3,104(sp)
    5334:	0e012903          	lw	s2,224(sp)
    5338:	0dc12d03          	lw	s10,220(sp)
            BCi = ROL(Eke, 10);
    533c:	0e812e03          	lw	t3,232(sp)
    5340:	0f012e83          	lw	t4,240(sp)
            BCe = ROL(Ega, 36);
    5344:	012d6d33          	or	s10,s10,s2
            BCi = ROL(Eke, 10);
    5348:	0e412903          	lw	s2,228(sp)
            BCo = ROL(Emi, 15);
    534c:	10012d83          	lw	s11,256(sp)
            BCu = ROL(Eso, 56);
    5350:	10812703          	lw	a4,264(sp)
            BCi = ROL(Eke, 10);
    5354:	01c96933          	or	s2,s2,t3
    5358:	0ec12e03          	lw	t3,236(sp)
            BCu = ROL(Eso, 56);
    535c:	11012f83          	lw	t6,272(sp)
            BCa = ROL(Ebi, 62);
    5360:	11812483          	lw	s1,280(sp)
            BCi = ROL(Eke, 10);
    5364:	01de6333          	or	t1,t3,t4
            BCo = ROL(Emi, 15);
    5368:	0f812e83          	lw	t4,248(sp)
    536c:	0f412e03          	lw	t3,244(sp)
            BCa = ROL(Ebi, 62);
    5370:	12012983          	lw	s3,288(sp)
            BCe = ROL(Ega, 36);
    5374:	07a12623          	sw	s10,108(sp)
            BCo = ROL(Emi, 15);
    5378:	01de6e33          	or	t3,t3,t4
    537c:	0fc12e83          	lw	t4,252(sp)
            BCe = ROL(Ego, 55);
    5380:	12812d03          	lw	s10,296(sp)
            BCi = ROL(Eke, 10);
    5384:	07212a23          	sw	s2,116(sp)
            BCo = ROL(Emi, 15);
    5388:	01beeeb3          	or	t4,t4,s11
            BCu = ROL(Eso, 56);
    538c:	10412d83          	lw	s11,260(sp)
            BCe = ROL(Ego, 55);
    5390:	13012903          	lw	s2,304(sp)
            BCi = ROL(Eke, 10);
    5394:	06612823          	sw	t1,112(sp)
            BCu = ROL(Eso, 56);
    5398:	00ededb3          	or	s11,s11,a4
    539c:	10c12703          	lw	a4,268(sp)
            BCo = ROL(Emi, 15);
    53a0:	07c12e23          	sw	t3,124(sp)
    53a4:	07d12c23          	sw	t4,120(sp)
            BCu = ROL(Eso, 56);
    53a8:	01f76733          	or	a4,a4,t6
            BCa = ROL(Ebi, 62);
    53ac:	11412f83          	lw	t6,276(sp)
            BCu = ROL(Eso, 56);
    53b0:	09b12023          	sw	s11,128(sp)
    53b4:	08e12223          	sw	a4,132(sp)
            BCa = ROL(Ebi, 62);
    53b8:	009fefb3          	or	t6,t6,s1
    53bc:	11c12483          	lw	s1,284(sp)
    53c0:	09f12423          	sw	t6,136(sp)
    53c4:	0134e4b3          	or	s1,s1,s3
            BCe = ROL(Ego, 55);
    53c8:	12412983          	lw	s3,292(sp)
            BCa = ROL(Ebi, 62);
    53cc:	08912623          	sw	s1,140(sp)
            Aga =   BCa ^((~BCe)&  BCi );
    53d0:	fff44493          	not	s1,s0
            BCe = ROL(Ego, 55);
    53d4:	01a9e9b3          	or	s3,s3,s10
    53d8:	12c12d03          	lw	s10,300(sp)
    53dc:	09312823          	sw	s3,144(sp)
            Abu =   BCu ^((~BCa)&  BCe );
    53e0:	fff3c993          	not	s3,t2
            BCe = ROL(Ego, 55);
    53e4:	012d6d33          	or	s10,s10,s2
    53e8:	09a12a23          	sw	s10,148(sp)
            BCi = ROL(Eku, 39);
    53ec:	13812e03          	lw	t3,312(sp)
    53f0:	13412903          	lw	s2,308(sp)
            BCu = ROL(Ese, 2);
    53f4:	14412703          	lw	a4,324(sp)
            Age =   BCe ^((~BCi)&  BCo );
    53f8:	02812303          	lw	t1,40(sp)
            BCi = ROL(Eku, 39);
    53fc:	01c96933          	or	s2,s2,t3
    5400:	13c12e03          	lw	t3,316(sp)
            BCu = ROL(Ese, 2);
    5404:	00f76533          	or	a0,a4,a5
            Agi =   BCi ^((~BCo)&  BCu );
    5408:	02c12e83          	lw	t4,44(sp)
            BCi = ROL(Eku, 39);
    540c:	00de66b3          	or	a3,t3,a3
    5410:	08d12e23          	sw	a3,156(sp)
            BCo = ROL(Ema, 41);
    5414:	14012683          	lw	a3,320(sp)
            Age =   BCe ^((~BCi)&  BCo );
    5418:	02412e03          	lw	t3,36(sp)
            Ago =   BCo ^((~BCu)&  BCa );
    541c:	03412803          	lw	a6,52(sp)
            BCu = ROL(Ese, 2);
    5420:	0aa12423          	sw	a0,168(sp)
            Ago =   BCo ^((~BCu)&  BCa );
    5424:	03012503          	lw	a0,48(sp)
            BCo = ROL(Ema, 41);
    5428:	0116e8b3          	or	a7,a3,a7
            Abi =   BCi ^((~BCo)&  BCu );
    542c:	fffb4793          	not	a5,s6
            BCi = ROL(Eku, 39);
    5430:	09212c23          	sw	s2,152(sp)
            Abu =   BCu ^((~BCa)&  BCe );
    5434:	0a512a23          	sw	t0,180(sp)
    5438:	fff2c913          	not	s2,t0
            Age =   BCe ^((~BCi)&  BCo );
    543c:	fff34293          	not	t0,t1
            Aba =   BCa ^((~BCe)&  BCi );
    5440:	01012703          	lw	a4,16(sp)
            BCo = ROL(Ema, 41);
    5444:	0b112023          	sw	a7,160(sp)
    5448:	0ab12223          	sw	a1,164(sp)
            Aga =   BCa ^((~BCe)&  BCi );
    544c:	02012883          	lw	a7,32(sp)
            BCu = ROL(Ese, 2);
    5450:	0ac12623          	sw	a2,172(sp)
            Aba =   BCa ^((~BCe)&  BCi );
    5454:	0b812c23          	sw	s8,184(sp)
            Abo =   BCo ^((~BCu)&  BCa );
    5458:	01412603          	lw	a2,20(sp)
            Abe =   BCe ^((~BCi)&  BCo );
    545c:	0b912e23          	sw	s9,188(sp)
    5460:	0d712023          	sw	s7,192(sp)
            Abi =   BCi ^((~BCo)&  BCu );
    5464:	0d412223          	sw	s4,196(sp)
    5468:	0d612423          	sw	s6,200(sp)
    546c:	0ef12223          	sw	a5,228(sp)
            Abo =   BCo ^((~BCu)&  BCa );
    5470:	0d512623          	sw	s5,204(sp)
            Abu =   BCu ^((~BCa)&  BCe );
    5474:	0a712823          	sw	t2,176(sp)
            Aga =   BCa ^((~BCe)&  BCi );
    5478:	0c812e23          	sw	s0,220(sp)
            Age =   BCe ^((~BCi)&  BCo );
    547c:	fffe4393          	not	t2,t3
    5480:	0e512423          	sw	t0,232(sp)
            Agi =   BCi ^((~BCo)&  BCu );
    5484:	fffecf93          	not	t6,t4
    5488:	0fe12023          	sw	t5,224(sp)
            Ago =   BCo ^((~BCu)&  BCa );
    548c:	fff54e93          	not	t4,a0
    5490:	fff84e13          	not	t3,a6
            Agu =   BCu ^((~BCa)&  BCe );
    5494:	01812803          	lw	a6,24(sp)
    5498:	01c12503          	lw	a0,28(sp)
            Ako =   BCo ^((~BCu)&  BCa );
    549c:	05c12b03          	lw	s6,92(sp)
            Aka =   BCa ^((~BCe)&  BCi );
    54a0:	04412683          	lw	a3,68(sp)
            Aki =   BCi ^((~BCo)&  BCu );
    54a4:	05412783          	lw	a5,84(sp)
            Ako =   BCo ^((~BCu)&  BCa );
    54a8:	fffb4293          	not	t0,s6
            Aku =   BCu ^((~BCa)&  BCe );
    54ac:	03812b03          	lw	s6,56(sp)
            Ako =   BCo ^((~BCu)&  BCa );
    54b0:	0e512623          	sw	t0,236(sp)
            Aba =   BCa ^((~BCe)&  BCi );
    54b4:	fff74d93          	not	s11,a4
            Aku =   BCu ^((~BCa)&  BCe );
    54b8:	fffb4293          	not	t0,s6
    54bc:	03c12b03          	lw	s6,60(sp)
    54c0:	0e512823          	sw	t0,240(sp)
            Ake =   BCe ^((~BCi)&  BCo );
    54c4:	04c12703          	lw	a4,76(sp)
            Aku =   BCu ^((~BCa)&  BCe );
    54c8:	fffb4293          	not	t0,s6
            Ama =   BCa ^((~BCe)&  BCi );
    54cc:	06812b03          	lw	s6,104(sp)
            Aku =   BCu ^((~BCa)&  BCe );
    54d0:	0e512a23          	sw	t0,244(sp)
            Aba =   BCa ^((~BCe)&  BCi );
    54d4:	fffc4d13          	not	s10,s8
            Ama =   BCa ^((~BCe)&  BCi );
    54d8:	fffb4293          	not	t0,s6
    54dc:	06c12b03          	lw	s6,108(sp)
    54e0:	0e512c23          	sw	t0,248(sp)
            Abe =   BCe ^((~BCi)&  BCo );
    54e4:	fffbcc13          	not	s8,s7
            Ama =   BCa ^((~BCe)&  BCi );
    54e8:	fffb4293          	not	t0,s6
            Ame =   BCe ^((~BCi)&  BCo );
    54ec:	07012b03          	lw	s6,112(sp)
            Ama =   BCa ^((~BCe)&  BCi );
    54f0:	0e512e23          	sw	t0,252(sp)
            Abi =   BCi ^((~BCo)&  BCu );
    54f4:	fffa4b93          	not	s7,s4
            Ame =   BCe ^((~BCi)&  BCo );
    54f8:	fffb4293          	not	t0,s6
    54fc:	07412b03          	lw	s6,116(sp)
    5500:	10512223          	sw	t0,260(sp)
            Abo =   BCo ^((~BCu)&  BCa );
    5504:	fff64a13          	not	s4,a2
            Ame =   BCe ^((~BCi)&  BCo );
    5508:	fffb4293          	not	t0,s6
            Ami =   BCi ^((~BCo)&  BCu );
    550c:	07812b03          	lw	s6,120(sp)
            Ame =   BCe ^((~BCi)&  BCo );
    5510:	10512423          	sw	t0,264(sp)
            Aka =   BCa ^((~BCe)&  BCi );
    5514:	04012603          	lw	a2,64(sp)
            Ami =   BCi ^((~BCo)&  BCu );
    5518:	fffb4293          	not	t0,s6
    551c:	07c12b03          	lw	s6,124(sp)
    5520:	10512623          	sw	t0,268(sp)
            Ake =   BCe ^((~BCi)&  BCo );
    5524:	04812583          	lw	a1,72(sp)
            Ami =   BCi ^((~BCo)&  BCu );
    5528:	fffb4293          	not	t0,s6
            Amo =   BCo ^((~BCu)&  BCa );
    552c:	08012b03          	lw	s6,128(sp)
            Ami =   BCi ^((~BCo)&  BCu );
    5530:	10512823          	sw	t0,272(sp)
            Aga =   BCa ^((~BCe)&  BCi );
    5534:	fff8c413          	not	s0,a7
            Amo =   BCo ^((~BCu)&  BCa );
    5538:	fffb4293          	not	t0,s6
    553c:	08412b03          	lw	s6,132(sp)
    5540:	10512a23          	sw	t0,276(sp)
            Agu =   BCu ^((~BCa)&  BCe );
    5544:	fff84313          	not	t1,a6
            Amo =   BCo ^((~BCu)&  BCa );
    5548:	fffb4293          	not	t0,s6
            Amu =   BCu ^((~BCa)&  BCe );
    554c:	06012b03          	lw	s6,96(sp)
            Amo =   BCo ^((~BCu)&  BCa );
    5550:	10512c23          	sw	t0,280(sp)
            Agu =   BCu ^((~BCa)&  BCe );
    5554:	fff54893          	not	a7,a0
            Amu =   BCu ^((~BCa)&  BCe );
    5558:	fffb4293          	not	t0,s6
            Aka =   BCa ^((~BCe)&  BCi );
    555c:	fff64813          	not	a6,a2
    5560:	fff6c513          	not	a0,a3
            Ake =   BCe ^((~BCi)&  BCo );
    5564:	fff74613          	not	a2,a4
            Aki =   BCi ^((~BCo)&  BCu );
    5568:	05012683          	lw	a3,80(sp)
    556c:	fff7c713          	not	a4,a5
            Amu =   BCu ^((~BCa)&  BCe );
    5570:	10512e23          	sw	t0,284(sp)
            Ako =   BCo ^((~BCu)&  BCa );
    5574:	05812783          	lw	a5,88(sp)
            Amu =   BCu ^((~BCa)&  BCe );
    5578:	06412b03          	lw	s6,100(sp)
            Abe =   BCe ^((~BCi)&  BCo );
    557c:	fffccc93          	not	s9,s9
            Abo =   BCo ^((~BCu)&  BCa );
    5580:	fffaca93          	not	s5,s5
            Amu =   BCu ^((~BCa)&  BCe );
    5584:	fffb4293          	not	t0,s6
            Asa =   BCa ^((~BCe)&  BCi );
    5588:	09012b03          	lw	s6,144(sp)
            Amu =   BCu ^((~BCa)&  BCe );
    558c:	12512023          	sw	t0,288(sp)
            Agi =   BCi ^((~BCo)&  BCu );
    5590:	ffff4f13          	not	t5,t5
            Asa =   BCa ^((~BCe)&  BCi );
    5594:	fffb4293          	not	t0,s6
    5598:	09412b03          	lw	s6,148(sp)
    559c:	12512223          	sw	t0,292(sp)
            Ake =   BCe ^((~BCi)&  BCo );
    55a0:	fff5c593          	not	a1,a1
            Asa =   BCa ^((~BCe)&  BCi );
    55a4:	fffb4293          	not	t0,s6
            Ase =   BCe ^((~BCi)&  BCo );
    55a8:	09812b03          	lw	s6,152(sp)
            Asa =   BCa ^((~BCe)&  BCi );
    55ac:	12512423          	sw	t0,296(sp)
            Aki =   BCi ^((~BCo)&  BCu );
    55b0:	fff6c693          	not	a3,a3
            Ase =   BCe ^((~BCi)&  BCo );
    55b4:	fffb4293          	not	t0,s6
    55b8:	09c12b03          	lw	s6,156(sp)
    55bc:	12512623          	sw	t0,300(sp)
            Ako =   BCo ^((~BCu)&  BCa );
    55c0:	fff7c793          	not	a5,a5
            Ase =   BCe ^((~BCi)&  BCo );
    55c4:	fffb4293          	not	t0,s6
            Asi =   BCi ^((~BCo)&  BCu );
    55c8:	0a012b03          	lw	s6,160(sp)
            Ase =   BCe ^((~BCi)&  BCo );
    55cc:	12512823          	sw	t0,304(sp)
            Asi =   BCi ^((~BCo)&  BCu );
    55d0:	fffb4293          	not	t0,s6
    55d4:	0a412b03          	lw	s6,164(sp)
    55d8:	12512a23          	sw	t0,308(sp)
    55dc:	fffb4293          	not	t0,s6
            Aso =   BCo ^((~BCu)&  BCa );
    55e0:	0a812b03          	lw	s6,168(sp)
            Asi =   BCi ^((~BCo)&  BCu );
    55e4:	12512c23          	sw	t0,312(sp)
            Aso =   BCo ^((~BCu)&  BCa );
    55e8:	fffb4293          	not	t0,s6
    55ec:	0ac12b03          	lw	s6,172(sp)
    55f0:	12512e23          	sw	t0,316(sp)
    55f4:	fffb4293          	not	t0,s6
            Asu =   BCu ^((~BCa)&  BCe );
    55f8:	08812b03          	lw	s6,136(sp)
            Aso =   BCo ^((~BCu)&  BCa );
    55fc:	14512023          	sw	t0,320(sp)
            Asu =   BCu ^((~BCa)&  BCe );
    5600:	fffb4293          	not	t0,s6
    5604:	08c12b03          	lw	s6,140(sp)
    5608:	14512223          	sw	t0,324(sp)
    560c:	fffb4293          	not	t0,s6
    5610:	14512423          	sw	t0,328(sp)
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
    5614:	0b012b03          	lw	s6,176(sp)
    5618:	0d012283          	lw	t0,208(sp)
    561c:	0162c2b3          	xor	t0,t0,s6
    5620:	0c512823          	sw	t0,208(sp)
    5624:	0b412b03          	lw	s6,180(sp)
    5628:	0d412283          	lw	t0,212(sp)
    562c:	0162c2b3          	xor	t0,t0,s6
            Aba =   BCa ^((~BCe)&  BCi );
    5630:	0bc12b03          	lw	s6,188(sp)
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
    5634:	0c512a23          	sw	t0,212(sp)
            Aba =   BCa ^((~BCe)&  BCi );
    5638:	016dfb33          	and	s6,s11,s6
    563c:	0d612c23          	sw	s6,216(sp)
    5640:	0c012b03          	lw	s6,192(sp)
            Abe =   BCe ^((~BCi)&  BCo );
    5644:	0c412d83          	lw	s11,196(sp)
            Aba =   BCa ^((~BCe)&  BCi );
    5648:	016d7d33          	and	s10,s10,s6
            Abe =   BCe ^((~BCi)&  BCo );
    564c:	0c812b03          	lw	s6,200(sp)
    5650:	01bcfcb3          	and	s9,s9,s11
            Abi =   BCi ^((~BCo)&  BCu );
    5654:	0e412d83          	lw	s11,228(sp)
            Abe =   BCe ^((~BCi)&  BCo );
    5658:	016c7c33          	and	s8,s8,s6
            Abi =   BCi ^((~BCo)&  BCu );
    565c:	0cc12b03          	lw	s6,204(sp)
            Age =   BCe ^((~BCi)&  BCo );
    5660:	0e812283          	lw	t0,232(sp)
            Abi =   BCi ^((~BCo)&  BCu );
    5664:	016bfbb3          	and	s7,s7,s6
    5668:	01412b03          	lw	s6,20(sp)
    566c:	016dfb33          	and	s6,s11,s6
            Abo =   BCo ^((~BCu)&  BCa );
    5670:	0b012d83          	lw	s11,176(sp)
    5674:	01bafab3          	and	s5,s5,s11
    5678:	0b412d83          	lw	s11,180(sp)
    567c:	01ba7a33          	and	s4,s4,s11
            Abu =   BCu ^((~BCa)&  BCe );
    5680:	01012d83          	lw	s11,16(sp)
    5684:	01b9f9b3          	and	s3,s3,s11
    5688:	0b812d83          	lw	s11,184(sp)
    568c:	01b97933          	and	s2,s2,s11
            Aga =   BCa ^((~BCe)&  BCi );
    5690:	02412d83          	lw	s11,36(sp)
    5694:	01b4f4b3          	and	s1,s1,s11
    5698:	02812d83          	lw	s11,40(sp)
    569c:	01b47433          	and	s0,s0,s11
            Age =   BCe ^((~BCi)&  BCo );
    56a0:	02c12d83          	lw	s11,44(sp)
    56a4:	01b3f3b3          	and	t2,t2,s11
    56a8:	0e012d83          	lw	s11,224(sp)
    56ac:	0e712223          	sw	t2,228(sp)
            Ako =   BCo ^((~BCu)&  BCa );
    56b0:	0ec12383          	lw	t2,236(sp)
            Age =   BCe ^((~BCi)&  BCo );
    56b4:	01b2f2b3          	and	t0,t0,s11
            Agi =   BCi ^((~BCo)&  BCu );
    56b8:	03012d83          	lw	s11,48(sp)
    56bc:	01bfffb3          	and	t6,t6,s11
    56c0:	03412d83          	lw	s11,52(sp)
    56c4:	01bf7f33          	and	t5,t5,s11
            Ago =   BCo ^((~BCu)&  BCa );
    56c8:	01812d83          	lw	s11,24(sp)
    56cc:	01befeb3          	and	t4,t4,s11
    56d0:	01c12d83          	lw	s11,28(sp)
    56d4:	01be7e33          	and	t3,t3,s11
            Agu =   BCu ^((~BCa)&  BCe );
    56d8:	0dc12d83          	lw	s11,220(sp)
    56dc:	01b37333          	and	t1,t1,s11
    56e0:	02012d83          	lw	s11,32(sp)
    56e4:	01b8f8b3          	and	a7,a7,s11
            Aka =   BCa ^((~BCe)&  BCi );
    56e8:	04812d83          	lw	s11,72(sp)
    56ec:	01b87833          	and	a6,a6,s11
    56f0:	04c12d83          	lw	s11,76(sp)
    56f4:	01b57533          	and	a0,a0,s11
            Ake =   BCe ^((~BCi)&  BCo );
    56f8:	05012d83          	lw	s11,80(sp)
    56fc:	01b5f5b3          	and	a1,a1,s11
    5700:	05412d83          	lw	s11,84(sp)
    5704:	01b67633          	and	a2,a2,s11
            Aki =   BCi ^((~BCo)&  BCu );
    5708:	05812d83          	lw	s11,88(sp)
    570c:	01b6f6b3          	and	a3,a3,s11
    5710:	05c12d83          	lw	s11,92(sp)
    5714:	01b77733          	and	a4,a4,s11
            Ako =   BCo ^((~BCu)&  BCa );
    5718:	03812d83          	lw	s11,56(sp)
    571c:	01b7f7b3          	and	a5,a5,s11
    5720:	03c12d83          	lw	s11,60(sp)
    5724:	01b3f3b3          	and	t2,t2,s11
    5728:	0e712623          	sw	t2,236(sp)
            Aku =   BCu ^((~BCa)&  BCe );
    572c:	04012d83          	lw	s11,64(sp)
    5730:	0f012383          	lw	t2,240(sp)
    5734:	01b3f3b3          	and	t2,t2,s11
    5738:	0e712823          	sw	t2,240(sp)
    573c:	0f412383          	lw	t2,244(sp)
    5740:	04412d83          	lw	s11,68(sp)
    5744:	01b3f3b3          	and	t2,t2,s11
    5748:	0e712a23          	sw	t2,244(sp)
            Ama =   BCa ^((~BCe)&  BCi );
    574c:	07012d83          	lw	s11,112(sp)
    5750:	0f812383          	lw	t2,248(sp)
    5754:	01b3f3b3          	and	t2,t2,s11
    5758:	0e712c23          	sw	t2,248(sp)
    575c:	07412d83          	lw	s11,116(sp)
    5760:	0fc12383          	lw	t2,252(sp)
    5764:	01b3f3b3          	and	t2,t2,s11
    5768:	10712023          	sw	t2,256(sp)
            Ame =   BCe ^((~BCi)&  BCo );
    576c:	07812d83          	lw	s11,120(sp)
    5770:	10412383          	lw	t2,260(sp)
    5774:	01b3f3b3          	and	t2,t2,s11
    5778:	10712223          	sw	t2,260(sp)
    577c:	07c12d83          	lw	s11,124(sp)
    5780:	10812383          	lw	t2,264(sp)
    5784:	01b3f3b3          	and	t2,t2,s11
    5788:	10712423          	sw	t2,264(sp)
            Ami =   BCi ^((~BCo)&  BCu );
    578c:	08012d83          	lw	s11,128(sp)
    5790:	10c12383          	lw	t2,268(sp)
    5794:	01b3f3b3          	and	t2,t2,s11
    5798:	10712623          	sw	t2,268(sp)
    579c:	08412d83          	lw	s11,132(sp)
    57a0:	11012383          	lw	t2,272(sp)
    57a4:	01b3f3b3          	and	t2,t2,s11
    57a8:	10712823          	sw	t2,272(sp)
            Amo =   BCo ^((~BCu)&  BCa );
    57ac:	06012d83          	lw	s11,96(sp)
    57b0:	11412383          	lw	t2,276(sp)
    57b4:	01b3f3b3          	and	t2,t2,s11
    57b8:	10712a23          	sw	t2,276(sp)
    57bc:	06412d83          	lw	s11,100(sp)
    57c0:	11812383          	lw	t2,280(sp)
    57c4:	01b3f3b3          	and	t2,t2,s11
    57c8:	10712c23          	sw	t2,280(sp)
            Amu =   BCu ^((~BCa)&  BCe );
    57cc:	06812d83          	lw	s11,104(sp)
    57d0:	11c12383          	lw	t2,284(sp)
    57d4:	01b3f3b3          	and	t2,t2,s11
    57d8:	10712e23          	sw	t2,284(sp)
    57dc:	06c12d83          	lw	s11,108(sp)
    57e0:	12012383          	lw	t2,288(sp)
    57e4:	01b3f3b3          	and	t2,t2,s11
    57e8:	12712023          	sw	t2,288(sp)
            Asa =   BCa ^((~BCe)&  BCi );
    57ec:	12412383          	lw	t2,292(sp)
    57f0:	09812d83          	lw	s11,152(sp)
    57f4:	01b3f3b3          	and	t2,t2,s11
    57f8:	12712223          	sw	t2,292(sp)
    57fc:	09c12d83          	lw	s11,156(sp)
    5800:	12812383          	lw	t2,296(sp)
    5804:	01b3f3b3          	and	t2,t2,s11
    5808:	12712423          	sw	t2,296(sp)
            Ase =   BCe ^((~BCi)&  BCo );
    580c:	0a012d83          	lw	s11,160(sp)
    5810:	12c12383          	lw	t2,300(sp)
    5814:	01b3f3b3          	and	t2,t2,s11
    5818:	12712623          	sw	t2,300(sp)
    581c:	0a412d83          	lw	s11,164(sp)
    5820:	13012383          	lw	t2,304(sp)
    5824:	01b3f3b3          	and	t2,t2,s11
    5828:	12712823          	sw	t2,304(sp)
            Asi =   BCi ^((~BCo)&  BCu );
    582c:	0a812d83          	lw	s11,168(sp)
    5830:	13412383          	lw	t2,308(sp)
    5834:	01b3f3b3          	and	t2,t2,s11
    5838:	12712a23          	sw	t2,308(sp)
    583c:	0ac12d83          	lw	s11,172(sp)
    5840:	13812383          	lw	t2,312(sp)
    5844:	01b3f3b3          	and	t2,t2,s11
    5848:	12712c23          	sw	t2,312(sp)
            Aso =   BCo ^((~BCu)&  BCa );
    584c:	08812d83          	lw	s11,136(sp)
    5850:	13c12383          	lw	t2,316(sp)
    5854:	01b3f3b3          	and	t2,t2,s11
    5858:	12712e23          	sw	t2,316(sp)
    585c:	08c12d83          	lw	s11,140(sp)
    5860:	14012383          	lw	t2,320(sp)
    5864:	01b3f3b3          	and	t2,t2,s11
    5868:	14712023          	sw	t2,320(sp)
            Asu =   BCu ^((~BCa)&  BCe );
    586c:	09012d83          	lw	s11,144(sp)
    5870:	14412383          	lw	t2,324(sp)
    5874:	01b3f3b3          	and	t2,t2,s11
    5878:	14712223          	sw	t2,324(sp)
    587c:	09412d83          	lw	s11,148(sp)
    5880:	14812383          	lw	t2,328(sp)
    5884:	01b3f3b3          	and	t2,t2,s11
        for(round = 0; round < NROUNDS; round += 2) {
    5888:	00c12d83          	lw	s11,12(sp)
            Asu =   BCu ^((~BCa)&  BCe );
    588c:	14712423          	sw	t2,328(sp)
        for(round = 0; round < NROUNDS; round += 2) {
    5890:	010d8d93          	addi	s11,s11,16
    5894:	01b12623          	sw	s11,12(sp)
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
    5898:	0d012383          	lw	t2,208(sp)
    589c:	0d812d83          	lw	s11,216(sp)
    58a0:	01b3c3b3          	xor	t2,t2,s11
    58a4:	0a712823          	sw	t2,176(sp)
    58a8:	0d412383          	lw	t2,212(sp)
            Abe =   BCe ^((~BCi)&  BCo );
    58ac:	01012d83          	lw	s11,16(sp)
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
    58b0:	01a3cd33          	xor	s10,t2,s10
    58b4:	0ba12a23          	sw	s10,180(sp)
            Abe =   BCe ^((~BCi)&  BCo );
    58b8:	01bccd33          	xor	s10,s9,s11
    58bc:	0b812d83          	lw	s11,184(sp)
            Abi =   BCi ^((~BCo)&  BCu );
    58c0:	0bc12c83          	lw	s9,188(sp)
            Age =   BCe ^((~BCi)&  BCo );
    58c4:	0e412383          	lw	t2,228(sp)
            Abe =   BCe ^((~BCi)&  BCo );
    58c8:	01bc4c33          	xor	s8,s8,s11
    58cc:	0b812c23          	sw	s8,184(sp)
            Abi =   BCi ^((~BCo)&  BCu );
    58d0:	019bcc33          	xor	s8,s7,s9
    58d4:	0c012b83          	lw	s7,192(sp)
            Abo =   BCo ^((~BCu)&  BCa );
    58d8:	0c412d83          	lw	s11,196(sp)
            Abe =   BCe ^((~BCi)&  BCo );
    58dc:	01a12823          	sw	s10,16(sp)
            Abi =   BCi ^((~BCo)&  BCu );
    58e0:	017b4bb3          	xor	s7,s6,s7
            Abo =   BCo ^((~BCu)&  BCa );
    58e4:	0c812b03          	lw	s6,200(sp)
            Abi =   BCi ^((~BCo)&  BCu );
    58e8:	0d712023          	sw	s7,192(sp)
            Abo =   BCo ^((~BCu)&  BCa );
    58ec:	01bacbb3          	xor	s7,s5,s11
            Abu =   BCu ^((~BCa)&  BCe );
    58f0:	0cc12a83          	lw	s5,204(sp)
            Abo =   BCo ^((~BCu)&  BCa );
    58f4:	016a4a33          	xor	s4,s4,s6
            Abu =   BCu ^((~BCa)&  BCe );
    58f8:	01412b03          	lw	s6,20(sp)
    58fc:	0159c9b3          	xor	s3,s3,s5
    5900:	0d312623          	sw	s3,204(sp)
    5904:	016949b3          	xor	s3,s2,s6
            Aga =   BCa ^((~BCe)&  BCi );
    5908:	01812903          	lw	s2,24(sp)
    590c:	01c12d83          	lw	s11,28(sp)
            Abo =   BCo ^((~BCu)&  BCa );
    5910:	0d712223          	sw	s7,196(sp)
            Aga =   BCa ^((~BCe)&  BCi );
    5914:	0124c4b3          	xor	s1,s1,s2
    5918:	0c912a23          	sw	s1,212(sp)
    591c:	01b444b3          	xor	s1,s0,s11
            Age =   BCe ^((~BCi)&  BCo );
    5920:	0dc12403          	lw	s0,220(sp)
    5924:	02012d83          	lw	s11,32(sp)
            Abi =   BCi ^((~BCo)&  BCu );
    5928:	0b812e23          	sw	s8,188(sp)
            Age =   BCe ^((~BCi)&  BCo );
    592c:	0083c3b3          	xor	t2,t2,s0
    5930:	01b2c433          	xor	s0,t0,s11
            Agi =   BCi ^((~BCo)&  BCu );
    5934:	02412283          	lw	t0,36(sp)
            Abo =   BCo ^((~BCu)&  BCa );
    5938:	0d412423          	sw	s4,200(sp)
            Abu =   BCu ^((~BCa)&  BCe );
    593c:	0d312823          	sw	s3,208(sp)
            Agi =   BCi ^((~BCo)&  BCu );
    5940:	005fcfb3          	xor	t6,t6,t0
    5944:	01f12e23          	sw	t6,28(sp)
            Aga =   BCa ^((~BCe)&  BCi );
    5948:	0c912c23          	sw	s1,216(sp)
            Age =   BCe ^((~BCi)&  BCo );
    594c:	0e712e23          	sw	t2,252(sp)
    5950:	00812a23          	sw	s0,20(sp)
            Agi =   BCi ^((~BCo)&  BCu );
    5954:	02812d83          	lw	s11,40(sp)
    5958:	01bf4fb3          	xor	t6,t5,s11
            Ago =   BCo ^((~BCu)&  BCa );
    595c:	02c12d83          	lw	s11,44(sp)
            Agi =   BCi ^((~BCo)&  BCu );
    5960:	03f12023          	sw	t6,32(sp)
            Ago =   BCo ^((~BCu)&  BCa );
    5964:	01beceb3          	xor	t4,t4,s11
    5968:	0e012d83          	lw	s11,224(sp)
    596c:	0dd12e23          	sw	t4,220(sp)
    5970:	01be4e33          	xor	t3,t3,s11
            Agu =   BCu ^((~BCa)&  BCe );
    5974:	03012d83          	lw	s11,48(sp)
            Ago =   BCo ^((~BCu)&  BCa );
    5978:	0fc12023          	sw	t3,224(sp)
            Agu =   BCu ^((~BCa)&  BCe );
    597c:	01b34333          	xor	t1,t1,s11
    5980:	03412d83          	lw	s11,52(sp)
    5984:	00612c23          	sw	t1,24(sp)
    5988:	01b8c333          	xor	t1,a7,s11
            Aka =   BCa ^((~BCe)&  BCi );
    598c:	03812883          	lw	a7,56(sp)
    5990:	03c12d83          	lw	s11,60(sp)
            Agu =   BCu ^((~BCa)&  BCe );
    5994:	02612223          	sw	t1,36(sp)
            Aka =   BCa ^((~BCe)&  BCi );
    5998:	01184833          	xor	a6,a6,a7
    599c:	03012423          	sw	a6,40(sp)
    59a0:	01b54833          	xor	a6,a0,s11
            Ake =   BCe ^((~BCi)&  BCo );
    59a4:	04012503          	lw	a0,64(sp)
    59a8:	04412d83          	lw	s11,68(sp)
            Aka =   BCa ^((~BCe)&  BCi );
    59ac:	03012623          	sw	a6,44(sp)
            Ake =   BCe ^((~BCi)&  BCo );
    59b0:	00a5c533          	xor	a0,a1,a0
            Aki =   BCi ^((~BCo)&  BCu );
    59b4:	04812583          	lw	a1,72(sp)
            Ake =   BCe ^((~BCi)&  BCo );
    59b8:	01b64633          	xor	a2,a2,s11
            Aki =   BCi ^((~BCo)&  BCu );
    59bc:	04c12d83          	lw	s11,76(sp)
    59c0:	00b6c933          	xor	s2,a3,a1
            Ako =   BCo ^((~BCu)&  BCa );
    59c4:	05012683          	lw	a3,80(sp)
            Ake =   BCe ^((~BCi)&  BCo );
    59c8:	0ec12423          	sw	a2,232(sp)
            Aki =   BCi ^((~BCo)&  BCu );
    59cc:	01b74b33          	xor	s6,a4,s11
            Ako =   BCo ^((~BCu)&  BCa );
    59d0:	00d7c633          	xor	a2,a5,a3
    59d4:	05412d83          	lw	s11,84(sp)
    59d8:	0ec12683          	lw	a3,236(sp)
            Aku =   BCu ^((~BCa)&  BCe );
    59dc:	05812783          	lw	a5,88(sp)
            Ako =   BCo ^((~BCu)&  BCa );
    59e0:	02c12823          	sw	a2,48(sp)
    59e4:	01b6c633          	xor	a2,a3,s11
            Aku =   BCu ^((~BCa)&  BCe );
    59e8:	0f012683          	lw	a3,240(sp)
    59ec:	05c12d83          	lw	s11,92(sp)
            Ako =   BCo ^((~BCu)&  BCa );
    59f0:	02c12a23          	sw	a2,52(sp)
            Aku =   BCu ^((~BCa)&  BCe );
    59f4:	00f6c633          	xor	a2,a3,a5
    59f8:	0f412683          	lw	a3,244(sp)
    59fc:	0ec12623          	sw	a2,236(sp)
            Ake =   BCe ^((~BCi)&  BCo );
    5a00:	0ea12223          	sw	a0,228(sp)
            Aku =   BCu ^((~BCa)&  BCe );
    5a04:	01b6c633          	xor	a2,a3,s11
    5a08:	0ec12823          	sw	a2,240(sp)
            Ama =   BCa ^((~BCe)&  BCi );
    5a0c:	0f812683          	lw	a3,248(sp)
    5a10:	06012783          	lw	a5,96(sp)
    5a14:	06412d83          	lw	s11,100(sp)
    5a18:	00f6c633          	xor	a2,a3,a5
    5a1c:	10012683          	lw	a3,256(sp)
    5a20:	0ec12a23          	sw	a2,244(sp)
            Ami =   BCi ^((~BCo)&  BCu );
    5a24:	07012783          	lw	a5,112(sp)
            Ama =   BCa ^((~BCe)&  BCi );
    5a28:	01b6c633          	xor	a2,a3,s11
            Ame =   BCe ^((~BCi)&  BCo );
    5a2c:	10412683          	lw	a3,260(sp)
    5a30:	06812d83          	lw	s11,104(sp)
            Ama =   BCa ^((~BCe)&  BCi );
    5a34:	0ec12c23          	sw	a2,248(sp)
            Ame =   BCe ^((~BCi)&  BCo );
    5a38:	01b6c633          	xor	a2,a3,s11
    5a3c:	10812683          	lw	a3,264(sp)
    5a40:	06c12d83          	lw	s11,108(sp)
    5a44:	02c12c23          	sw	a2,56(sp)
    5a48:	01b6c633          	xor	a2,a3,s11
            Ami =   BCi ^((~BCo)&  BCu );
    5a4c:	10c12683          	lw	a3,268(sp)
    5a50:	07412d83          	lw	s11,116(sp)
            Ame =   BCe ^((~BCi)&  BCo );
    5a54:	02c12e23          	sw	a2,60(sp)
            Ami =   BCi ^((~BCo)&  BCu );
    5a58:	00f6c633          	xor	a2,a3,a5
    5a5c:	11012683          	lw	a3,272(sp)
            Amo =   BCo ^((~BCu)&  BCa );
    5a60:	07812783          	lw	a5,120(sp)
            Ami =   BCi ^((~BCo)&  BCu );
    5a64:	04c12e23          	sw	a2,92(sp)
    5a68:	01b6c633          	xor	a2,a3,s11
            Amo =   BCo ^((~BCu)&  BCa );
    5a6c:	11412683          	lw	a3,276(sp)
    5a70:	07c12d83          	lw	s11,124(sp)
            Ami =   BCi ^((~BCo)&  BCu );
    5a74:	06c12023          	sw	a2,96(sp)
            Amo =   BCo ^((~BCu)&  BCa );
    5a78:	00f6cbb3          	xor	s7,a3,a5
    5a7c:	11812683          	lw	a3,280(sp)
    5a80:	01b6cd33          	xor	s10,a3,s11
            Amu =   BCu ^((~BCa)&  BCe );
    5a84:	11c12683          	lw	a3,284(sp)
    5a88:	08012d83          	lw	s11,128(sp)
    5a8c:	01b6c633          	xor	a2,a3,s11
    5a90:	12012683          	lw	a3,288(sp)
    5a94:	08412d83          	lw	s11,132(sp)
    5a98:	04c12023          	sw	a2,64(sp)
    5a9c:	01b6c633          	xor	a2,a3,s11
            Asa =   BCa ^((~BCe)&  BCi );
    5aa0:	12412683          	lw	a3,292(sp)
    5aa4:	08812d83          	lw	s11,136(sp)
            Amu =   BCu ^((~BCa)&  BCe );
    5aa8:	04c12223          	sw	a2,68(sp)
            Asa =   BCa ^((~BCe)&  BCi );
    5aac:	01b6c633          	xor	a2,a3,s11
    5ab0:	12812683          	lw	a3,296(sp)
    5ab4:	08c12d83          	lw	s11,140(sp)
    5ab8:	04c12423          	sw	a2,72(sp)
    5abc:	01b6c633          	xor	a2,a3,s11
    5ac0:	04c12623          	sw	a2,76(sp)
            Ase =   BCe ^((~BCi)&  BCo );
    5ac4:	12c12683          	lw	a3,300(sp)
    5ac8:	09012d83          	lw	s11,144(sp)
            Asu =   BCu ^((~BCa)&  BCe );
    5acc:	0a812703          	lw	a4,168(sp)
    5ad0:	0ac12783          	lw	a5,172(sp)
            Ase =   BCe ^((~BCi)&  BCo );
    5ad4:	01b6c633          	xor	a2,a3,s11
    5ad8:	13012683          	lw	a3,304(sp)
    5adc:	09412d83          	lw	s11,148(sp)
    5ae0:	06c12623          	sw	a2,108(sp)
    5ae4:	01b6c633          	xor	a2,a3,s11
            Asi =   BCi ^((~BCo)&  BCu );
    5ae8:	13412683          	lw	a3,308(sp)
    5aec:	09812d83          	lw	s11,152(sp)
            Ase =   BCe ^((~BCi)&  BCo );
    5af0:	06c12823          	sw	a2,112(sp)
            Asi =   BCi ^((~BCo)&  BCu );
    5af4:	01b6c633          	xor	a2,a3,s11
    5af8:	13812683          	lw	a3,312(sp)
    5afc:	09c12d83          	lw	s11,156(sp)
    5b00:	04c12823          	sw	a2,80(sp)
    5b04:	01b6c633          	xor	a2,a3,s11
            Aso =   BCo ^((~BCu)&  BCa );
    5b08:	13c12683          	lw	a3,316(sp)
    5b0c:	0a012d83          	lw	s11,160(sp)
            Asi =   BCi ^((~BCo)&  BCu );
    5b10:	04c12a23          	sw	a2,84(sp)
            Aso =   BCo ^((~BCu)&  BCa );
    5b14:	01b6c633          	xor	a2,a3,s11
    5b18:	14012683          	lw	a3,320(sp)
    5b1c:	0a412d83          	lw	s11,164(sp)
    5b20:	06c12223          	sw	a2,100(sp)
    5b24:	01b6c633          	xor	a2,a3,s11
            Asu =   BCu ^((~BCa)&  BCe );
    5b28:	14412683          	lw	a3,324(sp)
            Aso =   BCo ^((~BCu)&  BCa );
    5b2c:	06c12423          	sw	a2,104(sp)
            Asu =   BCu ^((~BCa)&  BCe );
    5b30:	00e6cdb3          	xor	s11,a3,a4
    5b34:	14812703          	lw	a4,328(sp)
    5b38:	00f74ab3          	xor	s5,a4,a5
        for(round = 0; round < NROUNDS; round += 2) {
    5b3c:	00c12783          	lw	a5,12(sp)
    5b40:	00003717          	auipc	a4,0x3
    5b44:	06070713          	addi	a4,a4,96 # 8ba0 <pqcrystals_dilithium_fips202_ref_KeccakF_RoundConstants+0xc0>
    5b48:	00f70463          	beq	a4,a5,5b50 <KeccakF1600_StatePermute+0x217c>
    5b4c:	858fe06f          	j	3ba4 <KeccakF1600_StatePermute+0x1d0>
        }

        //copyToState(state, A)
        state[ 0] = Aba;
    5b50:	14c12503          	lw	a0,332(sp)
    5b54:	0b012783          	lw	a5,176(sp)
    5b58:	00090c93          	mv	s9,s2
        state[ 1] = Abe;
        state[ 2] = Abi;
        state[ 3] = Abo;
    5b5c:	01452e23          	sw	s4,28(a0)
        state[ 0] = Aba;
    5b60:	00f52023          	sw	a5,0(a0)
    5b64:	0b412783          	lw	a5,180(sp)
        state[ 4] = Abu;
        state[ 5] = Aga;
    5b68:	02952623          	sw	s1,44(a0)
        state[ 6] = Age;
    5b6c:	02852a23          	sw	s0,52(a0)
        state[ 0] = Aba;
    5b70:	00f52223          	sw	a5,4(a0)
        state[ 1] = Abe;
    5b74:	01012783          	lw	a5,16(sp)
        state[ 6] = Age;
    5b78:	02752823          	sw	t2,48(a0)
        state[ 7] = Agi;
    5b7c:	03f52e23          	sw	t6,60(a0)
        state[ 1] = Abe;
    5b80:	00f52423          	sw	a5,8(a0)
    5b84:	0b812783          	lw	a5,184(sp)
        state[ 8] = Ago;
    5b88:	05d52023          	sw	t4,64(a0)
    5b8c:	05c52223          	sw	t3,68(a0)
        state[ 1] = Abe;
    5b90:	00f52623          	sw	a5,12(a0)
        state[ 2] = Abi;
    5b94:	0bc12783          	lw	a5,188(sp)
    5b98:	00f52823          	sw	a5,16(a0)
    5b9c:	0c012783          	lw	a5,192(sp)
    5ba0:	00f52a23          	sw	a5,20(a0)
        state[ 3] = Abo;
    5ba4:	0c412783          	lw	a5,196(sp)
    5ba8:	00f52c23          	sw	a5,24(a0)
        state[ 4] = Abu;
    5bac:	0cc12783          	lw	a5,204(sp)
    5bb0:	02f52023          	sw	a5,32(a0)
    5bb4:	0d012783          	lw	a5,208(sp)
    5bb8:	02f52223          	sw	a5,36(a0)
        state[ 5] = Aga;
    5bbc:	0d412783          	lw	a5,212(sp)
    5bc0:	02f52423          	sw	a5,40(a0)
        state[ 7] = Agi;
    5bc4:	01c12783          	lw	a5,28(sp)
    5bc8:	02f52c23          	sw	a5,56(a0)
        state[ 9] = Agu;
    5bcc:	01812783          	lw	a5,24(sp)
    5bd0:	04f52423          	sw	a5,72(a0)
    5bd4:	04652623          	sw	t1,76(a0)
        state[10] = Aka;
    5bd8:	02812783          	lw	a5,40(sp)
        state[11] = Ake;
        state[12] = Aki;
    5bdc:	07952023          	sw	s9,96(a0)
    5be0:	07652223          	sw	s6,100(a0)
        state[10] = Aka;
    5be4:	04f52823          	sw	a5,80(a0)
        state[11] = Ake;
    5be8:	0e412783          	lw	a5,228(sp)
        state[13] = Ako;
        state[14] = Aku;
        state[15] = Ama;
        state[16] = Ame;
        state[17] = Ami;
        state[18] = Amo;
    5bec:	09752823          	sw	s7,144(a0)
    5bf0:	09a52a23          	sw	s10,148(a0)
        state[11] = Ake;
    5bf4:	04f52c23          	sw	a5,88(a0)
    5bf8:	0e812783          	lw	a5,232(sp)
        state[10] = Aka;
    5bfc:	05052a23          	sw	a6,84(a0)
        state[11] = Ake;
    5c00:	04f52e23          	sw	a5,92(a0)
        state[13] = Ako;
    5c04:	03012783          	lw	a5,48(sp)
    5c08:	06f52423          	sw	a5,104(a0)
    5c0c:	03412783          	lw	a5,52(sp)
    5c10:	06f52623          	sw	a5,108(a0)
        state[14] = Aku;
    5c14:	0ec12783          	lw	a5,236(sp)
    5c18:	06f52823          	sw	a5,112(a0)
    5c1c:	0f012783          	lw	a5,240(sp)
    5c20:	06f52a23          	sw	a5,116(a0)
        state[15] = Ama;
    5c24:	0f412783          	lw	a5,244(sp)
    5c28:	06f52c23          	sw	a5,120(a0)
    5c2c:	0f812783          	lw	a5,248(sp)
    5c30:	06f52e23          	sw	a5,124(a0)
        state[16] = Ame;
    5c34:	03812783          	lw	a5,56(sp)
    5c38:	08f52023          	sw	a5,128(a0)
    5c3c:	03c12783          	lw	a5,60(sp)
    5c40:	08f52223          	sw	a5,132(a0)
        state[17] = Ami;
    5c44:	05c12783          	lw	a5,92(sp)
    5c48:	08f52423          	sw	a5,136(a0)
    5c4c:	06012783          	lw	a5,96(sp)
    5c50:	08f52623          	sw	a5,140(a0)
        state[19] = Amu;
    5c54:	04012783          	lw	a5,64(sp)
    5c58:	08f52c23          	sw	a5,152(a0)
    5c5c:	04412783          	lw	a5,68(sp)
        state[20] = Asa;
        state[21] = Ase;
        state[22] = Asi;
        state[23] = Aso;
        state[24] = Asu;
}
    5c60:	17c12403          	lw	s0,380(sp)
        state[24] = Asu;
    5c64:	0db52023          	sw	s11,192(a0)
        state[19] = Amu;
    5c68:	08f52e23          	sw	a5,156(a0)
        state[20] = Asa;
    5c6c:	04812783          	lw	a5,72(sp)
        state[24] = Asu;
    5c70:	0d552223          	sw	s5,196(a0)
        state[23] = Aso;
    5c74:	0ac52e23          	sw	a2,188(a0)
        state[20] = Asa;
    5c78:	0af52023          	sw	a5,160(a0)
    5c7c:	04c12783          	lw	a5,76(sp)
}
    5c80:	17812483          	lw	s1,376(sp)
    5c84:	17412903          	lw	s2,372(sp)
        state[20] = Asa;
    5c88:	0af52223          	sw	a5,164(a0)
        state[21] = Ase;
    5c8c:	06c12783          	lw	a5,108(sp)
}
    5c90:	17012983          	lw	s3,368(sp)
    5c94:	16c12a03          	lw	s4,364(sp)
        state[21] = Ase;
    5c98:	0af52423          	sw	a5,168(a0)
    5c9c:	07012783          	lw	a5,112(sp)
}
    5ca0:	16812a83          	lw	s5,360(sp)
    5ca4:	16412b03          	lw	s6,356(sp)
        state[21] = Ase;
    5ca8:	0af52623          	sw	a5,172(a0)
        state[22] = Asi;
    5cac:	05012783          	lw	a5,80(sp)
}
    5cb0:	16012b83          	lw	s7,352(sp)
    5cb4:	15c12c03          	lw	s8,348(sp)
        state[22] = Asi;
    5cb8:	0af52823          	sw	a5,176(a0)
    5cbc:	05412783          	lw	a5,84(sp)
}
    5cc0:	15812c83          	lw	s9,344(sp)
    5cc4:	15412d03          	lw	s10,340(sp)
        state[22] = Asi;
    5cc8:	0af52a23          	sw	a5,180(a0)
        state[23] = Aso;
    5ccc:	06412783          	lw	a5,100(sp)
}
    5cd0:	15012d83          	lw	s11,336(sp)
        state[23] = Aso;
    5cd4:	0af52c23          	sw	a5,184(a0)
}
    5cd8:	18010113          	addi	sp,sp,384
    5cdc:	00008067          	ret

00005ce0 <keccak_absorb>:
static unsigned int keccak_absorb(uint64_t s[25],
                                  unsigned int pos,
                                  unsigned int r,
                                  const uint8_t *in,
                                  size_t inlen)
{
    5ce0:	fe010113          	addi	sp,sp,-32
    5ce4:	00812c23          	sw	s0,24(sp)
    5ce8:	00912a23          	sw	s1,20(sp)
    5cec:	01312623          	sw	s3,12(sp)
  unsigned int i;

  while(pos+inlen >= r) {
    5cf0:	00e58f33          	add	t5,a1,a4
{
    5cf4:	00112e23          	sw	ra,28(sp)
    5cf8:	01212823          	sw	s2,16(sp)
    5cfc:	00050493          	mv	s1,a0
    5d00:	00068413          	mv	s0,a3
  while(pos+inlen >= r) {
    5d04:	000f0993          	mv	s3,t5
    5d08:	0acf6a63          	bltu	t5,a2,5dbc <keccak_absorb+0xdc>
    5d0c:	00060913          	mv	s2,a2
    for(i=pos;i<r;i++)
    5d10:	08c5fa63          	bgeu	a1,a2,5da4 <keccak_absorb+0xc4>
    5d14:	40b907b3          	sub	a5,s2,a1
{
    5d18:	00040813          	mv	a6,s0
    5d1c:	00f406b3          	add	a3,s0,a5
    5d20:	408585b3          	sub	a1,a1,s0
      s[i/8] ^= (uint64_t)*in++ << 8*(i%8);
    5d24:	01f00513          	li	a0,31
    5d28:	0280006f          	j	5d50 <keccak_absorb+0x70>
    5d2c:	0007ae03          	lw	t3,0(a5)
    5d30:	0047a703          	lw	a4,4(a5)
    5d34:	00689333          	sll	t1,a7,t1
    5d38:	00000893          	li	a7,0
    5d3c:	011e48b3          	xor	a7,t3,a7
    5d40:	00674733          	xor	a4,a4,t1
    5d44:	0117a023          	sw	a7,0(a5)
    5d48:	00e7a223          	sw	a4,4(a5)
    for(i=pos;i<r;i++)
    5d4c:	04d80a63          	beq	a6,a3,5da0 <keccak_absorb+0xc0>
    5d50:	00b807b3          	add	a5,a6,a1
      s[i/8] ^= (uint64_t)*in++ << 8*(i%8);
    5d54:	00084883          	lbu	a7,0(a6)
    5d58:	0077f713          	andi	a4,a5,7
    5d5c:	00371713          	slli	a4,a4,0x3
    5d60:	ff87f793          	andi	a5,a5,-8
    5d64:	fe070313          	addi	t1,a4,-32
    5d68:	40e50e33          	sub	t3,a0,a4
    5d6c:	00f487b3          	add	a5,s1,a5
    5d70:	00180813          	addi	a6,a6,1
    5d74:	0018de93          	srli	t4,a7,0x1
    5d78:	fa035ae3          	bgez	t1,5d2c <keccak_absorb+0x4c>
    5d7c:	01ced333          	srl	t1,t4,t3
    5d80:	00e898b3          	sll	a7,a7,a4
    5d84:	0007ae03          	lw	t3,0(a5)
    5d88:	0047a703          	lw	a4,4(a5)
    5d8c:	011e48b3          	xor	a7,t3,a7
    5d90:	00674733          	xor	a4,a4,t1
    5d94:	0117a023          	sw	a7,0(a5)
    5d98:	00e7a223          	sw	a4,4(a5)
    for(i=pos;i<r;i++)
    5d9c:	fad81ae3          	bne	a6,a3,5d50 <keccak_absorb+0x70>
      s[i/8] ^= (uint64_t)*in++ << 8*(i%8);
    5da0:	00080413          	mv	s0,a6
    inlen -= r-pos;
    KeccakF1600_StatePermute(s);
    5da4:	00048513          	mv	a0,s1
    inlen -= r-pos;
    5da8:	412f09b3          	sub	s3,t5,s2
    KeccakF1600_StatePermute(s);
    5dac:	c29fd0ef          	jal	ra,39d4 <KeccakF1600_StatePermute>
  while(pos+inlen >= r) {
    5db0:	00098f13          	mv	t5,s3
    pos = 0;
    5db4:	00000593          	li	a1,0
  while(pos+inlen >= r) {
    5db8:	f529fee3          	bgeu	s3,s2,5d14 <keccak_absorb+0x34>
  }

  for(i=pos;i<pos+inlen;i++)
    5dbc:	0b35f863          	bgeu	a1,s3,5e6c <keccak_absorb+0x18c>
    5dc0:	40b987b3          	sub	a5,s3,a1
    5dc4:	00040613          	mv	a2,s0
    5dc8:	00f406b3          	add	a3,s0,a5
    5dcc:	408585b3          	sub	a1,a1,s0
    s[i/8] ^= (uint64_t)*in++ << 8*(i%8);
    5dd0:	01f00e13          	li	t3,31
    5dd4:	0280006f          	j	5dfc <keccak_absorb+0x11c>
    5dd8:	0007a883          	lw	a7,0(a5)
    5ddc:	0047a703          	lw	a4,4(a5)
    5de0:	01051833          	sll	a6,a0,a6
    5de4:	00000513          	li	a0,0
    5de8:	00a8c533          	xor	a0,a7,a0
    5dec:	01074733          	xor	a4,a4,a6
    5df0:	00a7a023          	sw	a0,0(a5)
    5df4:	00e7a223          	sw	a4,4(a5)
  for(i=pos;i<pos+inlen;i++)
    5df8:	04d60a63          	beq	a2,a3,5e4c <keccak_absorb+0x16c>
    5dfc:	00b607b3          	add	a5,a2,a1
    s[i/8] ^= (uint64_t)*in++ << 8*(i%8);
    5e00:	00064503          	lbu	a0,0(a2)
    5e04:	0077f713          	andi	a4,a5,7
    5e08:	00371713          	slli	a4,a4,0x3
    5e0c:	ff87f793          	andi	a5,a5,-8
    5e10:	fe070813          	addi	a6,a4,-32
    5e14:	40ee08b3          	sub	a7,t3,a4
    5e18:	00f487b3          	add	a5,s1,a5
    5e1c:	00160613          	addi	a2,a2,1
    5e20:	00155313          	srli	t1,a0,0x1
    5e24:	fa085ae3          	bgez	a6,5dd8 <keccak_absorb+0xf8>
    5e28:	01135833          	srl	a6,t1,a7
    5e2c:	00e51533          	sll	a0,a0,a4
    5e30:	0007a883          	lw	a7,0(a5)
    5e34:	0047a703          	lw	a4,4(a5)
    5e38:	00a8c533          	xor	a0,a7,a0
    5e3c:	01074733          	xor	a4,a4,a6
    5e40:	00a7a023          	sw	a0,0(a5)
    5e44:	00e7a223          	sw	a4,4(a5)
  for(i=pos;i<pos+inlen;i++)
    5e48:	fad61ae3          	bne	a2,a3,5dfc <keccak_absorb+0x11c>

  return i;
}
    5e4c:	01c12083          	lw	ra,28(sp)
    5e50:	01812403          	lw	s0,24(sp)
    5e54:	01412483          	lw	s1,20(sp)
    5e58:	01012903          	lw	s2,16(sp)
    5e5c:	00098513          	mv	a0,s3
    5e60:	00c12983          	lw	s3,12(sp)
    5e64:	02010113          	addi	sp,sp,32
    5e68:	00008067          	ret
    5e6c:	01c12083          	lw	ra,28(sp)
    5e70:	01812403          	lw	s0,24(sp)
  for(i=pos;i<pos+inlen;i++)
    5e74:	00058993          	mv	s3,a1
}
    5e78:	01412483          	lw	s1,20(sp)
    5e7c:	01012903          	lw	s2,16(sp)
    5e80:	00098513          	mv	a0,s3
    5e84:	00c12983          	lw	s3,12(sp)
    5e88:	02010113          	addi	sp,sp,32
    5e8c:	00008067          	ret

00005e90 <keccak_absorb_once.constprop.1>:
*              - unsigned int r: rate in bytes (e.g., 168 for SHAKE128)
*              - const uint8_t *in: pointer to input to be absorbed into s
*              - size_t inlen: length of input in bytes
*              - uint8_t p: domain-separation byte for different Keccak-derived functions
**************************************************/
static void keccak_absorb_once(uint64_t s[25],
    5e90:	fe010113          	addi	sp,sp,-32
    5e94:	01212823          	sw	s2,16(sp)
    5e98:	01612023          	sw	s6,0(sp)
    5e9c:	00060913          	mv	s2,a2
    5ea0:	00058b13          	mv	s6,a1
                               uint8_t p)
{
  unsigned int i;

  for(i=0;i<25;i++)
    s[i] = 0;
    5ea4:	0c800613          	li	a2,200
    5ea8:	00000593          	li	a1,0
static void keccak_absorb_once(uint64_t s[25],
    5eac:	00912a23          	sw	s1,20(sp)
    5eb0:	01312623          	sw	s3,12(sp)
    5eb4:	00112e23          	sw	ra,28(sp)
    5eb8:	00812c23          	sw	s0,24(sp)
    5ebc:	01412423          	sw	s4,8(sp)
    5ec0:	01512223          	sw	s5,4(sp)
    5ec4:	00050993          	mv	s3,a0
    5ec8:	00068493          	mv	s1,a3
    s[i] = 0;
    5ecc:	19c020ef          	jal	ra,8068 <memset>

  while(inlen >= r) {
    5ed0:	08700793          	li	a5,135
    5ed4:	0b27f663          	bgeu	a5,s2,5f80 <keccak_absorb_once.constprop.1+0xf0>
    5ed8:	088b0a93          	addi	s5,s6,136
    5edc:	000a8a13          	mv	s4,s5
    5ee0:	08700413          	li	s0,135
    for(i=0;i<r/8;i++)
    5ee4:	000b0793          	mv	a5,s6
    5ee8:	00098693          	mv	a3,s3
    r |= (uint64_t)x[i] << 8*i;
    5eec:	0017c703          	lbu	a4,1(a5)
    5ef0:	0027ce03          	lbu	t3,2(a5)
    5ef4:	0057c803          	lbu	a6,5(a5)
    5ef8:	0047cf03          	lbu	t5,4(a5)
    5efc:	0067c503          	lbu	a0,6(a5)
    5f00:	0007ce83          	lbu	t4,0(a5)
    5f04:	0037c583          	lbu	a1,3(a5)
    5f08:	0077c603          	lbu	a2,7(a5)
    5f0c:	00871713          	slli	a4,a4,0x8
    5f10:	010e1e13          	slli	t3,t3,0x10
    5f14:	00881813          	slli	a6,a6,0x8
      s[i] ^= load64(in+8*i);
    5f18:	0006a303          	lw	t1,0(a3)
    5f1c:	0046a883          	lw	a7,4(a3)
    r |= (uint64_t)x[i] << 8*i;
    5f20:	01c76733          	or	a4,a4,t3
    5f24:	01e86833          	or	a6,a6,t5
    5f28:	01051513          	slli	a0,a0,0x10
    5f2c:	01d76733          	or	a4,a4,t4
    5f30:	01861613          	slli	a2,a2,0x18
    5f34:	01859593          	slli	a1,a1,0x18
    5f38:	01056533          	or	a0,a0,a6
    5f3c:	00e5e5b3          	or	a1,a1,a4
    5f40:	00a66733          	or	a4,a2,a0
      s[i] ^= load64(in+8*i);
    5f44:	00e8c733          	xor	a4,a7,a4
    5f48:	00b34633          	xor	a2,t1,a1
    5f4c:	00c6a023          	sw	a2,0(a3)
    5f50:	00e6a223          	sw	a4,4(a3)
    for(i=0;i<r/8;i++)
    5f54:	00878793          	addi	a5,a5,8
    5f58:	00868693          	addi	a3,a3,8
    5f5c:	f94798e3          	bne	a5,s4,5eec <keccak_absorb_once.constprop.1+0x5c>
    in += r;
    inlen -= r;
    KeccakF1600_StatePermute(s);
    5f60:	00098513          	mv	a0,s3
    inlen -= r;
    5f64:	f7890913          	addi	s2,s2,-136
    in += r;
    5f68:	000a8b13          	mv	s6,s5
    KeccakF1600_StatePermute(s);
    5f6c:	a69fd0ef          	jal	ra,39d4 <KeccakF1600_StatePermute>
  while(inlen >= r) {
    5f70:	088a0a13          	addi	s4,s4,136
    5f74:	01247663          	bgeu	s0,s2,5f80 <keccak_absorb_once.constprop.1+0xf0>
    5f78:	088a8a93          	addi	s5,s5,136
    5f7c:	f69ff06f          	j	5ee4 <keccak_absorb_once.constprop.1+0x54>
  }

  for(i=0;i<inlen;i++)
    5f80:	0e090c63          	beqz	s2,6078 <keccak_absorb_once.constprop.1+0x1e8>
    5f84:	00000693          	li	a3,0
    s[i/8] ^= (uint64_t)in[i] << 8*(i%8);
    5f88:	01f00893          	li	a7,31
    5f8c:	02c0006f          	j	5fb8 <keccak_absorb_once.constprop.1+0x128>
    5f90:	00072803          	lw	a6,0(a4)
    5f94:	00472583          	lw	a1,4(a4)
    5f98:	00c51633          	sll	a2,a0,a2
    5f9c:	00000513          	li	a0,0
    5fa0:	00a84533          	xor	a0,a6,a0
    5fa4:	00c5c633          	xor	a2,a1,a2
  for(i=0;i<inlen;i++)
    5fa8:	00168693          	addi	a3,a3,1
    s[i/8] ^= (uint64_t)in[i] << 8*(i%8);
    5fac:	00a72023          	sw	a0,0(a4)
    5fb0:	00c72223          	sw	a2,4(a4)
  for(i=0;i<inlen;i++)
    5fb4:	04d90a63          	beq	s2,a3,6008 <keccak_absorb_once.constprop.1+0x178>
    s[i/8] ^= (uint64_t)in[i] << 8*(i%8);
    5fb8:	0076f593          	andi	a1,a3,7
    5fbc:	00359593          	slli	a1,a1,0x3
    5fc0:	ff86f713          	andi	a4,a3,-8
    5fc4:	00db0533          	add	a0,s6,a3
    5fc8:	fe058613          	addi	a2,a1,-32
    5fcc:	00054503          	lbu	a0,0(a0)
    5fd0:	40b887b3          	sub	a5,a7,a1
    5fd4:	00e98733          	add	a4,s3,a4
    5fd8:	fa065ce3          	bgez	a2,5f90 <keccak_absorb_once.constprop.1+0x100>
    5fdc:	00072803          	lw	a6,0(a4)
    5fe0:	00155613          	srli	a2,a0,0x1
    5fe4:	00b51533          	sll	a0,a0,a1
    5fe8:	00472583          	lw	a1,4(a4)
    5fec:	00f65633          	srl	a2,a2,a5
    5ff0:	00a84533          	xor	a0,a6,a0
    5ff4:	00c5c633          	xor	a2,a1,a2
  for(i=0;i<inlen;i++)
    5ff8:	00168693          	addi	a3,a3,1
    s[i/8] ^= (uint64_t)in[i] << 8*(i%8);
    5ffc:	00a72023          	sw	a0,0(a4)
    6000:	00c72223          	sw	a2,4(a4)
  for(i=0;i<inlen;i++)
    6004:	fad91ae3          	bne	s2,a3,5fb8 <keccak_absorb_once.constprop.1+0x128>

  s[i/8] ^= (uint64_t)p << 8*(i%8);
    6008:	00797713          	andi	a4,s2,7
    600c:	ff897793          	andi	a5,s2,-8
    6010:	00371913          	slli	s2,a4,0x3
    6014:	fe090713          	addi	a4,s2,-32
    6018:	00f987b3          	add	a5,s3,a5
    601c:	06074063          	bltz	a4,607c <keccak_absorb_once.constprop.1+0x1ec>
    6020:	00e49733          	sll	a4,s1,a4
    6024:	00000493          	li	s1,0
    6028:	0007a603          	lw	a2,0(a5)
    602c:	0047a683          	lw	a3,4(a5)
  s[(r-1)/8] ^= 1ULL << 63;
}
    6030:	01c12083          	lw	ra,28(sp)
  s[i/8] ^= (uint64_t)p << 8*(i%8);
    6034:	00964633          	xor	a2,a2,s1
    6038:	00e6c733          	xor	a4,a3,a4
    603c:	00e7a223          	sw	a4,4(a5)
    6040:	00c7a023          	sw	a2,0(a5)
  s[(r-1)/8] ^= 1ULL << 63;
    6044:	0849a783          	lw	a5,132(s3)
}
    6048:	01812403          	lw	s0,24(sp)
  s[(r-1)/8] ^= 1ULL << 63;
    604c:	80000737          	lui	a4,0x80000
    6050:	00e7c7b3          	xor	a5,a5,a4
    6054:	08f9a223          	sw	a5,132(s3)
}
    6058:	01412483          	lw	s1,20(sp)
    605c:	01012903          	lw	s2,16(sp)
    6060:	00c12983          	lw	s3,12(sp)
    6064:	00812a03          	lw	s4,8(sp)
    6068:	00412a83          	lw	s5,4(sp)
    606c:	00012b03          	lw	s6,0(sp)
    6070:	02010113          	addi	sp,sp,32
    6074:	00008067          	ret
  for(i=0;i<inlen;i++)
    6078:	00098793          	mv	a5,s3
  s[i/8] ^= (uint64_t)p << 8*(i%8);
    607c:	01f00693          	li	a3,31
    6080:	0014d713          	srli	a4,s1,0x1
    6084:	412686b3          	sub	a3,a3,s2
    6088:	00d75733          	srl	a4,a4,a3
    608c:	012494b3          	sll	s1,s1,s2
    6090:	f99ff06f          	j	6028 <keccak_absorb_once.constprop.1+0x198>

00006094 <keccak_absorb_once.constprop.2>:
static void keccak_absorb_once(uint64_t s[25],
    6094:	fe010113          	addi	sp,sp,-32
    6098:	00912a23          	sw	s1,20(sp)
    609c:	01512223          	sw	s5,4(sp)
    60a0:	00060493          	mv	s1,a2
    60a4:	00058a93          	mv	s5,a1
    s[i] = 0;
    60a8:	0c800613          	li	a2,200
    60ac:	00000593          	li	a1,0
static void keccak_absorb_once(uint64_t s[25],
    60b0:	01212823          	sw	s2,16(sp)
    60b4:	00112e23          	sw	ra,28(sp)
    60b8:	00812c23          	sw	s0,24(sp)
    60bc:	01312623          	sw	s3,12(sp)
    60c0:	01412423          	sw	s4,8(sp)
    60c4:	00050913          	mv	s2,a0
    s[i] = 0;
    60c8:	7a1010ef          	jal	ra,8068 <memset>
  while(inlen >= r) {
    60cc:	0a700793          	li	a5,167
    60d0:	0a97f663          	bgeu	a5,s1,617c <keccak_absorb_once.constprop.2+0xe8>
    60d4:	0a8a8a13          	addi	s4,s5,168
    60d8:	000a0993          	mv	s3,s4
    60dc:	0a700413          	li	s0,167
    for(i=0;i<r/8;i++)
    60e0:	000a8793          	mv	a5,s5
    60e4:	00090693          	mv	a3,s2
    r |= (uint64_t)x[i] << 8*i;
    60e8:	0017c703          	lbu	a4,1(a5)
    60ec:	0027ce03          	lbu	t3,2(a5)
    60f0:	0057c803          	lbu	a6,5(a5)
    60f4:	0047cf03          	lbu	t5,4(a5)
    60f8:	0067c503          	lbu	a0,6(a5)
    60fc:	0007ce83          	lbu	t4,0(a5)
    6100:	0037c583          	lbu	a1,3(a5)
    6104:	0077c603          	lbu	a2,7(a5)
    6108:	00871713          	slli	a4,a4,0x8
    610c:	010e1e13          	slli	t3,t3,0x10
    6110:	00881813          	slli	a6,a6,0x8
      s[i] ^= load64(in+8*i);
    6114:	0006a303          	lw	t1,0(a3)
    6118:	0046a883          	lw	a7,4(a3)
    r |= (uint64_t)x[i] << 8*i;
    611c:	01c76733          	or	a4,a4,t3
    6120:	01e86833          	or	a6,a6,t5
    6124:	01051513          	slli	a0,a0,0x10
    6128:	01d76733          	or	a4,a4,t4
    612c:	01861613          	slli	a2,a2,0x18
    6130:	01859593          	slli	a1,a1,0x18
    6134:	01056533          	or	a0,a0,a6
    6138:	00e5e5b3          	or	a1,a1,a4
    613c:	00a66733          	or	a4,a2,a0
      s[i] ^= load64(in+8*i);
    6140:	00e8c733          	xor	a4,a7,a4
    6144:	00b34633          	xor	a2,t1,a1
    6148:	00c6a023          	sw	a2,0(a3)
    614c:	00e6a223          	sw	a4,4(a3)
    for(i=0;i<r/8;i++)
    6150:	00878793          	addi	a5,a5,8
    6154:	00868693          	addi	a3,a3,8
    6158:	f93798e3          	bne	a5,s3,60e8 <keccak_absorb_once.constprop.2+0x54>
    KeccakF1600_StatePermute(s);
    615c:	00090513          	mv	a0,s2
    inlen -= r;
    6160:	f5848493          	addi	s1,s1,-168
    in += r;
    6164:	000a0a93          	mv	s5,s4
    KeccakF1600_StatePermute(s);
    6168:	86dfd0ef          	jal	ra,39d4 <KeccakF1600_StatePermute>
  while(inlen >= r) {
    616c:	0a898993          	addi	s3,s3,168
    6170:	00947663          	bgeu	s0,s1,617c <keccak_absorb_once.constprop.2+0xe8>
    6174:	0a8a0a13          	addi	s4,s4,168
    6178:	f69ff06f          	j	60e0 <keccak_absorb_once.constprop.2+0x4c>
  for(i=0;i<inlen;i++)
    617c:	10048863          	beqz	s1,628c <keccak_absorb_once.constprop.2+0x1f8>
    6180:	00000693          	li	a3,0
    s[i/8] ^= (uint64_t)in[i] << 8*(i%8);
    6184:	01f00893          	li	a7,31
    6188:	02c0006f          	j	61b4 <keccak_absorb_once.constprop.2+0x120>
    618c:	00072803          	lw	a6,0(a4) # 80000000 <_end_of_memory+0x7ffd0000>
    6190:	00472583          	lw	a1,4(a4)
    6194:	00c51633          	sll	a2,a0,a2
    6198:	00000513          	li	a0,0
    619c:	00a84533          	xor	a0,a6,a0
    61a0:	00c5c633          	xor	a2,a1,a2
  for(i=0;i<inlen;i++)
    61a4:	00168693          	addi	a3,a3,1
    s[i/8] ^= (uint64_t)in[i] << 8*(i%8);
    61a8:	00a72023          	sw	a0,0(a4)
    61ac:	00c72223          	sw	a2,4(a4)
  for(i=0;i<inlen;i++)
    61b0:	04d48a63          	beq	s1,a3,6204 <keccak_absorb_once.constprop.2+0x170>
    s[i/8] ^= (uint64_t)in[i] << 8*(i%8);
    61b4:	0076f593          	andi	a1,a3,7
    61b8:	00359593          	slli	a1,a1,0x3
    61bc:	ff86f713          	andi	a4,a3,-8
    61c0:	00da8533          	add	a0,s5,a3
    61c4:	fe058613          	addi	a2,a1,-32
    61c8:	00054503          	lbu	a0,0(a0)
    61cc:	40b887b3          	sub	a5,a7,a1
    61d0:	00e90733          	add	a4,s2,a4
    61d4:	fa065ce3          	bgez	a2,618c <keccak_absorb_once.constprop.2+0xf8>
    61d8:	00072803          	lw	a6,0(a4)
    61dc:	00155613          	srli	a2,a0,0x1
    61e0:	00b51533          	sll	a0,a0,a1
    61e4:	00472583          	lw	a1,4(a4)
    61e8:	00f65633          	srl	a2,a2,a5
    61ec:	00a84533          	xor	a0,a6,a0
    61f0:	00c5c633          	xor	a2,a1,a2
  for(i=0;i<inlen;i++)
    61f4:	00168693          	addi	a3,a3,1
    s[i/8] ^= (uint64_t)in[i] << 8*(i%8);
    61f8:	00a72023          	sw	a0,0(a4)
    61fc:	00c72223          	sw	a2,4(a4)
  for(i=0;i<inlen;i++)
    6200:	fad49ae3          	bne	s1,a3,61b4 <keccak_absorb_once.constprop.2+0x120>
  s[i/8] ^= (uint64_t)p << 8*(i%8);
    6204:	0074f613          	andi	a2,s1,7
    6208:	00361613          	slli	a2,a2,0x3
    620c:	ff84f793          	andi	a5,s1,-8
    6210:	fe060693          	addi	a3,a2,-32
    6214:	00f907b3          	add	a5,s2,a5
    6218:	0406ce63          	bltz	a3,6274 <keccak_absorb_once.constprop.2+0x1e0>
    621c:	01f00713          	li	a4,31
    6220:	00d71733          	sll	a4,a4,a3
    6224:	00000693          	li	a3,0
    6228:	0007a583          	lw	a1,0(a5)
    622c:	0047a603          	lw	a2,4(a5)
}
    6230:	01c12083          	lw	ra,28(sp)
  s[i/8] ^= (uint64_t)p << 8*(i%8);
    6234:	00d5c6b3          	xor	a3,a1,a3
    6238:	00e64733          	xor	a4,a2,a4
    623c:	00e7a223          	sw	a4,4(a5)
    6240:	00d7a023          	sw	a3,0(a5)
  s[(r-1)/8] ^= 1ULL << 63;
    6244:	0a492783          	lw	a5,164(s2)
}
    6248:	01812403          	lw	s0,24(sp)
  s[(r-1)/8] ^= 1ULL << 63;
    624c:	80000737          	lui	a4,0x80000
    6250:	00e7c7b3          	xor	a5,a5,a4
    6254:	0af92223          	sw	a5,164(s2)
}
    6258:	01412483          	lw	s1,20(sp)
    625c:	01012903          	lw	s2,16(sp)
    6260:	00c12983          	lw	s3,12(sp)
    6264:	00812a03          	lw	s4,8(sp)
    6268:	00412a83          	lw	s5,4(sp)
    626c:	02010113          	addi	sp,sp,32
    6270:	00008067          	ret
  s[i/8] ^= (uint64_t)p << 8*(i%8);
    6274:	01f00693          	li	a3,31
    6278:	40c685b3          	sub	a1,a3,a2
    627c:	00f00713          	li	a4,15
    6280:	00b75733          	srl	a4,a4,a1
    6284:	00c696b3          	sll	a3,a3,a2
    6288:	fa1ff06f          	j	6228 <keccak_absorb_once.constprop.2+0x194>
  for(i=0;i<inlen;i++)
    628c:	00090793          	mv	a5,s2
    6290:	01f00693          	li	a3,31
    6294:	00000713          	li	a4,0
    6298:	f91ff06f          	j	6228 <keccak_absorb_once.constprop.2+0x194>

0000629c <pqcrystals_dilithium_fips202_ref_shake128_init>:
* Description: Initilizes Keccak state for use as SHAKE128 XOF
*
* Arguments:   - keccak_state *state: pointer to (uninitialized) Keccak state
**************************************************/
void shake128_init(keccak_state *state)
{
    629c:	ff010113          	addi	sp,sp,-16
    s[i] = 0;
    62a0:	0c800613          	li	a2,200
    62a4:	00000593          	li	a1,0
{
    62a8:	00812423          	sw	s0,8(sp)
    62ac:	00112623          	sw	ra,12(sp)
    62b0:	00050413          	mv	s0,a0
    s[i] = 0;
    62b4:	5b5010ef          	jal	ra,8068 <memset>
  keccak_init(state->s);
  state->pos = 0;
}
    62b8:	00c12083          	lw	ra,12(sp)
  state->pos = 0;
    62bc:	0c042423          	sw	zero,200(s0)
}
    62c0:	00812403          	lw	s0,8(sp)
    62c4:	01010113          	addi	sp,sp,16
    62c8:	00008067          	ret

000062cc <pqcrystals_dilithium_fips202_ref_shake128_absorb>:
* Arguments:   - keccak_state *state: pointer to (initialized) output Keccak state
*              - const uint8_t *in: pointer to input to be absorbed into s
*              - size_t inlen: length of input in bytes
**************************************************/
void shake128_absorb(keccak_state *state, const uint8_t *in, size_t inlen)
{
    62cc:	00058693          	mv	a3,a1
  state->pos = keccak_absorb(state->s, state->pos, SHAKE128_RATE, in, inlen);
    62d0:	0c852583          	lw	a1,200(a0)
{
    62d4:	ff010113          	addi	sp,sp,-16
    62d8:	00060713          	mv	a4,a2
  state->pos = keccak_absorb(state->s, state->pos, SHAKE128_RATE, in, inlen);
    62dc:	0a800613          	li	a2,168
{
    62e0:	00812423          	sw	s0,8(sp)
    62e4:	00112623          	sw	ra,12(sp)
    62e8:	00050413          	mv	s0,a0
  state->pos = keccak_absorb(state->s, state->pos, SHAKE128_RATE, in, inlen);
    62ec:	9f5ff0ef          	jal	ra,5ce0 <keccak_absorb>
}
    62f0:	00c12083          	lw	ra,12(sp)
  state->pos = keccak_absorb(state->s, state->pos, SHAKE128_RATE, in, inlen);
    62f4:	0ca42423          	sw	a0,200(s0)
}
    62f8:	00812403          	lw	s0,8(sp)
    62fc:	01010113          	addi	sp,sp,16
    6300:	00008067          	ret

00006304 <pqcrystals_dilithium_fips202_ref_shake128_finalize>:
*
* Arguments:   - keccak_state *state: pointer to Keccak state
**************************************************/
void shake128_finalize(keccak_state *state)
{
  keccak_finalize(state->s, state->pos, SHAKE128_RATE, 0x1F);
    6304:	0c852783          	lw	a5,200(a0)
  s[pos/8] ^= (uint64_t)p << 8*(pos%8);
    6308:	0077f713          	andi	a4,a5,7
    630c:	00371713          	slli	a4,a4,0x3
    6310:	ff87f793          	andi	a5,a5,-8
    6314:	fe070693          	addi	a3,a4,-32 # 7fffffe0 <_end_of_memory+0x7ffcffe0>
    6318:	00f507b3          	add	a5,a0,a5
    631c:	0406c263          	bltz	a3,6360 <pqcrystals_dilithium_fips202_ref_shake128_finalize+0x5c>
    6320:	01f00613          	li	a2,31
    6324:	00d61633          	sll	a2,a2,a3
    6328:	00000593          	li	a1,0
    632c:	0007a683          	lw	a3,0(a5)
    6330:	0047a703          	lw	a4,4(a5)
    6334:	00b6c6b3          	xor	a3,a3,a1
    6338:	00c74733          	xor	a4,a4,a2
    633c:	00e7a223          	sw	a4,4(a5)
    6340:	00d7a023          	sw	a3,0(a5)
  s[r/8-1] ^= 1ULL << 63;
    6344:	0a452783          	lw	a5,164(a0)
  state->pos = SHAKE128_RATE;
    6348:	0a800713          	li	a4,168
    634c:	0ce52423          	sw	a4,200(a0)
  s[r/8-1] ^= 1ULL << 63;
    6350:	80000737          	lui	a4,0x80000
    6354:	00e7c7b3          	xor	a5,a5,a4
    6358:	0af52223          	sw	a5,164(a0)
}
    635c:	00008067          	ret
  s[pos/8] ^= (uint64_t)p << 8*(pos%8);
    6360:	01f00593          	li	a1,31
    6364:	40e586b3          	sub	a3,a1,a4
    6368:	00f00613          	li	a2,15
    636c:	00d65633          	srl	a2,a2,a3
    6370:	00e595b3          	sll	a1,a1,a4
    6374:	fb9ff06f          	j	632c <pqcrystals_dilithium_fips202_ref_shake128_finalize+0x28>

00006378 <pqcrystals_dilithium_fips202_ref_shake128_squeeze>:
* Arguments:   - uint8_t *out: pointer to output blocks
*              - size_t outlen : number of bytes to be squeezed (written to output)
*              - keccak_state *s: pointer to input/output Keccak state
**************************************************/
void shake128_squeeze(uint8_t *out, size_t outlen, keccak_state *state)
{
    6378:	fe010113          	addi	sp,sp,-32
    637c:	00912a23          	sw	s1,20(sp)
    6380:	00112e23          	sw	ra,28(sp)
    6384:	00812c23          	sw	s0,24(sp)
    6388:	01212823          	sw	s2,16(sp)
    638c:	01312623          	sw	s3,12(sp)
    6390:	01412423          	sw	s4,8(sp)
  state->pos = keccak_squeeze(out, outlen, state->s, state->pos, SHAKE128_RATE);
    6394:	0c862783          	lw	a5,200(a2)
{
    6398:	00060493          	mv	s1,a2
  while(outlen) {
    639c:	0a058e63          	beqz	a1,6458 <pqcrystals_dilithium_fips202_ref_shake128_squeeze+0xe0>
    if(pos == r) {
    63a0:	0a800713          	li	a4,168
    63a4:	00058a13          	mv	s4,a1
    63a8:	00050413          	mv	s0,a0
    63ac:	0ce78863          	beq	a5,a4,647c <pqcrystals_dilithium_fips202_ref_shake128_squeeze+0x104>
    for(i=pos;i < r && i < pos+outlen; i++)
    63b0:	0a700713          	li	a4,167
    63b4:	08f76c63          	bltu	a4,a5,644c <pqcrystals_dilithium_fips202_ref_shake128_squeeze+0xd4>
    63b8:	00fa0633          	add	a2,s4,a5
    63bc:	00060893          	mv	a7,a2
    63c0:	fec7fce3          	bgeu	a5,a2,63b8 <pqcrystals_dilithium_fips202_ref_shake128_squeeze+0x40>
      *out++ = s[i/8] >> 8*(i%8);
    63c4:	01f00993          	li	s3,31
    for(i=pos;i < r && i < pos+outlen; i++)
    63c8:	0a700913          	li	s2,167
    63cc:	01c0006f          	j	63e8 <pqcrystals_dilithium_fips202_ref_shake128_squeeze+0x70>
      *out++ = s[i/8] >> 8*(i%8);
    63d0:	00472703          	lw	a4,4(a4) # 80000004 <_end_of_memory+0x7ffd0004>
    for(i=pos;i < r && i < pos+outlen; i++)
    63d4:	00178793          	addi	a5,a5,1
      *out++ = s[i/8] >> 8*(i%8);
    63d8:	00b75733          	srl	a4,a4,a1
    63dc:	fee40fa3          	sb	a4,-1(s0)
    for(i=pos;i < r && i < pos+outlen; i++)
    63e0:	04f96663          	bltu	s2,a5,642c <pqcrystals_dilithium_fips202_ref_shake128_squeeze+0xb4>
    63e4:	07178663          	beq	a5,a7,6450 <pqcrystals_dilithium_fips202_ref_shake128_squeeze+0xd8>
      *out++ = s[i/8] >> 8*(i%8);
    63e8:	0077f693          	andi	a3,a5,7
    63ec:	00369693          	slli	a3,a3,0x3
    63f0:	ff87f713          	andi	a4,a5,-8
    63f4:	fe068593          	addi	a1,a3,-32
    63f8:	40d98833          	sub	a6,s3,a3
    63fc:	00e48733          	add	a4,s1,a4
    6400:	00140413          	addi	s0,s0,1
    6404:	fc05d6e3          	bgez	a1,63d0 <pqcrystals_dilithium_fips202_ref_shake128_squeeze+0x58>
    6408:	00472583          	lw	a1,4(a4)
    640c:	00072703          	lw	a4,0(a4)
    for(i=pos;i < r && i < pos+outlen; i++)
    6410:	00178793          	addi	a5,a5,1
      *out++ = s[i/8] >> 8*(i%8);
    6414:	00159593          	slli	a1,a1,0x1
    6418:	010595b3          	sll	a1,a1,a6
    641c:	00d75733          	srl	a4,a4,a3
    6420:	00e5e733          	or	a4,a1,a4
    6424:	fee40fa3          	sb	a4,-1(s0)
    for(i=pos;i < r && i < pos+outlen; i++)
    6428:	faf97ee3          	bgeu	s2,a5,63e4 <pqcrystals_dilithium_fips202_ref_shake128_squeeze+0x6c>
    outlen -= i-pos;
    642c:	40f60a33          	sub	s4,a2,a5
  while(outlen) {
    6430:	02f60463          	beq	a2,a5,6458 <pqcrystals_dilithium_fips202_ref_shake128_squeeze+0xe0>
      KeccakF1600_StatePermute(s);
    6434:	00048513          	mv	a0,s1
    6438:	d9cfd0ef          	jal	ra,39d4 <KeccakF1600_StatePermute>
    643c:	000a0893          	mv	a7,s4
      pos = 0;
    6440:	00000793          	li	a5,0
    6444:	000a0613          	mv	a2,s4
    6448:	fa1ff06f          	j	63e8 <pqcrystals_dilithium_fips202_ref_shake128_squeeze+0x70>
  while(outlen) {
    644c:	0000006f          	j	644c <pqcrystals_dilithium_fips202_ref_shake128_squeeze+0xd4>
    outlen -= i-pos;
    6450:	40f60a33          	sub	s4,a2,a5
  while(outlen) {
    6454:	f6f612e3          	bne	a2,a5,63b8 <pqcrystals_dilithium_fips202_ref_shake128_squeeze+0x40>
}
    6458:	01c12083          	lw	ra,28(sp)
    645c:	01812403          	lw	s0,24(sp)
  state->pos = keccak_squeeze(out, outlen, state->s, state->pos, SHAKE128_RATE);
    6460:	0cf4a423          	sw	a5,200(s1)
}
    6464:	01012903          	lw	s2,16(sp)
    6468:	01412483          	lw	s1,20(sp)
    646c:	00c12983          	lw	s3,12(sp)
    6470:	00812a03          	lw	s4,8(sp)
    6474:	02010113          	addi	sp,sp,32
    6478:	00008067          	ret
      KeccakF1600_StatePermute(s);
    647c:	00060513          	mv	a0,a2
    6480:	d54fd0ef          	jal	ra,39d4 <KeccakF1600_StatePermute>
    6484:	000a0893          	mv	a7,s4
      pos = 0;
    6488:	00000793          	li	a5,0
    648c:	000a0613          	mv	a2,s4
    6490:	f35ff06f          	j	63c4 <pqcrystals_dilithium_fips202_ref_shake128_squeeze+0x4c>

00006494 <pqcrystals_dilithium_fips202_ref_shake128_absorb_once>:
* Arguments:   - keccak_state *state: pointer to (uninitialized) output Keccak state
*              - const uint8_t *in: pointer to input to be absorbed into s
*              - size_t inlen: length of input in bytes
**************************************************/
void shake128_absorb_once(keccak_state *state, const uint8_t *in, size_t inlen)
{
    6494:	ff010113          	addi	sp,sp,-16
    6498:	00812423          	sw	s0,8(sp)
    649c:	00112623          	sw	ra,12(sp)
    64a0:	00050413          	mv	s0,a0
  keccak_absorb_once(state->s, SHAKE128_RATE, in, inlen, 0x1F);
    64a4:	bf1ff0ef          	jal	ra,6094 <keccak_absorb_once.constprop.2>
  state->pos = SHAKE128_RATE;
    64a8:	0a800793          	li	a5,168
}
    64ac:	00c12083          	lw	ra,12(sp)
  state->pos = SHAKE128_RATE;
    64b0:	0cf42423          	sw	a5,200(s0)
}
    64b4:	00812403          	lw	s0,8(sp)
    64b8:	01010113          	addi	sp,sp,16
    64bc:	00008067          	ret

000064c0 <pqcrystals_dilithium_fips202_ref_shake128_squeezeblocks>:
  while(nblocks) {
    64c0:	0c058463          	beqz	a1,6588 <pqcrystals_dilithium_fips202_ref_shake128_squeezeblocks+0xc8>
* Arguments:   - uint8_t *out: pointer to output blocks
*              - size_t nblocks: number of blocks to be squeezed (written to output)
*              - keccak_state *s: pointer to input/output Keccak state
**************************************************/
void shake128_squeezeblocks(uint8_t *out, size_t nblocks, keccak_state *state)
{
    64c4:	fe010113          	addi	sp,sp,-32
    64c8:	01412423          	sw	s4,8(sp)
    64cc:	0a850a13          	addi	s4,a0,168
    64d0:	00812c23          	sw	s0,24(sp)
    64d4:	00912a23          	sw	s1,20(sp)
    64d8:	01212823          	sw	s2,16(sp)
    64dc:	01312623          	sw	s3,12(sp)
    64e0:	00112e23          	sw	ra,28(sp)
    64e4:	00058993          	mv	s3,a1
    64e8:	00050413          	mv	s0,a0
    64ec:	00060913          	mv	s2,a2
    64f0:	000a0493          	mv	s1,s4
    KeccakF1600_StatePermute(s);
    64f4:	00090513          	mv	a0,s2
    64f8:	cdcfd0ef          	jal	ra,39d4 <KeccakF1600_StatePermute>
    for(i=0;i<r/8;i++)
    64fc:	00090613          	mv	a2,s2
    6500:	00040793          	mv	a5,s0
      store64(out+8*i, s[i]);
    6504:	00062683          	lw	a3,0(a2)
    6508:	00462703          	lw	a4,4(a2)
    for(i=0;i<r/8;i++)
    650c:	00878793          	addi	a5,a5,8
    x[i] = u >> 8*i;
    6510:	0086de93          	srli	t4,a3,0x8
    6514:	0106de13          	srli	t3,a3,0x10
    6518:	0186d313          	srli	t1,a3,0x18
    651c:	00875893          	srli	a7,a4,0x8
    6520:	01075813          	srli	a6,a4,0x10
    6524:	01875593          	srli	a1,a4,0x18
    6528:	ffd78ca3          	sb	t4,-7(a5)
    652c:	ffc78d23          	sb	t3,-6(a5)
    6530:	fe678da3          	sb	t1,-5(a5)
    6534:	ff178ea3          	sb	a7,-3(a5)
    6538:	ff078f23          	sb	a6,-2(a5)
    653c:	feb78fa3          	sb	a1,-1(a5)
    6540:	fed78c23          	sb	a3,-8(a5)
    6544:	fee78e23          	sb	a4,-4(a5)
    for(i=0;i<r/8;i++)
    6548:	00860613          	addi	a2,a2,8
    654c:	faf49ce3          	bne	s1,a5,6504 <pqcrystals_dilithium_fips202_ref_shake128_squeezeblocks+0x44>
    nblocks -= 1;
    6550:	fff98993          	addi	s3,s3,-1
    out += r;
    6554:	000a0413          	mv	s0,s4
  while(nblocks) {
    6558:	0a848493          	addi	s1,s1,168
    655c:	00098663          	beqz	s3,6568 <pqcrystals_dilithium_fips202_ref_shake128_squeezeblocks+0xa8>
    6560:	0a8a0a13          	addi	s4,s4,168
    6564:	f91ff06f          	j	64f4 <pqcrystals_dilithium_fips202_ref_shake128_squeezeblocks+0x34>
  keccak_squeezeblocks(out, nblocks, state->s, SHAKE128_RATE);
}
    6568:	01c12083          	lw	ra,28(sp)
    656c:	01812403          	lw	s0,24(sp)
    6570:	01412483          	lw	s1,20(sp)
    6574:	01012903          	lw	s2,16(sp)
    6578:	00c12983          	lw	s3,12(sp)
    657c:	00812a03          	lw	s4,8(sp)
    6580:	02010113          	addi	sp,sp,32
    6584:	00008067          	ret
    6588:	00008067          	ret

0000658c <pqcrystals_dilithium_fips202_ref_shake256_init>:
*
* Description: Initilizes Keccak state for use as SHAKE256 XOF
*
* Arguments:   - keccak_state *state: pointer to (uninitialized) Keccak state
**************************************************/
void shake256_init(keccak_state *state)
    658c:	ff010113          	addi	sp,sp,-16
    6590:	0c800613          	li	a2,200
    6594:	00000593          	li	a1,0
    6598:	00812423          	sw	s0,8(sp)
    659c:	00112623          	sw	ra,12(sp)
    65a0:	00050413          	mv	s0,a0
    65a4:	2c5010ef          	jal	ra,8068 <memset>
    65a8:	00c12083          	lw	ra,12(sp)
    65ac:	0c042423          	sw	zero,200(s0)
    65b0:	00812403          	lw	s0,8(sp)
    65b4:	01010113          	addi	sp,sp,16
    65b8:	00008067          	ret

000065bc <pqcrystals_dilithium_fips202_ref_shake256_absorb>:
* Arguments:   - keccak_state *state: pointer to (initialized) output Keccak state
*              - const uint8_t *in: pointer to input to be absorbed into s
*              - size_t inlen: length of input in bytes
**************************************************/
void shake256_absorb(keccak_state *state, const uint8_t *in, size_t inlen)
{
    65bc:	00058693          	mv	a3,a1
  state->pos = keccak_absorb(state->s, state->pos, SHAKE256_RATE, in, inlen);
    65c0:	0c852583          	lw	a1,200(a0)
{
    65c4:	ff010113          	addi	sp,sp,-16
    65c8:	00060713          	mv	a4,a2
  state->pos = keccak_absorb(state->s, state->pos, SHAKE256_RATE, in, inlen);
    65cc:	08800613          	li	a2,136
{
    65d0:	00812423          	sw	s0,8(sp)
    65d4:	00112623          	sw	ra,12(sp)
    65d8:	00050413          	mv	s0,a0
  state->pos = keccak_absorb(state->s, state->pos, SHAKE256_RATE, in, inlen);
    65dc:	f04ff0ef          	jal	ra,5ce0 <keccak_absorb>
}
    65e0:	00c12083          	lw	ra,12(sp)
  state->pos = keccak_absorb(state->s, state->pos, SHAKE256_RATE, in, inlen);
    65e4:	0ca42423          	sw	a0,200(s0)
}
    65e8:	00812403          	lw	s0,8(sp)
    65ec:	01010113          	addi	sp,sp,16
    65f0:	00008067          	ret

000065f4 <pqcrystals_dilithium_fips202_ref_shake256_finalize>:
*
* Arguments:   - keccak_state *state: pointer to Keccak state
**************************************************/
void shake256_finalize(keccak_state *state)
{
  keccak_finalize(state->s, state->pos, SHAKE256_RATE, 0x1F);
    65f4:	0c852783          	lw	a5,200(a0)
  s[pos/8] ^= (uint64_t)p << 8*(pos%8);
    65f8:	0077f713          	andi	a4,a5,7
    65fc:	00371713          	slli	a4,a4,0x3
    6600:	ff87f793          	andi	a5,a5,-8
    6604:	fe070693          	addi	a3,a4,-32
    6608:	00f507b3          	add	a5,a0,a5
    660c:	0406c263          	bltz	a3,6650 <pqcrystals_dilithium_fips202_ref_shake256_finalize+0x5c>
    6610:	01f00613          	li	a2,31
    6614:	00d61633          	sll	a2,a2,a3
    6618:	00000593          	li	a1,0
    661c:	0007a683          	lw	a3,0(a5)
    6620:	0047a703          	lw	a4,4(a5)
    6624:	00b6c6b3          	xor	a3,a3,a1
    6628:	00c74733          	xor	a4,a4,a2
    662c:	00e7a223          	sw	a4,4(a5)
    6630:	00d7a023          	sw	a3,0(a5)
  s[r/8-1] ^= 1ULL << 63;
    6634:	08452783          	lw	a5,132(a0)
  state->pos = SHAKE256_RATE;
    6638:	08800713          	li	a4,136
    663c:	0ce52423          	sw	a4,200(a0)
  s[r/8-1] ^= 1ULL << 63;
    6640:	80000737          	lui	a4,0x80000
    6644:	00e7c7b3          	xor	a5,a5,a4
    6648:	08f52223          	sw	a5,132(a0)
}
    664c:	00008067          	ret
  s[pos/8] ^= (uint64_t)p << 8*(pos%8);
    6650:	01f00593          	li	a1,31
    6654:	40e586b3          	sub	a3,a1,a4
    6658:	00f00613          	li	a2,15
    665c:	00d65633          	srl	a2,a2,a3
    6660:	00e595b3          	sll	a1,a1,a4
    6664:	fb9ff06f          	j	661c <pqcrystals_dilithium_fips202_ref_shake256_finalize+0x28>

00006668 <pqcrystals_dilithium_fips202_ref_shake256_squeeze>:
* Arguments:   - uint8_t *out: pointer to output blocks
*              - size_t outlen : number of bytes to be squeezed (written to output)
*              - keccak_state *s: pointer to input/output Keccak state
**************************************************/
void shake256_squeeze(uint8_t *out, size_t outlen, keccak_state *state)
{
    6668:	fe010113          	addi	sp,sp,-32
    666c:	00912a23          	sw	s1,20(sp)
    6670:	00112e23          	sw	ra,28(sp)
    6674:	00812c23          	sw	s0,24(sp)
    6678:	01212823          	sw	s2,16(sp)
    667c:	01312623          	sw	s3,12(sp)
    6680:	01412423          	sw	s4,8(sp)
  state->pos = keccak_squeeze(out, outlen, state->s, state->pos, SHAKE256_RATE);
    6684:	0c862783          	lw	a5,200(a2)
{
    6688:	00060493          	mv	s1,a2
  while(outlen) {
    668c:	0a058e63          	beqz	a1,6748 <pqcrystals_dilithium_fips202_ref_shake256_squeeze+0xe0>
    if(pos == r) {
    6690:	08800713          	li	a4,136
    6694:	00058a13          	mv	s4,a1
    6698:	00050413          	mv	s0,a0
    669c:	0ce78863          	beq	a5,a4,676c <pqcrystals_dilithium_fips202_ref_shake256_squeeze+0x104>
    for(i=pos;i < r && i < pos+outlen; i++)
    66a0:	08700713          	li	a4,135
    66a4:	08f76c63          	bltu	a4,a5,673c <pqcrystals_dilithium_fips202_ref_shake256_squeeze+0xd4>
    66a8:	00fa0633          	add	a2,s4,a5
    66ac:	00060893          	mv	a7,a2
    66b0:	fec7fce3          	bgeu	a5,a2,66a8 <pqcrystals_dilithium_fips202_ref_shake256_squeeze+0x40>
      *out++ = s[i/8] >> 8*(i%8);
    66b4:	01f00993          	li	s3,31
    for(i=pos;i < r && i < pos+outlen; i++)
    66b8:	08700913          	li	s2,135
    66bc:	01c0006f          	j	66d8 <pqcrystals_dilithium_fips202_ref_shake256_squeeze+0x70>
      *out++ = s[i/8] >> 8*(i%8);
    66c0:	00472703          	lw	a4,4(a4) # 80000004 <_end_of_memory+0x7ffd0004>
    for(i=pos;i < r && i < pos+outlen; i++)
    66c4:	00178793          	addi	a5,a5,1
      *out++ = s[i/8] >> 8*(i%8);
    66c8:	00b75733          	srl	a4,a4,a1
    66cc:	fee40fa3          	sb	a4,-1(s0)
    for(i=pos;i < r && i < pos+outlen; i++)
    66d0:	04f96663          	bltu	s2,a5,671c <pqcrystals_dilithium_fips202_ref_shake256_squeeze+0xb4>
    66d4:	07178663          	beq	a5,a7,6740 <pqcrystals_dilithium_fips202_ref_shake256_squeeze+0xd8>
      *out++ = s[i/8] >> 8*(i%8);
    66d8:	0077f693          	andi	a3,a5,7
    66dc:	00369693          	slli	a3,a3,0x3
    66e0:	ff87f713          	andi	a4,a5,-8
    66e4:	fe068593          	addi	a1,a3,-32
    66e8:	40d98833          	sub	a6,s3,a3
    66ec:	00e48733          	add	a4,s1,a4
    66f0:	00140413          	addi	s0,s0,1
    66f4:	fc05d6e3          	bgez	a1,66c0 <pqcrystals_dilithium_fips202_ref_shake256_squeeze+0x58>
    66f8:	00472583          	lw	a1,4(a4)
    66fc:	00072703          	lw	a4,0(a4)
    for(i=pos;i < r && i < pos+outlen; i++)
    6700:	00178793          	addi	a5,a5,1
      *out++ = s[i/8] >> 8*(i%8);
    6704:	00159593          	slli	a1,a1,0x1
    6708:	010595b3          	sll	a1,a1,a6
    670c:	00d75733          	srl	a4,a4,a3
    6710:	00e5e733          	or	a4,a1,a4
    6714:	fee40fa3          	sb	a4,-1(s0)
    for(i=pos;i < r && i < pos+outlen; i++)
    6718:	faf97ee3          	bgeu	s2,a5,66d4 <pqcrystals_dilithium_fips202_ref_shake256_squeeze+0x6c>
    outlen -= i-pos;
    671c:	40f60a33          	sub	s4,a2,a5
  while(outlen) {
    6720:	02f60463          	beq	a2,a5,6748 <pqcrystals_dilithium_fips202_ref_shake256_squeeze+0xe0>
      KeccakF1600_StatePermute(s);
    6724:	00048513          	mv	a0,s1
    6728:	aacfd0ef          	jal	ra,39d4 <KeccakF1600_StatePermute>
    672c:	000a0893          	mv	a7,s4
      pos = 0;
    6730:	00000793          	li	a5,0
    6734:	000a0613          	mv	a2,s4
    6738:	fa1ff06f          	j	66d8 <pqcrystals_dilithium_fips202_ref_shake256_squeeze+0x70>
  while(outlen) {
    673c:	0000006f          	j	673c <pqcrystals_dilithium_fips202_ref_shake256_squeeze+0xd4>
    outlen -= i-pos;
    6740:	40f60a33          	sub	s4,a2,a5
  while(outlen) {
    6744:	f6f612e3          	bne	a2,a5,66a8 <pqcrystals_dilithium_fips202_ref_shake256_squeeze+0x40>
}
    6748:	01c12083          	lw	ra,28(sp)
    674c:	01812403          	lw	s0,24(sp)
  state->pos = keccak_squeeze(out, outlen, state->s, state->pos, SHAKE256_RATE);
    6750:	0cf4a423          	sw	a5,200(s1)
}
    6754:	01012903          	lw	s2,16(sp)
    6758:	01412483          	lw	s1,20(sp)
    675c:	00c12983          	lw	s3,12(sp)
    6760:	00812a03          	lw	s4,8(sp)
    6764:	02010113          	addi	sp,sp,32
    6768:	00008067          	ret
      KeccakF1600_StatePermute(s);
    676c:	00060513          	mv	a0,a2
    6770:	a64fd0ef          	jal	ra,39d4 <KeccakF1600_StatePermute>
    6774:	000a0893          	mv	a7,s4
      pos = 0;
    6778:	00000793          	li	a5,0
    677c:	000a0613          	mv	a2,s4
    6780:	f35ff06f          	j	66b4 <pqcrystals_dilithium_fips202_ref_shake256_squeeze+0x4c>

00006784 <pqcrystals_dilithium_fips202_ref_shake256_absorb_once>:
* Arguments:   - keccak_state *state: pointer to (uninitialized) output Keccak state
*              - const uint8_t *in: pointer to input to be absorbed into s
*              - size_t inlen: length of input in bytes
**************************************************/
void shake256_absorb_once(keccak_state *state, const uint8_t *in, size_t inlen)
{
    6784:	ff010113          	addi	sp,sp,-16
  keccak_absorb_once(state->s, SHAKE256_RATE, in, inlen, 0x1F);
    6788:	01f00693          	li	a3,31
{
    678c:	00812423          	sw	s0,8(sp)
    6790:	00112623          	sw	ra,12(sp)
    6794:	00050413          	mv	s0,a0
  keccak_absorb_once(state->s, SHAKE256_RATE, in, inlen, 0x1F);
    6798:	ef8ff0ef          	jal	ra,5e90 <keccak_absorb_once.constprop.1>
  state->pos = SHAKE256_RATE;
    679c:	08800793          	li	a5,136
}
    67a0:	00c12083          	lw	ra,12(sp)
  state->pos = SHAKE256_RATE;
    67a4:	0cf42423          	sw	a5,200(s0)
}
    67a8:	00812403          	lw	s0,8(sp)
    67ac:	01010113          	addi	sp,sp,16
    67b0:	00008067          	ret

000067b4 <pqcrystals_dilithium_fips202_ref_shake256_squeezeblocks>:
  while(nblocks) {
    67b4:	0c058463          	beqz	a1,687c <pqcrystals_dilithium_fips202_ref_shake256_squeezeblocks+0xc8>
* Arguments:   - uint8_t *out: pointer to output blocks
*              - size_t nblocks: number of blocks to be squeezed (written to output)
*              - keccak_state *s: pointer to input/output Keccak state
**************************************************/
void shake256_squeezeblocks(uint8_t *out, size_t nblocks, keccak_state *state)
{
    67b8:	fe010113          	addi	sp,sp,-32
    67bc:	01412423          	sw	s4,8(sp)
    67c0:	08850a13          	addi	s4,a0,136
    67c4:	00812c23          	sw	s0,24(sp)
    67c8:	00912a23          	sw	s1,20(sp)
    67cc:	01212823          	sw	s2,16(sp)
    67d0:	01312623          	sw	s3,12(sp)
    67d4:	00112e23          	sw	ra,28(sp)
    67d8:	00058993          	mv	s3,a1
    67dc:	00050413          	mv	s0,a0
    67e0:	00060913          	mv	s2,a2
    67e4:	000a0493          	mv	s1,s4
    KeccakF1600_StatePermute(s);
    67e8:	00090513          	mv	a0,s2
    67ec:	9e8fd0ef          	jal	ra,39d4 <KeccakF1600_StatePermute>
    for(i=0;i<r/8;i++)
    67f0:	00090613          	mv	a2,s2
    67f4:	00040793          	mv	a5,s0
      store64(out+8*i, s[i]);
    67f8:	00062683          	lw	a3,0(a2)
    67fc:	00462703          	lw	a4,4(a2)
    for(i=0;i<r/8;i++)
    6800:	00878793          	addi	a5,a5,8
    x[i] = u >> 8*i;
    6804:	0086de93          	srli	t4,a3,0x8
    6808:	0106de13          	srli	t3,a3,0x10
    680c:	0186d313          	srli	t1,a3,0x18
    6810:	00875893          	srli	a7,a4,0x8
    6814:	01075813          	srli	a6,a4,0x10
    6818:	01875593          	srli	a1,a4,0x18
    681c:	ffd78ca3          	sb	t4,-7(a5)
    6820:	ffc78d23          	sb	t3,-6(a5)
    6824:	fe678da3          	sb	t1,-5(a5)
    6828:	ff178ea3          	sb	a7,-3(a5)
    682c:	ff078f23          	sb	a6,-2(a5)
    6830:	feb78fa3          	sb	a1,-1(a5)
    6834:	fed78c23          	sb	a3,-8(a5)
    6838:	fee78e23          	sb	a4,-4(a5)
    for(i=0;i<r/8;i++)
    683c:	00860613          	addi	a2,a2,8
    6840:	faf49ce3          	bne	s1,a5,67f8 <pqcrystals_dilithium_fips202_ref_shake256_squeezeblocks+0x44>
    nblocks -= 1;
    6844:	fff98993          	addi	s3,s3,-1
    out += r;
    6848:	000a0413          	mv	s0,s4
  while(nblocks) {
    684c:	08848493          	addi	s1,s1,136
    6850:	00098663          	beqz	s3,685c <pqcrystals_dilithium_fips202_ref_shake256_squeezeblocks+0xa8>
    6854:	088a0a13          	addi	s4,s4,136
    6858:	f91ff06f          	j	67e8 <pqcrystals_dilithium_fips202_ref_shake256_squeezeblocks+0x34>
  keccak_squeezeblocks(out, nblocks, state->s, SHAKE256_RATE);
}
    685c:	01c12083          	lw	ra,28(sp)
    6860:	01812403          	lw	s0,24(sp)
    6864:	01412483          	lw	s1,20(sp)
    6868:	01012903          	lw	s2,16(sp)
    686c:	00c12983          	lw	s3,12(sp)
    6870:	00812a03          	lw	s4,8(sp)
    6874:	02010113          	addi	sp,sp,32
    6878:	00008067          	ret
    687c:	00008067          	ret

00006880 <pqcrystals_dilithium_fips202_ref_shake128>:
*              - size_t outlen: requested output length in bytes
*              - const uint8_t *in: pointer to input
*              - size_t inlen: length of input in bytes
**************************************************/
void shake128(uint8_t *out, size_t outlen, const uint8_t *in, size_t inlen)
{
    6880:	f1010113          	addi	sp,sp,-240
    6884:	00060793          	mv	a5,a2
    6888:	0e812423          	sw	s0,232(sp)
    688c:	0e912223          	sw	s1,228(sp)
    6890:	00050413          	mv	s0,a0
    6894:	00058493          	mv	s1,a1
  keccak_absorb_once(state->s, SHAKE128_RATE, in, inlen, 0x1F);
    6898:	00068613          	mv	a2,a3
    689c:	00078593          	mv	a1,a5
    68a0:	00010513          	mv	a0,sp
{
    68a4:	0f212023          	sw	s2,224(sp)
    68a8:	0d312e23          	sw	s3,220(sp)
    68ac:	0d412c23          	sw	s4,216(sp)
    68b0:	0d512a23          	sw	s5,212(sp)
    68b4:	0e112623          	sw	ra,236(sp)
  keccak_absorb_once(state->s, SHAKE128_RATE, in, inlen, 0x1F);
    68b8:	fdcff0ef          	jal	ra,6094 <keccak_absorb_once.constprop.2>
  state->pos = SHAKE128_RATE;
    68bc:	0a800793          	li	a5,168
  size_t nblocks;
  keccak_state state;

  shake128_absorb_once(&state, in, inlen);
  nblocks = outlen/SHAKE128_RATE;
    68c0:	02f4d933          	divu	s2,s1,a5
  state->pos = SHAKE128_RATE;
    68c4:	0cf12423          	sw	a5,200(sp)
  while(nblocks) {
    68c8:	0a700793          	li	a5,167
    68cc:	00040a93          	mv	s5,s0
    68d0:	0a810993          	addi	s3,sp,168
    68d4:	00090a13          	mv	s4,s2
    68d8:	0697f663          	bgeu	a5,s1,6944 <pqcrystals_dilithium_fips202_ref_shake128+0xc4>
    KeccakF1600_StatePermute(s);
    68dc:	00010513          	mv	a0,sp
    68e0:	8f4fd0ef          	jal	ra,39d4 <KeccakF1600_StatePermute>
    for(i=0;i<r/8;i++)
    68e4:	00010713          	mv	a4,sp
    68e8:	000a8793          	mv	a5,s5
      store64(out+8*i, s[i]);
    68ec:	00072603          	lw	a2,0(a4)
    68f0:	00472683          	lw	a3,4(a4)
    for(i=0;i<r/8;i++)
    68f4:	00870713          	addi	a4,a4,8
    x[i] = u >> 8*i;
    68f8:	00865e13          	srli	t3,a2,0x8
    68fc:	01065313          	srli	t1,a2,0x10
    6900:	01865893          	srli	a7,a2,0x18
    6904:	0086d813          	srli	a6,a3,0x8
    6908:	0106d513          	srli	a0,a3,0x10
    690c:	0186d593          	srli	a1,a3,0x18
    6910:	00c78023          	sb	a2,0(a5)
    6914:	01c780a3          	sb	t3,1(a5)
    6918:	00678123          	sb	t1,2(a5)
    691c:	011781a3          	sb	a7,3(a5)
    6920:	00d78223          	sb	a3,4(a5)
    6924:	010782a3          	sb	a6,5(a5)
    6928:	00a78323          	sb	a0,6(a5)
    692c:	00b783a3          	sb	a1,7(a5)
    for(i=0;i<r/8;i++)
    6930:	00878793          	addi	a5,a5,8
    6934:	fae99ce3          	bne	s3,a4,68ec <pqcrystals_dilithium_fips202_ref_shake128+0x6c>
    nblocks -= 1;
    6938:	fffa0a13          	addi	s4,s4,-1
    out += r;
    693c:	0a8a8a93          	addi	s5,s5,168
  while(nblocks) {
    6940:	f80a1ee3          	bnez	s4,68dc <pqcrystals_dilithium_fips202_ref_shake128+0x5c>
  shake128_squeezeblocks(out, nblocks, &state);
  outlen -= nblocks*SHAKE128_RATE;
    6944:	0a800793          	li	a5,168
    6948:	02f4f9b3          	remu	s3,s1,a5
    694c:	02f907b3          	mul	a5,s2,a5
  out += nblocks*SHAKE128_RATE;
    6950:	00f40433          	add	s0,s0,a5
  while(outlen) {
    6954:	0c098463          	beqz	s3,6a1c <pqcrystals_dilithium_fips202_ref_shake128+0x19c>
      KeccakF1600_StatePermute(s);
    6958:	00010513          	mv	a0,sp
    695c:	878fd0ef          	jal	ra,39d4 <KeccakF1600_StatePermute>
      *out++ = s[i/8] >> 8*(i%8);
    6960:	01f00493          	li	s1,31
      KeccakF1600_StatePermute(s);
    6964:	00098513          	mv	a0,s3
      pos = 0;
    6968:	00000813          	li	a6,0
    for(i=pos;i < r && i < pos+outlen; i++)
    696c:	0a800913          	li	s2,168
      pos = 0;
    6970:	00080713          	mv	a4,a6
    6974:	01c0006f          	j	6990 <pqcrystals_dilithium_fips202_ref_shake128+0x110>
      *out++ = s[i/8] >> 8*(i%8);
    6978:	f347a783          	lw	a5,-204(a5)
    for(i=pos;i < r && i < pos+outlen; i++)
    697c:	00170713          	addi	a4,a4,1
      *out++ = s[i/8] >> 8*(i%8);
    6980:	00c7d7b3          	srl	a5,a5,a2
    6984:	fef40fa3          	sb	a5,-1(s0)
    for(i=pos;i < r && i < pos+outlen; i++)
    6988:	05270863          	beq	a4,s2,69d8 <pqcrystals_dilithium_fips202_ref_shake128+0x158>
    698c:	06a70663          	beq	a4,a0,69f8 <pqcrystals_dilithium_fips202_ref_shake128+0x178>
      *out++ = s[i/8] >> 8*(i%8);
    6990:	00777693          	andi	a3,a4,7
    6994:	00369693          	slli	a3,a3,0x3
    6998:	ff877793          	andi	a5,a4,-8
    699c:	0d078793          	addi	a5,a5,208
    69a0:	fe068613          	addi	a2,a3,-32
    69a4:	40d485b3          	sub	a1,s1,a3
    69a8:	002787b3          	add	a5,a5,sp
    69ac:	00140413          	addi	s0,s0,1
    69b0:	fc0654e3          	bgez	a2,6978 <pqcrystals_dilithium_fips202_ref_shake128+0xf8>
    69b4:	f347a603          	lw	a2,-204(a5)
    69b8:	f307a783          	lw	a5,-208(a5)
    for(i=pos;i < r && i < pos+outlen; i++)
    69bc:	00170713          	addi	a4,a4,1
      *out++ = s[i/8] >> 8*(i%8);
    69c0:	00161613          	slli	a2,a2,0x1
    69c4:	00b61633          	sll	a2,a2,a1
    69c8:	00d7d7b3          	srl	a5,a5,a3
    69cc:	00f667b3          	or	a5,a2,a5
    69d0:	fef40fa3          	sb	a5,-1(s0)
    for(i=pos;i < r && i < pos+outlen; i++)
    69d4:	fb271ce3          	bne	a4,s2,698c <pqcrystals_dilithium_fips202_ref_shake128+0x10c>
    outlen -= i-pos;
    69d8:	010989b3          	add	s3,s3,a6
    69dc:	f5898993          	addi	s3,s3,-168
  while(outlen) {
    69e0:	02098e63          	beqz	s3,6a1c <pqcrystals_dilithium_fips202_ref_shake128+0x19c>
      KeccakF1600_StatePermute(s);
    69e4:	00010513          	mv	a0,sp
    69e8:	fedfc0ef          	jal	ra,39d4 <KeccakF1600_StatePermute>
    69ec:	00098513          	mv	a0,s3
      pos = 0;
    69f0:	00000813          	li	a6,0
    69f4:	f7dff06f          	j	6970 <pqcrystals_dilithium_fips202_ref_shake128+0xf0>
    outlen -= i-pos;
    69f8:	01098833          	add	a6,s3,a6
    69fc:	40e809b3          	sub	s3,a6,a4
  while(outlen) {
    6a00:	00e80e63          	beq	a6,a4,6a1c <pqcrystals_dilithium_fips202_ref_shake128+0x19c>
    6a04:	01370533          	add	a0,a4,s3
    for(i=pos;i < r && i < pos+outlen; i++)
    6a08:	00070813          	mv	a6,a4
    6a0c:	00050793          	mv	a5,a0
    6a10:	f6f760e3          	bltu	a4,a5,6970 <pqcrystals_dilithium_fips202_ref_shake128+0xf0>
    6a14:	f4f76ee3          	bltu	a4,a5,6970 <pqcrystals_dilithium_fips202_ref_shake128+0xf0>
    6a18:	ff9ff06f          	j	6a10 <pqcrystals_dilithium_fips202_ref_shake128+0x190>
  shake128_squeeze(out, outlen, &state);
}
    6a1c:	0ec12083          	lw	ra,236(sp)
    6a20:	0e812403          	lw	s0,232(sp)
    6a24:	0e412483          	lw	s1,228(sp)
    6a28:	0e012903          	lw	s2,224(sp)
    6a2c:	0dc12983          	lw	s3,220(sp)
    6a30:	0d812a03          	lw	s4,216(sp)
    6a34:	0d412a83          	lw	s5,212(sp)
    6a38:	0f010113          	addi	sp,sp,240
    6a3c:	00008067          	ret

00006a40 <pqcrystals_dilithium_fips202_ref_shake256>:
*              - size_t outlen: requested output length in bytes
*              - const uint8_t *in: pointer to input
*              - size_t inlen: length of input in bytes
**************************************************/
void shake256(uint8_t *out, size_t outlen, const uint8_t *in, size_t inlen)
{
    6a40:	f1010113          	addi	sp,sp,-240
    6a44:	00060793          	mv	a5,a2
    6a48:	0e812423          	sw	s0,232(sp)
    6a4c:	0e912223          	sw	s1,228(sp)
    6a50:	00068613          	mv	a2,a3
    6a54:	00050413          	mv	s0,a0
    6a58:	00058493          	mv	s1,a1
  keccak_absorb_once(state->s, SHAKE256_RATE, in, inlen, 0x1F);
    6a5c:	01f00693          	li	a3,31
    6a60:	00078593          	mv	a1,a5
    6a64:	00010513          	mv	a0,sp
{
    6a68:	0f212023          	sw	s2,224(sp)
    6a6c:	0d312e23          	sw	s3,220(sp)
    6a70:	0d412c23          	sw	s4,216(sp)
    6a74:	0d512a23          	sw	s5,212(sp)
    6a78:	0e112623          	sw	ra,236(sp)
  keccak_absorb_once(state->s, SHAKE256_RATE, in, inlen, 0x1F);
    6a7c:	c14ff0ef          	jal	ra,5e90 <keccak_absorb_once.constprop.1>
  state->pos = SHAKE256_RATE;
    6a80:	08800793          	li	a5,136
  size_t nblocks;
  keccak_state state;

  shake256_absorb_once(&state, in, inlen);
  nblocks = outlen/SHAKE256_RATE;
    6a84:	02f4d933          	divu	s2,s1,a5
  state->pos = SHAKE256_RATE;
    6a88:	0cf12423          	sw	a5,200(sp)
  while(nblocks) {
    6a8c:	08700793          	li	a5,135
    6a90:	00040a93          	mv	s5,s0
    6a94:	08810993          	addi	s3,sp,136
    6a98:	00090a13          	mv	s4,s2
    6a9c:	0697f663          	bgeu	a5,s1,6b08 <pqcrystals_dilithium_fips202_ref_shake256+0xc8>
    KeccakF1600_StatePermute(s);
    6aa0:	00010513          	mv	a0,sp
    6aa4:	f31fc0ef          	jal	ra,39d4 <KeccakF1600_StatePermute>
    for(i=0;i<r/8;i++)
    6aa8:	00010713          	mv	a4,sp
    6aac:	000a8793          	mv	a5,s5
      store64(out+8*i, s[i]);
    6ab0:	00072603          	lw	a2,0(a4)
    6ab4:	00472683          	lw	a3,4(a4)
    for(i=0;i<r/8;i++)
    6ab8:	00870713          	addi	a4,a4,8
    x[i] = u >> 8*i;
    6abc:	00865e13          	srli	t3,a2,0x8
    6ac0:	01065313          	srli	t1,a2,0x10
    6ac4:	01865893          	srli	a7,a2,0x18
    6ac8:	0086d813          	srli	a6,a3,0x8
    6acc:	0106d513          	srli	a0,a3,0x10
    6ad0:	0186d593          	srli	a1,a3,0x18
    6ad4:	00c78023          	sb	a2,0(a5)
    6ad8:	01c780a3          	sb	t3,1(a5)
    6adc:	00678123          	sb	t1,2(a5)
    6ae0:	011781a3          	sb	a7,3(a5)
    6ae4:	00d78223          	sb	a3,4(a5)
    6ae8:	010782a3          	sb	a6,5(a5)
    6aec:	00a78323          	sb	a0,6(a5)
    6af0:	00b783a3          	sb	a1,7(a5)
    for(i=0;i<r/8;i++)
    6af4:	00878793          	addi	a5,a5,8
    6af8:	fae99ce3          	bne	s3,a4,6ab0 <pqcrystals_dilithium_fips202_ref_shake256+0x70>
    nblocks -= 1;
    6afc:	fffa0a13          	addi	s4,s4,-1
    out += r;
    6b00:	088a8a93          	addi	s5,s5,136
  while(nblocks) {
    6b04:	f80a1ee3          	bnez	s4,6aa0 <pqcrystals_dilithium_fips202_ref_shake256+0x60>
  shake256_squeezeblocks(out, nblocks, &state);
  outlen -= nblocks*SHAKE256_RATE;
    6b08:	08800993          	li	s3,136
    6b0c:	0334f9b3          	remu	s3,s1,s3
    6b10:	00491793          	slli	a5,s2,0x4
    6b14:	012787b3          	add	a5,a5,s2
    6b18:	00379793          	slli	a5,a5,0x3
  out += nblocks*SHAKE256_RATE;
    6b1c:	00f40433          	add	s0,s0,a5
  while(outlen) {
    6b20:	0c098463          	beqz	s3,6be8 <pqcrystals_dilithium_fips202_ref_shake256+0x1a8>
      KeccakF1600_StatePermute(s);
    6b24:	00010513          	mv	a0,sp
    6b28:	eadfc0ef          	jal	ra,39d4 <KeccakF1600_StatePermute>
      *out++ = s[i/8] >> 8*(i%8);
    6b2c:	01f00913          	li	s2,31
      KeccakF1600_StatePermute(s);
    6b30:	00098513          	mv	a0,s3
      pos = 0;
    6b34:	00000813          	li	a6,0
    for(i=pos;i < r && i < pos+outlen; i++)
    6b38:	08800493          	li	s1,136
      pos = 0;
    6b3c:	00080713          	mv	a4,a6
    6b40:	01c0006f          	j	6b5c <pqcrystals_dilithium_fips202_ref_shake256+0x11c>
      *out++ = s[i/8] >> 8*(i%8);
    6b44:	f347a783          	lw	a5,-204(a5)
    for(i=pos;i < r && i < pos+outlen; i++)
    6b48:	00170713          	addi	a4,a4,1
      *out++ = s[i/8] >> 8*(i%8);
    6b4c:	00c7d7b3          	srl	a5,a5,a2
    6b50:	fef40fa3          	sb	a5,-1(s0)
    for(i=pos;i < r && i < pos+outlen; i++)
    6b54:	04970863          	beq	a4,s1,6ba4 <pqcrystals_dilithium_fips202_ref_shake256+0x164>
    6b58:	06a70663          	beq	a4,a0,6bc4 <pqcrystals_dilithium_fips202_ref_shake256+0x184>
      *out++ = s[i/8] >> 8*(i%8);
    6b5c:	00777693          	andi	a3,a4,7
    6b60:	00369693          	slli	a3,a3,0x3
    6b64:	ff877793          	andi	a5,a4,-8
    6b68:	0d078793          	addi	a5,a5,208
    6b6c:	fe068613          	addi	a2,a3,-32
    6b70:	40d905b3          	sub	a1,s2,a3
    6b74:	002787b3          	add	a5,a5,sp
    6b78:	00140413          	addi	s0,s0,1
    6b7c:	fc0654e3          	bgez	a2,6b44 <pqcrystals_dilithium_fips202_ref_shake256+0x104>
    6b80:	f347a603          	lw	a2,-204(a5)
    6b84:	f307a783          	lw	a5,-208(a5)
    for(i=pos;i < r && i < pos+outlen; i++)
    6b88:	00170713          	addi	a4,a4,1
      *out++ = s[i/8] >> 8*(i%8);
    6b8c:	00161613          	slli	a2,a2,0x1
    6b90:	00b61633          	sll	a2,a2,a1
    6b94:	00d7d7b3          	srl	a5,a5,a3
    6b98:	00f667b3          	or	a5,a2,a5
    6b9c:	fef40fa3          	sb	a5,-1(s0)
    for(i=pos;i < r && i < pos+outlen; i++)
    6ba0:	fa971ce3          	bne	a4,s1,6b58 <pqcrystals_dilithium_fips202_ref_shake256+0x118>
    outlen -= i-pos;
    6ba4:	01098833          	add	a6,s3,a6
    6ba8:	f7880993          	addi	s3,a6,-136
  while(outlen) {
    6bac:	02098e63          	beqz	s3,6be8 <pqcrystals_dilithium_fips202_ref_shake256+0x1a8>
      KeccakF1600_StatePermute(s);
    6bb0:	00010513          	mv	a0,sp
    6bb4:	e21fc0ef          	jal	ra,39d4 <KeccakF1600_StatePermute>
    6bb8:	00098513          	mv	a0,s3
      pos = 0;
    6bbc:	00000813          	li	a6,0
    6bc0:	f7dff06f          	j	6b3c <pqcrystals_dilithium_fips202_ref_shake256+0xfc>
    outlen -= i-pos;
    6bc4:	01098833          	add	a6,s3,a6
    6bc8:	40e809b3          	sub	s3,a6,a4
  while(outlen) {
    6bcc:	00e80e63          	beq	a6,a4,6be8 <pqcrystals_dilithium_fips202_ref_shake256+0x1a8>
    6bd0:	01370533          	add	a0,a4,s3
    for(i=pos;i < r && i < pos+outlen; i++)
    6bd4:	00070813          	mv	a6,a4
    6bd8:	00050793          	mv	a5,a0
    6bdc:	f6f760e3          	bltu	a4,a5,6b3c <pqcrystals_dilithium_fips202_ref_shake256+0xfc>
    6be0:	f4f76ee3          	bltu	a4,a5,6b3c <pqcrystals_dilithium_fips202_ref_shake256+0xfc>
    6be4:	ff9ff06f          	j	6bdc <pqcrystals_dilithium_fips202_ref_shake256+0x19c>
  shake256_squeeze(out, outlen, &state);
}
    6be8:	0ec12083          	lw	ra,236(sp)
    6bec:	0e812403          	lw	s0,232(sp)
    6bf0:	0e412483          	lw	s1,228(sp)
    6bf4:	0e012903          	lw	s2,224(sp)
    6bf8:	0dc12983          	lw	s3,220(sp)
    6bfc:	0d812a03          	lw	s4,216(sp)
    6c00:	0d412a83          	lw	s5,212(sp)
    6c04:	0f010113          	addi	sp,sp,240
    6c08:	00008067          	ret

00006c0c <pqcrystals_dilithium_fips202_ref_sha3_256>:
* Arguments:   - uint8_t *h: pointer to output (32 bytes)
*              - const uint8_t *in: pointer to input
*              - size_t inlen: length of input in bytes
**************************************************/
void sha3_256(uint8_t h[32], const uint8_t *in, size_t inlen)
{
    6c0c:	ef010113          	addi	sp,sp,-272
    6c10:	10812423          	sw	s0,264(sp)
  unsigned int i;
  uint64_t s[25];

  keccak_absorb_once(s, SHA3_256_RATE, in, inlen, 0x06);
    6c14:	00600693          	li	a3,6
{
    6c18:	00050413          	mv	s0,a0
  keccak_absorb_once(s, SHA3_256_RATE, in, inlen, 0x06);
    6c1c:	00810513          	addi	a0,sp,8
{
    6c20:	10112623          	sw	ra,268(sp)
    6c24:	10912223          	sw	s1,260(sp)
    6c28:	11212023          	sw	s2,256(sp)
    6c2c:	0f312e23          	sw	s3,252(sp)
    6c30:	0f412c23          	sw	s4,248(sp)
    6c34:	0f512a23          	sw	s5,244(sp)
    6c38:	0f612823          	sw	s6,240(sp)
    6c3c:	0f712623          	sw	s7,236(sp)
    6c40:	0f812423          	sw	s8,232(sp)
    6c44:	0f912223          	sw	s9,228(sp)
    6c48:	0fa12023          	sw	s10,224(sp)
    6c4c:	0db12e23          	sw	s11,220(sp)
  keccak_absorb_once(s, SHA3_256_RATE, in, inlen, 0x06);
    6c50:	a40ff0ef          	jal	ra,5e90 <keccak_absorb_once.constprop.1>
  KeccakF1600_StatePermute(s);
    6c54:	00810513          	addi	a0,sp,8
    6c58:	d7dfc0ef          	jal	ra,39d4 <KeccakF1600_StatePermute>
  for(i=0;i<4;i++)
    store64(h+8*i,s[i]);
    6c5c:	00812883          	lw	a7,8(sp)
    6c60:	00c12803          	lw	a6,12(sp)
    6c64:	01012503          	lw	a0,16(sp)
    6c68:	01412583          	lw	a1,20(sp)
    6c6c:	01812603          	lw	a2,24(sp)
    6c70:	01c12683          	lw	a3,28(sp)
    6c74:	02412783          	lw	a5,36(sp)
    6c78:	02012703          	lw	a4,32(sp)
    x[i] = u >> 8*i;
    6c7c:	0088dd93          	srli	s11,a7,0x8
    6c80:	0108dd13          	srli	s10,a7,0x10
    6c84:	0188dc93          	srli	s9,a7,0x18
    6c88:	00885c13          	srli	s8,a6,0x8
    6c8c:	01085b93          	srli	s7,a6,0x10
    6c90:	01885b13          	srli	s6,a6,0x18
    6c94:	00855a93          	srli	s5,a0,0x8
    6c98:	01055a13          	srli	s4,a0,0x10
    6c9c:	01855993          	srli	s3,a0,0x18
    6ca0:	0085d913          	srli	s2,a1,0x8
    6ca4:	0105d493          	srli	s1,a1,0x10
    6ca8:	0185d393          	srli	t2,a1,0x18
    6cac:	00865293          	srli	t0,a2,0x8
    6cb0:	01065f93          	srli	t6,a2,0x10
    6cb4:	01865f13          	srli	t5,a2,0x18
    6cb8:	0086de93          	srli	t4,a3,0x8
    6cbc:	0106de13          	srli	t3,a3,0x10
    6cc0:	0186d313          	srli	t1,a3,0x18
    6cc4:	01140023          	sb	a7,0(s0)
    6cc8:	01b400a3          	sb	s11,1(s0)
    6ccc:	01a40123          	sb	s10,2(s0)
    6cd0:	019401a3          	sb	s9,3(s0)
    6cd4:	01040223          	sb	a6,4(s0)
    6cd8:	018402a3          	sb	s8,5(s0)
    6cdc:	01740323          	sb	s7,6(s0)
    6ce0:	016403a3          	sb	s6,7(s0)
    6ce4:	00a40423          	sb	a0,8(s0)
    6ce8:	015404a3          	sb	s5,9(s0)
    6cec:	01440523          	sb	s4,10(s0)
    6cf0:	013405a3          	sb	s3,11(s0)
    6cf4:	00b40623          	sb	a1,12(s0)
    6cf8:	012406a3          	sb	s2,13(s0)
    6cfc:	00940723          	sb	s1,14(s0)
    6d00:	00c40823          	sb	a2,16(s0)
    6d04:	00d40a23          	sb	a3,20(s0)
    6d08:	007407a3          	sb	t2,15(s0)
    6d0c:	005408a3          	sb	t0,17(s0)
    6d10:	01f40923          	sb	t6,18(s0)
    6d14:	01e409a3          	sb	t5,19(s0)
    6d18:	01d40aa3          	sb	t4,21(s0)
    6d1c:	01c40b23          	sb	t3,22(s0)
    6d20:	00640ba3          	sb	t1,23(s0)
    6d24:	00875893          	srli	a7,a4,0x8
    6d28:	01075813          	srli	a6,a4,0x10
    6d2c:	01875513          	srli	a0,a4,0x18
    6d30:	0087d593          	srli	a1,a5,0x8
    6d34:	0107d613          	srli	a2,a5,0x10
    6d38:	0187d693          	srli	a3,a5,0x18
    6d3c:	00e40c23          	sb	a4,24(s0)
    6d40:	01140ca3          	sb	a7,25(s0)
    6d44:	01040d23          	sb	a6,26(s0)
    6d48:	00a40da3          	sb	a0,27(s0)
    6d4c:	00f40e23          	sb	a5,28(s0)
    6d50:	00b40ea3          	sb	a1,29(s0)
    6d54:	00c40f23          	sb	a2,30(s0)
    6d58:	00d40fa3          	sb	a3,31(s0)
}
    6d5c:	10c12083          	lw	ra,268(sp)
    6d60:	10812403          	lw	s0,264(sp)
    6d64:	10412483          	lw	s1,260(sp)
    6d68:	10012903          	lw	s2,256(sp)
    6d6c:	0fc12983          	lw	s3,252(sp)
    6d70:	0f812a03          	lw	s4,248(sp)
    6d74:	0f412a83          	lw	s5,244(sp)
    6d78:	0f012b03          	lw	s6,240(sp)
    6d7c:	0ec12b83          	lw	s7,236(sp)
    6d80:	0e812c03          	lw	s8,232(sp)
    6d84:	0e412c83          	lw	s9,228(sp)
    6d88:	0e012d03          	lw	s10,224(sp)
    6d8c:	0dc12d83          	lw	s11,220(sp)
    6d90:	11010113          	addi	sp,sp,272
    6d94:	00008067          	ret

00006d98 <pqcrystals_dilithium_fips202_ref_sha3_512>:
* Arguments:   - uint8_t *h: pointer to output (64 bytes)
*              - const uint8_t *in: pointer to input
*              - size_t inlen: length of input in bytes
**************************************************/
void sha3_512(uint8_t h[64], const uint8_t *in, size_t inlen)
{
    6d98:	ef010113          	addi	sp,sp,-272
    6d9c:	10912223          	sw	s1,260(sp)
    6da0:	11212023          	sw	s2,256(sp)
    6da4:	0f512a23          	sw	s5,244(sp)
    6da8:	00050493          	mv	s1,a0
    6dac:	00058a93          	mv	s5,a1
    6db0:	00060913          	mv	s2,a2
    s[i] = 0;
    6db4:	00000593          	li	a1,0
    6db8:	0c800613          	li	a2,200
    6dbc:	00810513          	addi	a0,sp,8
{
    6dc0:	10112623          	sw	ra,268(sp)
    6dc4:	10812423          	sw	s0,264(sp)
    6dc8:	0f312e23          	sw	s3,252(sp)
    6dcc:	0f412c23          	sw	s4,248(sp)
    6dd0:	0f612823          	sw	s6,240(sp)
    6dd4:	0f712623          	sw	s7,236(sp)
    6dd8:	0f812423          	sw	s8,232(sp)
    6ddc:	0f912223          	sw	s9,228(sp)
    6de0:	0fa12023          	sw	s10,224(sp)
    6de4:	0db12e23          	sw	s11,220(sp)
    s[i] = 0;
    6de8:	280010ef          	jal	ra,8068 <memset>
  while(inlen >= r) {
    6dec:	04700793          	li	a5,71
    6df0:	0b27f663          	bgeu	a5,s2,6e9c <pqcrystals_dilithium_fips202_ref_sha3_512+0x104>
    6df4:	048a8a13          	addi	s4,s5,72
    6df8:	000a0993          	mv	s3,s4
    6dfc:	04700413          	li	s0,71
    for(i=0;i<r/8;i++)
    6e00:	000a8793          	mv	a5,s5
    6e04:	00810693          	addi	a3,sp,8
    r |= (uint64_t)x[i] << 8*i;
    6e08:	0017c703          	lbu	a4,1(a5)
    6e0c:	0027ce03          	lbu	t3,2(a5)
    6e10:	0057c803          	lbu	a6,5(a5)
    6e14:	0047cf03          	lbu	t5,4(a5)
    6e18:	0067c503          	lbu	a0,6(a5)
    6e1c:	0007ce83          	lbu	t4,0(a5)
    6e20:	0037c583          	lbu	a1,3(a5)
    6e24:	0077c603          	lbu	a2,7(a5)
    6e28:	00871713          	slli	a4,a4,0x8
    6e2c:	010e1e13          	slli	t3,t3,0x10
    6e30:	00881813          	slli	a6,a6,0x8
      s[i] ^= load64(in+8*i);
    6e34:	0006a303          	lw	t1,0(a3)
    6e38:	0046a883          	lw	a7,4(a3)
    r |= (uint64_t)x[i] << 8*i;
    6e3c:	01c76733          	or	a4,a4,t3
    6e40:	01e86833          	or	a6,a6,t5
    6e44:	01051513          	slli	a0,a0,0x10
    6e48:	01d76733          	or	a4,a4,t4
    6e4c:	01861613          	slli	a2,a2,0x18
    6e50:	01859593          	slli	a1,a1,0x18
    6e54:	01056533          	or	a0,a0,a6
    6e58:	00e5e5b3          	or	a1,a1,a4
    6e5c:	00a66733          	or	a4,a2,a0
      s[i] ^= load64(in+8*i);
    6e60:	00e8c733          	xor	a4,a7,a4
    6e64:	00b34633          	xor	a2,t1,a1
    6e68:	00c6a023          	sw	a2,0(a3)
    6e6c:	00e6a223          	sw	a4,4(a3)
    for(i=0;i<r/8;i++)
    6e70:	00878793          	addi	a5,a5,8
    6e74:	00868693          	addi	a3,a3,8
    6e78:	f8f998e3          	bne	s3,a5,6e08 <pqcrystals_dilithium_fips202_ref_sha3_512+0x70>
    KeccakF1600_StatePermute(s);
    6e7c:	00810513          	addi	a0,sp,8
    inlen -= r;
    6e80:	fb890913          	addi	s2,s2,-72
    in += r;
    6e84:	000a0a93          	mv	s5,s4
    KeccakF1600_StatePermute(s);
    6e88:	b4dfc0ef          	jal	ra,39d4 <KeccakF1600_StatePermute>
  while(inlen >= r) {
    6e8c:	04898993          	addi	s3,s3,72
    6e90:	01247663          	bgeu	s0,s2,6e9c <pqcrystals_dilithium_fips202_ref_sha3_512+0x104>
    6e94:	048a0a13          	addi	s4,s4,72
    6e98:	f69ff06f          	j	6e00 <pqcrystals_dilithium_fips202_ref_sha3_512+0x68>
  for(i=0;i<inlen;i++)
    6e9c:	32090e63          	beqz	s2,71d8 <pqcrystals_dilithium_fips202_ref_sha3_512+0x440>
    6ea0:	00000613          	li	a2,0
    s[i/8] ^= (uint64_t)in[i] << 8*(i%8);
    6ea4:	01f00893          	li	a7,31
    6ea8:	02c0006f          	j	6ed4 <pqcrystals_dilithium_fips202_ref_sha3_512+0x13c>
    6eac:	00072803          	lw	a6,0(a4)
    6eb0:	00472503          	lw	a0,4(a4)
    6eb4:	00000693          	li	a3,0
    6eb8:	00b795b3          	sll	a1,a5,a1
    6ebc:	00d84833          	xor	a6,a6,a3
    6ec0:	00b546b3          	xor	a3,a0,a1
  for(i=0;i<inlen;i++)
    6ec4:	00160613          	addi	a2,a2,1
    s[i/8] ^= (uint64_t)in[i] << 8*(i%8);
    6ec8:	01072023          	sw	a6,0(a4)
    6ecc:	00d72223          	sw	a3,4(a4)
  for(i=0;i<inlen;i++)
    6ed0:	04c90c63          	beq	s2,a2,6f28 <pqcrystals_dilithium_fips202_ref_sha3_512+0x190>
    s[i/8] ^= (uint64_t)in[i] << 8*(i%8);
    6ed4:	00767693          	andi	a3,a2,7
    6ed8:	00369693          	slli	a3,a3,0x3
    6edc:	00810793          	addi	a5,sp,8
    6ee0:	ff867713          	andi	a4,a2,-8
    6ee4:	00ca8533          	add	a0,s5,a2
    6ee8:	fe068593          	addi	a1,a3,-32
    6eec:	00e78733          	add	a4,a5,a4
    6ef0:	40d88833          	sub	a6,a7,a3
    6ef4:	00054783          	lbu	a5,0(a0)
    6ef8:	fa05dae3          	bgez	a1,6eac <pqcrystals_dilithium_fips202_ref_sha3_512+0x114>
    6efc:	0017d593          	srli	a1,a5,0x1
    6f00:	00472503          	lw	a0,4(a4)
    6f04:	0105d5b3          	srl	a1,a1,a6
    6f08:	00072803          	lw	a6,0(a4)
    6f0c:	00d796b3          	sll	a3,a5,a3
  for(i=0;i<inlen;i++)
    6f10:	00160613          	addi	a2,a2,1
    s[i/8] ^= (uint64_t)in[i] << 8*(i%8);
    6f14:	00d84833          	xor	a6,a6,a3
    6f18:	00b546b3          	xor	a3,a0,a1
    6f1c:	01072023          	sw	a6,0(a4)
    6f20:	00d72223          	sw	a3,4(a4)
  for(i=0;i<inlen;i++)
    6f24:	fac918e3          	bne	s2,a2,6ed4 <pqcrystals_dilithium_fips202_ref_sha3_512+0x13c>
  s[i/8] ^= (uint64_t)p << 8*(i%8);
    6f28:	00797613          	andi	a2,s2,7
    6f2c:	00361613          	slli	a2,a2,0x3
    6f30:	ff897793          	andi	a5,s2,-8
    6f34:	00810713          	addi	a4,sp,8
    6f38:	fe060693          	addi	a3,a2,-32
    6f3c:	00f707b3          	add	a5,a4,a5
    6f40:	2606ce63          	bltz	a3,71bc <pqcrystals_dilithium_fips202_ref_sha3_512+0x424>
    6f44:	00600713          	li	a4,6
    6f48:	00d71733          	sll	a4,a4,a3
    6f4c:	00000693          	li	a3,0
    6f50:	0007a583          	lw	a1,0(a5)
    6f54:	0047a603          	lw	a2,4(a5)
  unsigned int i;
  uint64_t s[25];

  keccak_absorb_once(s, SHA3_512_RATE, in, inlen, 0x06);
  KeccakF1600_StatePermute(s);
    6f58:	00810513          	addi	a0,sp,8
  s[i/8] ^= (uint64_t)p << 8*(i%8);
    6f5c:	00d5c6b3          	xor	a3,a1,a3
    6f60:	00e64733          	xor	a4,a2,a4
    6f64:	00d7a023          	sw	a3,0(a5)
    6f68:	00e7a223          	sw	a4,4(a5)
  s[(r-1)/8] ^= 1ULL << 63;
    6f6c:	04c12783          	lw	a5,76(sp)
    6f70:	80000737          	lui	a4,0x80000
    6f74:	00e7c7b3          	xor	a5,a5,a4
    6f78:	04f12623          	sw	a5,76(sp)
  KeccakF1600_StatePermute(s);
    6f7c:	a59fc0ef          	jal	ra,39d4 <KeccakF1600_StatePermute>
  for(i=0;i<8;i++)
    store64(h+8*i,s[i]);
    6f80:	00812803          	lw	a6,8(sp)
    6f84:	00c12503          	lw	a0,12(sp)
    6f88:	01012583          	lw	a1,16(sp)
    6f8c:	01412603          	lw	a2,20(sp)
    6f90:	01812683          	lw	a3,24(sp)
    6f94:	01c12783          	lw	a5,28(sp)
    6f98:	02012703          	lw	a4,32(sp)
    x[i] = u >> 8*i;
    6f9c:	00885d13          	srli	s10,a6,0x8
    6fa0:	01085c93          	srli	s9,a6,0x10
    6fa4:	01885c13          	srli	s8,a6,0x18
    6fa8:	00855b93          	srli	s7,a0,0x8
    6fac:	01055b13          	srli	s6,a0,0x10
    6fb0:	01855a93          	srli	s5,a0,0x18
    6fb4:	0085da13          	srli	s4,a1,0x8
    6fb8:	0105d993          	srli	s3,a1,0x10
    6fbc:	0185d913          	srli	s2,a1,0x18
    6fc0:	00865413          	srli	s0,a2,0x8
    6fc4:	01065393          	srli	t2,a2,0x10
    6fc8:	01865293          	srli	t0,a2,0x18
    6fcc:	0086df93          	srli	t6,a3,0x8
    6fd0:	0106df13          	srli	t5,a3,0x10
    6fd4:	0186de93          	srli	t4,a3,0x18
    6fd8:	0087de13          	srli	t3,a5,0x8
    6fdc:	0107d313          	srli	t1,a5,0x10
    6fe0:	0187d893          	srli	a7,a5,0x18
    6fe4:	01048023          	sb	a6,0(s1)
    6fe8:	01a480a3          	sb	s10,1(s1)
    6fec:	01948123          	sb	s9,2(s1)
    6ff0:	018481a3          	sb	s8,3(s1)
    6ff4:	00a48223          	sb	a0,4(s1)
    6ff8:	017482a3          	sb	s7,5(s1)
    6ffc:	01648323          	sb	s6,6(s1)
    7000:	015483a3          	sb	s5,7(s1)
    7004:	00b48423          	sb	a1,8(s1)
    7008:	014484a3          	sb	s4,9(s1)
    700c:	01348523          	sb	s3,10(s1)
    7010:	012485a3          	sb	s2,11(s1)
    7014:	00c48623          	sb	a2,12(s1)
    7018:	008486a3          	sb	s0,13(s1)
    701c:	00748723          	sb	t2,14(s1)
    7020:	005487a3          	sb	t0,15(s1)
    7024:	00d48823          	sb	a3,16(s1)
    7028:	01f488a3          	sb	t6,17(s1)
    702c:	01e48923          	sb	t5,18(s1)
    7030:	01d489a3          	sb	t4,19(s1)
    7034:	00f48a23          	sb	a5,20(s1)
    7038:	01c48aa3          	sb	t3,21(s1)
    703c:	00648b23          	sb	t1,22(s1)
    7040:	01148ba3          	sb	a7,23(s1)
    store64(h+8*i,s[i]);
    7044:	02412803          	lw	a6,36(sp)
    x[i] = u >> 8*i;
    7048:	00e48c23          	sb	a4,24(s1)
    store64(h+8*i,s[i]);
    704c:	02812503          	lw	a0,40(sp)
    7050:	02c12583          	lw	a1,44(sp)
    7054:	03012603          	lw	a2,48(sp)
    7058:	03412683          	lw	a3,52(sp)
    705c:	03812783          	lw	a5,56(sp)
    x[i] = u >> 8*i;
    7060:	00875d13          	srli	s10,a4,0x8
    7064:	01075c93          	srli	s9,a4,0x10
    7068:	00885d93          	srli	s11,a6,0x8
    706c:	01085c13          	srli	s8,a6,0x10
    7070:	01885b93          	srli	s7,a6,0x18
    7074:	00855b13          	srli	s6,a0,0x8
    7078:	01055a93          	srli	s5,a0,0x10
    707c:	01855a13          	srli	s4,a0,0x18
    7080:	0085d993          	srli	s3,a1,0x8
    7084:	0105d913          	srli	s2,a1,0x10
    7088:	0185d413          	srli	s0,a1,0x18
    708c:	0086df13          	srli	t5,a3,0x8
    7090:	0106de93          	srli	t4,a3,0x10
    7094:	0186de13          	srli	t3,a3,0x18
    7098:	0087d313          	srli	t1,a5,0x8
    709c:	0107d893          	srli	a7,a5,0x10
    70a0:	01875713          	srli	a4,a4,0x18
    70a4:	00865393          	srli	t2,a2,0x8
    70a8:	01065293          	srli	t0,a2,0x10
    70ac:	01865f93          	srli	t6,a2,0x18
    70b0:	01a48ca3          	sb	s10,25(s1)
    70b4:	01948d23          	sb	s9,26(s1)
    70b8:	00e48da3          	sb	a4,27(s1)
    70bc:	01048e23          	sb	a6,28(s1)
    70c0:	01b48ea3          	sb	s11,29(s1)
    70c4:	01848f23          	sb	s8,30(s1)
    70c8:	01748fa3          	sb	s7,31(s1)
    70cc:	02a48023          	sb	a0,32(s1)
    70d0:	036480a3          	sb	s6,33(s1)
    70d4:	03548123          	sb	s5,34(s1)
    70d8:	034481a3          	sb	s4,35(s1)
    70dc:	02b48223          	sb	a1,36(s1)
    70e0:	033482a3          	sb	s3,37(s1)
    70e4:	03248323          	sb	s2,38(s1)
    70e8:	028483a3          	sb	s0,39(s1)
    70ec:	02c48423          	sb	a2,40(s1)
    70f0:	02d48623          	sb	a3,44(s1)
    70f4:	03e486a3          	sb	t5,45(s1)
    70f8:	03d48723          	sb	t4,46(s1)
    70fc:	03c487a3          	sb	t3,47(s1)
    7100:	02f48823          	sb	a5,48(s1)
    7104:	026488a3          	sb	t1,49(s1)
    7108:	03148923          	sb	a7,50(s1)
    710c:	027484a3          	sb	t2,41(s1)
    7110:	02548523          	sb	t0,42(s1)
    7114:	03f485a3          	sb	t6,43(s1)
    7118:	0187d793          	srli	a5,a5,0x18
    store64(h+8*i,s[i]);
    711c:	03c12683          	lw	a3,60(sp)
    x[i] = u >> 8*i;
    7120:	02f489a3          	sb	a5,51(s1)
    store64(h+8*i,s[i]);
    7124:	04012703          	lw	a4,64(sp)
    7128:	04412783          	lw	a5,68(sp)
    x[i] = u >> 8*i;
    712c:	0086df13          	srli	t5,a3,0x8
    7130:	0106de93          	srli	t4,a3,0x10
    7134:	0186de13          	srli	t3,a3,0x18
    7138:	00875313          	srli	t1,a4,0x8
    713c:	01075893          	srli	a7,a4,0x10
    7140:	01875813          	srli	a6,a4,0x18
    7144:	0087d513          	srli	a0,a5,0x8
    7148:	0107d593          	srli	a1,a5,0x10
    714c:	0187d613          	srli	a2,a5,0x18
    7150:	02d48a23          	sb	a3,52(s1)
    7154:	03e48aa3          	sb	t5,53(s1)
    7158:	03d48b23          	sb	t4,54(s1)
    715c:	03c48ba3          	sb	t3,55(s1)
    7160:	02e48c23          	sb	a4,56(s1)
    7164:	02648ca3          	sb	t1,57(s1)
    7168:	03148d23          	sb	a7,58(s1)
    716c:	03048da3          	sb	a6,59(s1)
    7170:	02f48e23          	sb	a5,60(s1)
    7174:	02a48ea3          	sb	a0,61(s1)
    7178:	02b48f23          	sb	a1,62(s1)
    717c:	02c48fa3          	sb	a2,63(s1)
}
    7180:	10c12083          	lw	ra,268(sp)
    7184:	10812403          	lw	s0,264(sp)
    7188:	10412483          	lw	s1,260(sp)
    718c:	10012903          	lw	s2,256(sp)
    7190:	0fc12983          	lw	s3,252(sp)
    7194:	0f812a03          	lw	s4,248(sp)
    7198:	0f412a83          	lw	s5,244(sp)
    719c:	0f012b03          	lw	s6,240(sp)
    71a0:	0ec12b83          	lw	s7,236(sp)
    71a4:	0e812c03          	lw	s8,232(sp)
    71a8:	0e412c83          	lw	s9,228(sp)
    71ac:	0e012d03          	lw	s10,224(sp)
    71b0:	0dc12d83          	lw	s11,220(sp)
    71b4:	11010113          	addi	sp,sp,272
    71b8:	00008067          	ret
  s[i/8] ^= (uint64_t)p << 8*(i%8);
    71bc:	01f00693          	li	a3,31
    71c0:	40c686b3          	sub	a3,a3,a2
    71c4:	00300713          	li	a4,3
    71c8:	00d75733          	srl	a4,a4,a3
    71cc:	00600693          	li	a3,6
    71d0:	00c696b3          	sll	a3,a3,a2
    71d4:	d7dff06f          	j	6f50 <pqcrystals_dilithium_fips202_ref_sha3_512+0x1b8>
  for(i=0;i<inlen;i++)
    71d8:	00600693          	li	a3,6
    71dc:	00000713          	li	a4,0
    71e0:	00810793          	addi	a5,sp,8
    71e4:	d6dff06f          	j	6f50 <pqcrystals_dilithium_fips202_ref_sha3_512+0x1b8>

000071e8 <pqcrystals_dilithium5_ref_dilithium_shake128_stream_init>:
#include "params.h"
#include "symmetric.h"
#include "fips202.h"

void dilithium_shake128_stream_init(keccak_state *state, const uint8_t seed[SEEDBYTES], uint16_t nonce)
{
    71e8:	fe010113          	addi	sp,sp,-32
    71ec:	00112e23          	sw	ra,28(sp)
    71f0:	00812c23          	sw	s0,24(sp)
    71f4:	00912a23          	sw	s1,20(sp)
    71f8:	00050413          	mv	s0,a0
    71fc:	00058493          	mv	s1,a1
  uint8_t t[2];
  t[0] = nonce;
    7200:	00c11623          	sh	a2,12(sp)
  t[1] = nonce >> 8;

  shake128_init(state);
    7204:	898ff0ef          	jal	ra,629c <pqcrystals_dilithium_fips202_ref_shake128_init>
  shake128_absorb(state, seed, SEEDBYTES);
    7208:	00048593          	mv	a1,s1
    720c:	00040513          	mv	a0,s0
    7210:	02000613          	li	a2,32
    7214:	8b8ff0ef          	jal	ra,62cc <pqcrystals_dilithium_fips202_ref_shake128_absorb>
  shake128_absorb(state, t, 2);
    7218:	00c10593          	addi	a1,sp,12
    721c:	00040513          	mv	a0,s0
    7220:	00200613          	li	a2,2
    7224:	8a8ff0ef          	jal	ra,62cc <pqcrystals_dilithium_fips202_ref_shake128_absorb>
  shake128_finalize(state);
    7228:	00040513          	mv	a0,s0
    722c:	8d8ff0ef          	jal	ra,6304 <pqcrystals_dilithium_fips202_ref_shake128_finalize>
}
    7230:	01c12083          	lw	ra,28(sp)
    7234:	01812403          	lw	s0,24(sp)
    7238:	01412483          	lw	s1,20(sp)
    723c:	02010113          	addi	sp,sp,32
    7240:	00008067          	ret

00007244 <pqcrystals_dilithium5_ref_dilithium_shake256_stream_init>:

void dilithium_shake256_stream_init(keccak_state *state, const uint8_t seed[CRHBYTES], uint16_t nonce)
{
    7244:	fe010113          	addi	sp,sp,-32
    7248:	00112e23          	sw	ra,28(sp)
    724c:	00812c23          	sw	s0,24(sp)
    7250:	00912a23          	sw	s1,20(sp)
    7254:	00050413          	mv	s0,a0
    7258:	00058493          	mv	s1,a1
  uint8_t t[2];
  t[0] = nonce;
    725c:	00c11623          	sh	a2,12(sp)
  t[1] = nonce >> 8;

  shake256_init(state);
    7260:	b2cff0ef          	jal	ra,658c <pqcrystals_dilithium_fips202_ref_shake256_init>
  shake256_absorb(state, seed, CRHBYTES);
    7264:	00048593          	mv	a1,s1
    7268:	00040513          	mv	a0,s0
    726c:	04000613          	li	a2,64
    7270:	b4cff0ef          	jal	ra,65bc <pqcrystals_dilithium_fips202_ref_shake256_absorb>
  shake256_absorb(state, t, 2);
    7274:	00c10593          	addi	a1,sp,12
    7278:	00040513          	mv	a0,s0
    727c:	00200613          	li	a2,2
    7280:	b3cff0ef          	jal	ra,65bc <pqcrystals_dilithium_fips202_ref_shake256_absorb>
  shake256_finalize(state);
    7284:	00040513          	mv	a0,s0
    7288:	b6cff0ef          	jal	ra,65f4 <pqcrystals_dilithium_fips202_ref_shake256_finalize>
}
    728c:	01c12083          	lw	ra,28(sp)
    7290:	01812403          	lw	s0,24(sp)
    7294:	01412483          	lw	s1,20(sp)
    7298:	02010113          	addi	sp,sp,32
    729c:	00008067          	ret

000072a0 <__addsf3>:
#include "soft-fp.h"
#include "single.h"

SFtype
__addsf3 (SFtype a, SFtype b)
{
    72a0:	ff010113          	addi	sp,sp,-16
  FP_DECL_S (B);
  FP_DECL_S (R);
  SFtype r;

  FP_INIT_ROUNDMODE;
  FP_UNPACK_SEMIRAW_S (A, a);
    72a4:	00800737          	lui	a4,0x800
    72a8:	fff70713          	addi	a4,a4,-1 # 7fffff <_end_of_memory+0x7cffff>
  FP_UNPACK_SEMIRAW_S (B, b);
    72ac:	0175d613          	srli	a2,a1,0x17
{
    72b0:	00812423          	sw	s0,8(sp)
  FP_UNPACK_SEMIRAW_S (A, a);
    72b4:	01755413          	srli	s0,a0,0x17
    72b8:	00a777b3          	and	a5,a4,a0
{
    72bc:	01212023          	sw	s2,0(sp)
  FP_UNPACK_SEMIRAW_S (B, b);
    72c0:	00b77733          	and	a4,a4,a1
  FP_UNPACK_SEMIRAW_S (A, a);
    72c4:	0ff47413          	zext.b	s0,s0
  FP_UNPACK_SEMIRAW_S (B, b);
    72c8:	0ff67613          	zext.b	a2,a2
{
    72cc:	00112623          	sw	ra,12(sp)
    72d0:	00912223          	sw	s1,4(sp)
  FP_UNPACK_SEMIRAW_S (A, a);
    72d4:	01f55913          	srli	s2,a0,0x1f
  FP_UNPACK_SEMIRAW_S (B, b);
    72d8:	01f5d593          	srli	a1,a1,0x1f
  FP_UNPACK_SEMIRAW_S (A, a);
    72dc:	00379793          	slli	a5,a5,0x3
  FP_UNPACK_SEMIRAW_S (B, b);
    72e0:	00371713          	slli	a4,a4,0x3
  FP_ADD_S (R, A, B);
    72e4:	40c406b3          	sub	a3,s0,a2
    72e8:	20b91863          	bne	s2,a1,74f8 <__addsf3+0x258>
    72ec:	12d05863          	blez	a3,741c <__addsf3+0x17c>
    72f0:	02061e63          	bnez	a2,732c <__addsf3+0x8c>
    72f4:	1e070e63          	beqz	a4,74f0 <__addsf3+0x250>
    72f8:	fff68613          	addi	a2,a3,-1
    72fc:	02061063          	bnez	a2,731c <__addsf3+0x7c>
    7300:	00e787b3          	add	a5,a5,a4
    7304:	04000737          	lui	a4,0x4000
    7308:	00e7f733          	and	a4,a5,a4
    730c:	00200413          	li	s0,2
    7310:	0e071863          	bnez	a4,7400 <__addsf3+0x160>
    7314:	00100413          	li	s0,1
    7318:	0340006f          	j	734c <__addsf3+0xac>
    731c:	0ff00593          	li	a1,255
    7320:	02b69063          	bne	a3,a1,7340 <__addsf3+0xa0>
    7324:	0ff00413          	li	s0,255
    7328:	0240006f          	j	734c <__addsf3+0xac>
    732c:	0ff00613          	li	a2,255
    7330:	00c40e63          	beq	s0,a2,734c <__addsf3+0xac>
    7334:	04000637          	lui	a2,0x4000
    7338:	00c76733          	or	a4,a4,a2
    733c:	00068613          	mv	a2,a3
    7340:	01b00693          	li	a3,27
    7344:	08c6d263          	bge	a3,a2,73c8 <__addsf3+0x128>
    7348:	00178793          	addi	a5,a5,1
  FP_PACK_SEMIRAW_S (r, R);
    734c:	0077f713          	andi	a4,a5,7
    7350:	00070a63          	beqz	a4,7364 <__addsf3+0xc4>
    7354:	00f7f713          	andi	a4,a5,15
    7358:	00400693          	li	a3,4
    735c:	00d70463          	beq	a4,a3,7364 <__addsf3+0xc4>
    7360:	00478793          	addi	a5,a5,4
    7364:	04000737          	lui	a4,0x4000
    7368:	00e7f733          	and	a4,a5,a4
    736c:	38070063          	beqz	a4,76ec <__addsf3+0x44c>
    7370:	00140413          	addi	s0,s0,1
    7374:	0ff00713          	li	a4,255
    7378:	00000493          	li	s1,0
    737c:	00e40a63          	beq	s0,a4,7390 <__addsf3+0xf0>
    7380:	0037d493          	srli	s1,a5,0x3
    7384:	1f8007b7          	lui	a5,0x1f800
    7388:	fff78793          	addi	a5,a5,-1 # 1f7fffff <_end_of_memory+0x1f7cffff>
    738c:	00f4f4b3          	and	s1,s1,a5
    7390:	01741413          	slli	s0,s0,0x17
    7394:	7f8007b7          	lui	a5,0x7f800
    7398:	00949493          	slli	s1,s1,0x9
    739c:	0094d493          	srli	s1,s1,0x9
    73a0:	00f47433          	and	s0,s0,a5
    73a4:	00946433          	or	s0,s0,s1
    73a8:	01f91513          	slli	a0,s2,0x1f
  FP_HANDLE_EXCEPTIONS;

  return r;
}
    73ac:	00c12083          	lw	ra,12(sp)
    73b0:	00a46533          	or	a0,s0,a0
    73b4:	00812403          	lw	s0,8(sp)
    73b8:	00412483          	lw	s1,4(sp)
    73bc:	00012903          	lw	s2,0(sp)
    73c0:	01010113          	addi	sp,sp,16
    73c4:	00008067          	ret
  FP_ADD_S (R, A, B);
    73c8:	02000693          	li	a3,32
    73cc:	40c686b3          	sub	a3,a3,a2
    73d0:	00c755b3          	srl	a1,a4,a2
    73d4:	00d71733          	sll	a4,a4,a3
    73d8:	00e03733          	snez	a4,a4
    73dc:	00e5e733          	or	a4,a1,a4
    73e0:	00e787b3          	add	a5,a5,a4
    73e4:	04000737          	lui	a4,0x4000
    73e8:	00e7f733          	and	a4,a5,a4
    73ec:	f60700e3          	beqz	a4,734c <__addsf3+0xac>
    73f0:	00140413          	addi	s0,s0,1
    73f4:	0ff00713          	li	a4,255
  FP_PACK_SEMIRAW_S (r, R);
    73f8:	00000493          	li	s1,0
  FP_ADD_S (R, A, B);
    73fc:	f8e40ae3          	beq	s0,a4,7390 <__addsf3+0xf0>
    7400:	7e000737          	lui	a4,0x7e000
    7404:	0017f693          	andi	a3,a5,1
    7408:	fff70713          	addi	a4,a4,-1 # 7dffffff <_end_of_memory+0x7dfcffff>
    740c:	0017d793          	srli	a5,a5,0x1
    7410:	00e7f7b3          	and	a5,a5,a4
    7414:	00d7e7b3          	or	a5,a5,a3
    7418:	f35ff06f          	j	734c <__addsf3+0xac>
    741c:	06068a63          	beqz	a3,7490 <__addsf3+0x1f0>
    7420:	408606b3          	sub	a3,a2,s0
    7424:	02041063          	bnez	s0,7444 <__addsf3+0x1a4>
    7428:	2a078263          	beqz	a5,76cc <__addsf3+0x42c>
    742c:	fff68593          	addi	a1,a3,-1
    7430:	ec0588e3          	beqz	a1,7300 <__addsf3+0x60>
    7434:	0ff00513          	li	a0,255
    7438:	02a69063          	bne	a3,a0,7458 <__addsf3+0x1b8>
  FP_UNPACK_SEMIRAW_S (B, b);
    743c:	00070793          	mv	a5,a4
    7440:	ee5ff06f          	j	7324 <__addsf3+0x84>
  FP_ADD_S (R, A, B);
    7444:	0ff00593          	li	a1,255
    7448:	feb60ae3          	beq	a2,a1,743c <__addsf3+0x19c>
    744c:	040005b7          	lui	a1,0x4000
    7450:	00b7e7b3          	or	a5,a5,a1
    7454:	00068593          	mv	a1,a3
    7458:	01b00693          	li	a3,27
    745c:	00b6d863          	bge	a3,a1,746c <__addsf3+0x1cc>
    7460:	00170793          	addi	a5,a4,1
  FP_UNPACK_SEMIRAW_S (B, b);
    7464:	00060413          	mv	s0,a2
    7468:	ee5ff06f          	j	734c <__addsf3+0xac>
  FP_ADD_S (R, A, B);
    746c:	02000693          	li	a3,32
    7470:	40b686b3          	sub	a3,a3,a1
    7474:	00b7d533          	srl	a0,a5,a1
    7478:	00d797b3          	sll	a5,a5,a3
    747c:	00f037b3          	snez	a5,a5
    7480:	00f567b3          	or	a5,a0,a5
    7484:	00e787b3          	add	a5,a5,a4
  FP_UNPACK_SEMIRAW_S (B, b);
    7488:	00060413          	mv	s0,a2
    748c:	f59ff06f          	j	73e4 <__addsf3+0x144>
  FP_ADD_S (R, A, B);
    7490:	00140693          	addi	a3,s0,1
    7494:	0fe6f613          	andi	a2,a3,254
    7498:	04061463          	bnez	a2,74e0 <__addsf3+0x240>
    749c:	02041663          	bnez	s0,74c8 <__addsf3+0x228>
    74a0:	22078a63          	beqz	a5,76d4 <__addsf3+0x434>
    74a4:	ea0704e3          	beqz	a4,734c <__addsf3+0xac>
    74a8:	00e787b3          	add	a5,a5,a4
    74ac:	04000737          	lui	a4,0x4000
    74b0:	00e7f733          	and	a4,a5,a4
    74b4:	e8070ce3          	beqz	a4,734c <__addsf3+0xac>
    74b8:	fc000737          	lui	a4,0xfc000
    74bc:	fff70713          	addi	a4,a4,-1 # fbffffff <_end_of_memory+0xfbfcffff>
    74c0:	00e7f7b3          	and	a5,a5,a4
    74c4:	e51ff06f          	j	7314 <__addsf3+0x74>
    74c8:	f6078ae3          	beqz	a5,743c <__addsf3+0x19c>
    74cc:	e4070ce3          	beqz	a4,7324 <__addsf3+0x84>
  FP_PACK_SEMIRAW_S (r, R);
    74d0:	00000913          	li	s2,0
    74d4:	0ff00413          	li	s0,255
    74d8:	004004b7          	lui	s1,0x400
    74dc:	eb5ff06f          	j	7390 <__addsf3+0xf0>
  FP_ADD_S (R, A, B);
    74e0:	0ff00613          	li	a2,255
    74e4:	22c68063          	beq	a3,a2,7704 <__addsf3+0x464>
    74e8:	00e78733          	add	a4,a5,a4
    74ec:	00175793          	srli	a5,a4,0x1
  FP_UNPACK_SEMIRAW_S (A, a);
    74f0:	00068413          	mv	s0,a3
    74f4:	e59ff06f          	j	734c <__addsf3+0xac>
  FP_ADD_S (R, A, B);
    74f8:	08d05063          	blez	a3,7578 <__addsf3+0x2d8>
    74fc:	06061263          	bnez	a2,7560 <__addsf3+0x2c0>
    7500:	fe0708e3          	beqz	a4,74f0 <__addsf3+0x250>
    7504:	fff68613          	addi	a2,a3,-1
    7508:	00061863          	bnez	a2,7518 <__addsf3+0x278>
    750c:	40e787b3          	sub	a5,a5,a4
  FP_UNPACK_SEMIRAW_S (B, b);
    7510:	00100413          	li	s0,1
  FP_ADD_S (R, A, B);
    7514:	0340006f          	j	7548 <__addsf3+0x2a8>
    7518:	0ff00593          	li	a1,255
    751c:	e0b684e3          	beq	a3,a1,7324 <__addsf3+0x84>
    7520:	01b00593          	li	a1,27
    7524:	00100693          	li	a3,1
    7528:	00c5ce63          	blt	a1,a2,7544 <__addsf3+0x2a4>
    752c:	02000693          	li	a3,32
    7530:	40c686b3          	sub	a3,a3,a2
    7534:	00c755b3          	srl	a1,a4,a2
    7538:	00d71733          	sll	a4,a4,a3
    753c:	00e03733          	snez	a4,a4
    7540:	00e5e6b3          	or	a3,a1,a4
    7544:	40d787b3          	sub	a5,a5,a3
    7548:	040004b7          	lui	s1,0x4000
    754c:	0097f733          	and	a4,a5,s1
    7550:	de070ee3          	beqz	a4,734c <__addsf3+0xac>
    7554:	fff48493          	addi	s1,s1,-1 # 3ffffff <_end_of_memory+0x3fcffff>
    7558:	0097f4b3          	and	s1,a5,s1
    755c:	1140006f          	j	7670 <__addsf3+0x3d0>
    7560:	0ff00613          	li	a2,255
    7564:	dec404e3          	beq	s0,a2,734c <__addsf3+0xac>
    7568:	04000637          	lui	a2,0x4000
    756c:	00c76733          	or	a4,a4,a2
    7570:	00068613          	mv	a2,a3
    7574:	fadff06f          	j	7520 <__addsf3+0x280>
    7578:	08068063          	beqz	a3,75f8 <__addsf3+0x358>
    757c:	408606b3          	sub	a3,a2,s0
    7580:	02041863          	bnez	s0,75b0 <__addsf3+0x310>
    7584:	14078c63          	beqz	a5,76dc <__addsf3+0x43c>
    7588:	fff68513          	addi	a0,a3,-1
    758c:	00051863          	bnez	a0,759c <__addsf3+0x2fc>
    7590:	40f707b3          	sub	a5,a4,a5
    7594:	00058913          	mv	s2,a1
    7598:	f79ff06f          	j	7510 <__addsf3+0x270>
    759c:	0ff00813          	li	a6,255
    75a0:	03069263          	bne	a3,a6,75c4 <__addsf3+0x324>
  FP_UNPACK_SEMIRAW_S (B, b);
    75a4:	00070793          	mv	a5,a4
  FP_ADD_S (R, A, B);
    75a8:	0ff00413          	li	s0,255
    75ac:	1380006f          	j	76e4 <__addsf3+0x444>
    75b0:	0ff00513          	li	a0,255
    75b4:	fea608e3          	beq	a2,a0,75a4 <__addsf3+0x304>
    75b8:	04000537          	lui	a0,0x4000
    75bc:	00a7e7b3          	or	a5,a5,a0
    75c0:	00068513          	mv	a0,a3
    75c4:	01b00813          	li	a6,27
    75c8:	00100693          	li	a3,1
    75cc:	00a84e63          	blt	a6,a0,75e8 <__addsf3+0x348>
    75d0:	02000693          	li	a3,32
    75d4:	40a686b3          	sub	a3,a3,a0
    75d8:	00a7d833          	srl	a6,a5,a0
    75dc:	00d797b3          	sll	a5,a5,a3
    75e0:	00f037b3          	snez	a5,a5
    75e4:	00f866b3          	or	a3,a6,a5
    75e8:	40d707b3          	sub	a5,a4,a3
  FP_UNPACK_SEMIRAW_S (B, b);
    75ec:	00060413          	mv	s0,a2
    75f0:	00058913          	mv	s2,a1
    75f4:	f55ff06f          	j	7548 <__addsf3+0x2a8>
  FP_ADD_S (R, A, B);
    75f8:	00140693          	addi	a3,s0,1
    75fc:	0fe6f693          	andi	a3,a3,254
    7600:	04069c63          	bnez	a3,7658 <__addsf3+0x3b8>
    7604:	04041063          	bnez	s0,7644 <__addsf3+0x3a4>
    7608:	00079a63          	bnez	a5,761c <__addsf3+0x37c>
    760c:	00070793          	mv	a5,a4
    7610:	0c071a63          	bnez	a4,76e4 <__addsf3+0x444>
  FP_PACK_SEMIRAW_S (r, R);
    7614:	00000493          	li	s1,0
    7618:	0240006f          	j	763c <__addsf3+0x39c>
  FP_ADD_S (R, A, B);
    761c:	d20708e3          	beqz	a4,734c <__addsf3+0xac>
    7620:	40e784b3          	sub	s1,a5,a4
    7624:	040006b7          	lui	a3,0x4000
    7628:	00d4f6b3          	and	a3,s1,a3
    762c:	40f707b3          	sub	a5,a4,a5
    7630:	0a069a63          	bnez	a3,76e4 <__addsf3+0x444>
    7634:	00048793          	mv	a5,s1
    7638:	d0049ae3          	bnez	s1,734c <__addsf3+0xac>
    763c:	00000913          	li	s2,0
    7640:	d51ff06f          	j	7390 <__addsf3+0xf0>
    7644:	e80794e3          	bnez	a5,74cc <__addsf3+0x22c>
    7648:	e80704e3          	beqz	a4,74d0 <__addsf3+0x230>
    764c:	00070793          	mv	a5,a4
    7650:	00058913          	mv	s2,a1
    7654:	cd1ff06f          	j	7324 <__addsf3+0x84>
    7658:	40e784b3          	sub	s1,a5,a4
    765c:	040006b7          	lui	a3,0x4000
    7660:	00d4f6b3          	and	a3,s1,a3
    7664:	04068463          	beqz	a3,76ac <__addsf3+0x40c>
    7668:	40f704b3          	sub	s1,a4,a5
    766c:	00058913          	mv	s2,a1
    7670:	00048513          	mv	a0,s1
    7674:	1a9000ef          	jal	ra,801c <__clzsi2>
    7678:	ffb50513          	addi	a0,a0,-5 # 3fffffb <_end_of_memory+0x3fcfffb>
    767c:	00a494b3          	sll	s1,s1,a0
    7680:	02854c63          	blt	a0,s0,76b8 <__addsf3+0x418>
    7684:	40850533          	sub	a0,a0,s0
    7688:	00150513          	addi	a0,a0,1
    768c:	02000713          	li	a4,32
    7690:	40a70733          	sub	a4,a4,a0
    7694:	00a4d7b3          	srl	a5,s1,a0
    7698:	00e494b3          	sll	s1,s1,a4
    769c:	009034b3          	snez	s1,s1
    76a0:	0097e7b3          	or	a5,a5,s1
    76a4:	00000413          	li	s0,0
    76a8:	ca5ff06f          	j	734c <__addsf3+0xac>
    76ac:	fc0492e3          	bnez	s1,7670 <__addsf3+0x3d0>
    76b0:	00000413          	li	s0,0
    76b4:	f89ff06f          	j	763c <__addsf3+0x39c>
    76b8:	fc0007b7          	lui	a5,0xfc000
    76bc:	fff78793          	addi	a5,a5,-1 # fbffffff <_end_of_memory+0xfbfcffff>
    76c0:	40a40433          	sub	s0,s0,a0
    76c4:	00f4f7b3          	and	a5,s1,a5
    76c8:	c85ff06f          	j	734c <__addsf3+0xac>
  FP_UNPACK_SEMIRAW_S (B, b);
    76cc:	00070793          	mv	a5,a4
    76d0:	e21ff06f          	j	74f0 <__addsf3+0x250>
    76d4:	00070793          	mv	a5,a4
    76d8:	c75ff06f          	j	734c <__addsf3+0xac>
    76dc:	00070793          	mv	a5,a4
    76e0:	00068413          	mv	s0,a3
    76e4:	00058913          	mv	s2,a1
    76e8:	c65ff06f          	j	734c <__addsf3+0xac>
  FP_PACK_SEMIRAW_S (r, R);
    76ec:	0037d493          	srli	s1,a5,0x3
    76f0:	0ff00793          	li	a5,255
    76f4:	c8f41ee3          	bne	s0,a5,7390 <__addsf3+0xf0>
    76f8:	c8048ce3          	beqz	s1,7390 <__addsf3+0xf0>
    76fc:	004004b7          	lui	s1,0x400
    7700:	f3dff06f          	j	763c <__addsf3+0x39c>
    7704:	0ff00413          	li	s0,255
    7708:	00000493          	li	s1,0
    770c:	c85ff06f          	j	7390 <__addsf3+0xf0>

00007710 <__divsf3>:
#include "soft-fp.h"
#include "single.h"

SFtype
__divsf3 (SFtype a, SFtype b)
{
    7710:	fd010113          	addi	sp,sp,-48
    7714:	02912223          	sw	s1,36(sp)
    7718:	01755493          	srli	s1,a0,0x17
    771c:	03212023          	sw	s2,32(sp)
    7720:	01512a23          	sw	s5,20(sp)
    7724:	01612823          	sw	s6,16(sp)
  FP_DECL_S (B);
  FP_DECL_S (R);
  SFtype r;

  FP_INIT_ROUNDMODE;
  FP_UNPACK_S (A, a);
    7728:	00951a93          	slli	s5,a0,0x9
{
    772c:	02112623          	sw	ra,44(sp)
    7730:	02812423          	sw	s0,40(sp)
    7734:	01312e23          	sw	s3,28(sp)
    7738:	01412c23          	sw	s4,24(sp)
    773c:	01712623          	sw	s7,12(sp)
    7740:	01812423          	sw	s8,8(sp)
    7744:	0ff4f493          	zext.b	s1,s1
    7748:	00058b13          	mv	s6,a1
  FP_UNPACK_S (A, a);
    774c:	009ada93          	srli	s5,s5,0x9
    7750:	01f55913          	srli	s2,a0,0x1f
    7754:	08048463          	beqz	s1,77dc <__divsf3+0xcc>
    7758:	0ff00793          	li	a5,255
    775c:	0af48063          	beq	s1,a5,77fc <__divsf3+0xec>
    7760:	003a9a93          	slli	s5,s5,0x3
    7764:	040007b7          	lui	a5,0x4000
    7768:	00faeab3          	or	s5,s5,a5
    776c:	f8148493          	addi	s1,s1,-127 # 3fff81 <_end_of_memory+0x3cff81>
    7770:	00000b93          	li	s7,0
  FP_UNPACK_S (B, b);
    7774:	017b5793          	srli	a5,s6,0x17
    7778:	009b1413          	slli	s0,s6,0x9
    777c:	0ff7f793          	zext.b	a5,a5
    7780:	00945413          	srli	s0,s0,0x9
    7784:	01fb5b13          	srli	s6,s6,0x1f
    7788:	08078a63          	beqz	a5,781c <__divsf3+0x10c>
    778c:	0ff00713          	li	a4,255
    7790:	0ae78663          	beq	a5,a4,783c <__divsf3+0x12c>
    7794:	00341413          	slli	s0,s0,0x3
    7798:	04000737          	lui	a4,0x4000
    779c:	00e46433          	or	s0,s0,a4
    77a0:	f8178793          	addi	a5,a5,-127 # 3ffff81 <_end_of_memory+0x3fcff81>
    77a4:	00000713          	li	a4,0
  FP_DIV_S (R, A, B);
    77a8:	40f48a33          	sub	s4,s1,a5
    77ac:	002b9793          	slli	a5,s7,0x2
    77b0:	00e7e7b3          	or	a5,a5,a4
    77b4:	fff78793          	addi	a5,a5,-1
    77b8:	00e00693          	li	a3,14
    77bc:	016949b3          	xor	s3,s2,s6
    77c0:	0cf6e663          	bltu	a3,a5,788c <__divsf3+0x17c>
    77c4:	000096b7          	lui	a3,0x9
    77c8:	00279793          	slli	a5,a5,0x2
    77cc:	ba068693          	addi	a3,a3,-1120 # 8ba0 <pqcrystals_dilithium_fips202_ref_KeccakF_RoundConstants+0xc0>
    77d0:	00d787b3          	add	a5,a5,a3
    77d4:	0007a783          	lw	a5,0(a5)
    77d8:	00078067          	jr	a5
  FP_UNPACK_S (A, a);
    77dc:	020a8a63          	beqz	s5,7810 <__divsf3+0x100>
    77e0:	000a8513          	mv	a0,s5
    77e4:	039000ef          	jal	ra,801c <__clzsi2>
    77e8:	ffb50793          	addi	a5,a0,-5
    77ec:	f8a00493          	li	s1,-118
    77f0:	00fa9ab3          	sll	s5,s5,a5
    77f4:	40a484b3          	sub	s1,s1,a0
    77f8:	f79ff06f          	j	7770 <__divsf3+0x60>
    77fc:	0ff00493          	li	s1,255
    7800:	00300b93          	li	s7,3
    7804:	f60a98e3          	bnez	s5,7774 <__divsf3+0x64>
    7808:	00200b93          	li	s7,2
    780c:	f69ff06f          	j	7774 <__divsf3+0x64>
    7810:	00000493          	li	s1,0
    7814:	00100b93          	li	s7,1
    7818:	f5dff06f          	j	7774 <__divsf3+0x64>
  FP_UNPACK_S (B, b);
    781c:	02040a63          	beqz	s0,7850 <__divsf3+0x140>
    7820:	00040513          	mv	a0,s0
    7824:	7f8000ef          	jal	ra,801c <__clzsi2>
    7828:	ffb50793          	addi	a5,a0,-5
    782c:	00f41433          	sll	s0,s0,a5
    7830:	f8a00793          	li	a5,-118
    7834:	40a787b3          	sub	a5,a5,a0
    7838:	f6dff06f          	j	77a4 <__divsf3+0x94>
    783c:	0ff00793          	li	a5,255
    7840:	00300713          	li	a4,3
    7844:	f60412e3          	bnez	s0,77a8 <__divsf3+0x98>
    7848:	00200713          	li	a4,2
    784c:	f5dff06f          	j	77a8 <__divsf3+0x98>
    7850:	00000793          	li	a5,0
    7854:	00100713          	li	a4,1
    7858:	f51ff06f          	j	77a8 <__divsf3+0x98>
  FP_UNPACK_S (A, a);
    785c:	00090993          	mv	s3,s2
    7860:	000a8413          	mv	s0,s5
  FP_DIV_S (R, A, B);
    7864:	000b8713          	mv	a4,s7
  FP_PACK_S (r, R);
    7868:	00200793          	li	a5,2
    786c:	22f70063          	beq	a4,a5,7a8c <__divsf3+0x37c>
    7870:	00300793          	li	a5,3
    7874:	20f70463          	beq	a4,a5,7a7c <__divsf3+0x36c>
    7878:	00100793          	li	a5,1
    787c:	0ef71c63          	bne	a4,a5,7974 <__divsf3+0x264>
    7880:	00000793          	li	a5,0
    7884:	00000713          	li	a4,0
    7888:	1340006f          	j	79bc <__divsf3+0x2ac>
  FP_DIV_S (R, A, B);
    788c:	00541c13          	slli	s8,s0,0x5
    7890:	168afa63          	bgeu	s5,s0,7a04 <__divsf3+0x2f4>
    7894:	fffa0a13          	addi	s4,s4,-1
    7898:	00000413          	li	s0,0
    789c:	010c5b13          	srli	s6,s8,0x10
    78a0:	00010937          	lui	s2,0x10
    78a4:	000b0593          	mv	a1,s6
    78a8:	fff90913          	addi	s2,s2,-1 # ffff <_gp+0x69eb>
    78ac:	000a8513          	mv	a0,s5
    78b0:	6c0000ef          	jal	ra,7f70 <__hidden___udivsi3>
    78b4:	012c7933          	and	s2,s8,s2
    78b8:	00050593          	mv	a1,a0
    78bc:	00050b93          	mv	s7,a0
    78c0:	00090513          	mv	a0,s2
    78c4:	680000ef          	jal	ra,7f44 <__mulsi3>
    78c8:	00050493          	mv	s1,a0
    78cc:	000b0593          	mv	a1,s6
    78d0:	000a8513          	mv	a0,s5
    78d4:	6e4000ef          	jal	ra,7fb8 <__umodsi3>
    78d8:	01045793          	srli	a5,s0,0x10
    78dc:	01051513          	slli	a0,a0,0x10
    78e0:	00a7e7b3          	or	a5,a5,a0
    78e4:	000b8413          	mv	s0,s7
    78e8:	0097fe63          	bgeu	a5,s1,7904 <__divsf3+0x1f4>
    78ec:	00fc07b3          	add	a5,s8,a5
    78f0:	fffb8413          	addi	s0,s7,-1
    78f4:	0187e863          	bltu	a5,s8,7904 <__divsf3+0x1f4>
    78f8:	0097f663          	bgeu	a5,s1,7904 <__divsf3+0x1f4>
    78fc:	ffeb8413          	addi	s0,s7,-2
    7900:	018787b3          	add	a5,a5,s8
    7904:	409784b3          	sub	s1,a5,s1
    7908:	000b0593          	mv	a1,s6
    790c:	00048513          	mv	a0,s1
    7910:	660000ef          	jal	ra,7f70 <__hidden___udivsi3>
    7914:	00050593          	mv	a1,a0
    7918:	00050a93          	mv	s5,a0
    791c:	00090513          	mv	a0,s2
    7920:	624000ef          	jal	ra,7f44 <__mulsi3>
    7924:	00050913          	mv	s2,a0
    7928:	000b0593          	mv	a1,s6
    792c:	00048513          	mv	a0,s1
    7930:	688000ef          	jal	ra,7fb8 <__umodsi3>
    7934:	01051793          	slli	a5,a0,0x10
    7938:	000a8713          	mv	a4,s5
    793c:	0327f263          	bgeu	a5,s2,7960 <__divsf3+0x250>
    7940:	018786b3          	add	a3,a5,s8
    7944:	00f6b633          	sltu	a2,a3,a5
    7948:	fffa8713          	addi	a4,s5,-1
    794c:	00068793          	mv	a5,a3
    7950:	00061863          	bnez	a2,7960 <__divsf3+0x250>
    7954:	0126f663          	bgeu	a3,s2,7960 <__divsf3+0x250>
    7958:	ffea8713          	addi	a4,s5,-2
    795c:	018687b3          	add	a5,a3,s8
    7960:	01041413          	slli	s0,s0,0x10
    7964:	412787b3          	sub	a5,a5,s2
    7968:	00e46433          	or	s0,s0,a4
    796c:	00f037b3          	snez	a5,a5
    7970:	00f46433          	or	s0,s0,a5
  FP_PACK_S (r, R);
    7974:	07fa0713          	addi	a4,s4,127
    7978:	0ae05063          	blez	a4,7a18 <__divsf3+0x308>
    797c:	00747793          	andi	a5,s0,7
    7980:	00078a63          	beqz	a5,7994 <__divsf3+0x284>
    7984:	00f47793          	andi	a5,s0,15
    7988:	00400693          	li	a3,4
    798c:	00d78463          	beq	a5,a3,7994 <__divsf3+0x284>
    7990:	00440413          	addi	s0,s0,4
    7994:	080007b7          	lui	a5,0x8000
    7998:	00f477b3          	and	a5,s0,a5
    799c:	00078a63          	beqz	a5,79b0 <__divsf3+0x2a0>
    79a0:	f80007b7          	lui	a5,0xf8000
    79a4:	fff78793          	addi	a5,a5,-1 # f7ffffff <_end_of_memory+0xf7fcffff>
    79a8:	00f47433          	and	s0,s0,a5
    79ac:	080a0713          	addi	a4,s4,128
    79b0:	0fe00793          	li	a5,254
    79b4:	0ce7cc63          	blt	a5,a4,7a8c <__divsf3+0x37c>
    79b8:	00345793          	srli	a5,s0,0x3
  FP_HANDLE_EXCEPTIONS;

  return r;
}
    79bc:	02c12083          	lw	ra,44(sp)
    79c0:	02812403          	lw	s0,40(sp)
  FP_PACK_S (r, R);
    79c4:	00979793          	slli	a5,a5,0x9
    79c8:	01771713          	slli	a4,a4,0x17
    79cc:	0097d793          	srli	a5,a5,0x9
    79d0:	01f99513          	slli	a0,s3,0x1f
    79d4:	00f76733          	or	a4,a4,a5
}
    79d8:	02412483          	lw	s1,36(sp)
    79dc:	02012903          	lw	s2,32(sp)
    79e0:	01c12983          	lw	s3,28(sp)
    79e4:	01812a03          	lw	s4,24(sp)
    79e8:	01412a83          	lw	s5,20(sp)
    79ec:	01012b03          	lw	s6,16(sp)
    79f0:	00c12b83          	lw	s7,12(sp)
    79f4:	00812c03          	lw	s8,8(sp)
    79f8:	00a76533          	or	a0,a4,a0
    79fc:	03010113          	addi	sp,sp,48
    7a00:	00008067          	ret
  FP_DIV_S (R, A, B);
    7a04:	01fa9413          	slli	s0,s5,0x1f
    7a08:	001ada93          	srli	s5,s5,0x1
    7a0c:	e91ff06f          	j	789c <__divsf3+0x18c>
  FP_UNPACK_S (B, b);
    7a10:	000b0993          	mv	s3,s6
  FP_DIV_S (R, A, B);
    7a14:	e55ff06f          	j	7868 <__divsf3+0x158>
  FP_PACK_S (r, R);
    7a18:	00100693          	li	a3,1
    7a1c:	00070c63          	beqz	a4,7a34 <__divsf3+0x324>
    7a20:	40e686b3          	sub	a3,a3,a4
    7a24:	01b00613          	li	a2,27
    7a28:	00000793          	li	a5,0
    7a2c:	00000713          	li	a4,0
    7a30:	f8d646e3          	blt	a2,a3,79bc <__divsf3+0x2ac>
    7a34:	09ea0493          	addi	s1,s4,158
    7a38:	00d456b3          	srl	a3,s0,a3
    7a3c:	00941433          	sll	s0,s0,s1
    7a40:	00803433          	snez	s0,s0
    7a44:	0086e7b3          	or	a5,a3,s0
    7a48:	0077f713          	andi	a4,a5,7
    7a4c:	00070a63          	beqz	a4,7a60 <__divsf3+0x350>
    7a50:	00f7f713          	andi	a4,a5,15
    7a54:	00400693          	li	a3,4
    7a58:	00d70463          	beq	a4,a3,7a60 <__divsf3+0x350>
    7a5c:	00478793          	addi	a5,a5,4
    7a60:	04000737          	lui	a4,0x4000
    7a64:	00e7f733          	and	a4,a5,a4
    7a68:	0037d793          	srli	a5,a5,0x3
    7a6c:	f40708e3          	beqz	a4,79bc <__divsf3+0x2ac>
    7a70:	00000793          	li	a5,0
    7a74:	00100713          	li	a4,1
    7a78:	f45ff06f          	j	79bc <__divsf3+0x2ac>
    7a7c:	004007b7          	lui	a5,0x400
    7a80:	0ff00713          	li	a4,255
    7a84:	00000993          	li	s3,0
    7a88:	f35ff06f          	j	79bc <__divsf3+0x2ac>
    7a8c:	00000793          	li	a5,0
    7a90:	0ff00713          	li	a4,255
    7a94:	f29ff06f          	j	79bc <__divsf3+0x2ac>

00007a98 <__mulsf3>:
#include "soft-fp.h"
#include "single.h"

SFtype
__mulsf3 (SFtype a, SFtype b)
{
    7a98:	fe010113          	addi	sp,sp,-32
    7a9c:	01212823          	sw	s2,16(sp)
    7aa0:	01755913          	srli	s2,a0,0x17
    7aa4:	00912a23          	sw	s1,20(sp)
    7aa8:	01312623          	sw	s3,12(sp)
    7aac:	01512223          	sw	s5,4(sp)
  FP_DECL_S (B);
  FP_DECL_S (R);
  SFtype r;

  FP_INIT_ROUNDMODE;
  FP_UNPACK_S (A, a);
    7ab0:	00951493          	slli	s1,a0,0x9
{
    7ab4:	00112e23          	sw	ra,28(sp)
    7ab8:	00812c23          	sw	s0,24(sp)
    7abc:	01412423          	sw	s4,8(sp)
    7ac0:	0ff97913          	zext.b	s2,s2
    7ac4:	00058a93          	mv	s5,a1
  FP_UNPACK_S (A, a);
    7ac8:	0094d493          	srli	s1,s1,0x9
    7acc:	01f55993          	srli	s3,a0,0x1f
    7ad0:	1a090e63          	beqz	s2,7c8c <__mulsf3+0x1f4>
    7ad4:	0ff00793          	li	a5,255
    7ad8:	1cf90a63          	beq	s2,a5,7cac <__mulsf3+0x214>
    7adc:	00349493          	slli	s1,s1,0x3
    7ae0:	040007b7          	lui	a5,0x4000
    7ae4:	00f4e4b3          	or	s1,s1,a5
    7ae8:	f8190913          	addi	s2,s2,-127
    7aec:	00000a13          	li	s4,0
  FP_UNPACK_S (B, b);
    7af0:	017ad793          	srli	a5,s5,0x17
    7af4:	009a9413          	slli	s0,s5,0x9
    7af8:	0ff7f793          	zext.b	a5,a5
    7afc:	00945413          	srli	s0,s0,0x9
    7b00:	01fada93          	srli	s5,s5,0x1f
    7b04:	1c078463          	beqz	a5,7ccc <__mulsf3+0x234>
    7b08:	0ff00713          	li	a4,255
    7b0c:	1ee78063          	beq	a5,a4,7cec <__mulsf3+0x254>
    7b10:	00341413          	slli	s0,s0,0x3
    7b14:	04000737          	lui	a4,0x4000
    7b18:	00e46433          	or	s0,s0,a4
    7b1c:	f8178793          	addi	a5,a5,-127 # 3ffff81 <_end_of_memory+0x3fcff81>
    7b20:	00000713          	li	a4,0
  FP_MUL_S (R, A, B);
    7b24:	00f90933          	add	s2,s2,a5
    7b28:	002a1793          	slli	a5,s4,0x2
    7b2c:	00e7e7b3          	or	a5,a5,a4
    7b30:	00a00693          	li	a3,10
    7b34:	0159c833          	xor	a6,s3,s5
    7b38:	00190893          	addi	a7,s2,1
    7b3c:	20f6cc63          	blt	a3,a5,7d54 <__mulsf3+0x2bc>
    7b40:	00200693          	li	a3,2
    7b44:	1cf6c463          	blt	a3,a5,7d0c <__mulsf3+0x274>
    7b48:	fff78793          	addi	a5,a5,-1
    7b4c:	00100693          	li	a3,1
    7b50:	1ef6f063          	bgeu	a3,a5,7d30 <__mulsf3+0x298>
    7b54:	00010eb7          	lui	t4,0x10
    7b58:	fffe8313          	addi	t1,t4,-1 # ffff <_gp+0x69eb>
    7b5c:	0104df93          	srli	t6,s1,0x10
    7b60:	01045f13          	srli	t5,s0,0x10
    7b64:	0064f4b3          	and	s1,s1,t1
    7b68:	00647433          	and	s0,s0,t1
    7b6c:	00048513          	mv	a0,s1
    7b70:	00040593          	mv	a1,s0
    7b74:	3d0000ef          	jal	ra,7f44 <__mulsi3>
    7b78:	00050713          	mv	a4,a0
    7b7c:	000f0593          	mv	a1,t5
    7b80:	00048513          	mv	a0,s1
    7b84:	3c0000ef          	jal	ra,7f44 <__mulsi3>
    7b88:	00050793          	mv	a5,a0
    7b8c:	00040593          	mv	a1,s0
    7b90:	000f8513          	mv	a0,t6
    7b94:	3b0000ef          	jal	ra,7f44 <__mulsi3>
    7b98:	00050e13          	mv	t3,a0
    7b9c:	000f0593          	mv	a1,t5
    7ba0:	000f8513          	mv	a0,t6
    7ba4:	3a0000ef          	jal	ra,7f44 <__mulsi3>
    7ba8:	01075413          	srli	s0,a4,0x10
    7bac:	01c787b3          	add	a5,a5,t3
    7bb0:	00f40433          	add	s0,s0,a5
    7bb4:	00050693          	mv	a3,a0
    7bb8:	01c47463          	bgeu	s0,t3,7bc0 <__mulsf3+0x128>
    7bbc:	01d506b3          	add	a3,a0,t4
    7bc0:	006477b3          	and	a5,s0,t1
    7bc4:	00677733          	and	a4,a4,t1
    7bc8:	01079793          	slli	a5,a5,0x10
    7bcc:	00e787b3          	add	a5,a5,a4
    7bd0:	00679713          	slli	a4,a5,0x6
    7bd4:	01045413          	srli	s0,s0,0x10
    7bd8:	00e03733          	snez	a4,a4
    7bdc:	01a7d793          	srli	a5,a5,0x1a
    7be0:	00d40433          	add	s0,s0,a3
    7be4:	00f767b3          	or	a5,a4,a5
    7be8:	00641413          	slli	s0,s0,0x6
    7bec:	00f46433          	or	s0,s0,a5
    7bf0:	080007b7          	lui	a5,0x8000
    7bf4:	00f477b3          	and	a5,s0,a5
    7bf8:	16078e63          	beqz	a5,7d74 <__mulsf3+0x2dc>
    7bfc:	00145793          	srli	a5,s0,0x1
    7c00:	00147413          	andi	s0,s0,1
    7c04:	0087e433          	or	s0,a5,s0
  FP_PACK_S (r, R);
    7c08:	07f88513          	addi	a0,a7,127
    7c0c:	16a05863          	blez	a0,7d7c <__mulsf3+0x2e4>
    7c10:	00747793          	andi	a5,s0,7
    7c14:	00078a63          	beqz	a5,7c28 <__mulsf3+0x190>
    7c18:	00f47793          	andi	a5,s0,15
    7c1c:	00400713          	li	a4,4
    7c20:	00e78463          	beq	a5,a4,7c28 <__mulsf3+0x190>
    7c24:	00440413          	addi	s0,s0,4
    7c28:	080007b7          	lui	a5,0x8000
    7c2c:	00f477b3          	and	a5,s0,a5
    7c30:	00078a63          	beqz	a5,7c44 <__mulsf3+0x1ac>
    7c34:	f80007b7          	lui	a5,0xf8000
    7c38:	fff78793          	addi	a5,a5,-1 # f7ffffff <_end_of_memory+0xf7fcffff>
    7c3c:	00f47433          	and	s0,s0,a5
    7c40:	08088513          	addi	a0,a7,128
    7c44:	0fe00793          	li	a5,254
    7c48:	1aa7c463          	blt	a5,a0,7df0 <__mulsf3+0x358>
    7c4c:	00345793          	srli	a5,s0,0x3
  FP_HANDLE_EXCEPTIONS;

  return r;
}
    7c50:	01c12083          	lw	ra,28(sp)
    7c54:	01812403          	lw	s0,24(sp)
  FP_PACK_S (r, R);
    7c58:	00979793          	slli	a5,a5,0x9
    7c5c:	01751513          	slli	a0,a0,0x17
    7c60:	0097d793          	srli	a5,a5,0x9
    7c64:	00f56533          	or	a0,a0,a5
    7c68:	01f81813          	slli	a6,a6,0x1f
}
    7c6c:	01412483          	lw	s1,20(sp)
    7c70:	01012903          	lw	s2,16(sp)
    7c74:	00c12983          	lw	s3,12(sp)
    7c78:	00812a03          	lw	s4,8(sp)
    7c7c:	00412a83          	lw	s5,4(sp)
    7c80:	01056533          	or	a0,a0,a6
    7c84:	02010113          	addi	sp,sp,32
    7c88:	00008067          	ret
  FP_UNPACK_S (A, a);
    7c8c:	02048a63          	beqz	s1,7cc0 <__mulsf3+0x228>
    7c90:	00048513          	mv	a0,s1
    7c94:	388000ef          	jal	ra,801c <__clzsi2>
    7c98:	ffb50793          	addi	a5,a0,-5
    7c9c:	f8a00913          	li	s2,-118
    7ca0:	00f494b3          	sll	s1,s1,a5
    7ca4:	40a90933          	sub	s2,s2,a0
    7ca8:	e45ff06f          	j	7aec <__mulsf3+0x54>
    7cac:	0ff00913          	li	s2,255
    7cb0:	00300a13          	li	s4,3
    7cb4:	e2049ee3          	bnez	s1,7af0 <__mulsf3+0x58>
    7cb8:	00200a13          	li	s4,2
    7cbc:	e35ff06f          	j	7af0 <__mulsf3+0x58>
    7cc0:	00000913          	li	s2,0
    7cc4:	00100a13          	li	s4,1
    7cc8:	e29ff06f          	j	7af0 <__mulsf3+0x58>
  FP_UNPACK_S (B, b);
    7ccc:	02040a63          	beqz	s0,7d00 <__mulsf3+0x268>
    7cd0:	00040513          	mv	a0,s0
    7cd4:	348000ef          	jal	ra,801c <__clzsi2>
    7cd8:	ffb50793          	addi	a5,a0,-5
    7cdc:	00f41433          	sll	s0,s0,a5
    7ce0:	f8a00793          	li	a5,-118
    7ce4:	40a787b3          	sub	a5,a5,a0
    7ce8:	e39ff06f          	j	7b20 <__mulsf3+0x88>
    7cec:	0ff00793          	li	a5,255
    7cf0:	00300713          	li	a4,3
    7cf4:	e20418e3          	bnez	s0,7b24 <__mulsf3+0x8c>
    7cf8:	00200713          	li	a4,2
    7cfc:	e29ff06f          	j	7b24 <__mulsf3+0x8c>
    7d00:	00000793          	li	a5,0
    7d04:	00100713          	li	a4,1
    7d08:	e1dff06f          	j	7b24 <__mulsf3+0x8c>
    7d0c:	00100693          	li	a3,1
    7d10:	00f697b3          	sll	a5,a3,a5
  FP_MUL_S (R, A, B);
    7d14:	5307f693          	andi	a3,a5,1328
    7d18:	04069863          	bnez	a3,7d68 <__mulsf3+0x2d0>
    7d1c:	2407f693          	andi	a3,a5,576
    7d20:	0c069063          	bnez	a3,7de0 <__mulsf3+0x348>
    7d24:	0887f793          	andi	a5,a5,136
    7d28:	e20786e3          	beqz	a5,7b54 <__mulsf3+0xbc>
  FP_UNPACK_S (B, b);
    7d2c:	000a8813          	mv	a6,s5
  FP_PACK_S (r, R);
    7d30:	00200793          	li	a5,2
    7d34:	0af70e63          	beq	a4,a5,7df0 <__mulsf3+0x358>
    7d38:	00300793          	li	a5,3
    7d3c:	0af70263          	beq	a4,a5,7de0 <__mulsf3+0x348>
    7d40:	00100793          	li	a5,1
    7d44:	ecf712e3          	bne	a4,a5,7c08 <__mulsf3+0x170>
    7d48:	00000793          	li	a5,0
    7d4c:	00000513          	li	a0,0
    7d50:	f01ff06f          	j	7c50 <__mulsf3+0x1b8>
  FP_MUL_S (R, A, B);
    7d54:	00f00693          	li	a3,15
    7d58:	08d78463          	beq	a5,a3,7de0 <__mulsf3+0x348>
    7d5c:	00b00693          	li	a3,11
  FP_UNPACK_S (A, a);
    7d60:	00098813          	mv	a6,s3
  FP_MUL_S (R, A, B);
    7d64:	fcd784e3          	beq	a5,a3,7d2c <__mulsf3+0x294>
    7d68:	00048413          	mv	s0,s1
    7d6c:	000a0713          	mv	a4,s4
    7d70:	fc1ff06f          	j	7d30 <__mulsf3+0x298>
    7d74:	00090893          	mv	a7,s2
    7d78:	e91ff06f          	j	7c08 <__mulsf3+0x170>
  FP_PACK_S (r, R);
    7d7c:	00100713          	li	a4,1
    7d80:	00050c63          	beqz	a0,7d98 <__mulsf3+0x300>
    7d84:	40a70733          	sub	a4,a4,a0
    7d88:	01b00693          	li	a3,27
    7d8c:	00000793          	li	a5,0
    7d90:	00000513          	li	a0,0
    7d94:	eae6cee3          	blt	a3,a4,7c50 <__mulsf3+0x1b8>
    7d98:	09e88893          	addi	a7,a7,158
    7d9c:	00e45733          	srl	a4,s0,a4
    7da0:	01141433          	sll	s0,s0,a7
    7da4:	00803433          	snez	s0,s0
    7da8:	008767b3          	or	a5,a4,s0
    7dac:	0077f713          	andi	a4,a5,7
    7db0:	00070a63          	beqz	a4,7dc4 <__mulsf3+0x32c>
    7db4:	00f7f713          	andi	a4,a5,15
    7db8:	00400693          	li	a3,4
    7dbc:	00d70463          	beq	a4,a3,7dc4 <__mulsf3+0x32c>
    7dc0:	00478793          	addi	a5,a5,4
    7dc4:	04000737          	lui	a4,0x4000
    7dc8:	00e7f733          	and	a4,a5,a4
    7dcc:	0037d793          	srli	a5,a5,0x3
    7dd0:	f6070ee3          	beqz	a4,7d4c <__mulsf3+0x2b4>
    7dd4:	00000793          	li	a5,0
    7dd8:	00100513          	li	a0,1
    7ddc:	e75ff06f          	j	7c50 <__mulsf3+0x1b8>
    7de0:	004007b7          	lui	a5,0x400
    7de4:	0ff00513          	li	a0,255
    7de8:	00000813          	li	a6,0
    7dec:	e65ff06f          	j	7c50 <__mulsf3+0x1b8>
    7df0:	00000793          	li	a5,0
    7df4:	0ff00513          	li	a0,255
    7df8:	e59ff06f          	j	7c50 <__mulsf3+0x1b8>

00007dfc <__fixunssfsi>:
  FP_DECL_EX;
  FP_DECL_S (A);
  USItype r;

  FP_INIT_EXCEPTIONS;
  FP_UNPACK_RAW_S (A, a);
    7dfc:	01755793          	srli	a5,a0,0x17
    7e00:	00800637          	lui	a2,0x800
    7e04:	fff60693          	addi	a3,a2,-1 # 7fffff <_end_of_memory+0x7cffff>
    7e08:	0ff7f793          	zext.b	a5,a5
  FP_TO_INT_S (r, A, SI_BITS, 0);
    7e0c:	07e00593          	li	a1,126
  FP_UNPACK_RAW_S (A, a);
    7e10:	00a6f6b3          	and	a3,a3,a0
    7e14:	01f55713          	srli	a4,a0,0x1f
  FP_TO_INT_S (r, A, SI_BITS, 0);
    7e18:	00000513          	li	a0,0
    7e1c:	02f5de63          	bge	a1,a5,7e58 <__fixunssfsi+0x5c>
    7e20:	02071c63          	bnez	a4,7e58 <__fixunssfsi+0x5c>
    7e24:	09e00713          	li	a4,158
    7e28:	fff00513          	li	a0,-1
    7e2c:	02f74663          	blt	a4,a5,7e58 <__fixunssfsi+0x5c>
    7e30:	09500713          	li	a4,149
    7e34:	00c6e533          	or	a0,a3,a2
    7e38:	00f75863          	bge	a4,a5,7e48 <__fixunssfsi+0x4c>
    7e3c:	f6a78793          	addi	a5,a5,-150 # 3fff6a <_end_of_memory+0x3cff6a>
    7e40:	00f51533          	sll	a0,a0,a5
    7e44:	00008067          	ret
    7e48:	09600713          	li	a4,150
    7e4c:	40f707b3          	sub	a5,a4,a5
    7e50:	00f55533          	srl	a0,a0,a5
    7e54:	00008067          	ret
  FP_HANDLE_EXCEPTIONS;

  return r;
}
    7e58:	00008067          	ret

00007e5c <__floatunsisf>:
#include "soft-fp.h"
#include "single.h"

SFtype
__floatunsisf (USItype i)
{
    7e5c:	ff010113          	addi	sp,sp,-16
    7e60:	00812423          	sw	s0,8(sp)
    7e64:	00112623          	sw	ra,12(sp)
    7e68:	00050413          	mv	s0,a0
  FP_DECL_EX;
  FP_DECL_S (A);
  SFtype a;

  FP_INIT_ROUNDMODE;
  FP_FROM_INT_S (A, i, SI_BITS, USItype);
    7e6c:	00000793          	li	a5,0
    7e70:	02050463          	beqz	a0,7e98 <__floatunsisf+0x3c>
    7e74:	1a8000ef          	jal	ra,801c <__clzsi2>
    7e78:	09e00793          	li	a5,158
    7e7c:	40a787b3          	sub	a5,a5,a0
    7e80:	09600713          	li	a4,150
    7e84:	02f74a63          	blt	a4,a5,7eb8 <__floatunsisf+0x5c>
    7e88:	00800713          	li	a4,8
    7e8c:	0ae50863          	beq	a0,a4,7f3c <__floatunsisf+0xe0>
    7e90:	ff850513          	addi	a0,a0,-8
    7e94:	00a41433          	sll	s0,s0,a0
  FP_PACK_RAW_S (a, A);
    7e98:	00941413          	slli	s0,s0,0x9
    7e9c:	00945413          	srli	s0,s0,0x9
    7ea0:	01779513          	slli	a0,a5,0x17
  FP_HANDLE_EXCEPTIONS;

  return a;
}
    7ea4:	00c12083          	lw	ra,12(sp)
    7ea8:	00856533          	or	a0,a0,s0
    7eac:	00812403          	lw	s0,8(sp)
    7eb0:	01010113          	addi	sp,sp,16
    7eb4:	00008067          	ret
  FP_FROM_INT_S (A, i, SI_BITS, USItype);
    7eb8:	09900713          	li	a4,153
    7ebc:	06f75663          	bge	a4,a5,7f28 <__floatunsisf+0xcc>
    7ec0:	01b50713          	addi	a4,a0,27
    7ec4:	00500693          	li	a3,5
    7ec8:	00e41733          	sll	a4,s0,a4
    7ecc:	40a686b3          	sub	a3,a3,a0
    7ed0:	00e03733          	snez	a4,a4
    7ed4:	00d45433          	srl	s0,s0,a3
    7ed8:	00876433          	or	s0,a4,s0
    7edc:	fc000737          	lui	a4,0xfc000
    7ee0:	fff70713          	addi	a4,a4,-1 # fbffffff <_end_of_memory+0xfbfcffff>
    7ee4:	00747693          	andi	a3,s0,7
    7ee8:	00e47733          	and	a4,s0,a4
    7eec:	00068a63          	beqz	a3,7f00 <__floatunsisf+0xa4>
    7ef0:	00f47413          	andi	s0,s0,15
    7ef4:	00400693          	li	a3,4
    7ef8:	00d40463          	beq	s0,a3,7f00 <__floatunsisf+0xa4>
    7efc:	00470713          	addi	a4,a4,4
    7f00:	040006b7          	lui	a3,0x4000
    7f04:	00d776b3          	and	a3,a4,a3
    7f08:	00068c63          	beqz	a3,7f20 <__floatunsisf+0xc4>
    7f0c:	fc0007b7          	lui	a5,0xfc000
    7f10:	fff78793          	addi	a5,a5,-1 # fbffffff <_end_of_memory+0xfbfcffff>
    7f14:	00f77733          	and	a4,a4,a5
    7f18:	09f00793          	li	a5,159
    7f1c:	40a787b3          	sub	a5,a5,a0
    7f20:	00375413          	srli	s0,a4,0x3
    7f24:	f75ff06f          	j	7e98 <__floatunsisf+0x3c>
    7f28:	00500693          	li	a3,5
    7f2c:	ffb50713          	addi	a4,a0,-5
    7f30:	fad506e3          	beq	a0,a3,7edc <__floatunsisf+0x80>
    7f34:	00e41433          	sll	s0,s0,a4
    7f38:	fa5ff06f          	j	7edc <__floatunsisf+0x80>
    7f3c:	09600793          	li	a5,150
    7f40:	f59ff06f          	j	7e98 <__floatunsisf+0x3c>

00007f44 <__mulsi3>:
/* Our RV64 64-bit routine is equivalent to our RV32 32-bit routine.  */
# define __muldi3 __mulsi3
#endif

FUNC_BEGIN (__muldi3)
  mv     a2, a0
    7f44:	00050613          	mv	a2,a0
  li     a0, 0
    7f48:	00000513          	li	a0,0
.L1:
  andi   a3, a1, 1
    7f4c:	0015f693          	andi	a3,a1,1
  beqz   a3, .L2
    7f50:	00068463          	beqz	a3,7f58 <__mulsi3+0x14>
  add    a0, a0, a2
    7f54:	00c50533          	add	a0,a0,a2
.L2:
  srli   a1, a1, 1
    7f58:	0015d593          	srli	a1,a1,0x1
  slli   a2, a2, 1
    7f5c:	00161613          	slli	a2,a2,0x1
  bnez   a1, .L1
    7f60:	fe0596e3          	bnez	a1,7f4c <__mulsi3+0x8>
  ret
    7f64:	00008067          	ret

00007f68 <__divsi3>:
  li    t0, -1
  beq   a1, t0, .L20
#endif

FUNC_BEGIN (__divdi3)
  bltz  a0, .L10
    7f68:	06054063          	bltz	a0,7fc8 <__umodsi3+0x10>
  bltz  a1, .L11
    7f6c:	0605c663          	bltz	a1,7fd8 <__umodsi3+0x20>

00007f70 <__hidden___udivsi3>:
  /* Since the quotient is positive, fall into __udivdi3.  */

FUNC_BEGIN (__udivdi3)
  mv    a2, a1
    7f70:	00058613          	mv	a2,a1
  mv    a1, a0
    7f74:	00050593          	mv	a1,a0
  li    a0, -1
    7f78:	fff00513          	li	a0,-1
  beqz  a2, .L5
    7f7c:	02060c63          	beqz	a2,7fb4 <__hidden___udivsi3+0x44>
  li    a3, 1
    7f80:	00100693          	li	a3,1
  bgeu  a2, a1, .L2
    7f84:	00b67a63          	bgeu	a2,a1,7f98 <__hidden___udivsi3+0x28>
.L1:
  blez  a2, .L2
    7f88:	00c05863          	blez	a2,7f98 <__hidden___udivsi3+0x28>
  slli  a2, a2, 1
    7f8c:	00161613          	slli	a2,a2,0x1
  slli  a3, a3, 1
    7f90:	00169693          	slli	a3,a3,0x1
  bgtu  a1, a2, .L1
    7f94:	feb66ae3          	bltu	a2,a1,7f88 <__hidden___udivsi3+0x18>
.L2:
  li    a0, 0
    7f98:	00000513          	li	a0,0
.L3:
  bltu  a1, a2, .L4
    7f9c:	00c5e663          	bltu	a1,a2,7fa8 <__hidden___udivsi3+0x38>
  sub   a1, a1, a2
    7fa0:	40c585b3          	sub	a1,a1,a2
  or    a0, a0, a3
    7fa4:	00d56533          	or	a0,a0,a3
.L4:
  srli  a3, a3, 1
    7fa8:	0016d693          	srli	a3,a3,0x1
  srli  a2, a2, 1
    7fac:	00165613          	srli	a2,a2,0x1
  bnez  a3, .L3
    7fb0:	fe0696e3          	bnez	a3,7f9c <__hidden___udivsi3+0x2c>
.L5:
  ret
    7fb4:	00008067          	ret

00007fb8 <__umodsi3>:
FUNC_END (__udivdi3)
HIDDEN_DEF (__udivdi3)

FUNC_BEGIN (__umoddi3)
  /* Call __udivdi3(a0, a1), then return the remainder, which is in a1.  */
  move  t0, ra
    7fb8:	00008293          	mv	t0,ra
  jal   HIDDEN_JUMPTARGET(__udivdi3)
    7fbc:	fb5ff0ef          	jal	ra,7f70 <__hidden___udivsi3>
  move  a0, a1
    7fc0:	00058513          	mv	a0,a1
  jr    t0
    7fc4:	00028067          	jr	t0
FUNC_END (__umoddi3)

  /* Handle negative arguments to __divdi3.  */
.L10:
  neg   a0, a0
    7fc8:	40a00533          	neg	a0,a0
  /* Zero is handled as a negative so that the result will not be inverted.  */
  bgtz  a1, .L12     /* Compute __udivdi3(-a0, a1), then negate the result.  */
    7fcc:	00b04863          	bgtz	a1,7fdc <__umodsi3+0x24>

  neg   a1, a1
    7fd0:	40b005b3          	neg	a1,a1
  j     HIDDEN_JUMPTARGET(__udivdi3)     /* Compute __udivdi3(-a0, -a1).  */
    7fd4:	f9dff06f          	j	7f70 <__hidden___udivsi3>
.L11:                /* Compute __udivdi3(a0, -a1), then negate the result.  */
  neg   a1, a1
    7fd8:	40b005b3          	neg	a1,a1
.L12:
  move  t0, ra
    7fdc:	00008293          	mv	t0,ra
  jal   HIDDEN_JUMPTARGET(__udivdi3)
    7fe0:	f91ff0ef          	jal	ra,7f70 <__hidden___udivsi3>
  neg   a0, a0
    7fe4:	40a00533          	neg	a0,a0
  jr    t0
    7fe8:	00028067          	jr	t0

00007fec <__modsi3>:
FUNC_END (__divdi3)

FUNC_BEGIN (__moddi3)
  move   t0, ra
    7fec:	00008293          	mv	t0,ra
  bltz   a1, .L31
    7ff0:	0005ca63          	bltz	a1,8004 <__modsi3+0x18>
  bltz   a0, .L32
    7ff4:	00054c63          	bltz	a0,800c <__modsi3+0x20>
.L30:
  jal    HIDDEN_JUMPTARGET(__udivdi3)    /* The dividend is not negative.  */
    7ff8:	f79ff0ef          	jal	ra,7f70 <__hidden___udivsi3>
  move   a0, a1
    7ffc:	00058513          	mv	a0,a1
  jr     t0
    8000:	00028067          	jr	t0
.L31:
  neg    a1, a1
    8004:	40b005b3          	neg	a1,a1
  bgez   a0, .L30
    8008:	fe0558e3          	bgez	a0,7ff8 <__modsi3+0xc>
.L32:
  neg    a0, a0
    800c:	40a00533          	neg	a0,a0
  jal    HIDDEN_JUMPTARGET(__udivdi3)    /* The dividend is hella negative.  */
    8010:	f61ff0ef          	jal	ra,7f70 <__hidden___udivsi3>
  neg    a0, a1
    8014:	40b00533          	neg	a0,a1
  jr     t0
    8018:	00028067          	jr	t0

0000801c <__clzsi2>:
int
__clzSI2 (UWtype x)
{
  Wtype ret;

  count_leading_zeros (ret, x);
    801c:	000107b7          	lui	a5,0x10
    8020:	02f57a63          	bgeu	a0,a5,8054 <__clzsi2+0x38>
    8024:	10053793          	sltiu	a5,a0,256
    8028:	0017c793          	xori	a5,a5,1
    802c:	00379793          	slli	a5,a5,0x3
    8030:	00009737          	lui	a4,0x9
    8034:	02000693          	li	a3,32
    8038:	40f686b3          	sub	a3,a3,a5
    803c:	00f55533          	srl	a0,a0,a5
    8040:	bdc70793          	addi	a5,a4,-1060 # 8bdc <__clz_tab>
    8044:	00a787b3          	add	a5,a5,a0
    8048:	0007c503          	lbu	a0,0(a5) # 10000 <_gp+0x69ec>

  return ret;
}
    804c:	40a68533          	sub	a0,a3,a0
    8050:	00008067          	ret
  count_leading_zeros (ret, x);
    8054:	01000737          	lui	a4,0x1000
    8058:	01000793          	li	a5,16
    805c:	fce56ae3          	bltu	a0,a4,8030 <__clzsi2+0x14>
    8060:	01800793          	li	a5,24
    8064:	fcdff06f          	j	8030 <__clzsi2+0x14>

00008068 <memset>:
    8068:	00f00313          	li	t1,15
    806c:	00050713          	mv	a4,a0
    8070:	02c37e63          	bgeu	t1,a2,80ac <memset+0x44>
    8074:	00f77793          	andi	a5,a4,15
    8078:	0a079063          	bnez	a5,8118 <memset+0xb0>
    807c:	08059263          	bnez	a1,8100 <memset+0x98>
    8080:	ff067693          	andi	a3,a2,-16
    8084:	00f67613          	andi	a2,a2,15
    8088:	00e686b3          	add	a3,a3,a4
    808c:	00b72023          	sw	a1,0(a4) # 1000000 <_end_of_memory+0xfd0000>
    8090:	00b72223          	sw	a1,4(a4)
    8094:	00b72423          	sw	a1,8(a4)
    8098:	00b72623          	sw	a1,12(a4)
    809c:	01070713          	addi	a4,a4,16
    80a0:	fed766e3          	bltu	a4,a3,808c <memset+0x24>
    80a4:	00061463          	bnez	a2,80ac <memset+0x44>
    80a8:	00008067          	ret
    80ac:	40c306b3          	sub	a3,t1,a2
    80b0:	00269693          	slli	a3,a3,0x2
    80b4:	00000297          	auipc	t0,0x0
    80b8:	005686b3          	add	a3,a3,t0
    80bc:	00c68067          	jr	12(a3) # 400000c <_end_of_memory+0x3fd000c>
    80c0:	00b70723          	sb	a1,14(a4)
    80c4:	00b706a3          	sb	a1,13(a4)
    80c8:	00b70623          	sb	a1,12(a4)
    80cc:	00b705a3          	sb	a1,11(a4)
    80d0:	00b70523          	sb	a1,10(a4)
    80d4:	00b704a3          	sb	a1,9(a4)
    80d8:	00b70423          	sb	a1,8(a4)
    80dc:	00b703a3          	sb	a1,7(a4)
    80e0:	00b70323          	sb	a1,6(a4)
    80e4:	00b702a3          	sb	a1,5(a4)
    80e8:	00b70223          	sb	a1,4(a4)
    80ec:	00b701a3          	sb	a1,3(a4)
    80f0:	00b70123          	sb	a1,2(a4)
    80f4:	00b700a3          	sb	a1,1(a4)
    80f8:	00b70023          	sb	a1,0(a4)
    80fc:	00008067          	ret
    8100:	0ff5f593          	zext.b	a1,a1
    8104:	00859693          	slli	a3,a1,0x8
    8108:	00d5e5b3          	or	a1,a1,a3
    810c:	01059693          	slli	a3,a1,0x10
    8110:	00d5e5b3          	or	a1,a1,a3
    8114:	f6dff06f          	j	8080 <memset+0x18>
    8118:	00279693          	slli	a3,a5,0x2
    811c:	00000297          	auipc	t0,0x0
    8120:	005686b3          	add	a3,a3,t0
    8124:	00008293          	mv	t0,ra
    8128:	fa0680e7          	jalr	-96(a3)
    812c:	00028093          	mv	ra,t0
    8130:	ff078793          	addi	a5,a5,-16
    8134:	40f70733          	sub	a4,a4,a5
    8138:	00f60633          	add	a2,a2,a5
    813c:	f6c378e3          	bgeu	t1,a2,80ac <memset+0x44>
    8140:	f3dff06f          	j	807c <memset+0x14>

Disassembly of section .text.startup:

00008144 <main>:
#include "../uart.h"
#endif

#ifdef RISCV_PROCESSOR
int main(void)
{
    8144:	bd010113          	addi	sp,sp,-1072
    8148:	ffffb2b7          	lui	t0,0xffffb
    814c:	42812423          	sw	s0,1064(sp)
    8150:	42912223          	sw	s1,1060(sp)
    8154:	3fb12e23          	sw	s11,1020(sp)
    8158:	42112623          	sw	ra,1068(sp)
    815c:	43212023          	sw	s2,1056(sp)
    8160:	41312e23          	sw	s3,1052(sp)
    8164:	41412c23          	sw	s4,1048(sp)
    8168:	41512a23          	sw	s5,1044(sp)
    816c:	41612823          	sw	s6,1040(sp)
    8170:	41712623          	sw	s7,1036(sp)
    8174:	41812423          	sw	s8,1032(sp)
    8178:	41912223          	sw	s9,1028(sp)
    817c:	41a12023          	sw	s10,1024(sp)
  uint8_t sm[MLEN + CRYPTO_BYTES];
  uint8_t pk[CRYPTO_PUBLICKEYBYTES];
  uint8_t sk[CRYPTO_SECRETKEYBYTES];

#ifdef UART
  uart_send_string("\n\rHi Dilithium");
    8180:	00001517          	auipc	a0,0x1
    8184:	b5c50513          	addi	a0,a0,-1188 # 8cdc <__clz_tab+0x100>
{
    8188:	00510133          	add	sp,sp,t0
  uart_send_string("\n\rHi Dilithium");
    818c:	80dfb0ef          	jal	ra,3998 <uart_send_string>

  for(i = 0; i < NTESTS; ++i) {    
#ifdef UART
    uart_send_string("\n\rCreate keys");
#endif
    randombytes(m, MLEN);
    8190:	ffffbdb7          	lui	s11,0xffffb
    8194:	000055b7          	lui	a1,0x5
    8198:	670d8493          	addi	s1,s11,1648 # ffffb670 <_end_of_memory+0xfffcb670>
    819c:	3c058793          	addi	a5,a1,960 # 53c0 <KeccakF1600_StatePermute+0x19ec>
    81a0:	009787b3          	add	a5,a5,s1
    81a4:	03010513          	addi	a0,sp,48
    81a8:	00a784b3          	add	s1,a5,a0
    
#ifdef PROFILING_STAGES
    asm("csrrs s2, "TICKS_REGISTER", zero");
#endif
    crypto_sign_keypair(pk, sk);
    81ac:	fffff7b7          	lui	a5,0xfffff
    81b0:	d0078793          	addi	a5,a5,-768 # ffffed00 <_end_of_memory+0xfffced00>
    81b4:	3c058513          	addi	a0,a1,960
    81b8:	00f50533          	add	a0,a0,a5
    81bc:	03010793          	addi	a5,sp,48
    81c0:	00f507b3          	add	a5,a0,a5
    81c4:	c50d8613          	addi	a2,s11,-944
    81c8:	00f12823          	sw	a5,16(sp)
    81cc:	00058793          	mv	a5,a1
    81d0:	3c058593          	addi	a1,a1,960
    81d4:	00c585b3          	add	a1,a1,a2
    81d8:	03010613          	addi	a2,sp,48
    81dc:	00c58633          	add	a2,a1,a2
    uart_send_string("\nSign message");
#endif
#ifdef PROFILING_STAGES
    asm("csrrs s4, "TICKS_REGISTER", zero");
#endif
    crypto_sign(sm, &smlen, m, MLEN, sk);
    81e0:	c4cd8693          	addi	a3,s11,-948
    crypto_sign_keypair(pk, sk);
    81e4:	00c12a23          	sw	a2,20(sp)
    crypto_sign(sm, &smlen, m, MLEN, sk);
    81e8:	00078613          	mv	a2,a5
    81ec:	3c078793          	addi	a5,a5,960
    81f0:	00d787b3          	add	a5,a5,a3
    81f4:	03010693          	addi	a3,sp,48
    81f8:	00d787b3          	add	a5,a5,a3
    81fc:	02f12423          	sw	a5,40(sp)
    8200:	ffffe7b7          	lui	a5,0xffffe
    8204:	ad078793          	addi	a5,a5,-1328 # ffffdad0 <_end_of_memory+0xfffcdad0>
    8208:	3c060693          	addi	a3,a2,960
    820c:	00f686b3          	add	a3,a3,a5
    8210:	03010793          	addi	a5,sp,48
    8214:	00f687b3          	add	a5,a3,a5
    uart_send_string("\nVerify signature");
#endif
#ifdef PROFILING_STAGES
    asm("csrrs s6, "TICKS_REGISTER", zero");
#endif
    ret = crypto_sign_open(m2, &mlen, sm, smlen, pk);
    8218:	c48d8713          	addi	a4,s11,-952
    821c:	3c060693          	addi	a3,a2,960
    8220:	00e686b3          	add	a3,a3,a4
    8224:	ffffd437          	lui	s0,0xffffd
    8228:	03010713          	addi	a4,sp,48
    822c:	00e68733          	add	a4,a3,a4
    8230:	8a040413          	addi	s0,s0,-1888 # ffffc8a0 <_end_of_memory+0xfffcc8a0>
    crypto_sign(sm, &smlen, m, MLEN, sk);
    8234:	00f12c23          	sw	a5,24(sp)
    ret = crypto_sign_open(m2, &mlen, sm, smlen, pk);
    8238:	3c060793          	addi	a5,a2,960
    823c:	02e12623          	sw	a4,44(sp)
    8240:	008787b3          	add	a5,a5,s0
    8244:	03010713          	addi	a4,sp,48
  for(i = 0; i < NTESTS; ++i) {    
    8248:	00012623          	sw	zero,12(sp)
    ret = crypto_sign_open(m2, &mlen, sm, smlen, pk);
    824c:	00e78433          	add	s0,a5,a4
    uart_send_string("\n\rCreate keys");
    8250:	00001517          	auipc	a0,0x1
    8254:	a9c50513          	addi	a0,a0,-1380 # 8cec <__clz_tab+0x110>
    8258:	f40fb0ef          	jal	ra,3998 <uart_send_string>
    randombytes(m, MLEN);
    825c:	03b00593          	li	a1,59
    8260:	00048513          	mv	a0,s1
    8264:	db5f70ef          	jal	ra,18 <randombytes>
    asm("csrrs s2, "TICKS_REGISTER", zero");
    8268:	c0102973          	rdtime	s2
    crypto_sign_keypair(pk, sk);
    826c:	01012583          	lw	a1,16(sp)
    8270:	01412503          	lw	a0,20(sp)
    8274:	8f4f80ef          	jal	ra,368 <pqcrystals_dilithium5_ref_keypair>
    asm("csrrs s3, "TICKS_REGISTER", zero");
    8278:	c01029f3          	rdtime	s3
    print_runtime(cycle_start, cycle_end);
    827c:	00098593          	mv	a1,s3
    8280:	00090513          	mv	a0,s2
    8284:	01312e23          	sw	s3,28(sp)
    8288:	c9cfb0ef          	jal	ra,3724 <print_runtime>
    keys_avg = ((cycle_end - cycle_start) + i*keys_avg) / (i+1); // obtaining average per new sample
    828c:	00c12503          	lw	a0,12(sp)
    8290:	bcdff0ef          	jal	ra,7e5c <__floatunsisf>
    8294:	00c12783          	lw	a5,12(sp)
    8298:	00050d13          	mv	s10,a0
    829c:	00178793          	addi	a5,a5,1
    82a0:	00078513          	mv	a0,a5
    82a4:	00f12623          	sw	a5,12(sp)
    82a8:	bb5ff0ef          	jal	ra,7e5c <__floatunsisf>
    82ac:	01c12583          	lw	a1,28(sp)
    82b0:	00050793          	mv	a5,a0
    82b4:	00078c93          	mv	s9,a5
    82b8:	41258533          	sub	a0,a1,s2
    82bc:	ba1ff0ef          	jal	ra,7e5c <__floatunsisf>
    82c0:	00001797          	auipc	a5,0x1
    82c4:	b6078793          	addi	a5,a5,-1184 # 8e20 <keys_avg.2>
    82c8:	0007a583          	lw	a1,0(a5)
    82cc:	00a12e23          	sw	a0,28(sp)
    82d0:	000d0513          	mv	a0,s10
    82d4:	fc4ff0ef          	jal	ra,7a98 <__mulsf3>
    82d8:	00050593          	mv	a1,a0
    82dc:	01c12503          	lw	a0,28(sp)
    82e0:	fc1fe0ef          	jal	ra,72a0 <__addsf3>
    82e4:	000c8593          	mv	a1,s9
    82e8:	c28ff0ef          	jal	ra,7710 <__divsf3>
    82ec:	00050793          	mv	a5,a0
    82f0:	00001697          	auipc	a3,0x1
    82f4:	b3068693          	addi	a3,a3,-1232 # 8e20 <keys_avg.2>
    uart_send_string("\nSign message");
    82f8:	00001517          	auipc	a0,0x1
    82fc:	a0450513          	addi	a0,a0,-1532 # 8cfc <__clz_tab+0x120>
    keys_avg = ((cycle_end - cycle_start) + i*keys_avg) / (i+1); // obtaining average per new sample
    8300:	00f6a023          	sw	a5,0(a3)
    uart_send_string("\nSign message");
    8304:	e94fb0ef          	jal	ra,3998 <uart_send_string>
    asm("csrrs s4, "TICKS_REGISTER", zero");
    8308:	c0102a73          	rdtime	s4
    crypto_sign(sm, &smlen, m, MLEN, sk);
    830c:	01012703          	lw	a4,16(sp)
    8310:	02812583          	lw	a1,40(sp)
    8314:	01812503          	lw	a0,24(sp)
    8318:	03b00693          	li	a3,59
    831c:	00048613          	mv	a2,s1
    8320:	fa4f80ef          	jal	ra,ac4 <pqcrystals_dilithium5_ref>
    asm("csrrs s5, "TICKS_REGISTER", zero");
    8324:	c0102af3          	rdtime	s5
    print_runtime(cycle_start2, cycle_end2);
    8328:	000a0513          	mv	a0,s4
    832c:	000a8593          	mv	a1,s5
    8330:	03512023          	sw	s5,32(sp)
    8334:	01412e23          	sw	s4,28(sp)
    8338:	becfb0ef          	jal	ra,3724 <print_runtime>
    sign_avg = ((cycle_end2 - cycle_start2) + i*sign_avg) / (i+1); 
    833c:	02012583          	lw	a1,32(sp)
    8340:	01c12503          	lw	a0,28(sp)
    8344:	40a58533          	sub	a0,a1,a0
    8348:	b15ff0ef          	jal	ra,7e5c <__floatunsisf>
    834c:	00001797          	auipc	a5,0x1
    8350:	ad078793          	addi	a5,a5,-1328 # 8e1c <sign_avg.1>
    8354:	0007a583          	lw	a1,0(a5)
    8358:	00a12e23          	sw	a0,28(sp)
    835c:	000d0513          	mv	a0,s10
    8360:	f38ff0ef          	jal	ra,7a98 <__mulsf3>
    8364:	00050593          	mv	a1,a0
    8368:	01c12503          	lw	a0,28(sp)
    836c:	f35fe0ef          	jal	ra,72a0 <__addsf3>
    8370:	000c8593          	mv	a1,s9
    8374:	b9cff0ef          	jal	ra,7710 <__divsf3>
    8378:	00050793          	mv	a5,a0
    837c:	00001697          	auipc	a3,0x1
    8380:	aa068693          	addi	a3,a3,-1376 # 8e1c <sign_avg.1>
    uart_send_string("\nVerify signature");
    8384:	00001517          	auipc	a0,0x1
    8388:	98850513          	addi	a0,a0,-1656 # 8d0c <__clz_tab+0x130>
    sign_avg = ((cycle_end2 - cycle_start2) + i*sign_avg) / (i+1); 
    838c:	00f6a023          	sw	a5,0(a3)
    uart_send_string("\nVerify signature");
    8390:	e08fb0ef          	jal	ra,3998 <uart_send_string>
    asm("csrrs s6, "TICKS_REGISTER", zero");
    8394:	c0102b73          	rdtime	s6
    ret = crypto_sign_open(m2, &mlen, sm, smlen, pk);
    8398:	03c12683          	lw	a3,60(sp)
    839c:	01412703          	lw	a4,20(sp)
    83a0:	01812603          	lw	a2,24(sp)
    83a4:	02c12583          	lw	a1,44(sp)
    83a8:	00040513          	mv	a0,s0
    83ac:	ac9f80ef          	jal	ra,e74 <pqcrystals_dilithium5_ref_open>
    83b0:	02a12223          	sw	a0,36(sp)
#ifdef PROFILING_STAGES
    asm("csrrs s7, "TICKS_REGISTER", zero");
    83b4:	c0102bf3          	rdtime	s7
    print_runtime(cycle_start3, cycle_end3);
    83b8:	000b8593          	mv	a1,s7
    83bc:	000b0513          	mv	a0,s6
    83c0:	03712023          	sw	s7,32(sp)
    83c4:	01612e23          	sw	s6,28(sp)
    83c8:	b5cfb0ef          	jal	ra,3724 <print_runtime>
    verify_avg = ((cycle_end3 - cycle_start3) + i*verify_avg) / (i+1); 
    83cc:	02012583          	lw	a1,32(sp)
    83d0:	01c12503          	lw	a0,28(sp)
    83d4:	40a58533          	sub	a0,a1,a0
    83d8:	a85ff0ef          	jal	ra,7e5c <__floatunsisf>
    83dc:	00001797          	auipc	a5,0x1
    83e0:	a3c78793          	addi	a5,a5,-1476 # 8e18 <verify_avg.0>
    83e4:	0007a583          	lw	a1,0(a5)
    83e8:	00a12e23          	sw	a0,28(sp)
    83ec:	000d0513          	mv	a0,s10
    83f0:	ea8ff0ef          	jal	ra,7a98 <__mulsf3>
    83f4:	00050593          	mv	a1,a0
    83f8:	01c12503          	lw	a0,28(sp)
    83fc:	ea5fe0ef          	jal	ra,72a0 <__addsf3>
    8400:	000c8593          	mv	a1,s9
    8404:	b0cff0ef          	jal	ra,7710 <__divsf3>
    8408:	00001797          	auipc	a5,0x1
    840c:	a1078793          	addi	a5,a5,-1520 # 8e18 <verify_avg.0>
    8410:	00a7a023          	sw	a0,0(a5)
#endif

    if(ret) {
    8414:	02412783          	lw	a5,36(sp)
    8418:	28079263          	bnez	a5,869c <main+0x558>
#ifdef UART
      uart_send_string("\n\rVerification failed");
#endif
      return -1;
    }
    if(smlen != MLEN + CRYPTO_BYTES) {
    841c:	03c12703          	lw	a4,60(sp)
    8420:	000017b7          	lui	a5,0x1
    8424:	22e78793          	addi	a5,a5,558 # 122e <pqcrystals_dilithium5_ref_pack_sk+0x102>
    8428:	28f71263          	bne	a4,a5,86ac <main+0x568>
      //fprintf(stderr, "Signed message lengths wrong\n");
      uart_send_string("\n\rSigned message lengths wrong");
      return -1;
    }
    if(mlen != MLEN) {
    842c:	03812703          	lw	a4,56(sp)
    8430:	03b00793          	li	a5,59
    8434:	28f71463          	bne	a4,a5,86bc <main+0x578>
      //fprintf(stderr, "Message lengths wrong\n");
      uart_send_string("\n\rMessage lengths wrong");
      return -1;
    }
    for(j = 0; j < MLEN; ++j) {
    8438:	02012a23          	sw	zero,52(sp)
    843c:	00100793          	li	a5,1
    8440:	00000593          	li	a1,0
    8444:	03c00513          	li	a0,60
    8448:	0140006f          	j	845c <main+0x318>
    844c:	00078c13          	mv	s8,a5
    8450:	00100593          	li	a1,1
    8454:	08a70a63          	beq	a4,a0,84e8 <main+0x3a4>
    8458:	00070793          	mv	a5,a4
      if(m2[j] != m[j]) {
    845c:	00f406b3          	add	a3,s0,a5
    8460:	00f48733          	add	a4,s1,a5
    8464:	fff6c603          	lbu	a2,-1(a3)
    8468:	fff74683          	lbu	a3,-1(a4)
    for(j = 0; j < MLEN; ++j) {
    846c:	00178713          	addi	a4,a5,1
      if(m2[j] != m[j]) {
    8470:	fcd60ee3          	beq	a2,a3,844c <main+0x308>
    8474:	02058063          	beqz	a1,8494 <main+0x350>
    8478:	000057b7          	lui	a5,0x5
    847c:	3c078793          	addi	a5,a5,960 # 53c0 <KeccakF1600_StatePermute+0x19ec>
    8480:	01b787b3          	add	a5,a5,s11
    8484:	03010713          	addi	a4,sp,48
    8488:	00e787b3          	add	a5,a5,a4
    848c:	00f12623          	sw	a5,12(sp)
    8490:	c587a223          	sw	s8,-956(a5)
        //fprintf(stderr, "Messages don't match\n");
        uart_send_string("\n\rMessages don't match");
    8494:	00001517          	auipc	a0,0x1
    8498:	8dc50513          	addi	a0,a0,-1828 # 8d70 <__clz_tab+0x194>
    849c:	cfcfb0ef          	jal	ra,3998 <uart_send_string>
  uart_send_string(str);
#endif
  
  // Busy wait
  for(;;);
}
    84a0:	000052b7          	lui	t0,0x5
    84a4:	00510133          	add	sp,sp,t0
    84a8:	42c12083          	lw	ra,1068(sp)
    84ac:	42812403          	lw	s0,1064(sp)
    84b0:	42412483          	lw	s1,1060(sp)
    84b4:	42012903          	lw	s2,1056(sp)
    84b8:	41c12983          	lw	s3,1052(sp)
    84bc:	41812a03          	lw	s4,1048(sp)
    84c0:	41412a83          	lw	s5,1044(sp)
    84c4:	41012b03          	lw	s6,1040(sp)
    84c8:	40c12b83          	lw	s7,1036(sp)
    84cc:	40812c03          	lw	s8,1032(sp)
    84d0:	40412c83          	lw	s9,1028(sp)
    84d4:	40012d03          	lw	s10,1024(sp)
    84d8:	3fc12d83          	lw	s11,1020(sp)
    84dc:	fff00513          	li	a0,-1
    84e0:	43010113          	addi	sp,sp,1072
    84e4:	00008067          	ret
    randombytes((uint8_t *)&j, sizeof(j));
    84e8:	000057b7          	lui	a5,0x5
    84ec:	c44d8513          	addi	a0,s11,-956
    84f0:	3c078793          	addi	a5,a5,960 # 53c0 <KeccakF1600_StatePermute+0x19ec>
    84f4:	03010713          	addi	a4,sp,48
    84f8:	00a787b3          	add	a5,a5,a0
    84fc:	00e78533          	add	a0,a5,a4
    8500:	00400593          	li	a1,4
    8504:	03b00793          	li	a5,59
    8508:	02f12a23          	sw	a5,52(sp)
    850c:	b0df70ef          	jal	ra,18 <randombytes>
      randombytes(&b, 1);
    8510:	ffffbd37          	lui	s10,0xffffb
    8514:	000057b7          	lui	a5,0x5
    8518:	c43d0c93          	addi	s9,s10,-957 # ffffac43 <_end_of_memory+0xfffcac43>
    851c:	3c078793          	addi	a5,a5,960 # 53c0 <KeccakF1600_StatePermute+0x19ec>
    8520:	019787b3          	add	a5,a5,s9
    8524:	03010713          	addi	a4,sp,48
    8528:	00e78cb3          	add	s9,a5,a4
    852c:	00100593          	li	a1,1
    8530:	000c8513          	mv	a0,s9
    8534:	ae5f70ef          	jal	ra,18 <randombytes>
    } while(!b);
    8538:	03314783          	lbu	a5,51(sp)
    853c:	fe0788e3          	beqz	a5,852c <main+0x3e8>
    sm[j % (MLEN + CRYPTO_BYTES)] += b;
    8540:	03412803          	lw	a6,52(sp)
    8544:	00001737          	lui	a4,0x1
    8548:	22e70713          	addi	a4,a4,558 # 122e <pqcrystals_dilithium5_ref_pack_sk+0x102>
    854c:	02e87833          	remu	a6,a6,a4
    ret = crypto_sign_open(m2, &mlen, sm, smlen, pk);
    8550:	000058b7          	lui	a7,0x5
    8554:	c50d0713          	addi	a4,s10,-944
    8558:	3c088513          	addi	a0,a7,960 # 53c0 <KeccakF1600_StatePermute+0x19ec>
    855c:	00e50533          	add	a0,a0,a4
    sm[j % (MLEN + CRYPTO_BYTES)] += b;
    8560:	ffffe637          	lui	a2,0xffffe
    ret = crypto_sign_open(m2, &mlen, sm, smlen, pk);
    8564:	03010713          	addi	a4,sp,48
    8568:	ad060613          	addi	a2,a2,-1328 # ffffdad0 <_end_of_memory+0xfffcdad0>
    856c:	00e50733          	add	a4,a0,a4
    8570:	3c088513          	addi	a0,a7,960
    8574:	00c50533          	add	a0,a0,a2
    8578:	03010613          	addi	a2,sp,48
    857c:	c48d0593          	addi	a1,s10,-952
    8580:	00c50633          	add	a2,a0,a2
    8584:	3c088513          	addi	a0,a7,960
    8588:	00b50533          	add	a0,a0,a1
    858c:	03010593          	addi	a1,sp,48
    8590:	00b505b3          	add	a1,a0,a1
    8594:	ffffd537          	lui	a0,0xffffd
    8598:	8a050513          	addi	a0,a0,-1888 # ffffc8a0 <_end_of_memory+0xfffcc8a0>
    859c:	3c088893          	addi	a7,a7,960
    85a0:	00a888b3          	add	a7,a7,a0
    85a4:	03010513          	addi	a0,sp,48
    85a8:	00a88533          	add	a0,a7,a0
    sm[j % (MLEN + CRYPTO_BYTES)] += b;
    85ac:	000038b7          	lui	a7,0x3
    85b0:	3c088893          	addi	a7,a7,960 # 33c0 <pqcrystals_dilithium5_ref_invntt_tomont+0x10>
    85b4:	03010313          	addi	t1,sp,48
    85b8:	006888b3          	add	a7,a7,t1
    ret = crypto_sign_open(m2, &mlen, sm, smlen, pk);
    85bc:	03c12683          	lw	a3,60(sp)
    sm[j % (MLEN + CRYPTO_BYTES)] += b;
    85c0:	01088833          	add	a6,a7,a6
    85c4:	ad084883          	lbu	a7,-1328(a6)
    85c8:	011787b3          	add	a5,a5,a7
    85cc:	acf80823          	sb	a5,-1328(a6)
    ret = crypto_sign_open(m2, &mlen, sm, smlen, pk);
    85d0:	8a5f80ef          	jal	ra,e74 <pqcrystals_dilithium5_ref_open>
    if(!ret) {
    85d4:	0e050c63          	beqz	a0,86cc <main+0x588>
  for(i = 0; i < NTESTS; ++i) {    
    85d8:	00c12703          	lw	a4,12(sp)
    85dc:	000027b7          	lui	a5,0x2
    85e0:	71078793          	addi	a5,a5,1808 # 2710 <pqcrystals_dilithium5_ref_poly_chknorm>
    85e4:	c6f716e3          	bne	a4,a5,8250 <main+0x10c>
  itoa(pbuf, (unsigned int)keys_avg, 10);
    85e8:	00001797          	auipc	a5,0x1
    85ec:	83878793          	addi	a5,a5,-1992 # 8e20 <keys_avg.2>
    85f0:	0007a503          	lw	a0,0(a5)
    85f4:	00001417          	auipc	s0,0x1
    85f8:	82040413          	addi	s0,s0,-2016 # 8e14 <pbuf>
    85fc:	801ff0ef          	jal	ra,7dfc <__fixunssfsi>
    8600:	00050593          	mv	a1,a0
    8604:	00042503          	lw	a0,0(s0)
    8608:	00a00613          	li	a2,10
    860c:	8b8fb0ef          	jal	ra,36c4 <itoa>
  uart_send_string("\n\rKeys average: ");
    8610:	00000517          	auipc	a0,0x0
    8614:	79450513          	addi	a0,a0,1940 # 8da4 <__clz_tab+0x1c8>
    8618:	b80fb0ef          	jal	ra,3998 <uart_send_string>
  uart_send_string(str);
    861c:	00001517          	auipc	a0,0x1
    8620:	82c50513          	addi	a0,a0,-2004 # 8e48 <str>
    8624:	b74fb0ef          	jal	ra,3998 <uart_send_string>
  itoa(pbuf, (unsigned int)sign_avg, 10);
    8628:	00000797          	auipc	a5,0x0
    862c:	7f478793          	addi	a5,a5,2036 # 8e1c <sign_avg.1>
    8630:	0007a503          	lw	a0,0(a5)
    8634:	fc8ff0ef          	jal	ra,7dfc <__fixunssfsi>
    8638:	00050593          	mv	a1,a0
    863c:	00042503          	lw	a0,0(s0)
    8640:	00a00613          	li	a2,10
    8644:	880fb0ef          	jal	ra,36c4 <itoa>
  uart_send_string("\nSign average: ");
    8648:	00000517          	auipc	a0,0x0
    864c:	77050513          	addi	a0,a0,1904 # 8db8 <__clz_tab+0x1dc>
    8650:	b48fb0ef          	jal	ra,3998 <uart_send_string>
  uart_send_string(str);
    8654:	00000517          	auipc	a0,0x0
    8658:	7f450513          	addi	a0,a0,2036 # 8e48 <str>
    865c:	b3cfb0ef          	jal	ra,3998 <uart_send_string>
  itoa(pbuf, (unsigned int)verify_avg, 10);
    8660:	00000797          	auipc	a5,0x0
    8664:	7b878793          	addi	a5,a5,1976 # 8e18 <verify_avg.0>
    8668:	0007a503          	lw	a0,0(a5)
    866c:	f90ff0ef          	jal	ra,7dfc <__fixunssfsi>
    8670:	00050593          	mv	a1,a0
    8674:	00042503          	lw	a0,0(s0)
    8678:	00a00613          	li	a2,10
    867c:	848fb0ef          	jal	ra,36c4 <itoa>
  uart_send_string("\nVerify average: ");
    8680:	00000517          	auipc	a0,0x0
    8684:	74850513          	addi	a0,a0,1864 # 8dc8 <__clz_tab+0x1ec>
    8688:	b10fb0ef          	jal	ra,3998 <uart_send_string>
  uart_send_string(str);
    868c:	00000517          	auipc	a0,0x0
    8690:	7bc50513          	addi	a0,a0,1980 # 8e48 <str>
    8694:	b04fb0ef          	jal	ra,3998 <uart_send_string>
  for(;;);
    8698:	0000006f          	j	8698 <main+0x554>
      uart_send_string("\n\rVerification failed");
    869c:	00000517          	auipc	a0,0x0
    86a0:	68450513          	addi	a0,a0,1668 # 8d20 <__clz_tab+0x144>
    86a4:	af4fb0ef          	jal	ra,3998 <uart_send_string>
      return -1;
    86a8:	df9ff06f          	j	84a0 <main+0x35c>
      uart_send_string("\n\rSigned message lengths wrong");
    86ac:	00000517          	auipc	a0,0x0
    86b0:	68c50513          	addi	a0,a0,1676 # 8d38 <__clz_tab+0x15c>
    86b4:	ae4fb0ef          	jal	ra,3998 <uart_send_string>
      return -1;
    86b8:	de9ff06f          	j	84a0 <main+0x35c>
      uart_send_string("\n\rMessage lengths wrong");
    86bc:	00000517          	auipc	a0,0x0
    86c0:	69c50513          	addi	a0,a0,1692 # 8d58 <__clz_tab+0x17c>
    86c4:	ad4fb0ef          	jal	ra,3998 <uart_send_string>
      return -1;
    86c8:	dd9ff06f          	j	84a0 <main+0x35c>
      uart_send_string("Trivial forgeries possible\n");
    86cc:	00000517          	auipc	a0,0x0
    86d0:	6bc50513          	addi	a0,a0,1724 # 8d88 <__clz_tab+0x1ac>
    86d4:	ac4fb0ef          	jal	ra,3998 <uart_send_string>
      return -1;
    86d8:	dc9ff06f          	j	84a0 <main+0x35c>
